import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestGroup100Case0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test001");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Character) 'a');
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test002");
        org.jomni.Omni.SetterRule setterRule0 = org.jomni.Omni.SetterRule.no_override;
        org.junit.Assert.assertTrue("'" + setterRule0 + "' != '" + org.jomni.Omni.SetterRule.no_override + "'", setterRule0.equals(org.jomni.Omni.SetterRule.no_override));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test003");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) 0L);
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test004");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        java.lang.String str8 = strMapPair7.toString();
        java.lang.String str9 = strMapPair7.toString();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test005");
        java.lang.Class class0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jomni.ClassInfo classInfo1 = new org.jomni.ClassInfo(class0);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NullPointerException");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Character) '4');
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test007");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) (short) -1);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test008");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Character) ' ');
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test009");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean("");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test010");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        java.lang.String str9 = mapperException6.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str9, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test011");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 10.0d);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean("hi!");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test013");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test014");
        org.jomni.ExtraConverters extraConverters0 = new org.jomni.ExtraConverters();
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test015");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map map4 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray1);
        java.lang.Object obj6 = org.jomni.util.Maps.nestedValue(map4, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(map4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test016");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        java.lang.Class<?> wildcardClass7 = classOptional6.getClass();
        org.junit.Assert.assertNotNull(classOptional6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test017");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.JomniBuilder[] jomniBuilderArray9 = null;
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair12 = org.jomni.util.Pair.newPair(jomniBuilderArray9, (java.lang.reflect.GenericDeclaration) wildcardClass11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder17 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet19 = org.jomni.util.Maps.setOf(jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair20 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap16, jomniBuilderSet19);
        java.lang.Class<?> wildcardClass21 = strMap16.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass11, (java.lang.Class) wildcardClass21);
        mapperException6.addSuppressed((java.lang.Throwable) mapperException22);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertNotNull(jomniBuilderSet19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test018");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) (-1.0d));
        java.lang.Boolean boolean2 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) (-1.0d));
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + boolean2 + "' != '" + false + "'", boolean2, false);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.util.Optional<java.lang.Class> classOptional8 = propInfo7.getGenericType();
        java.lang.reflect.Method method9 = propInfo7.getReadMethod();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classOptional8);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test020");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap1 = org.jomni.util.Maps.propMapOf(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test021");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray11);
        org.jomni.JomniBuilder jomniBuilder14 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = new org.jomni.JomniBuilder[] { jomniBuilder14 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet16 = org.jomni.util.Maps.setOf(jomniBuilderArray15);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair17 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap13, jomniBuilderSet16);
        boolean boolean18 = strMapPair7.equals((java.lang.Object) jomniBuilderSet16);
        java.lang.String str19 = strMapPair7.toString();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(jomniBuilderArray15);
        org.junit.Assert.assertNotNull(jomniBuilderSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test022");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = propInfo5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classOptional6);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test023");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.asNestedMap(strMap3);
        java.lang.Object obj7 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap3, "hi!");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test024");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.lang.reflect.Method method8 = propInfo7.getWriteMethod();
        java.lang.reflect.Method method9 = propInfo7.getReadMethod();
        java.util.Optional<java.lang.Class> classOptional10 = propInfo7.getGenericType();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(classOptional10);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        org.jomni.util.Pair<java.io.Serializable, org.jomni.MapperException.Error> serializablePair2 = new org.jomni.util.Pair<java.io.Serializable, org.jomni.MapperException.Error>((java.io.Serializable) '#', error1);
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair14 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap10, jomniBuilderSet13);
        java.lang.Class<?> wildcardClass15 = strMap10.getClass();
        org.jomni.MapperException mapperException16 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass15);
        org.jomni.MapperException.Error error17 = mapperException16.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = null;
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair21 = org.jomni.util.Pair.newPair(jomniBuilderArray18, (java.lang.reflect.GenericDeclaration) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass23 = error22.getClass();
        org.jomni.MapperException mapperException24 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass23);
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean26 = mapperException24.isError(error25);
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean28 = mapperException24.isError(error27);
        boolean boolean29 = mapperException16.isError(error27);
        org.jomni.util.Pair<java.lang.Enum<org.jomni.MapperException.Error>, org.jomni.MapperException> errorEnumPair30 = org.jomni.util.Pair.newPair((java.lang.Enum<org.jomni.MapperException.Error>) error1, mapperException16);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(mapperException16);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(errorEnumPair30);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Character) '#');
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        org.jomni.util.Pair<java.io.Serializable, org.jomni.MapperException.Error> serializablePair2 = new org.jomni.util.Pair<java.io.Serializable, org.jomni.MapperException.Error>((java.io.Serializable) '#', error1);
        java.lang.Class<?> wildcardClass3 = serializablePair2.getClass();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test028");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.Object obj12 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair13 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj12);
        java.lang.Object obj15 = classInfo10.getValue((java.lang.Object) serializablePair13, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.util.Set<java.lang.String> strSet16 = classInfo10.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(serializablePair13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test029");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean10 = mapperException6.isError(error9);
        org.jomni.JomniBuilder[] jomniBuilderArray11 = null;
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair14 = org.jomni.util.Pair.newPair(jomniBuilderArray11, (java.lang.reflect.GenericDeclaration) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray16);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair22 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap18, jomniBuilderSet21);
        java.lang.Class<?> wildcardClass23 = strMap18.getClass();
        org.jomni.MapperException mapperException24 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass23);
        org.jomni.MapperException.Error error25 = mapperException24.getError();
        mapperException6.addSuppressed((java.lang.Throwable) mapperException24);
        java.lang.String str27 = mapperException6.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str27, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        java.lang.Comparable<java.lang.String>[] strComparableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.lang.Comparable<java.lang.String>> strComparableSet1 = org.jomni.util.Maps.setOf(strComparableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        boolean boolean16 = classInfo8.setValue((java.lang.Object) false, "", (java.lang.Object) 1);
        java.util.Set<java.lang.String> strSet17 = classInfo8.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.lang.String[] strArray19 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map map26 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray21);
        org.jomni.util.Maps.NamesValues namesValues27 = new org.jomni.util.Maps.NamesValues(strArray19, (java.lang.Object[]) jomniBuilderArray21);
        java.lang.String[] strArray28 = namesValues27.names;
        boolean boolean29 = strMapPair7.equals((java.lang.Object) namesValues27);
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet30 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(map26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jomniBuilderSet30);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test033");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.Object> objOmni5 = jomniMapper1.omni((java.lang.Object) "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(objOmni5);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test034");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = jomniMapper2.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray5 = null;
        org.jomni.MapperException.Error error6 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass7 = error6.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair8 = org.jomni.util.Pair.newPair(jomniBuilderArray5, (java.lang.reflect.GenericDeclaration) wildcardClass7);
        org.jomni.ClassInfo classInfo9 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder10.build();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = null;
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair16 = org.jomni.util.Pair.newPair(jomniBuilderArray13, (java.lang.reflect.GenericDeclaration) wildcardClass15);
        org.jomni.MapperException.Error error17 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass18 = error17.getClass();
        org.jomni.MapperException mapperException19 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass18);
        org.jomni.ClassInfo classInfo20 = jomniMapper12.getClassInfo((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        org.jomni.PropInfo propInfo23 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Class) wildcardClass7, (java.lang.Class) wildcardClass15, method21, method22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = propInfo23.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + error6 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error6.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair16);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mapperException19);
        org.junit.Assert.assertNotNull(classInfo20);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = strMapPair7.getA();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        java.util.Map map40 = charSequenceOmni39.asMap();
        java.lang.Class class42 = charSequenceOmni39.getType("hi!");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertNotNull(map40);
        org.junit.Assert.assertNull(class42);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test037");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean10 = mapperException6.isError(error9);
        org.jomni.JomniBuilder[] jomniBuilderArray11 = null;
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair14 = org.jomni.util.Pair.newPair(jomniBuilderArray11, (java.lang.reflect.GenericDeclaration) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray16);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair22 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap18, jomniBuilderSet21);
        java.lang.Class<?> wildcardClass23 = strMap18.getClass();
        org.jomni.MapperException mapperException24 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass23);
        org.jomni.MapperException.Error error25 = mapperException24.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray26 = null;
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair29 = org.jomni.util.Pair.newPair(jomniBuilderArray26, (java.lang.reflect.GenericDeclaration) wildcardClass28);
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        org.jomni.MapperException mapperException32 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass31);
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean34 = mapperException32.isError(error33);
        org.jomni.MapperException.Error error35 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean36 = mapperException32.isError(error35);
        boolean boolean37 = mapperException24.isError(error35);
        java.lang.Throwable[] throwableArray38 = mapperException24.getSuppressed();
        mapperException6.addSuppressed((java.lang.Throwable) mapperException24);
        java.lang.String str40 = mapperException24.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair29);
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(mapperException32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + error35 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error35.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str40, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test038");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        java.lang.String str8 = strMapPair7.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = strMapPair7.getB();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = strMapPair7.getB();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) (short) 10);
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        org.jomni.PropInfo propInfo14 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass11, method12, method13);
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass11);
        java.lang.Throwable[] throwableArray16 = mapperException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mapperException15.getSuppressed();
        java.lang.String str18 = mapperException15.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str18, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        org.jomni.Omni.SetterRule setterRule0 = org.jomni.Omni.SetterRule.not_nulls;
        org.junit.Assert.assertTrue("'" + setterRule0 + "' != '" + org.jomni.Omni.SetterRule.not_nulls + "'", setterRule0.equals(org.jomni.Omni.SetterRule.not_nulls));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test042");
        org.jomni.JomniBuilder[] jomniBuilderArray2 = null;
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair5 = org.jomni.util.Pair.newPair(jomniBuilderArray2, (java.lang.reflect.GenericDeclaration) wildcardClass4);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder6 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet8 = org.jomni.util.Maps.setOf(jomniBuilderArray7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair13 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap9, jomniBuilderSet12);
        java.lang.Class<?> wildcardClass14 = strMap9.getClass();
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass4, (java.lang.Class) wildcardClass14);
        org.jomni.JomniBuilder[] jomniBuilderArray16 = null;
        org.jomni.MapperException.Error error17 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass18 = error17.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair19 = org.jomni.util.Pair.newPair(jomniBuilderArray16, (java.lang.reflect.GenericDeclaration) wildcardClass18);
        org.jomni.MapperException.Error error20 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass21 = error20.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass18, (java.lang.Class) wildcardClass21);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass27 = error26.getClass();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        org.jomni.PropInfo propInfo30 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass27, method28, method29);
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass27);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass21, method32, method33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper37 = jomniBuilder35.build();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = null;
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair41 = org.jomni.util.Pair.newPair(jomniBuilderArray38, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass43);
        org.jomni.ClassInfo classInfo45 = jomniMapper37.getClassInfo((java.lang.Class) wildcardClass40);
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair53 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap49, jomniBuilderSet52);
        java.lang.Class<?> wildcardClass54 = strMap49.getClass();
        org.jomni.MapperException mapperException55 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass54);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass54, method56, method57);
        java.lang.Class class59 = propInfo58.getType();
        java.util.Optional<java.lang.Class> classOptional60 = propInfo58.getGenericType();
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair5);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertNotNull(jomniBuilderSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair19);
        org.junit.Assert.assertTrue("'" + error20 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error20.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertNotNull(jomniMapper37);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mapperException55);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNotNull(classOptional60);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test043");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.lang.String str6 = propInfo5.getName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = propInfo5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        org.jomni.PropInfo propInfo14 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass11, method12, method13);
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass11);
        java.lang.Throwable[] throwableArray16 = mapperException15.getSuppressed();
        java.lang.String str17 = mapperException15.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str17, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.lang.reflect.Method method8 = propInfo7.getReadMethod();
        java.lang.String str9 = propInfo7.getName();
        java.lang.String str10 = propInfo7.getName();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test046");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) 0);
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass19);
        org.jomni.ClassInfo classInfo21 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.lang.Object obj7 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap5, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.Class class34 = propInfo33.getType();
        java.lang.String str35 = propInfo33.getName();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        org.jomni.PropInfo propInfo12 = classInfo10.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.jomni.PropInfo propInfo14 = classInfo10.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNull(propInfo12);
        org.junit.Assert.assertNull(propInfo14);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.asNestedMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.asNestedMap(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test052");
        java.util.Map<java.lang.String, java.lang.Object> strMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Object> strMap1 = org.jomni.util.Maps.asFlatMap(strMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException21.isError(error24);
        boolean boolean26 = mapperException13.isError(error24);
        java.lang.Throwable[] throwableArray27 = mapperException13.getSuppressed();
        java.util.Map map28 = org.jomni.util.Maps.mapOf((java.lang.Object[]) throwableArray27);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(map28);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 100.0f);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceOmni5.get();
        boolean boolean8 = charSequenceOmni5.containsKey("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.util.Map map9 = charSequenceOmni5.asMap();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(map9);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.PropInfo propInfo10 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.util.Set<java.lang.String> strSet11 = classInfo8.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(propInfo10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test057");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test058");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.lang.Class class13 = classInfo8.getObjectClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(class13);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        java.lang.reflect.Method method7 = propInfo5.getWriteMethod();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper16 = jomniBuilder15.build();
        org.jomni.JomniBuilder[] jomniBuilderArray17 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.HashSet<org.jomni.JomniBuilder> jomniBuilderSet18 = new java.util.HashSet<org.jomni.JomniBuilder>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet18, jomniBuilderArray17);
        org.jomni.util.Pair<java.lang.reflect.GenericDeclaration, java.util.HashSet<org.jomni.JomniBuilder>> genericDeclarationPair20 = org.jomni.util.Pair.newPair((java.lang.reflect.GenericDeclaration) wildcardClass13, jomniBuilderSet18);
        org.jomni.util.Pair<org.jomni.PropInfo, java.util.AbstractSet<org.jomni.JomniBuilder>> propInfoPair21 = org.jomni.util.Pair.newPair(propInfo5, (java.util.AbstractSet<org.jomni.JomniBuilder>) jomniBuilderSet18);
        java.lang.Class<?> wildcardClass22 = propInfo5.getClass();
        org.junit.Assert.assertNotNull(classOptional6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertNotNull(jomniMapper16);
        org.junit.Assert.assertNotNull(jomniBuilderArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(genericDeclarationPair20);
        org.junit.Assert.assertNotNull(propInfoPair21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.lang.reflect.Method method6 = propInfo5.getWriteMethod();
        org.junit.Assert.assertNull(method6);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test061");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = strMapPair29.getA();
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper32 = jomniBuilder31.build();
        org.jomni.JomniMapper jomniMapper33 = jomniBuilder31.build();
        org.jomni.JomniBuilder[] jomniBuilderArray34 = null;
        org.jomni.MapperException.Error error35 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass36 = error35.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair37 = org.jomni.util.Pair.newPair(jomniBuilderArray34, (java.lang.reflect.GenericDeclaration) wildcardClass36);
        org.jomni.MapperException.Error error38 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass39 = error38.getClass();
        org.jomni.MapperException mapperException40 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass36, (java.lang.Class) wildcardClass39);
        org.jomni.ClassInfo classInfo41 = jomniMapper33.getClassInfo((java.lang.Class) wildcardClass36);
        java.lang.Object obj43 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair44 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj43);
        java.lang.Object obj46 = classInfo41.getValue((java.lang.Object) serializablePair44, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        boolean boolean47 = strMapPair29.equals((java.lang.Object) classInfo41);
        org.jomni.PropInfo propInfo49 = classInfo41.getPropInfo("hi!");
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper51 = jomniBuilder50.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair53 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper51, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = jomniMapper51.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder57 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper58 = jomniBuilder57.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair60 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper58, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni62 = jomniMapper58.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error64 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass65 = error64.getClass();
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        org.jomni.PropInfo propInfo70 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass65, (java.lang.Class) wildcardClass67, method68, method69);
        java.lang.reflect.Method method71 = propInfo70.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni72 = charSequenceOmni62.setAll((java.lang.Object) method71);
        charSequenceOmni55.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni62);
        java.util.Map map74 = charSequenceOmni55.asMap();
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder82 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray83 = new org.jomni.JomniBuilder[] { jomniBuilder82 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet84 = org.jomni.util.Maps.setOf(jomniBuilderArray83);
        java.util.Map<java.lang.String, java.lang.Object> strMap85 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray83);
        java.util.Map<java.lang.String, java.lang.Object> strMap86 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray83);
        java.util.Map map87 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray83);
        org.jomni.util.Maps.NamesValues namesValues88 = new org.jomni.util.Maps.NamesValues(strArray81, (java.lang.Object[]) jomniBuilderArray83);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni89 = charSequenceOmni55.setAll((java.lang.Object) namesValues88);
        java.util.Map map90 = charSequenceOmni89.asMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap91 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map90);
        java.lang.Object obj93 = classInfo41.getValue((java.lang.Object) map90, "");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(jomniMapper32);
        org.junit.Assert.assertNotNull(jomniMapper33);
        org.junit.Assert.assertTrue("'" + error35 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error35.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair37);
        org.junit.Assert.assertTrue("'" + error38 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error38.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(mapperException40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(serializablePair44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(propInfo49);
        org.junit.Assert.assertNotNull(jomniMapper51);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertNotNull(jomniMapper58);
        org.junit.Assert.assertNotNull(charSequenceOmni62);
        org.junit.Assert.assertTrue("'" + error64 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error64.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNull(method71);
        org.junit.Assert.assertNotNull(charSequenceOmni72);
        org.junit.Assert.assertNotNull(map74);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(jomniBuilderArray83);
        org.junit.Assert.assertNotNull(jomniBuilderSet84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(map87);
        org.junit.Assert.assertNotNull(charSequenceOmni89);
        org.junit.Assert.assertNotNull(map90);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test062");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray10);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair16 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap12, jomniBuilderSet15);
        boolean boolean18 = strMapPair16.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper20 = jomniBuilder19.build();
        boolean boolean21 = strMapPair16.equals((java.lang.Object) jomniMapper20);
        boolean boolean24 = classInfo8.setValue((java.lang.Object) boolean21, "", (java.lang.Object) '4');
        org.jomni.JomniBuilder jomniBuilder25 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper26 = jomniBuilder25.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = jomniMapper26.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder30 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper31 = jomniBuilder30.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair33 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper31, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = jomniMapper31.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error37 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass38 = error37.getClass();
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        org.jomni.PropInfo propInfo43 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass38, (java.lang.Class) wildcardClass40, method41, method42);
        java.lang.reflect.Method method44 = propInfo43.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni45 = charSequenceOmni35.setAll((java.lang.Object) method44);
        boolean boolean46 = classInfo8.setValue((java.lang.Object) strMap28, "", (java.lang.Object) method44);
        org.jomni.util.Maps.NamesValues namesValues47 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap28);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jomniMapper20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jomniMapper26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(jomniMapper31);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertTrue("'" + error37 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error37.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNull(method44);
        org.junit.Assert.assertNotNull(charSequenceOmni45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namesValues47);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder jomniBuilder3 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray4 = new org.jomni.JomniBuilder[] { jomniBuilder3 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet5 = org.jomni.util.Maps.setOf(jomniBuilderArray4);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray4);
        java.lang.Class<?> wildcardClass7 = jomniBuilderArray4.getClass();
        org.jomni.ClassInfo classInfo8 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.PropInfo propInfo10 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class11 = classInfo8.getObjectClass();
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper13 = jomniBuilder12.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair15 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper13, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni17 = jomniMapper13.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        org.jomni.PropInfo propInfo25 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass22, method23, method24);
        java.lang.reflect.Method method26 = propInfo25.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni27 = charSequenceOmni17.setAll((java.lang.Object) method26);
        org.jomni.JomniBuilder jomniBuilder29 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper30 = jomniBuilder29.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = jomniMapper30.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = org.jomni.util.Maps.asFlatMap(strMap32);
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray36 = new org.jomni.JomniBuilder[] { jomniBuilder34, jomniBuilder35 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet37 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet37, jomniBuilderArray36);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair39 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap32, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet37);
        org.jomni.JomniBuilder jomniBuilder40 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper41 = jomniBuilder40.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = jomniMapper41.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = org.jomni.util.Maps.asFlatMap(strMap43);
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder45, jomniBuilder46 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet48 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet48, jomniBuilderArray47);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair50 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap43, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet48);
        java.util.LinkedHashSet[] linkedHashSetArray52 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray53 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray52;
        jomniBuilderSetArray53[0] = jomniBuilderSet37;
        jomniBuilderSetArray53[1] = jomniBuilderSet48;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet58 = org.jomni.util.Maps.setOf(jomniBuilderSetArray53);
        java.util.Set<java.lang.Cloneable> cloneableSet59 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray53);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni60 = charSequenceOmni17.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet59);
        org.jomni.JomniBuilder[] jomniBuilderArray63 = null;
        org.jomni.MapperException.Error error64 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass65 = error64.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair66 = org.jomni.util.Pair.newPair(jomniBuilderArray63, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.jomni.JomniBuilder jomniBuilder67 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray68 = new org.jomni.JomniBuilder[] { jomniBuilder67 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet69 = org.jomni.util.Maps.setOf(jomniBuilderArray68);
        java.util.Map<java.lang.String, java.lang.Object> strMap70 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray68);
        org.jomni.JomniBuilder jomniBuilder71 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray72 = new org.jomni.JomniBuilder[] { jomniBuilder71 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet73 = org.jomni.util.Maps.setOf(jomniBuilderArray72);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair74 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap70, jomniBuilderSet73);
        java.lang.Class<?> wildcardClass75 = strMap70.getClass();
        org.jomni.MapperException mapperException76 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass65, (java.lang.Class) wildcardClass75);
        org.jomni.JomniBuilder[] jomniBuilderArray77 = null;
        org.jomni.MapperException.Error error78 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass79 = error78.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair80 = org.jomni.util.Pair.newPair(jomniBuilderArray77, (java.lang.reflect.GenericDeclaration) wildcardClass79);
        org.jomni.MapperException.Error error81 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass82 = error81.getClass();
        org.jomni.MapperException mapperException83 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass79, (java.lang.Class) wildcardClass82);
        org.jomni.MapperException.Error error85 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass86 = error85.getClass();
        org.jomni.MapperException.Error error87 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass88 = error87.getClass();
        java.lang.reflect.Method method89 = null;
        java.lang.reflect.Method method90 = null;
        org.jomni.PropInfo propInfo91 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass86, (java.lang.Class) wildcardClass88, method89, method90);
        org.jomni.MapperException mapperException92 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass82, (java.lang.Class) wildcardClass88);
        java.lang.reflect.Method method93 = null;
        java.lang.reflect.Method method94 = null;
        org.jomni.PropInfo propInfo95 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass75, (java.lang.Class) wildcardClass82, method93, method94);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni96 = charSequenceOmni17.set("", (java.lang.Object) propInfo95);
        java.lang.Object obj98 = classInfo8.getValue((java.lang.Object) "", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniBuilderArray4);
        org.junit.Assert.assertNotNull(jomniBuilderSet5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(propInfo10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(jomniMapper13);
        org.junit.Assert.assertNotNull(charSequenceOmni17);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNotNull(charSequenceOmni27);
        org.junit.Assert.assertNotNull(jomniMapper30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(jomniBuilderArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jomniMapper41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray52);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray53);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet58);
        org.junit.Assert.assertNotNull(cloneableSet59);
        org.junit.Assert.assertNotNull(charSequenceOmni60);
        org.junit.Assert.assertTrue("'" + error64 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error64.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair66);
        org.junit.Assert.assertNotNull(jomniBuilderArray68);
        org.junit.Assert.assertNotNull(jomniBuilderSet69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(jomniBuilderArray72);
        org.junit.Assert.assertNotNull(jomniBuilderSet73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(mapperException76);
        org.junit.Assert.assertTrue("'" + error78 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error78.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair80);
        org.junit.Assert.assertTrue("'" + error81 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error81.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(mapperException83);
        org.junit.Assert.assertTrue("'" + error85 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error85.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + error87 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error87.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(mapperException92);
        org.junit.Assert.assertNotNull(charSequenceOmni96);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder17 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet19 = org.jomni.util.Maps.setOf(jomniBuilderArray18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray18);
        org.jomni.JomniBuilder jomniBuilder21 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray22 = new org.jomni.JomniBuilder[] { jomniBuilder21 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet23 = org.jomni.util.Maps.setOf(jomniBuilderArray22);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair24 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, jomniBuilderSet23);
        boolean boolean26 = strMapPair24.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper28 = jomniBuilder27.build();
        boolean boolean29 = strMapPair24.equals((java.lang.Object) jomniMapper28);
        org.jomni.JomniBuilder jomniBuilder30 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper31 = jomniBuilder30.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair33 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper31, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = jomniMapper31.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper38 = jomniBuilder37.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair40 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper38, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni42 = jomniMapper38.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        org.jomni.PropInfo propInfo50 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass45, (java.lang.Class) wildcardClass47, method48, method49);
        java.lang.reflect.Method method51 = propInfo50.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni52 = charSequenceOmni42.setAll((java.lang.Object) method51);
        charSequenceOmni35.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni42);
        java.util.Map map54 = charSequenceOmni35.asMap();
        boolean boolean55 = strMapPair24.equals((java.lang.Object) charSequenceOmni35);
        java.lang.Class class57 = charSequenceOmni35.getType("");
        org.jomni.MapperException.Error error59 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass60 = error59.getClass();
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass60, (java.lang.Class) wildcardClass62, method63, method64);
        java.lang.reflect.Method method66 = propInfo65.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni67 = charSequenceOmni35.setAll((java.lang.Object) method66);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) method66);
        java.lang.Class class70 = charSequenceOmni5.getType("hi!");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertNotNull(jomniBuilderSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(jomniBuilderArray22);
        org.junit.Assert.assertNotNull(jomniBuilderSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jomniMapper28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jomniMapper31);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(jomniMapper38);
        org.junit.Assert.assertNotNull(charSequenceOmni42);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertNotNull(charSequenceOmni52);
        org.junit.Assert.assertNotNull(map54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(class57);
        org.junit.Assert.assertTrue("'" + error59 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error59.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(method66);
        org.junit.Assert.assertNotNull(charSequenceOmni67);
        org.junit.Assert.assertNull(class70);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.MapperException mapperException7 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass6);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        org.jomni.PropInfo propInfo15 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass12, method13, method14);
        org.jomni.MapperException mapperException16 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass12);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray21 = null;
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass23 = error22.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair24 = org.jomni.util.Pair.newPair(jomniBuilderArray21, (java.lang.reflect.GenericDeclaration) wildcardClass23);
        org.jomni.ClassInfo classInfo25 = jomniMapper18.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        org.jomni.PropInfo propInfo28 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass12, (java.lang.Class) wildcardClass23, method26, method27);
        org.jomni.ClassInfo classInfo29 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass12);
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mapperException7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException16);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair24);
        org.junit.Assert.assertNotNull(classInfo25);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.MapperException mapperException7 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass6);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        org.jomni.PropInfo propInfo15 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass12, method13, method14);
        org.jomni.MapperException mapperException16 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass12);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray21 = null;
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass23 = error22.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair24 = org.jomni.util.Pair.newPair(jomniBuilderArray21, (java.lang.reflect.GenericDeclaration) wildcardClass23);
        org.jomni.ClassInfo classInfo25 = jomniMapper18.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        org.jomni.PropInfo propInfo28 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass12, (java.lang.Class) wildcardClass23, method26, method27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = propInfo28.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mapperException7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException16);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair24);
        org.junit.Assert.assertNotNull(classInfo25);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map12 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues13 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.lang.String[] strArray20 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder21 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray22 = new org.jomni.JomniBuilder[] { jomniBuilder21 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet23 = org.jomni.util.Maps.setOf(jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map map27 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray22);
        org.jomni.util.Maps.NamesValues namesValues28 = new org.jomni.util.Maps.NamesValues(strArray20, (java.lang.Object[]) jomniBuilderArray22);
        org.jomni.util.Maps.NamesValues namesValues29 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray22);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray22);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(map12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(jomniBuilderArray22);
        org.junit.Assert.assertNotNull(jomniBuilderSet23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(map27);
        org.junit.Assert.assertNotNull(map30);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.lang.String str6 = propInfo5.getName();
        java.lang.reflect.Method method7 = propInfo5.getWriteMethod();
        java.lang.reflect.Method method8 = propInfo5.getReadMethod();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder jomniBuilder3 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray4 = new org.jomni.JomniBuilder[] { jomniBuilder3 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet5 = org.jomni.util.Maps.setOf(jomniBuilderArray4);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray4);
        java.lang.Class<?> wildcardClass7 = jomniBuilderArray4.getClass();
        org.jomni.ClassInfo classInfo8 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.PropInfo propInfo10 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class11 = classInfo8.getObjectClass();
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper13 = jomniBuilder12.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair15 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper13, (java.lang.Comparable<java.lang.String>) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper13.asMap((java.lang.Object) (short) 1);
        java.lang.Object obj19 = classInfo8.getValue((java.lang.Object) jomniMapper13, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniBuilderArray4);
        org.junit.Assert.assertNotNull(jomniBuilderSet5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(propInfo10);
        org.junit.Assert.assertNotNull(class11);
        org.junit.Assert.assertNotNull(jomniMapper13);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        org.jomni.JomniBuilder[] jomniBuilderArray51 = null;
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair54 = org.jomni.util.Pair.newPair(jomniBuilderArray51, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.jomni.JomniBuilder jomniBuilder55 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray56 = new org.jomni.JomniBuilder[] { jomniBuilder55 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet57 = org.jomni.util.Maps.setOf(jomniBuilderArray56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray56);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair62 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap58, jomniBuilderSet61);
        java.lang.Class<?> wildcardClass63 = strMap58.getClass();
        org.jomni.MapperException mapperException64 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder[] jomniBuilderArray65 = null;
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair68 = org.jomni.util.Pair.newPair(jomniBuilderArray65, (java.lang.reflect.GenericDeclaration) wildcardClass67);
        org.jomni.MapperException.Error error69 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass70 = error69.getClass();
        org.jomni.MapperException mapperException71 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass67, (java.lang.Class) wildcardClass70);
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.MapperException.Error error75 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass76 = error75.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        org.jomni.PropInfo propInfo79 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass74, (java.lang.Class) wildcardClass76, method77, method78);
        org.jomni.MapperException mapperException80 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass70, (java.lang.Class) wildcardClass76);
        java.lang.reflect.Method method81 = null;
        java.lang.reflect.Method method82 = null;
        org.jomni.PropInfo propInfo83 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass63, (java.lang.Class) wildcardClass70, method81, method82);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni84 = charSequenceOmni5.set("", (java.lang.Object) propInfo83);
        java.lang.Object obj86 = charSequenceOmni5.get("");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair54);
        org.junit.Assert.assertNotNull(jomniBuilderArray56);
        org.junit.Assert.assertNotNull(jomniBuilderSet57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mapperException64);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair68);
        org.junit.Assert.assertTrue("'" + error69 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error69.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(mapperException71);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + error75 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error75.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(mapperException80);
        org.junit.Assert.assertNotNull(charSequenceOmni84);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.JomniBuilder[] jomniBuilderArray5 = null;
        org.jomni.MapperException.Error error6 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass7 = error6.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair8 = org.jomni.util.Pair.newPair(jomniBuilderArray5, (java.lang.reflect.GenericDeclaration) wildcardClass7);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray10);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair16 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap12, jomniBuilderSet15);
        java.lang.Class<?> wildcardClass17 = strMap12.getClass();
        org.jomni.MapperException mapperException18 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass7, (java.lang.Class) wildcardClass17);
        org.jomni.JomniBuilder[] jomniBuilderArray19 = null;
        org.jomni.MapperException.Error error20 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass21 = error20.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair22 = org.jomni.util.Pair.newPair(jomniBuilderArray19, (java.lang.reflect.GenericDeclaration) wildcardClass21);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException mapperException25 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass24);
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        org.jomni.MapperException mapperException34 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass30);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        org.jomni.PropInfo propInfo37 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass24, method35, method36);
        java.lang.Class class38 = propInfo37.getType();
        org.jomni.ClassInfo classInfo39 = jomniMapper1.getClassInfo(class38);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertTrue("'" + error6 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error6.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(mapperException18);
        org.junit.Assert.assertTrue("'" + error20 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error20.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair22);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(mapperException25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(mapperException34);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(classInfo39);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.lang.Object obj7 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap5, "hi!");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException21.isError(error24);
        boolean boolean26 = mapperException13.isError(error24);
        java.lang.Throwable[] throwableArray27 = mapperException13.getSuppressed();
        org.jomni.MapperException.Error error28 = mapperException13.getError();
        org.jomni.MapperException.Error error29 = mapperException13.getError();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        java.lang.reflect.Method method7 = propInfo5.getWriteMethod();
        java.util.Optional<java.lang.Class> classOptional8 = propInfo5.getGenericType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = propInfo5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classOptional6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNotNull(classOptional8);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        java.lang.String str8 = strMapPair7.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = strMapPair7.getB();
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray11);
        boolean boolean14 = strMapPair7.equals((java.lang.Object) jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.MapperException mapperException7 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass6);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        org.jomni.PropInfo propInfo15 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass12, method13, method14);
        org.jomni.MapperException mapperException16 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass12);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray21 = null;
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass23 = error22.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair24 = org.jomni.util.Pair.newPair(jomniBuilderArray21, (java.lang.reflect.GenericDeclaration) wildcardClass23);
        org.jomni.ClassInfo classInfo25 = jomniMapper18.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        org.jomni.PropInfo propInfo28 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass12, (java.lang.Class) wildcardClass23, method26, method27);
        org.jomni.JomniBuilder[] jomniBuilderArray31 = null;
        org.jomni.MapperException.Error error32 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass33 = error32.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair34 = org.jomni.util.Pair.newPair(jomniBuilderArray31, (java.lang.reflect.GenericDeclaration) wildcardClass33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray36 = new org.jomni.JomniBuilder[] { jomniBuilder35 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet37 = org.jomni.util.Maps.setOf(jomniBuilderArray36);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray36);
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray40 = new org.jomni.JomniBuilder[] { jomniBuilder39 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet41 = org.jomni.util.Maps.setOf(jomniBuilderArray40);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair42 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap38, jomniBuilderSet41);
        java.lang.Class<?> wildcardClass43 = strMap38.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass33, (java.lang.Class) wildcardClass43);
        org.jomni.JomniBuilder[] jomniBuilderArray45 = null;
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair48 = org.jomni.util.Pair.newPair(jomniBuilderArray45, (java.lang.reflect.GenericDeclaration) wildcardClass47);
        org.jomni.MapperException.Error error49 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass50 = error49.getClass();
        org.jomni.MapperException mapperException51 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass47, (java.lang.Class) wildcardClass50);
        org.jomni.MapperException.Error error53 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass54 = error53.getClass();
        org.jomni.MapperException.Error error55 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass56 = error55.getClass();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        org.jomni.PropInfo propInfo59 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass54, (java.lang.Class) wildcardClass56, method57, method58);
        org.jomni.MapperException mapperException60 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass56);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        org.jomni.PropInfo propInfo63 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass50, method61, method62);
        org.jomni.JomniBuilder jomniBuilder64 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper65 = jomniBuilder64.build();
        org.jomni.JomniMapper jomniMapper66 = jomniBuilder64.build();
        org.jomni.JomniBuilder[] jomniBuilderArray67 = null;
        org.jomni.MapperException.Error error68 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass69 = error68.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair70 = org.jomni.util.Pair.newPair(jomniBuilderArray67, (java.lang.reflect.GenericDeclaration) wildcardClass69);
        org.jomni.MapperException.Error error71 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass72 = error71.getClass();
        org.jomni.MapperException mapperException73 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass72);
        org.jomni.ClassInfo classInfo74 = jomniMapper66.getClassInfo((java.lang.Class) wildcardClass69);
        org.jomni.JomniBuilder jomniBuilder75 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray76 = new org.jomni.JomniBuilder[] { jomniBuilder75 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet77 = org.jomni.util.Maps.setOf(jomniBuilderArray76);
        java.util.Map<java.lang.String, java.lang.Object> strMap78 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray76);
        org.jomni.JomniBuilder jomniBuilder79 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray80 = new org.jomni.JomniBuilder[] { jomniBuilder79 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet81 = org.jomni.util.Maps.setOf(jomniBuilderArray80);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair82 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap78, jomniBuilderSet81);
        java.lang.Class<?> wildcardClass83 = strMap78.getClass();
        org.jomni.MapperException mapperException84 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass83);
        java.lang.reflect.Method method85 = null;
        java.lang.reflect.Method method86 = null;
        org.jomni.PropInfo propInfo87 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass83, method85, method86);
        java.lang.Class class88 = propInfo87.getType();
        org.jomni.MapperException mapperException89 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass12, class88);
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mapperException7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException16);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair34);
        org.junit.Assert.assertNotNull(jomniBuilderArray36);
        org.junit.Assert.assertNotNull(jomniBuilderSet37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(jomniBuilderArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSet41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair48);
        org.junit.Assert.assertTrue("'" + error49 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error49.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(mapperException51);
        org.junit.Assert.assertTrue("'" + error53 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error53.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(mapperException60);
        org.junit.Assert.assertNotNull(jomniMapper65);
        org.junit.Assert.assertNotNull(jomniMapper66);
        org.junit.Assert.assertTrue("'" + error68 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error68.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair70);
        org.junit.Assert.assertTrue("'" + error71 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error71.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(mapperException73);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertNotNull(jomniBuilderArray76);
        org.junit.Assert.assertNotNull(jomniBuilderSet77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(jomniBuilderArray80);
        org.junit.Assert.assertNotNull(jomniBuilderSet81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(mapperException84);
        org.junit.Assert.assertNotNull(class88);
        org.junit.Assert.assertNotNull(mapperException89);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = org.jomni.util.Maps.asFlatMap((java.util.Map<java.lang.String, java.lang.Object>) map30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asNestedMap(strMap31);
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = org.jomni.util.Maps.asNestedMap(strMap32);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.JomniBuilder[] jomniBuilderArray53 = charSequenceOmni49.into(jomniBuilderArray51);
        java.lang.Class<?> wildcardClass54 = charSequenceOmni49.getClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(jomniBuilderArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.lang.Object obj5 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap3, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test080");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.Object obj12 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair13 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj12);
        java.lang.Object obj15 = classInfo10.getValue((java.lang.Object) serializablePair13, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class16 = classInfo10.getObjectClass();
        java.util.Set<java.lang.String> strSet17 = classInfo10.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(serializablePair13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        java.util.Map map0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = org.jomni.util.Maps.nestedValue(map0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean10 = mapperException6.isError(error9);
        org.jomni.JomniBuilder[] jomniBuilderArray11 = null;
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair14 = org.jomni.util.Pair.newPair(jomniBuilderArray11, (java.lang.reflect.GenericDeclaration) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray16);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair22 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap18, jomniBuilderSet21);
        java.lang.Class<?> wildcardClass23 = strMap18.getClass();
        org.jomni.MapperException mapperException24 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass23);
        org.jomni.MapperException.Error error25 = mapperException24.getError();
        mapperException6.addSuppressed((java.lang.Throwable) mapperException24);
        org.jomni.JomniBuilder[] jomniBuilderArray27 = null;
        org.jomni.MapperException.Error error28 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass29 = error28.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair30 = org.jomni.util.Pair.newPair(jomniBuilderArray27, (java.lang.reflect.GenericDeclaration) wildcardClass29);
        org.jomni.MapperException.Error error31 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass32 = error31.getClass();
        org.jomni.MapperException mapperException33 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass29, (java.lang.Class) wildcardClass32);
        org.jomni.MapperException.Error error34 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean35 = mapperException33.isError(error34);
        boolean boolean36 = mapperException24.isError(error34);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair30);
        org.junit.Assert.assertTrue("'" + error31 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error31.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(mapperException33);
        org.junit.Assert.assertTrue("'" + error34 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error34.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        org.jomni.JomniBuilder[] jomniBuilderArray2 = null;
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair5 = org.jomni.util.Pair.newPair(jomniBuilderArray2, (java.lang.reflect.GenericDeclaration) wildcardClass4);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder6 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet8 = org.jomni.util.Maps.setOf(jomniBuilderArray7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair13 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap9, jomniBuilderSet12);
        java.lang.Class<?> wildcardClass14 = strMap9.getClass();
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass4, (java.lang.Class) wildcardClass14);
        org.jomni.JomniBuilder[] jomniBuilderArray16 = null;
        org.jomni.MapperException.Error error17 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass18 = error17.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair19 = org.jomni.util.Pair.newPair(jomniBuilderArray16, (java.lang.reflect.GenericDeclaration) wildcardClass18);
        org.jomni.MapperException.Error error20 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass21 = error20.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass18, (java.lang.Class) wildcardClass21);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass27 = error26.getClass();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        org.jomni.PropInfo propInfo30 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass27, method28, method29);
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass27);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass21, method32, method33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper37 = jomniBuilder35.build();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = null;
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair41 = org.jomni.util.Pair.newPair(jomniBuilderArray38, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass43);
        org.jomni.ClassInfo classInfo45 = jomniMapper37.getClassInfo((java.lang.Class) wildcardClass40);
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair53 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap49, jomniBuilderSet52);
        java.lang.Class<?> wildcardClass54 = strMap49.getClass();
        org.jomni.MapperException mapperException55 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass54);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass54, method56, method57);
        java.lang.reflect.Method method59 = propInfo58.getReadMethod();
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair5);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertNotNull(jomniBuilderSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair19);
        org.junit.Assert.assertTrue("'" + error20 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error20.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertNotNull(jomniMapper37);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mapperException55);
        org.junit.Assert.assertNull(method59);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        java.lang.String[] strArray45 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map map52 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues53 = new org.jomni.util.Maps.NamesValues(strArray45, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues54 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = charSequenceOmni5.setAll((java.lang.Object) jomniBuilderArray47);
        java.lang.Object obj57 = charSequenceOmni5.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(map52);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder17 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet19 = org.jomni.util.Maps.setOf(jomniBuilderArray18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray18);
        org.jomni.JomniBuilder jomniBuilder21 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray22 = new org.jomni.JomniBuilder[] { jomniBuilder21 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet23 = org.jomni.util.Maps.setOf(jomniBuilderArray22);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair24 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, jomniBuilderSet23);
        boolean boolean26 = strMapPair24.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper28 = jomniBuilder27.build();
        boolean boolean29 = strMapPair24.equals((java.lang.Object) jomniMapper28);
        org.jomni.JomniBuilder jomniBuilder30 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper31 = jomniBuilder30.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair33 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper31, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = jomniMapper31.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper38 = jomniBuilder37.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair40 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper38, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni42 = jomniMapper38.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        org.jomni.PropInfo propInfo50 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass45, (java.lang.Class) wildcardClass47, method48, method49);
        java.lang.reflect.Method method51 = propInfo50.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni52 = charSequenceOmni42.setAll((java.lang.Object) method51);
        charSequenceOmni35.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni42);
        java.util.Map map54 = charSequenceOmni35.asMap();
        boolean boolean55 = strMapPair24.equals((java.lang.Object) charSequenceOmni35);
        java.lang.Class class57 = charSequenceOmni35.getType("");
        org.jomni.MapperException.Error error59 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass60 = error59.getClass();
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass60, (java.lang.Class) wildcardClass62, method63, method64);
        java.lang.reflect.Method method66 = propInfo65.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni67 = charSequenceOmni35.setAll((java.lang.Object) method66);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) method66);
        java.lang.Object obj70 = charSequenceOmni5.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertNotNull(jomniBuilderSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(jomniBuilderArray22);
        org.junit.Assert.assertNotNull(jomniBuilderSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jomniMapper28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jomniMapper31);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(jomniMapper38);
        org.junit.Assert.assertNotNull(charSequenceOmni42);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertNotNull(charSequenceOmni52);
        org.junit.Assert.assertNotNull(map54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(class57);
        org.junit.Assert.assertTrue("'" + error59 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error59.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(method66);
        org.junit.Assert.assertNotNull(charSequenceOmni67);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test086");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceOmni5.get();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = null;
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair10 = org.jomni.util.Pair.newPair(jomniBuilderArray7, (java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass19);
        org.jomni.MapperException.Error error21 = mapperException20.getError();
        java.io.Serializable serializable22 = charSequenceOmni5.into((java.io.Serializable) mapperException20);
        java.lang.CharSequence charSequence23 = charSequenceOmni5.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(serializable22);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        java.lang.CharSequence charSequence50 = charSequenceOmni39.get();
        java.lang.Object obj52 = charSequenceOmni39.get("hi!");
        java.lang.CharSequence charSequence53 = charSequenceOmni39.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        boolean boolean17 = charSequenceOmni15.containsKey("hi!");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.util.Maps.NamesValues namesValues5 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(namesValues5);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        java.lang.CharSequence charSequence41 = charSequenceOmni18.get();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        java.lang.Throwable[] throwableArray15 = mapperException13.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.lang.String[] strArray19 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map map26 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray21);
        org.jomni.util.Maps.NamesValues namesValues27 = new org.jomni.util.Maps.NamesValues(strArray19, (java.lang.Object[]) jomniBuilderArray21);
        java.lang.String[] strArray28 = namesValues27.names;
        boolean boolean29 = strMapPair7.equals((java.lang.Object) namesValues27);
        java.lang.Object[] objArray30 = namesValues27.values;
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(map26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objArray30);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        java.lang.String str7 = mapperException6.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str7, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.lang.CharSequence charSequence53 = charSequenceOmni50.get();
        java.lang.Class class55 = charSequenceOmni50.getType("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNull(class55);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.JomniBuilder[] jomniBuilderArray7 = null;
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair10 = org.jomni.util.Pair.newPair(jomniBuilderArray7, (java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean15 = mapperException13.isError(error14);
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean17 = mapperException13.isError(error16);
        org.jomni.JomniBuilder[] jomniBuilderArray18 = null;
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair21 = org.jomni.util.Pair.newPair(jomniBuilderArray18, (java.lang.reflect.GenericDeclaration) wildcardClass20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray23 = new org.jomni.JomniBuilder[] { jomniBuilder22 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet24 = org.jomni.util.Maps.setOf(jomniBuilderArray23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray23);
        org.jomni.JomniBuilder jomniBuilder26 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray27 = new org.jomni.JomniBuilder[] { jomniBuilder26 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet28 = org.jomni.util.Maps.setOf(jomniBuilderArray27);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap25, jomniBuilderSet28);
        java.lang.Class<?> wildcardClass30 = strMap25.getClass();
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass30);
        org.jomni.MapperException.Error error32 = mapperException31.getError();
        mapperException13.addSuppressed((java.lang.Throwable) mapperException31);
        mapperException6.addSuppressed((java.lang.Throwable) mapperException31);
        java.lang.String str35 = mapperException31.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair21);
        org.junit.Assert.assertNotNull(jomniBuilderArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSet24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(jomniBuilderArray27);
        org.junit.Assert.assertNotNull(jomniBuilderSet28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str35, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.lang.reflect.Method method8 = propInfo7.getWriteMethod();
        java.lang.reflect.Method method9 = propInfo7.getReadMethod();
        java.lang.reflect.Method method10 = propInfo7.getReadMethod();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass19);
        java.lang.Class<?> wildcardClass21 = mapperException20.getClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.lang.reflect.Method method8 = propInfo7.getWriteMethod();
        java.lang.reflect.Method method9 = propInfo7.getReadMethod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = propInfo7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) (byte) 10);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test100");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = strMapPair7.getA();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.asNestedMap(strMap13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap13);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.lang.Object obj13 = null;
        java.lang.Object obj15 = null;
        boolean boolean16 = classInfo8.setValue(obj13, "hi!", obj15);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder17.build();
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.lang.Class<?> wildcardClass24 = jomniBuilderArray21.getClass();
        org.jomni.ClassInfo classInfo25 = jomniMapper19.getClassInfo((java.lang.Class) wildcardClass24);
        org.jomni.PropInfo propInfo27 = classInfo25.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class28 = classInfo25.getObjectClass();
        java.util.Set<java.lang.String> strSet29 = classInfo25.getPropertyNames();
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper32 = jomniBuilder31.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = jomniMapper32.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.asFlatMap(strMap34);
        org.jomni.JomniBuilder jomniBuilder36 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = new org.jomni.JomniBuilder[] { jomniBuilder36, jomniBuilder37 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet39 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet39, jomniBuilderArray38);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair41 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap34, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet39);
        org.jomni.JomniBuilder jomniBuilder42 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper43 = jomniBuilder42.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = jomniMapper43.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = org.jomni.util.Maps.asFlatMap(strMap45);
        org.jomni.JomniBuilder jomniBuilder47 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder48 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray49 = new org.jomni.JomniBuilder[] { jomniBuilder47, jomniBuilder48 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet50 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet50, jomniBuilderArray49);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair52 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap45, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet50);
        java.util.LinkedHashSet[] linkedHashSetArray54 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray55 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray54;
        jomniBuilderSetArray55[0] = jomniBuilderSet39;
        jomniBuilderSetArray55[1] = jomniBuilderSet50;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet60 = org.jomni.util.Maps.setOf(jomniBuilderSetArray55);
        java.util.Map map61 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderSetArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = org.jomni.util.Maps.asNestedMap(strMap62);
        boolean boolean64 = classInfo8.setValue((java.lang.Object) strSet29, "hi!", (java.lang.Object) strMap63);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(propInfo27);
        org.junit.Assert.assertNotNull(class28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(jomniMapper32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(jomniBuilderArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jomniMapper43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(jomniBuilderArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray54);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray55);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet60);
        org.junit.Assert.assertNotNull(map61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        org.jomni.ClassInfo classInfo8 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass2);
        java.util.Set<java.lang.String> strSet9 = classInfo8.getPropertyNames();
        java.lang.Class class10 = classInfo8.getObjectClass();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        java.lang.CharSequence charSequence49 = charSequenceOmni48.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        java.lang.String[] strArray6 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map13 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues14 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.lang.String[] strArray15 = namesValues14.names;
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper17 = jomniBuilder16.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair19 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper17, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni21 = jomniMapper17.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence22 = charSequenceOmni21.get();
        org.jomni.JomniBuilder[] jomniBuilderArray23 = null;
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair26 = org.jomni.util.Pair.newPair(jomniBuilderArray23, (java.lang.reflect.GenericDeclaration) wildcardClass25);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray28 = new org.jomni.JomniBuilder[] { jomniBuilder27 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet29 = org.jomni.util.Maps.setOf(jomniBuilderArray28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray28);
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray32 = new org.jomni.JomniBuilder[] { jomniBuilder31 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet33 = org.jomni.util.Maps.setOf(jomniBuilderArray32);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair34 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap30, jomniBuilderSet33);
        java.lang.Class<?> wildcardClass35 = strMap30.getClass();
        org.jomni.MapperException mapperException36 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass35);
        org.jomni.MapperException.Error error37 = mapperException36.getError();
        java.io.Serializable serializable38 = charSequenceOmni21.into((java.io.Serializable) mapperException36);
        org.jomni.util.Pair<org.jomni.util.Maps.NamesValues, java.lang.Object> namesValuesPair39 = org.jomni.util.Pair.newPair(namesValues14, (java.lang.Object) mapperException36);
        java.lang.Throwable[] throwableArray40 = mapperException36.getSuppressed();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(map13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(jomniMapper17);
        org.junit.Assert.assertNotNull(charSequenceOmni21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair26);
        org.junit.Assert.assertNotNull(jomniBuilderArray28);
        org.junit.Assert.assertNotNull(jomniBuilderSet29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(jomniBuilderArray32);
        org.junit.Assert.assertNotNull(jomniBuilderSet33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(mapperException36);
        org.junit.Assert.assertTrue("'" + error37 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error37.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(serializable38);
        org.junit.Assert.assertNotNull(namesValuesPair39);
        org.junit.Assert.assertNotNull(throwableArray40);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.JomniBuilder jomniBuilder54 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper55 = jomniBuilder54.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair57 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper55, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni59 = jomniMapper55.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder61 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper62 = jomniBuilder61.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair64 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper62, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni66 = jomniMapper62.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error68 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass69 = error68.getClass();
        org.jomni.MapperException.Error error70 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass71 = error70.getClass();
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        org.jomni.PropInfo propInfo74 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass71, method72, method73);
        java.lang.reflect.Method method75 = propInfo74.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni76 = charSequenceOmni66.setAll((java.lang.Object) method75);
        charSequenceOmni59.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni66);
        java.util.Set<java.lang.String> strSet78 = charSequenceOmni66.keySet();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni79 = charSequenceOmni50.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) strSet78);
        org.jomni.MapperException.Error error81 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass82 = error81.getClass();
        org.jomni.MapperException.Error error83 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass84 = error83.getClass();
        java.lang.reflect.Method method85 = null;
        java.lang.reflect.Method method86 = null;
        org.jomni.PropInfo propInfo87 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass82, (java.lang.Class) wildcardClass84, method85, method86);
        java.lang.reflect.Method method88 = propInfo87.getReadMethod();
        java.lang.reflect.Method method89 = propInfo87.getWriteMethod();
        org.jomni.PropInfo propInfo90 = charSequenceOmni79.into(propInfo87);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(jomniMapper55);
        org.junit.Assert.assertNotNull(charSequenceOmni59);
        org.junit.Assert.assertNotNull(jomniMapper62);
        org.junit.Assert.assertNotNull(charSequenceOmni66);
        org.junit.Assert.assertTrue("'" + error68 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error68.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + error70 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error70.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNull(method75);
        org.junit.Assert.assertNotNull(charSequenceOmni76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(charSequenceOmni79);
        org.junit.Assert.assertTrue("'" + error81 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error81.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + error83 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error83.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNull(method88);
        org.junit.Assert.assertNull(method89);
        org.junit.Assert.assertNotNull(propInfo90);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceOmni5.get();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = null;
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair10 = org.jomni.util.Pair.newPair(jomniBuilderArray7, (java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass19);
        org.jomni.MapperException.Error error21 = mapperException20.getError();
        java.io.Serializable serializable22 = charSequenceOmni5.into((java.io.Serializable) mapperException20);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper24 = jomniBuilder23.build();
        org.jomni.JomniBuilder jomniBuilder25 = charSequenceOmni5.into(jomniBuilder23);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(serializable22);
        org.junit.Assert.assertNotNull(jomniMapper24);
        org.junit.Assert.assertNotNull(jomniBuilder25);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = jomniMapper2.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray5 = null;
        org.jomni.MapperException.Error error6 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass7 = error6.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair8 = org.jomni.util.Pair.newPair(jomniBuilderArray5, (java.lang.reflect.GenericDeclaration) wildcardClass7);
        org.jomni.ClassInfo classInfo9 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray11);
        java.lang.Class<?> wildcardClass14 = jomniBuilderArray11.getClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        org.jomni.PropInfo propInfo17 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass7, (java.lang.Class) wildcardClass14, method15, method16);
        org.jomni.ClassInfo classInfo18 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + error6 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error6.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test108");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.util.Map map39 = charSequenceOmni18.asMap();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(map39);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        java.util.Map map50 = charSequenceOmni49.asMap();
        java.lang.Class<?> wildcardClass51 = charSequenceOmni49.getClass();
        org.jomni.JomniBuilder[] jomniBuilderArray53 = null;
        org.jomni.MapperException.Error error54 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass55 = error54.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair56 = org.jomni.util.Pair.newPair(jomniBuilderArray53, (java.lang.reflect.GenericDeclaration) wildcardClass55);
        org.jomni.MapperException.Error error57 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass58 = error57.getClass();
        org.jomni.MapperException mapperException59 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass55, (java.lang.Class) wildcardClass58);
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        org.jomni.MapperException.Error error63 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass64 = error63.getClass();
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        org.jomni.PropInfo propInfo67 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass62, (java.lang.Class) wildcardClass64, method65, method66);
        org.jomni.MapperException mapperException68 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass58, (java.lang.Class) wildcardClass64);
        org.jomni.JomniBuilder jomniBuilder69 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper70 = jomniBuilder69.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = jomniMapper70.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray73 = null;
        org.jomni.MapperException.Error error74 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass75 = error74.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair76 = org.jomni.util.Pair.newPair(jomniBuilderArray73, (java.lang.reflect.GenericDeclaration) wildcardClass75);
        org.jomni.ClassInfo classInfo77 = jomniMapper70.getClassInfo((java.lang.Class) wildcardClass75);
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        org.jomni.PropInfo propInfo80 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass64, (java.lang.Class) wildcardClass75, method78, method79);
        org.jomni.MapperException mapperException81 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass51, (java.lang.Class) wildcardClass75);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(map50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + error54 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error54.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair56);
        org.junit.Assert.assertTrue("'" + error57 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error57.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(mapperException59);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + error63 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error63.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(mapperException68);
        org.junit.Assert.assertNotNull(jomniMapper70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertTrue("'" + error74 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error74.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertNotNull(mapperException81);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException21.isError(error24);
        boolean boolean26 = mapperException13.isError(error24);
        java.lang.Throwable[] throwableArray27 = mapperException13.getSuppressed();
        org.jomni.MapperException.Error error28 = mapperException13.getError();
        java.lang.Throwable[] throwableArray29 = mapperException13.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = org.jomni.util.Maps.asNestedMap(strMap17);
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray32 = new org.jomni.JomniBuilder[] { jomniBuilder31 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet33 = org.jomni.util.Maps.setOf(jomniBuilderArray32);
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray32);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray36 = new org.jomni.JomniBuilder[] { jomniBuilder35 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet37 = org.jomni.util.Maps.setOf(jomniBuilderArray36);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap34, jomniBuilderSet37);
        java.lang.String str39 = strMapPair38.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet40 = strMapPair38.getB();
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair41 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, jomniBuilderSet40);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(jomniBuilderArray32);
        org.junit.Assert.assertNotNull(jomniBuilderSet33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(jomniBuilderArray36);
        org.junit.Assert.assertNotNull(jomniBuilderSet37);
        org.junit.Assert.assertNotNull(jomniBuilderSet40);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.util.Set<java.lang.String> strSet25 = charSequenceOmni5.keySet();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.Omni<java.lang.Comparable<java.lang.String>> strComparableOmni4 = jomniMapper2.omni((java.lang.Comparable<java.lang.String>) "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        boolean boolean14 = strMapPair12.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper16 = jomniBuilder15.build();
        boolean boolean17 = strMapPair12.equals((java.lang.Object) jomniMapper16);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair21 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper19, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni23 = jomniMapper19.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder25 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper26 = jomniBuilder25.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair28 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper26, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni30 = jomniMapper26.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error32 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass33 = error32.getClass();
        org.jomni.MapperException.Error error34 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass35 = error34.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        org.jomni.PropInfo propInfo38 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass33, (java.lang.Class) wildcardClass35, method36, method37);
        java.lang.reflect.Method method39 = propInfo38.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni40 = charSequenceOmni30.setAll((java.lang.Object) method39);
        charSequenceOmni23.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni30);
        java.util.Map map42 = charSequenceOmni23.asMap();
        boolean boolean43 = strMapPair12.equals((java.lang.Object) charSequenceOmni23);
        java.lang.CharSequence charSequence44 = charSequenceOmni23.get();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = null;
        org.jomni.MapperException.Error error47 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass48 = error47.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair49 = org.jomni.util.Pair.newPair(jomniBuilderArray46, (java.lang.reflect.GenericDeclaration) wildcardClass48);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray51);
        org.jomni.JomniBuilder jomniBuilder54 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray55 = new org.jomni.JomniBuilder[] { jomniBuilder54 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet56 = org.jomni.util.Maps.setOf(jomniBuilderArray55);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair57 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap53, jomniBuilderSet56);
        java.lang.Class<?> wildcardClass58 = strMap53.getClass();
        org.jomni.MapperException mapperException59 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass48, (java.lang.Class) wildcardClass58);
        org.jomni.MapperException.Error error60 = mapperException59.getError();
        charSequenceOmni23.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) mapperException59);
        java.math.BigDecimal bigDecimal63 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) (-1.0d));
        java.math.BigDecimal bigDecimal64 = charSequenceOmni23.into(bigDecimal63);
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = jomniMapper2.asMap((java.lang.Object) bigDecimal64);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strComparableOmni4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jomniMapper16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(charSequenceOmni23);
        org.junit.Assert.assertNotNull(jomniMapper26);
        org.junit.Assert.assertNotNull(charSequenceOmni30);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + error34 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error34.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertNotNull(charSequenceOmni40);
        org.junit.Assert.assertNotNull(map42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertTrue("'" + error47 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error47.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(jomniBuilderArray55);
        org.junit.Assert.assertNotNull(jomniBuilderSet56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(mapperException59);
        org.junit.Assert.assertTrue("'" + error60 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error60.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test114");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder0.build();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper3.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceOmni5.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        java.util.Map map50 = charSequenceOmni49.asMap();
        org.jomni.JomniBuilder jomniBuilder51 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper52 = jomniBuilder51.build();
        org.jomni.JomniMapper jomniMapper53 = jomniBuilder51.build();
        org.jomni.JomniBuilder jomniBuilder54 = charSequenceOmni49.into(jomniBuilder51);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(map50);
        org.junit.Assert.assertNotNull(jomniMapper52);
        org.junit.Assert.assertNotNull(jomniMapper53);
        org.junit.Assert.assertNotNull(jomniBuilder54);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.util.Maps maps13 = new org.jomni.util.Maps();
        boolean boolean14 = strMapPair7.equals((java.lang.Object) maps13);
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        java.lang.Class class50 = charSequenceOmni5.getType("");
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.MapperException.Error error54 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass55 = error54.getClass();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass55, method56, method57);
        java.lang.reflect.Method method59 = propInfo58.getWriteMethod();
        java.lang.reflect.Method method60 = propInfo58.getReadMethod();
        org.jomni.PropInfo propInfo61 = charSequenceOmni5.into(propInfo58);
        java.lang.Class class62 = propInfo58.getType();
        java.util.Optional<java.lang.Class> classOptional63 = propInfo58.getGenericType();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNull(class50);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + error54 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error54.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertNotNull(propInfo61);
        org.junit.Assert.assertNotNull(class62);
        org.junit.Assert.assertNotNull(classOptional63);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        java.lang.String[] strArray0 = null;
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray2 = new org.jomni.JomniBuilder[] { jomniBuilder1 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet3 = org.jomni.util.Maps.setOf(jomniBuilderArray2);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray2);
        java.util.Map map5 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray2);
        java.util.Map map6 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray2);
        org.jomni.util.Maps.NamesValues namesValues7 = new org.jomni.util.Maps.NamesValues(strArray0, (java.lang.Object[]) jomniBuilderArray2);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray2);
        org.junit.Assert.assertNotNull(jomniBuilderArray2);
        org.junit.Assert.assertNotNull(jomniBuilderSet3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(map5);
        org.junit.Assert.assertNotNull(map6);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.util.Optional<java.lang.Class> classOptional8 = propInfo7.getGenericType();
        java.util.Optional<java.lang.Class> classOptional9 = propInfo7.getGenericType();
        java.util.Optional<java.lang.Class> classOptional10 = propInfo7.getGenericType();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classOptional8);
        org.junit.Assert.assertNotNull(classOptional9);
        org.junit.Assert.assertNotNull(classOptional10);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map12 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues13 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        org.jomni.JomniBuilder[] jomniBuilderArray14 = null;
        org.jomni.MapperException.Error error15 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass16 = error15.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair17 = org.jomni.util.Pair.newPair(jomniBuilderArray14, (java.lang.reflect.GenericDeclaration) wildcardClass16);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray19 = new org.jomni.JomniBuilder[] { jomniBuilder18 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet20 = org.jomni.util.Maps.setOf(jomniBuilderArray19);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray19);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray23 = new org.jomni.JomniBuilder[] { jomniBuilder22 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet24 = org.jomni.util.Maps.setOf(jomniBuilderArray23);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair25 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, jomniBuilderSet24);
        java.lang.Class<?> wildcardClass26 = strMap21.getClass();
        org.jomni.MapperException mapperException27 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass16, (java.lang.Class) wildcardClass26);
        org.jomni.MapperException.Error error28 = mapperException27.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray29 = null;
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair32 = org.jomni.util.Pair.newPair(jomniBuilderArray29, (java.lang.reflect.GenericDeclaration) wildcardClass31);
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass34 = error33.getClass();
        org.jomni.MapperException mapperException35 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass31, (java.lang.Class) wildcardClass34);
        org.jomni.MapperException.Error error36 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean37 = mapperException35.isError(error36);
        org.jomni.MapperException.Error error38 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean39 = mapperException35.isError(error38);
        boolean boolean40 = mapperException27.isError(error38);
        java.lang.Throwable[] throwableArray41 = mapperException27.getSuppressed();
        org.jomni.util.Maps.NamesValues namesValues42 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) throwableArray41);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(map12);
        org.junit.Assert.assertTrue("'" + error15 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error15.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair17);
        org.junit.Assert.assertNotNull(jomniBuilderArray19);
        org.junit.Assert.assertNotNull(jomniBuilderSet20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSet24);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException27);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(mapperException35);
        org.junit.Assert.assertTrue("'" + error36 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error36.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + error38 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error38.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.jomni.JomniBuilder[] jomniBuilderArray2 = null;
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair5 = org.jomni.util.Pair.newPair(jomniBuilderArray2, (java.lang.reflect.GenericDeclaration) wildcardClass4);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder6 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet8 = org.jomni.util.Maps.setOf(jomniBuilderArray7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair13 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap9, jomniBuilderSet12);
        java.lang.Class<?> wildcardClass14 = strMap9.getClass();
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass4, (java.lang.Class) wildcardClass14);
        org.jomni.JomniBuilder[] jomniBuilderArray16 = null;
        org.jomni.MapperException.Error error17 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass18 = error17.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair19 = org.jomni.util.Pair.newPair(jomniBuilderArray16, (java.lang.reflect.GenericDeclaration) wildcardClass18);
        org.jomni.MapperException.Error error20 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass21 = error20.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass18, (java.lang.Class) wildcardClass21);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass27 = error26.getClass();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        org.jomni.PropInfo propInfo30 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass27, method28, method29);
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass27);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass21, method32, method33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper37 = jomniBuilder35.build();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = null;
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair41 = org.jomni.util.Pair.newPair(jomniBuilderArray38, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass43);
        org.jomni.ClassInfo classInfo45 = jomniMapper37.getClassInfo((java.lang.Class) wildcardClass40);
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair53 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap49, jomniBuilderSet52);
        java.lang.Class<?> wildcardClass54 = strMap49.getClass();
        org.jomni.MapperException mapperException55 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass54);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass54, method56, method57);
        java.lang.Class class59 = propInfo58.getType();
        java.lang.reflect.Method method60 = propInfo58.getWriteMethod();
        java.lang.Class class61 = propInfo58.getType();
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair5);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertNotNull(jomniBuilderSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair19);
        org.junit.Assert.assertTrue("'" + error20 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error20.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertNotNull(jomniMapper37);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mapperException55);
        org.junit.Assert.assertNotNull(class59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertNotNull(class61);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        org.jomni.PropInfo propInfo12 = classInfo10.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = new org.jomni.JomniBuilder[] { jomniBuilder45 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet47 = org.jomni.util.Maps.setOf(jomniBuilderArray46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray46);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray46);
        java.util.Map map50 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray46);
        org.jomni.util.Maps.NamesValues namesValues51 = new org.jomni.util.Maps.NamesValues(strArray44, (java.lang.Object[]) jomniBuilderArray46);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni52 = charSequenceOmni18.setAll((java.lang.Object) namesValues51);
        java.util.Map map53 = charSequenceOmni52.asMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map53);
        java.lang.Object obj56 = classInfo10.getValue((java.lang.Object) strMap54, "hi!");
        java.lang.Object obj58 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap54, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNull(propInfo12);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(jomniBuilderArray46);
        org.junit.Assert.assertNotNull(jomniBuilderSet47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(map50);
        org.junit.Assert.assertNotNull(charSequenceOmni52);
        org.junit.Assert.assertNotNull(map53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        java.util.Map map31 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(map31);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        org.jomni.JomniBuilder[] jomniBuilderArray51 = null;
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair54 = org.jomni.util.Pair.newPair(jomniBuilderArray51, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.jomni.JomniBuilder jomniBuilder55 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray56 = new org.jomni.JomniBuilder[] { jomniBuilder55 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet57 = org.jomni.util.Maps.setOf(jomniBuilderArray56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray56);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair62 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap58, jomniBuilderSet61);
        java.lang.Class<?> wildcardClass63 = strMap58.getClass();
        org.jomni.MapperException mapperException64 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder[] jomniBuilderArray65 = null;
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair68 = org.jomni.util.Pair.newPair(jomniBuilderArray65, (java.lang.reflect.GenericDeclaration) wildcardClass67);
        org.jomni.MapperException.Error error69 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass70 = error69.getClass();
        org.jomni.MapperException mapperException71 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass67, (java.lang.Class) wildcardClass70);
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.MapperException.Error error75 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass76 = error75.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        org.jomni.PropInfo propInfo79 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass74, (java.lang.Class) wildcardClass76, method77, method78);
        org.jomni.MapperException mapperException80 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass70, (java.lang.Class) wildcardClass76);
        java.lang.reflect.Method method81 = null;
        java.lang.reflect.Method method82 = null;
        org.jomni.PropInfo propInfo83 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass63, (java.lang.Class) wildcardClass70, method81, method82);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni84 = charSequenceOmni5.set("", (java.lang.Object) propInfo83);
        java.lang.CharSequence charSequence85 = charSequenceOmni5.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair54);
        org.junit.Assert.assertNotNull(jomniBuilderArray56);
        org.junit.Assert.assertNotNull(jomniBuilderSet57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mapperException64);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair68);
        org.junit.Assert.assertTrue("'" + error69 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error69.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(mapperException71);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + error75 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error75.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(mapperException80);
        org.junit.Assert.assertNotNull(charSequenceOmni84);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "" + "'", charSequence85, "");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        java.lang.Object obj10 = null;
        boolean boolean11 = strMapPair7.equals(obj10);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.util.Optional<java.lang.Class> classOptional8 = propInfo7.getGenericType();
        java.util.Optional<java.lang.Class> classOptional9 = propInfo7.getGenericType();
        java.lang.String str10 = propInfo7.getName();
        java.lang.String str11 = propInfo7.getName();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(classOptional8);
        org.junit.Assert.assertNotNull(classOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        java.lang.Class class50 = charSequenceOmni5.getType("");
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.MapperException.Error error54 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass55 = error54.getClass();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass55, method56, method57);
        java.lang.reflect.Method method59 = propInfo58.getWriteMethod();
        java.lang.reflect.Method method60 = propInfo58.getReadMethod();
        org.jomni.PropInfo propInfo61 = charSequenceOmni5.into(propInfo58);
        org.jomni.MapperException.Error error62 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Enum<org.jomni.MapperException.Error> errorEnum63 = charSequenceOmni5.into((java.lang.Enum<org.jomni.MapperException.Error>) error62);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni66 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) 0.0f);
        org.jomni.JomniBuilder jomniBuilder67 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper68 = jomniBuilder67.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair70 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper68, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni72 = jomniMapper68.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error74 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass75 = error74.getClass();
        org.jomni.MapperException.Error error76 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass77 = error76.getClass();
        java.lang.reflect.Method method78 = null;
        java.lang.reflect.Method method79 = null;
        org.jomni.PropInfo propInfo80 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass75, (java.lang.Class) wildcardClass77, method78, method79);
        java.lang.reflect.Method method81 = propInfo80.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni82 = charSequenceOmni72.setAll((java.lang.Object) method81);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni83 = charSequenceOmni66.setAll((java.lang.Object) method81);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNull(class50);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + error54 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error54.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertNotNull(propInfo61);
        org.junit.Assert.assertTrue("'" + error62 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error62.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + errorEnum63 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", errorEnum63.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(charSequenceOmni66);
        org.junit.Assert.assertNotNull(jomniMapper68);
        org.junit.Assert.assertNotNull(charSequenceOmni72);
        org.junit.Assert.assertTrue("'" + error74 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error74.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + error76 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error76.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNull(method81);
        org.junit.Assert.assertNotNull(charSequenceOmni82);
        org.junit.Assert.assertNotNull(charSequenceOmni83);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.lang.Class<?> wildcardClass4 = jomniBuilderArray1.getClass();
        org.jomni.ClassInfo classInfo5 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = strMapPair7.getA();
        java.lang.Object obj15 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap13, "");
        org.jomni.util.Maps.NamesValues namesValues16 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap13);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(namesValues16);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = charSequenceOmni50.set("hi!", (java.lang.Object) (byte) 0);
        java.lang.Class class57 = charSequenceOmni55.getType("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertNull(class57);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder jomniBuilder3 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray4 = new org.jomni.JomniBuilder[] { jomniBuilder3 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet5 = org.jomni.util.Maps.setOf(jomniBuilderArray4);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray4);
        java.lang.Class<?> wildcardClass7 = jomniBuilderArray4.getClass();
        org.jomni.ClassInfo classInfo8 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = jomniMapper11.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray14 = null;
        org.jomni.MapperException.Error error15 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass16 = error15.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair17 = org.jomni.util.Pair.newPair(jomniBuilderArray14, (java.lang.reflect.GenericDeclaration) wildcardClass16);
        org.jomni.ClassInfo classInfo18 = jomniMapper11.getClassInfo((java.lang.Class) wildcardClass16);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray20);
        java.lang.Class<?> wildcardClass23 = jomniBuilderArray20.getClass();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        org.jomni.PropInfo propInfo26 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass16, (java.lang.Class) wildcardClass23, method24, method25);
        org.jomni.MapperException mapperException27 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass7, (java.lang.Class) wildcardClass23);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray29 = new org.jomni.JomniBuilder[] { jomniBuilder28 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet30 = org.jomni.util.Maps.setOf(jomniBuilderArray29);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray29);
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair35 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, jomniBuilderSet34);
        boolean boolean37 = strMapPair35.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder38 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper39 = jomniBuilder38.build();
        boolean boolean40 = strMapPair35.equals((java.lang.Object) jomniMapper39);
        org.jomni.JomniBuilder jomniBuilder41 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper42 = jomniBuilder41.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair44 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper42, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni46 = jomniMapper42.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder48 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper49 = jomniBuilder48.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair51 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper49, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni53 = jomniMapper49.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error55 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass56 = error55.getClass();
        org.jomni.MapperException.Error error57 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass58 = error57.getClass();
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        org.jomni.PropInfo propInfo61 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass56, (java.lang.Class) wildcardClass58, method59, method60);
        java.lang.reflect.Method method62 = propInfo61.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni63 = charSequenceOmni53.setAll((java.lang.Object) method62);
        charSequenceOmni46.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni53);
        java.util.Map map65 = charSequenceOmni46.asMap();
        boolean boolean66 = strMapPair35.equals((java.lang.Object) charSequenceOmni46);
        java.lang.CharSequence charSequence67 = charSequenceOmni46.get();
        org.jomni.JomniBuilder[] jomniBuilderArray69 = null;
        org.jomni.MapperException.Error error70 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass71 = error70.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair72 = org.jomni.util.Pair.newPair(jomniBuilderArray69, (java.lang.reflect.GenericDeclaration) wildcardClass71);
        org.jomni.JomniBuilder jomniBuilder73 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray74 = new org.jomni.JomniBuilder[] { jomniBuilder73 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet75 = org.jomni.util.Maps.setOf(jomniBuilderArray74);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray74);
        org.jomni.JomniBuilder jomniBuilder77 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray78 = new org.jomni.JomniBuilder[] { jomniBuilder77 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet79 = org.jomni.util.Maps.setOf(jomniBuilderArray78);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair80 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap76, jomniBuilderSet79);
        java.lang.Class<?> wildcardClass81 = strMap76.getClass();
        org.jomni.MapperException mapperException82 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass71, (java.lang.Class) wildcardClass81);
        org.jomni.MapperException.Error error83 = mapperException82.getError();
        charSequenceOmni46.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) mapperException82);
        mapperException27.addSuppressed((java.lang.Throwable) mapperException82);
        org.jomni.MapperException.Error error86 = mapperException27.getError();
        java.lang.String str87 = mapperException27.toString();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniBuilderArray4);
        org.junit.Assert.assertNotNull(jomniBuilderSet5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + error15 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error15.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException27);
        org.junit.Assert.assertNotNull(jomniBuilderArray29);
        org.junit.Assert.assertNotNull(jomniBuilderSet30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jomniMapper39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jomniMapper42);
        org.junit.Assert.assertNotNull(charSequenceOmni46);
        org.junit.Assert.assertNotNull(jomniMapper49);
        org.junit.Assert.assertNotNull(charSequenceOmni53);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + error57 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error57.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertNotNull(charSequenceOmni63);
        org.junit.Assert.assertNotNull(map65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertTrue("'" + error70 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error70.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair72);
        org.junit.Assert.assertNotNull(jomniBuilderArray74);
        org.junit.Assert.assertNotNull(jomniBuilderSet75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(jomniBuilderArray78);
        org.junit.Assert.assertNotNull(jomniBuilderSet79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(mapperException82);
        org.junit.Assert.assertTrue("'" + error83 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error83.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error86 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error86.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;" + "'", str87, "org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = strMapPair29.getA();
        org.jomni.JomniBuilder[] jomniBuilderArray31 = null;
        org.jomni.MapperException.Error error32 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass33 = error32.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair34 = org.jomni.util.Pair.newPair(jomniBuilderArray31, (java.lang.reflect.GenericDeclaration) wildcardClass33);
        org.jomni.MapperException.Error error35 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass36 = error35.getClass();
        org.jomni.MapperException mapperException37 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass33, (java.lang.Class) wildcardClass36);
        org.jomni.JomniBuilder jomniBuilder38 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper39 = jomniBuilder38.build();
        org.jomni.JomniBuilder[] jomniBuilderArray40 = new org.jomni.JomniBuilder[] { jomniBuilder38 };
        java.util.HashSet<org.jomni.JomniBuilder> jomniBuilderSet41 = new java.util.HashSet<org.jomni.JomniBuilder>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet41, jomniBuilderArray40);
        org.jomni.util.Pair<java.lang.reflect.GenericDeclaration, java.util.HashSet<org.jomni.JomniBuilder>> genericDeclarationPair43 = org.jomni.util.Pair.newPair((java.lang.reflect.GenericDeclaration) wildcardClass36, jomniBuilderSet41);
        boolean boolean44 = strMapPair29.equals((java.lang.Object) jomniBuilderSet41);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair34);
        org.junit.Assert.assertTrue("'" + error35 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error35.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(mapperException37);
        org.junit.Assert.assertNotNull(jomniMapper39);
        org.junit.Assert.assertNotNull(jomniBuilderArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(genericDeclarationPair43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.CharSequence charSequence39 = charSequenceOmni18.get();
        org.jomni.JomniBuilder[] jomniBuilderArray41 = null;
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair44 = org.jomni.util.Pair.newPair(jomniBuilderArray41, (java.lang.reflect.GenericDeclaration) wildcardClass43);
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = new org.jomni.JomniBuilder[] { jomniBuilder45 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet47 = org.jomni.util.Maps.setOf(jomniBuilderArray46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray46);
        org.jomni.JomniBuilder jomniBuilder49 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray50 = new org.jomni.JomniBuilder[] { jomniBuilder49 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet51 = org.jomni.util.Maps.setOf(jomniBuilderArray50);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair52 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap48, jomniBuilderSet51);
        java.lang.Class<?> wildcardClass53 = strMap48.getClass();
        org.jomni.MapperException mapperException54 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass53);
        org.jomni.MapperException.Error error55 = mapperException54.getError();
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) mapperException54);
        org.jomni.JomniBuilder[] jomniBuilderArray57 = null;
        org.jomni.MapperException.Error error58 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass59 = error58.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair60 = org.jomni.util.Pair.newPair(jomniBuilderArray57, (java.lang.reflect.GenericDeclaration) wildcardClass59);
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        org.jomni.MapperException mapperException63 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass59, (java.lang.Class) wildcardClass62);
        org.jomni.MapperException.Error error64 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean65 = mapperException63.isError(error64);
        boolean boolean66 = mapperException54.isError(error64);
        java.lang.String str67 = mapperException54.toString();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair44);
        org.junit.Assert.assertNotNull(jomniBuilderArray46);
        org.junit.Assert.assertNotNull(jomniBuilderSet47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(jomniBuilderArray50);
        org.junit.Assert.assertNotNull(jomniBuilderSet51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(mapperException54);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error58 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error58.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(mapperException63);
        org.junit.Assert.assertTrue("'" + error64 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error64.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str67, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        org.jomni.PropInfo propInfo14 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass11, method12, method13);
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass11);
        java.lang.String str16 = mapperException15.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error" + "'", str16, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        java.util.Map map40 = charSequenceOmni39.asMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map40);
        java.lang.Class<?> wildcardClass42 = map40.getClass();
        java.lang.Class class44 = null;
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = new org.jomni.JomniBuilder[] { jomniBuilder45 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet47 = org.jomni.util.Maps.setOf(jomniBuilderArray46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray46);
        org.jomni.JomniBuilder jomniBuilder49 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray50 = new org.jomni.JomniBuilder[] { jomniBuilder49 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet51 = org.jomni.util.Maps.setOf(jomniBuilderArray50);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair52 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap48, jomniBuilderSet51);
        java.lang.Class<?> wildcardClass53 = strMap48.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        org.jomni.PropInfo propInfo56 = new org.jomni.PropInfo("", class44, (java.lang.Class) wildcardClass53, method54, method55);
        // The following exception was thrown during execution in test generation
        try {
            org.jomni.MapperException mapperException57 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass42, class44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertNotNull(map40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(jomniBuilderArray46);
        org.junit.Assert.assertNotNull(jomniBuilderSet47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(jomniBuilderArray50);
        org.junit.Assert.assertNotNull(jomniBuilderSet51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.String str34 = propInfo33.getName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = propInfo33.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder0.build();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper3.omni((java.lang.CharSequence) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper3.asMap((java.lang.Object) 1.0d);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray9);
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = new org.jomni.JomniBuilder[] { jomniBuilder12 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = org.jomni.util.Maps.setOf(jomniBuilderArray13);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair15 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap11, jomniBuilderSet14);
        boolean boolean17 = strMapPair15.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        boolean boolean20 = strMapPair15.equals((java.lang.Object) jomniMapper19);
        boolean boolean21 = strMapPair7.equals((java.lang.Object) boolean20);
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(jomniBuilderArray13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.lang.CharSequence charSequence53 = charSequenceOmni50.get();
        java.lang.Class class56 = null;
        java.lang.Class class57 = null;
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        org.jomni.PropInfo propInfo60 = new org.jomni.PropInfo("", class56, class57, method58, method59);
        java.util.Optional<java.lang.Class> classOptional61 = propInfo60.getGenericType();
        java.lang.reflect.Method method62 = propInfo60.getWriteMethod();
        org.jomni.JomniBuilder[] jomniBuilderArray63 = null;
        org.jomni.MapperException.Error error64 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass65 = error64.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair66 = org.jomni.util.Pair.newPair(jomniBuilderArray63, (java.lang.reflect.GenericDeclaration) wildcardClass65);
        org.jomni.MapperException.Error error67 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass68 = error67.getClass();
        org.jomni.MapperException mapperException69 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass65, (java.lang.Class) wildcardClass68);
        org.jomni.JomniBuilder jomniBuilder70 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper71 = jomniBuilder70.build();
        org.jomni.JomniBuilder[] jomniBuilderArray72 = new org.jomni.JomniBuilder[] { jomniBuilder70 };
        java.util.HashSet<org.jomni.JomniBuilder> jomniBuilderSet73 = new java.util.HashSet<org.jomni.JomniBuilder>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet73, jomniBuilderArray72);
        org.jomni.util.Pair<java.lang.reflect.GenericDeclaration, java.util.HashSet<org.jomni.JomniBuilder>> genericDeclarationPair75 = org.jomni.util.Pair.newPair((java.lang.reflect.GenericDeclaration) wildcardClass68, jomniBuilderSet73);
        org.jomni.util.Pair<org.jomni.PropInfo, java.util.AbstractSet<org.jomni.JomniBuilder>> propInfoPair76 = org.jomni.util.Pair.newPair(propInfo60, (java.util.AbstractSet<org.jomni.JomniBuilder>) jomniBuilderSet73);
        charSequenceOmni50.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) propInfoPair76);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNotNull(classOptional61);
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertTrue("'" + error64 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error64.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair66);
        org.junit.Assert.assertTrue("'" + error67 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error67.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(mapperException69);
        org.junit.Assert.assertNotNull(jomniMapper71);
        org.junit.Assert.assertNotNull(jomniBuilderArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(genericDeclarationPair75);
        org.junit.Assert.assertNotNull(propInfoPair76);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper9 = jomniBuilder8.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair11 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper9, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni13 = jomniMapper9.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper16 = jomniBuilder15.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair18 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper16, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni20 = jomniMapper16.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass23 = error22.getClass();
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        org.jomni.PropInfo propInfo28 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass23, (java.lang.Class) wildcardClass25, method26, method27);
        java.lang.reflect.Method method29 = propInfo28.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni30 = charSequenceOmni20.setAll((java.lang.Object) method29);
        charSequenceOmni13.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni20);
        java.util.Map map32 = charSequenceOmni13.asMap();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder40 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray41 = new org.jomni.JomniBuilder[] { jomniBuilder40 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet42 = org.jomni.util.Maps.setOf(jomniBuilderArray41);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray41);
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray41);
        java.util.Map map45 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray41);
        org.jomni.util.Maps.NamesValues namesValues46 = new org.jomni.util.Maps.NamesValues(strArray39, (java.lang.Object[]) jomniBuilderArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni47 = charSequenceOmni13.setAll((java.lang.Object) namesValues46);
        org.jomni.MapperException.Error error49 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass50 = error49.getClass();
        org.jomni.MapperException.Error error51 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass52 = error51.getClass();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        org.jomni.PropInfo propInfo55 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass52, method53, method54);
        java.lang.reflect.Method method56 = propInfo55.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni57 = charSequenceOmni47.setAll((java.lang.Object) method56);
        java.util.Map map58 = charSequenceOmni57.asMap();
        java.lang.Class<?> wildcardClass59 = charSequenceOmni57.getClass();
        org.jomni.MapperException mapperException60 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass59);
        org.jomni.Omni<java.lang.Throwable> throwableOmni61 = jomniMapper3.omni((java.lang.Throwable) mapperException60);
        org.jomni.JomniBuilder jomniBuilder62 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper63 = jomniBuilder62.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = jomniMapper63.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray66 = null;
        org.jomni.MapperException.Error error67 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass68 = error67.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair69 = org.jomni.util.Pair.newPair(jomniBuilderArray66, (java.lang.reflect.GenericDeclaration) wildcardClass68);
        org.jomni.ClassInfo classInfo70 = jomniMapper63.getClassInfo((java.lang.Class) wildcardClass68);
        org.jomni.Omni<java.lang.reflect.GenericDeclaration> genericDeclarationOmni71 = jomniMapper3.omni((java.lang.reflect.GenericDeclaration) wildcardClass68);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(jomniMapper9);
        org.junit.Assert.assertNotNull(charSequenceOmni13);
        org.junit.Assert.assertNotNull(jomniMapper16);
        org.junit.Assert.assertNotNull(charSequenceOmni20);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertNotNull(charSequenceOmni30);
        org.junit.Assert.assertNotNull(map32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(jomniBuilderArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSet42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(map45);
        org.junit.Assert.assertNotNull(charSequenceOmni47);
        org.junit.Assert.assertTrue("'" + error49 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error49.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + error51 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error51.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNull(method56);
        org.junit.Assert.assertNotNull(charSequenceOmni57);
        org.junit.Assert.assertNotNull(map58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(mapperException60);
        org.junit.Assert.assertNotNull(throwableOmni61);
        org.junit.Assert.assertNotNull(jomniMapper63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + error67 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error67.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair69);
        org.junit.Assert.assertNotNull(classInfo70);
        org.junit.Assert.assertNotNull(genericDeclarationOmni71);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test141");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        mapperException13.addSuppressed((java.lang.Throwable) mapperException21);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.lang.String str6 = propInfo5.getName();
        java.lang.Class class7 = propInfo5.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = propInfo5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(class7);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder1.build();
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException mapperException10 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass9);
        org.jomni.ClassInfo classInfo11 = jomniMapper3.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = new org.jomni.JomniBuilder[] { jomniBuilder12 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = org.jomni.util.Maps.setOf(jomniBuilderArray13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray13);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray17 = new org.jomni.JomniBuilder[] { jomniBuilder16 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet18 = org.jomni.util.Maps.setOf(jomniBuilderArray17);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair19 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap15, jomniBuilderSet18);
        java.lang.Class<?> wildcardClass20 = strMap15.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass6, (java.lang.Class) wildcardClass20);
        org.jomni.JomniBuilder[] jomniBuilderArray23 = null;
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair26 = org.jomni.util.Pair.newPair(jomniBuilderArray23, (java.lang.reflect.GenericDeclaration) wildcardClass25);
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException mapperException29 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass28);
        org.jomni.MapperException.Error error31 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass32 = error31.getClass();
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass34 = error33.getClass();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        org.jomni.PropInfo propInfo37 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass32, (java.lang.Class) wildcardClass34, method35, method36);
        org.jomni.MapperException mapperException38 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass34);
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper40 = jomniBuilder39.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = jomniMapper40.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray43 = null;
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair46 = org.jomni.util.Pair.newPair(jomniBuilderArray43, (java.lang.reflect.GenericDeclaration) wildcardClass45);
        org.jomni.ClassInfo classInfo47 = jomniMapper40.getClassInfo((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        org.jomni.PropInfo propInfo50 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass34, (java.lang.Class) wildcardClass45, method48, method49);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        org.jomni.PropInfo propInfo53 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass34, method51, method52);
        java.lang.String str54 = propInfo53.getName();
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(mapperException10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(jomniBuilderArray13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray17);
        org.junit.Assert.assertNotNull(jomniBuilderSet18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair26);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(mapperException29);
        org.junit.Assert.assertTrue("'" + error31 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error31.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(mapperException38);
        org.junit.Assert.assertNotNull(jomniMapper40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str54, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        org.jomni.util.Maps.NamesValues namesValues31 = org.jomni.util.Maps.namesValuesOf(map30);
        java.lang.Object[] objArray32 = namesValues31.values;
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = org.jomni.util.Maps.propMapOf(objArray32);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(namesValues31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper10 = jomniBuilder9.build();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder9.build();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = null;
        org.jomni.MapperException.Error error13 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass14 = error13.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair15 = org.jomni.util.Pair.newPair(jomniBuilderArray12, (java.lang.reflect.GenericDeclaration) wildcardClass14);
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.MapperException mapperException18 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass17);
        org.jomni.ClassInfo classInfo19 = jomniMapper11.getClassInfo((java.lang.Class) wildcardClass14);
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder24 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet26 = org.jomni.util.Maps.setOf(jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap23, jomniBuilderSet26);
        java.lang.Class<?> wildcardClass28 = strMap23.getClass();
        org.jomni.MapperException mapperException29 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass28);
        org.jomni.ClassInfo classInfo30 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass28);
        java.lang.Class<?> wildcardClass31 = jomniMapper1.getClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(jomniMapper10);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + error13 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error13.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(mapperException18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertNotNull(jomniBuilderSet26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(mapperException29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        java.lang.Object obj12 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap3, "hi!");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        org.jomni.JomniBuilder[] jomniBuilderArray2 = null;
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair5 = org.jomni.util.Pair.newPair(jomniBuilderArray2, (java.lang.reflect.GenericDeclaration) wildcardClass4);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder6 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet8 = org.jomni.util.Maps.setOf(jomniBuilderArray7);
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair13 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap9, jomniBuilderSet12);
        java.lang.Class<?> wildcardClass14 = strMap9.getClass();
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass4, (java.lang.Class) wildcardClass14);
        org.jomni.JomniBuilder[] jomniBuilderArray16 = null;
        org.jomni.MapperException.Error error17 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass18 = error17.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair19 = org.jomni.util.Pair.newPair(jomniBuilderArray16, (java.lang.reflect.GenericDeclaration) wildcardClass18);
        org.jomni.MapperException.Error error20 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass21 = error20.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass18, (java.lang.Class) wildcardClass21);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass27 = error26.getClass();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        org.jomni.PropInfo propInfo30 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass27, method28, method29);
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass27);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass14, (java.lang.Class) wildcardClass21, method32, method33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper37 = jomniBuilder35.build();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = null;
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair41 = org.jomni.util.Pair.newPair(jomniBuilderArray38, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass43);
        org.jomni.ClassInfo classInfo45 = jomniMapper37.getClassInfo((java.lang.Class) wildcardClass40);
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair53 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap49, jomniBuilderSet52);
        java.lang.Class<?> wildcardClass54 = strMap49.getClass();
        org.jomni.MapperException mapperException55 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass40, (java.lang.Class) wildcardClass54);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass54, method56, method57);
        java.lang.Class class59 = propInfo58.getType();
        org.jomni.ClassInfo classInfo60 = new org.jomni.ClassInfo(class59);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair5);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertNotNull(jomniBuilderSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertTrue("'" + error17 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error17.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair19);
        org.junit.Assert.assertTrue("'" + error20 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error20.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertNotNull(jomniMapper37);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(mapperException55);
        org.junit.Assert.assertNotNull(class59);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test148");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.Class class34 = propInfo33.getType();
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper37 = jomniBuilder35.build();
        org.jomni.JomniMapper jomniMapper38 = jomniBuilder35.build();
        org.jomni.JomniBuilder[] jomniBuilderArray39 = new org.jomni.JomniBuilder[] { jomniBuilder35 };
        java.util.ArrayList<org.jomni.JomniBuilder> jomniBuilderList40 = new java.util.ArrayList<org.jomni.JomniBuilder>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderList40, jomniBuilderArray39);
        org.jomni.util.Pair<java.lang.reflect.Type, java.util.AbstractCollection<org.jomni.JomniBuilder>> typePair42 = org.jomni.util.Pair.newPair((java.lang.reflect.Type) class34, (java.util.AbstractCollection<org.jomni.JomniBuilder>) jomniBuilderList40);
        org.jomni.JomniBuilder jomniBuilder43 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray44 = new org.jomni.JomniBuilder[] { jomniBuilder43 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet45 = org.jomni.util.Maps.setOf(jomniBuilderArray44);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray44);
        org.jomni.util.Pair<java.util.List<org.jomni.JomniBuilder>, org.jomni.JomniBuilder[]> jomniBuilderListPair47 = org.jomni.util.Pair.newPair((java.util.List<org.jomni.JomniBuilder>) jomniBuilderList40, jomniBuilderArray44);
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertNotNull(jomniMapper37);
        org.junit.Assert.assertNotNull(jomniMapper38);
        org.junit.Assert.assertNotNull(jomniBuilderArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNotNull(jomniBuilderArray44);
        org.junit.Assert.assertNotNull(jomniBuilderSet45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(jomniBuilderListPair47);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        java.lang.Throwable[] throwableArray7 = mapperException6.getSuppressed();
        java.util.Map map8 = org.jomni.util.Maps.mapOf((java.lang.Object[]) throwableArray7);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(map8);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray9);
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = new org.jomni.JomniBuilder[] { jomniBuilder12 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = org.jomni.util.Maps.setOf(jomniBuilderArray13);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair15 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap11, jomniBuilderSet14);
        boolean boolean17 = strMapPair15.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        boolean boolean20 = strMapPair15.equals((java.lang.Object) jomniMapper19);
        boolean boolean21 = strMapPair7.equals((java.lang.Object) boolean20);
        java.lang.String str22 = strMapPair7.toString();
        java.lang.String str23 = strMapPair7.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet24 = strMapPair7.getB();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(jomniBuilderArray13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jomniBuilderSet24);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getWriteMethod();
        java.lang.String str35 = propInfo33.getName();
        java.lang.Class class36 = propInfo33.getType();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(class36);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.lang.String str30 = strMapPair29.toString();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.Class class34 = propInfo33.getType();
        java.lang.Class class35 = propInfo33.getType();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(class35);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = strMapPair29.getA();
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper32 = jomniBuilder31.build();
        org.jomni.JomniMapper jomniMapper33 = jomniBuilder31.build();
        org.jomni.JomniBuilder[] jomniBuilderArray34 = null;
        org.jomni.MapperException.Error error35 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass36 = error35.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair37 = org.jomni.util.Pair.newPair(jomniBuilderArray34, (java.lang.reflect.GenericDeclaration) wildcardClass36);
        org.jomni.MapperException.Error error38 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass39 = error38.getClass();
        org.jomni.MapperException mapperException40 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass36, (java.lang.Class) wildcardClass39);
        org.jomni.ClassInfo classInfo41 = jomniMapper33.getClassInfo((java.lang.Class) wildcardClass36);
        java.lang.Object obj43 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair44 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj43);
        java.lang.Object obj46 = classInfo41.getValue((java.lang.Object) serializablePair44, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        boolean boolean47 = strMapPair29.equals((java.lang.Object) classInfo41);
        java.lang.String str48 = strMapPair29.toString();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(jomniMapper32);
        org.junit.Assert.assertNotNull(jomniMapper33);
        org.junit.Assert.assertTrue("'" + error35 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error35.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair37);
        org.junit.Assert.assertTrue("'" + error38 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error38.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(mapperException40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(serializablePair44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        org.jomni.PropInfo propInfo14 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass11, method12, method13);
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass11);
        java.lang.Throwable[] throwableArray16 = mapperException15.getSuppressed();
        org.jomni.MapperException.Error error17 = null;
        boolean boolean18 = mapperException15.isError(error17);
        java.lang.Throwable[] throwableArray19 = mapperException15.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray19);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.lang.String str13 = strMapPair7.toString();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        org.jomni.JomniBuilder jomniBuilder2 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder2.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = jomniMapper3.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray6 = null;
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair9 = org.jomni.util.Pair.newPair(jomniBuilderArray6, (java.lang.reflect.GenericDeclaration) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper3.getClassInfo((java.lang.Class) wildcardClass8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        java.lang.Class<?> wildcardClass15 = jomniBuilderArray12.getClass();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        org.jomni.PropInfo propInfo18 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass15, method16, method17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        org.jomni.PropInfo propInfo23 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass20, method21, method22);
        java.lang.reflect.Method method24 = propInfo23.getWriteMethod();
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(method24);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test159");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        org.jomni.JomniBuilder[] jomniBuilderArray51 = null;
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair54 = org.jomni.util.Pair.newPair(jomniBuilderArray51, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.jomni.JomniBuilder jomniBuilder55 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray56 = new org.jomni.JomniBuilder[] { jomniBuilder55 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet57 = org.jomni.util.Maps.setOf(jomniBuilderArray56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray56);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair62 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap58, jomniBuilderSet61);
        java.lang.Class<?> wildcardClass63 = strMap58.getClass();
        org.jomni.MapperException mapperException64 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder[] jomniBuilderArray65 = null;
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair68 = org.jomni.util.Pair.newPair(jomniBuilderArray65, (java.lang.reflect.GenericDeclaration) wildcardClass67);
        org.jomni.MapperException.Error error69 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass70 = error69.getClass();
        org.jomni.MapperException mapperException71 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass67, (java.lang.Class) wildcardClass70);
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.MapperException.Error error75 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass76 = error75.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        org.jomni.PropInfo propInfo79 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass74, (java.lang.Class) wildcardClass76, method77, method78);
        org.jomni.MapperException mapperException80 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass70, (java.lang.Class) wildcardClass76);
        java.lang.reflect.Method method81 = null;
        java.lang.reflect.Method method82 = null;
        org.jomni.PropInfo propInfo83 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass63, (java.lang.Class) wildcardClass70, method81, method82);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni84 = charSequenceOmni5.set("", (java.lang.Object) propInfo83);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni87 = charSequenceOmni5.set("", (java.lang.Object) 0.0f);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair54);
        org.junit.Assert.assertNotNull(jomniBuilderArray56);
        org.junit.Assert.assertNotNull(jomniBuilderSet57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mapperException64);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair68);
        org.junit.Assert.assertTrue("'" + error69 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error69.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(mapperException71);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + error75 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error75.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(mapperException80);
        org.junit.Assert.assertNotNull(charSequenceOmni84);
        org.junit.Assert.assertNotNull(charSequenceOmni87);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder17 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet19 = org.jomni.util.Maps.setOf(jomniBuilderArray18);
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray18);
        org.jomni.JomniBuilder jomniBuilder21 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray22 = new org.jomni.JomniBuilder[] { jomniBuilder21 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet23 = org.jomni.util.Maps.setOf(jomniBuilderArray22);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair24 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, jomniBuilderSet23);
        boolean boolean26 = strMapPair24.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper28 = jomniBuilder27.build();
        boolean boolean29 = strMapPair24.equals((java.lang.Object) jomniMapper28);
        org.jomni.JomniBuilder jomniBuilder30 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper31 = jomniBuilder30.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair33 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper31, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = jomniMapper31.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper38 = jomniBuilder37.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair40 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper38, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni42 = jomniMapper38.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        org.jomni.PropInfo propInfo50 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass45, (java.lang.Class) wildcardClass47, method48, method49);
        java.lang.reflect.Method method51 = propInfo50.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni52 = charSequenceOmni42.setAll((java.lang.Object) method51);
        charSequenceOmni35.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni42);
        java.util.Map map54 = charSequenceOmni35.asMap();
        boolean boolean55 = strMapPair24.equals((java.lang.Object) charSequenceOmni35);
        java.lang.Class class57 = charSequenceOmni35.getType("");
        org.jomni.MapperException.Error error59 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass60 = error59.getClass();
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass60, (java.lang.Class) wildcardClass62, method63, method64);
        java.lang.reflect.Method method66 = propInfo65.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni67 = charSequenceOmni35.setAll((java.lang.Object) method66);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) method66);
        java.util.Set<java.lang.String> strSet69 = charSequenceOmni5.keySet();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertNotNull(jomniBuilderSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(jomniBuilderArray22);
        org.junit.Assert.assertNotNull(jomniBuilderSet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jomniMapper28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jomniMapper31);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(jomniMapper38);
        org.junit.Assert.assertNotNull(charSequenceOmni42);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(method51);
        org.junit.Assert.assertNotNull(charSequenceOmni52);
        org.junit.Assert.assertNotNull(map54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(class57);
        org.junit.Assert.assertTrue("'" + error59 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error59.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(method66);
        org.junit.Assert.assertNotNull(charSequenceOmni67);
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.Object obj26 = org.jomni.util.Maps.nestedValue(map24, "");
        java.lang.Object obj28 = org.jomni.util.Maps.nestedValue(map24, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map24);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map24);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException21.isError(error24);
        boolean boolean26 = mapperException13.isError(error24);
        java.lang.Throwable[] throwableArray27 = mapperException13.getSuppressed();
        org.jomni.MapperException.Error error28 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray29 = null;
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair32 = org.jomni.util.Pair.newPair(jomniBuilderArray29, (java.lang.reflect.GenericDeclaration) wildcardClass31);
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass34 = error33.getClass();
        org.jomni.MapperException mapperException35 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass31, (java.lang.Class) wildcardClass34);
        org.jomni.MapperException.Error error37 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass38 = error37.getClass();
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        org.jomni.PropInfo propInfo43 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass38, (java.lang.Class) wildcardClass40, method41, method42);
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass34, (java.lang.Class) wildcardClass40);
        java.lang.Throwable[] throwableArray45 = mapperException44.getSuppressed();
        org.jomni.MapperException.Error error46 = null;
        boolean boolean47 = mapperException44.isError(error46);
        mapperException13.addSuppressed((java.lang.Throwable) mapperException44);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(mapperException35);
        org.junit.Assert.assertTrue("'" + error37 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error37.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        java.lang.reflect.Method method8 = propInfo7.getReadMethod();
        java.lang.String str9 = propInfo7.getName();
        java.lang.reflect.Method method10 = propInfo7.getWriteMethod();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(method10);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.Object obj12 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair13 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj12);
        java.lang.Object obj15 = classInfo10.getValue((java.lang.Object) serializablePair13, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class16 = classInfo10.getObjectClass();
        boolean boolean18 = classInfo10.hasProperty("");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(serializablePair13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper4 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper6 = jomniBuilder0.build();
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = jomniMapper8.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray11 = null;
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair14 = org.jomni.util.Pair.newPair(jomniBuilderArray11, (java.lang.reflect.GenericDeclaration) wildcardClass13);
        org.jomni.ClassInfo classInfo15 = jomniMapper8.getClassInfo((java.lang.Class) wildcardClass13);
        org.jomni.PropInfo propInfo17 = classInfo15.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.String[] strArray18 = null;
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray20);
        java.util.Map map23 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray20);
        java.util.Map map24 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray20);
        org.jomni.util.Maps.NamesValues namesValues25 = new org.jomni.util.Maps.NamesValues(strArray18, (java.lang.Object[]) jomniBuilderArray20);
        org.jomni.MapperException.Error error28 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass29 = error28.getClass();
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass29, (java.lang.Class) wildcardClass31, method32, method33);
        org.jomni.ClassInfo classInfo35 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass29);
        java.util.Set<java.lang.String> strSet36 = classInfo35.getPropertyNames();
        boolean boolean37 = classInfo15.setValue((java.lang.Object) jomniBuilderArray20, "", (java.lang.Object) strSet36);
        org.jomni.util.Pair<org.jomni.JomniBuilder, java.lang.Object> jomniBuilderPair38 = new org.jomni.util.Pair<org.jomni.JomniBuilder, java.lang.Object>(jomniBuilder0, (java.lang.Object) classInfo15);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(jomniMapper4);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(jomniMapper6);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNull(propInfo17);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(map23);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.util.Optional<java.lang.Class> classOptional21 = propInfo20.getGenericType();
        java.util.Optional<java.lang.Class> classOptional22 = propInfo20.getGenericType();
        java.lang.Object obj24 = classInfo8.getValue((java.lang.Object) classOptional22, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class25 = classInfo8.getObjectClass();
        java.util.Set<java.lang.String> strSet26 = classInfo8.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classOptional21);
        org.junit.Assert.assertNotNull(classOptional22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.MapperException.Error error9 = mapperException6.getError();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        java.lang.CharSequence charSequence50 = charSequenceOmni39.get();
        java.util.Map map51 = charSequenceOmni39.asMap();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertNotNull(map51);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = mapperException13.getError();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error22 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean23 = mapperException21.isError(error22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException21.isError(error24);
        boolean boolean26 = mapperException13.isError(error24);
        java.lang.String str27 = mapperException13.toString();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error22 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error22.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str27, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = jomniMapper2.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper6 = jomniBuilder5.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = jomniMapper6.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray9 = null;
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair12 = org.jomni.util.Pair.newPair(jomniBuilderArray9, (java.lang.reflect.GenericDeclaration) wildcardClass11);
        org.jomni.ClassInfo classInfo13 = jomniMapper6.getClassInfo((java.lang.Class) wildcardClass11);
        boolean boolean17 = classInfo13.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = jomniMapper2.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper20 = jomniBuilder19.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = jomniMapper20.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.asFlatMap(strMap22);
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder25 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray26 = new org.jomni.JomniBuilder[] { jomniBuilder24, jomniBuilder25 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet27 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet27, jomniBuilderArray26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap22, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet27);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair30 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap18, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet27);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = strMapPair30.getA();
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper33 = jomniBuilder32.build();
        org.jomni.JomniMapper jomniMapper34 = jomniBuilder32.build();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = null;
        org.jomni.MapperException.Error error36 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass37 = error36.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair38 = org.jomni.util.Pair.newPair(jomniBuilderArray35, (java.lang.reflect.GenericDeclaration) wildcardClass37);
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        org.jomni.MapperException mapperException41 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass37, (java.lang.Class) wildcardClass40);
        org.jomni.ClassInfo classInfo42 = jomniMapper34.getClassInfo((java.lang.Class) wildcardClass37);
        java.lang.Object obj44 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair45 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj44);
        java.lang.Object obj47 = classInfo42.getValue((java.lang.Object) serializablePair45, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        boolean boolean48 = strMapPair30.equals((java.lang.Object) classInfo42);
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet49 = strMapPair30.getB();
        java.lang.Class<?> wildcardClass50 = jomniBuilderSet49.getClass();
        org.jomni.JomniBuilder[] jomniBuilderArray52 = null;
        org.jomni.MapperException.Error error53 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass54 = error53.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair55 = org.jomni.util.Pair.newPair(jomniBuilderArray52, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.jomni.MapperException.Error error56 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass57 = error56.getClass();
        org.jomni.MapperException mapperException58 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass54, (java.lang.Class) wildcardClass57);
        org.jomni.MapperException.Error error60 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass61 = error60.getClass();
        org.jomni.MapperException.Error error62 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass63 = error62.getClass();
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        org.jomni.PropInfo propInfo66 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass61, (java.lang.Class) wildcardClass63, method64, method65);
        org.jomni.MapperException mapperException67 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass57, (java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder jomniBuilder68 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper69 = jomniBuilder68.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap71 = jomniMapper69.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray72 = null;
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair75 = org.jomni.util.Pair.newPair(jomniBuilderArray72, (java.lang.reflect.GenericDeclaration) wildcardClass74);
        org.jomni.ClassInfo classInfo76 = jomniMapper69.getClassInfo((java.lang.Class) wildcardClass74);
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        org.jomni.PropInfo propInfo79 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass63, (java.lang.Class) wildcardClass74, method77, method78);
        java.lang.reflect.Method method80 = null;
        java.lang.reflect.Method method81 = null;
        org.jomni.PropInfo propInfo82 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass63, method80, method81);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniMapper6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(jomniMapper20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(jomniBuilderArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(jomniMapper33);
        org.junit.Assert.assertNotNull(jomniMapper34);
        org.junit.Assert.assertTrue("'" + error36 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error36.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair38);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mapperException41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(serializablePair45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jomniBuilderSet49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + error53 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error53.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair55);
        org.junit.Assert.assertTrue("'" + error56 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error56.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(mapperException58);
        org.junit.Assert.assertTrue("'" + error60 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error60.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + error62 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error62.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mapperException67);
        org.junit.Assert.assertNotNull(jomniMapper69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair75);
        org.junit.Assert.assertNotNull(classInfo76);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getWriteMethod();
        java.lang.String str35 = propInfo33.getName();
        java.lang.reflect.Method method36 = propInfo33.getReadMethod();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(method36);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        org.jomni.MapperException.Error error0 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass1 = error0.getClass();
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { wildcardClass1 };
        java.util.Set<java.lang.reflect.Type> typeSet3 = org.jomni.util.Maps.setOf(typeArray2);
        org.junit.Assert.assertTrue("'" + error0 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error0.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeSet3);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test174");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Class class52 = charSequenceOmni50.getType("hi!");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(class52);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 100.0d);
        java.lang.Boolean boolean2 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) bigDecimal1);
        java.math.BigDecimal bigDecimal3 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + boolean2 + "' != '" + false + "'", boolean2, false);
        org.junit.Assert.assertNotNull(bigDecimal3);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.JomniBuilder[] jomniBuilderArray7 = null;
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair10 = org.jomni.util.Pair.newPair(jomniBuilderArray7, (java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass12);
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean15 = mapperException13.isError(error14);
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean17 = mapperException13.isError(error16);
        org.jomni.JomniBuilder[] jomniBuilderArray18 = null;
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair21 = org.jomni.util.Pair.newPair(jomniBuilderArray18, (java.lang.reflect.GenericDeclaration) wildcardClass20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray23 = new org.jomni.JomniBuilder[] { jomniBuilder22 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet24 = org.jomni.util.Maps.setOf(jomniBuilderArray23);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray23);
        org.jomni.JomniBuilder jomniBuilder26 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray27 = new org.jomni.JomniBuilder[] { jomniBuilder26 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet28 = org.jomni.util.Maps.setOf(jomniBuilderArray27);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap25, jomniBuilderSet28);
        java.lang.Class<?> wildcardClass30 = strMap25.getClass();
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass30);
        org.jomni.MapperException.Error error32 = mapperException31.getError();
        mapperException13.addSuppressed((java.lang.Throwable) mapperException31);
        mapperException6.addSuppressed((java.lang.Throwable) mapperException31);
        java.lang.Throwable[] throwableArray35 = mapperException6.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair21);
        org.junit.Assert.assertNotNull(jomniBuilderArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSet24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(jomniBuilderArray27);
        org.junit.Assert.assertNotNull(jomniBuilderSet28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 2);
        java.lang.Boolean boolean2 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + boolean2 + "' != '" + false + "'", boolean2, false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        java.lang.String[] strArray6 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map13 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues14 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.lang.String[] strArray15 = namesValues14.names;
        java.lang.String[] strArray16 = namesValues14.names;
        java.lang.String[] strArray17 = namesValues14.names;
        java.lang.Object[] objArray18 = namesValues14.values;
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(map13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(objArray18);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        boolean boolean25 = charSequenceOmni12.containsKey("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence6 = charSequenceOmni5.get();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = null;
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair10 = org.jomni.util.Pair.newPair(jomniBuilderArray7, (java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass19);
        org.jomni.MapperException.Error error21 = mapperException20.getError();
        java.io.Serializable serializable22 = charSequenceOmni5.into((java.io.Serializable) mapperException20);
        boolean boolean24 = charSequenceOmni5.containsKey("");
        java.lang.Object obj26 = charSequenceOmni5.get("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper28 = jomniBuilder27.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair30 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper28, (java.lang.Comparable<java.lang.String>) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = jomniMapper28.asMap((java.lang.Object) (short) 1);
        org.jomni.Omni<java.lang.Number> numberOmni34 = jomniMapper28.omni((java.lang.Number) 0L);
        org.jomni.MapperException.Error error36 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass37 = error36.getClass();
        org.jomni.MapperException.Error error38 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass39 = error38.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        org.jomni.PropInfo propInfo42 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass37, (java.lang.Class) wildcardClass39, method40, method41);
        java.lang.reflect.Method method43 = propInfo42.getReadMethod();
        java.util.Map<java.lang.String, java.lang.Object> strMap44 = jomniMapper28.asMap((java.lang.Object) propInfo42);
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper46 = jomniBuilder45.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = jomniMapper46.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray49 = null;
        org.jomni.MapperException.Error error50 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass51 = error50.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair52 = org.jomni.util.Pair.newPair(jomniBuilderArray49, (java.lang.reflect.GenericDeclaration) wildcardClass51);
        org.jomni.ClassInfo classInfo53 = jomniMapper46.getClassInfo((java.lang.Class) wildcardClass51);
        org.jomni.JomniBuilder jomniBuilder54 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray55 = new org.jomni.JomniBuilder[] { jomniBuilder54 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet56 = org.jomni.util.Maps.setOf(jomniBuilderArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray55);
        org.jomni.JomniBuilder jomniBuilder58 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray59 = new org.jomni.JomniBuilder[] { jomniBuilder58 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet60 = org.jomni.util.Maps.setOf(jomniBuilderArray59);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair61 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap57, jomniBuilderSet60);
        java.lang.String str62 = strMapPair61.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet63 = strMapPair61.getB();
        java.lang.Object obj65 = classInfo53.getValue((java.lang.Object) jomniBuilderSet63, "");
        org.jomni.PropInfo propInfo67 = classInfo53.getPropInfo("hi!");
        java.lang.Class class68 = classInfo53.getObjectClass();
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = jomniMapper28.asMap((java.lang.Object) class68);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni70 = charSequenceOmni5.setAll((java.lang.Object) jomniMapper28);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "" + "'", charSequence6, "");
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(serializable22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(jomniMapper28);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(numberOmni34);
        org.junit.Assert.assertTrue("'" + error36 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error36.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + error38 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error38.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNull(method43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(jomniMapper46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertTrue("'" + error50 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error50.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(jomniBuilderArray55);
        org.junit.Assert.assertNotNull(jomniBuilderSet56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(jomniBuilderArray59);
        org.junit.Assert.assertNotNull(jomniBuilderSet60);
        org.junit.Assert.assertNotNull(jomniBuilderSet63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(propInfo67);
        org.junit.Assert.assertNotNull(class68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(charSequenceOmni70);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.lang.CharSequence charSequence24 = charSequenceOmni5.get();
        java.lang.CharSequence charSequence25 = charSequenceOmni5.get();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.PropInfo propInfo10 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.String[] strArray11 = null;
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = new org.jomni.JomniBuilder[] { jomniBuilder12 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = org.jomni.util.Maps.setOf(jomniBuilderArray13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray13);
        java.util.Map map16 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray13);
        java.util.Map map17 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray13);
        org.jomni.util.Maps.NamesValues namesValues18 = new org.jomni.util.Maps.NamesValues(strArray11, (java.lang.Object[]) jomniBuilderArray13);
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        org.jomni.PropInfo propInfo27 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass22, (java.lang.Class) wildcardClass24, method25, method26);
        org.jomni.ClassInfo classInfo28 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass22);
        java.util.Set<java.lang.String> strSet29 = classInfo28.getPropertyNames();
        boolean boolean30 = classInfo8.setValue((java.lang.Object) jomniBuilderArray13, "", (java.lang.Object) strSet29);
        org.jomni.PropInfo propInfo32 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(propInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(map16);
        org.junit.Assert.assertNotNull(map17);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(propInfo32);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = charSequenceOmni50.set("hi!", (java.lang.Object) (byte) 0);
        java.math.BigDecimal bigDecimal58 = org.jomni.ExtraConverters.toBigDecimal((java.lang.Number) 2);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni59 = charSequenceOmni55.set("hi!", (java.lang.Object) 2);
        org.jomni.JomniBuilder jomniBuilder61 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper62 = jomniBuilder61.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap64 = jomniMapper62.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = org.jomni.util.Maps.asFlatMap(strMap64);
        org.jomni.JomniBuilder jomniBuilder66 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder67 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray68 = new org.jomni.JomniBuilder[] { jomniBuilder66, jomniBuilder67 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet69 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet69, jomniBuilderArray68);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair71 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap64, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet69);
        org.jomni.JomniBuilder jomniBuilder72 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper73 = jomniBuilder72.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap75 = jomniMapper73.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = org.jomni.util.Maps.asFlatMap(strMap75);
        org.jomni.JomniBuilder jomniBuilder77 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder78 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray79 = new org.jomni.JomniBuilder[] { jomniBuilder77, jomniBuilder78 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet80 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet80, jomniBuilderArray79);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair82 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap75, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet80);
        java.util.LinkedHashSet[] linkedHashSetArray84 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray85 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray84;
        jomniBuilderSetArray85[0] = jomniBuilderSet69;
        jomniBuilderSetArray85[1] = jomniBuilderSet80;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet90 = org.jomni.util.Maps.setOf(jomniBuilderSetArray85);
        java.util.Map map91 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray85);
        org.jomni.util.Maps.NamesValues namesValues92 = org.jomni.util.Maps.namesValuesOf(map91);
        java.lang.Object[] objArray93 = namesValues92.values;
        java.lang.String[] strArray94 = namesValues92.names;
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni95 = charSequenceOmni55.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) namesValues92);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(charSequenceOmni59);
        org.junit.Assert.assertNotNull(jomniMapper62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(jomniBuilderArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jomniMapper73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(jomniBuilderArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray84);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray85);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet90);
        org.junit.Assert.assertNotNull(map91);
        org.junit.Assert.assertNotNull(namesValues92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(charSequenceOmni95);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni12.asMap();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = charSequenceOmni12.into("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NoSuchFieldException: TYPE");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        java.lang.Exception[] exceptionArray0 = new java.lang.Exception[] {};
        java.util.Set<java.lang.Exception> exceptionSet1 = org.jomni.util.Maps.setOf(exceptionArray0);
        org.junit.Assert.assertNotNull(exceptionArray0);
        org.junit.Assert.assertNotNull(exceptionSet1);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.JomniBuilder jomniBuilder14 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper15 = jomniBuilder14.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair17 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper15, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni19 = jomniMapper15.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        org.jomni.PropInfo propInfo27 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass22, (java.lang.Class) wildcardClass24, method25, method26);
        java.lang.reflect.Method method28 = propInfo27.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni29 = charSequenceOmni19.setAll((java.lang.Object) method28);
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper32 = jomniBuilder31.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap34 = jomniMapper32.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.asFlatMap(strMap34);
        org.jomni.JomniBuilder jomniBuilder36 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = new org.jomni.JomniBuilder[] { jomniBuilder36, jomniBuilder37 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet39 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet39, jomniBuilderArray38);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair41 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap34, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet39);
        org.jomni.JomniBuilder jomniBuilder42 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper43 = jomniBuilder42.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = jomniMapper43.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap46 = org.jomni.util.Maps.asFlatMap(strMap45);
        org.jomni.JomniBuilder jomniBuilder47 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder48 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray49 = new org.jomni.JomniBuilder[] { jomniBuilder47, jomniBuilder48 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet50 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet50, jomniBuilderArray49);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair52 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap45, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet50);
        java.util.LinkedHashSet[] linkedHashSetArray54 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray55 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray54;
        jomniBuilderSetArray55[0] = jomniBuilderSet39;
        jomniBuilderSetArray55[1] = jomniBuilderSet50;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet60 = org.jomni.util.Maps.setOf(jomniBuilderSetArray55);
        java.util.Set<java.lang.Cloneable> cloneableSet61 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray55);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni62 = charSequenceOmni19.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet61);
        java.lang.Class class64 = charSequenceOmni19.getType("");
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        org.jomni.MapperException.Error error68 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass69 = error68.getClass();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        org.jomni.PropInfo propInfo72 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass67, (java.lang.Class) wildcardClass69, method70, method71);
        java.lang.reflect.Method method73 = propInfo72.getWriteMethod();
        java.lang.reflect.Method method74 = propInfo72.getReadMethod();
        org.jomni.PropInfo propInfo75 = charSequenceOmni19.into(propInfo72);
        org.jomni.MapperException.Error error76 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Enum<org.jomni.MapperException.Error> errorEnum77 = charSequenceOmni19.into((java.lang.Enum<org.jomni.MapperException.Error>) error76);
        boolean boolean78 = mapperException13.isError(error76);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertNotNull(jomniMapper15);
        org.junit.Assert.assertNotNull(charSequenceOmni19);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNotNull(charSequenceOmni29);
        org.junit.Assert.assertNotNull(jomniMapper32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(jomniBuilderArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jomniMapper43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(jomniBuilderArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray54);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray55);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet60);
        org.junit.Assert.assertNotNull(cloneableSet61);
        org.junit.Assert.assertNotNull(charSequenceOmni62);
        org.junit.Assert.assertNull(class64);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + error68 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error68.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNull(method73);
        org.junit.Assert.assertNull(method74);
        org.junit.Assert.assertNotNull(propInfo75);
        org.junit.Assert.assertTrue("'" + error76 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error76.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + errorEnum77 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", errorEnum77.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.Class class34 = propInfo33.getType();
        java.util.Optional<java.lang.Class> classOptional35 = propInfo33.getGenericType();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNotNull(classOptional35);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.CharSequence charSequence51 = charSequenceOmni50.get();
        java.lang.Class class53 = charSequenceOmni50.getType("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni56 = charSequenceOmni50.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) 10.0d);
        org.jomni.JomniBuilder jomniBuilder57 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper58 = jomniBuilder57.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair60 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper58, (java.lang.Comparable<java.lang.String>) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = jomniMapper58.asMap((java.lang.Object) (short) 1);
        java.util.Map<java.lang.String, java.lang.Object> strMap63 = org.jomni.util.Maps.asFlatMap(strMap62);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni64 = charSequenceOmni50.setAll((java.lang.Object) strMap63);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertNull(class53);
        org.junit.Assert.assertNotNull(charSequenceOmni56);
        org.junit.Assert.assertNotNull(jomniMapper58);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(charSequenceOmni64);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = strMapPair7.getA();
        java.util.Map<java.lang.String, java.lang.Object> strMap9 = org.jomni.util.Maps.asNestedMap(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        org.jomni.JomniBuilder[] jomniBuilderArray51 = null;
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair54 = org.jomni.util.Pair.newPair(jomniBuilderArray51, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.jomni.JomniBuilder jomniBuilder55 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray56 = new org.jomni.JomniBuilder[] { jomniBuilder55 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet57 = org.jomni.util.Maps.setOf(jomniBuilderArray56);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray56);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair62 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap58, jomniBuilderSet61);
        java.lang.Class<?> wildcardClass63 = strMap58.getClass();
        org.jomni.MapperException mapperException64 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder[] jomniBuilderArray65 = null;
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair68 = org.jomni.util.Pair.newPair(jomniBuilderArray65, (java.lang.reflect.GenericDeclaration) wildcardClass67);
        org.jomni.MapperException.Error error69 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass70 = error69.getClass();
        org.jomni.MapperException mapperException71 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass67, (java.lang.Class) wildcardClass70);
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.MapperException.Error error75 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass76 = error75.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        org.jomni.PropInfo propInfo79 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass74, (java.lang.Class) wildcardClass76, method77, method78);
        org.jomni.MapperException mapperException80 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass70, (java.lang.Class) wildcardClass76);
        java.lang.reflect.Method method81 = null;
        java.lang.reflect.Method method82 = null;
        org.jomni.PropInfo propInfo83 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass63, (java.lang.Class) wildcardClass70, method81, method82);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni84 = charSequenceOmni5.set("", (java.lang.Object) propInfo83);
        java.util.Map map85 = charSequenceOmni84.asMap();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair54);
        org.junit.Assert.assertNotNull(jomniBuilderArray56);
        org.junit.Assert.assertNotNull(jomniBuilderSet57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mapperException64);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair68);
        org.junit.Assert.assertTrue("'" + error69 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error69.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(mapperException71);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + error75 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error75.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(mapperException80);
        org.junit.Assert.assertNotNull(charSequenceOmni84);
        org.junit.Assert.assertNotNull(map85);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test191");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.JomniBuilder jomniBuilder54 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper55 = jomniBuilder54.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair57 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper55, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni59 = jomniMapper55.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder61 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper62 = jomniBuilder61.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair64 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper62, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni66 = jomniMapper62.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error68 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass69 = error68.getClass();
        org.jomni.MapperException.Error error70 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass71 = error70.getClass();
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        org.jomni.PropInfo propInfo74 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass71, method72, method73);
        java.lang.reflect.Method method75 = propInfo74.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni76 = charSequenceOmni66.setAll((java.lang.Object) method75);
        charSequenceOmni59.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni66);
        java.util.Set<java.lang.String> strSet78 = charSequenceOmni66.keySet();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni79 = charSequenceOmni50.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap", (java.lang.Object) strSet78);
        java.util.Map map80 = charSequenceOmni79.asMap();
        java.lang.Object obj82 = org.jomni.util.Maps.nestedValue(map80, "hi!");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(jomniMapper55);
        org.junit.Assert.assertNotNull(charSequenceOmni59);
        org.junit.Assert.assertNotNull(jomniMapper62);
        org.junit.Assert.assertNotNull(charSequenceOmni66);
        org.junit.Assert.assertTrue("'" + error68 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error68.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + error70 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error70.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNull(method75);
        org.junit.Assert.assertNotNull(charSequenceOmni76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(charSequenceOmni79);
        org.junit.Assert.assertNotNull(map80);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.JomniBuilder[] jomniBuilderArray53 = charSequenceOmni49.into(jomniBuilderArray51);
        java.util.Map map54 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray53);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(jomniBuilderArray53);
        org.junit.Assert.assertNotNull(map54);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map12 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues13 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.lang.String[] strArray20 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder21 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray22 = new org.jomni.JomniBuilder[] { jomniBuilder21 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet23 = org.jomni.util.Maps.setOf(jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray22);
        java.util.Map map27 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray22);
        org.jomni.util.Maps.NamesValues namesValues28 = new org.jomni.util.Maps.NamesValues(strArray20, (java.lang.Object[]) jomniBuilderArray22);
        org.jomni.util.Maps.NamesValues namesValues29 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray22);
        java.lang.String[] strArray36 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder37 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray38 = new org.jomni.JomniBuilder[] { jomniBuilder37 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet39 = org.jomni.util.Maps.setOf(jomniBuilderArray38);
        java.util.Map<java.lang.String, java.lang.Object> strMap40 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray38);
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray38);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray38);
        java.util.Map map43 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray38);
        org.jomni.util.Maps.NamesValues namesValues44 = new org.jomni.util.Maps.NamesValues(strArray36, (java.lang.Object[]) jomniBuilderArray38);
        java.lang.String[] strArray45 = namesValues44.names;
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper47 = jomniBuilder46.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair49 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper47, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni51 = jomniMapper47.omni((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence52 = charSequenceOmni51.get();
        org.jomni.JomniBuilder[] jomniBuilderArray53 = null;
        org.jomni.MapperException.Error error54 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass55 = error54.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair56 = org.jomni.util.Pair.newPair(jomniBuilderArray53, (java.lang.reflect.GenericDeclaration) wildcardClass55);
        org.jomni.JomniBuilder jomniBuilder57 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray58 = new org.jomni.JomniBuilder[] { jomniBuilder57 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet59 = org.jomni.util.Maps.setOf(jomniBuilderArray58);
        java.util.Map<java.lang.String, java.lang.Object> strMap60 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray58);
        org.jomni.JomniBuilder jomniBuilder61 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray62 = new org.jomni.JomniBuilder[] { jomniBuilder61 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet63 = org.jomni.util.Maps.setOf(jomniBuilderArray62);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair64 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap60, jomniBuilderSet63);
        java.lang.Class<?> wildcardClass65 = strMap60.getClass();
        org.jomni.MapperException mapperException66 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass55, (java.lang.Class) wildcardClass65);
        org.jomni.MapperException.Error error67 = mapperException66.getError();
        java.io.Serializable serializable68 = charSequenceOmni51.into((java.io.Serializable) mapperException66);
        org.jomni.util.Pair<org.jomni.util.Maps.NamesValues, java.lang.Object> namesValuesPair69 = org.jomni.util.Pair.newPair(namesValues44, (java.lang.Object) mapperException66);
        java.lang.Object[] objArray70 = namesValues44.values;
        org.jomni.util.Maps.NamesValues namesValues71 = new org.jomni.util.Maps.NamesValues(strArray6, objArray70);
        java.util.Set<java.lang.Object> objSet72 = org.jomni.util.Maps.setOf((java.lang.Object[]) strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(map12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(jomniBuilderArray22);
        org.junit.Assert.assertNotNull(jomniBuilderSet23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(map27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(jomniBuilderArray38);
        org.junit.Assert.assertNotNull(jomniBuilderSet39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(map43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(jomniMapper47);
        org.junit.Assert.assertNotNull(charSequenceOmni51);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertTrue("'" + error54 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error54.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair56);
        org.junit.Assert.assertNotNull(jomniBuilderArray58);
        org.junit.Assert.assertNotNull(jomniBuilderSet59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(jomniBuilderArray62);
        org.junit.Assert.assertNotNull(jomniBuilderSet63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(mapperException66);
        org.junit.Assert.assertTrue("'" + error67 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error67.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(serializable68);
        org.junit.Assert.assertNotNull(namesValuesPair69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(objSet72);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder1.build();
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        java.lang.Class<?> wildcardClass8 = jomniBuilderArray5.getClass();
        org.jomni.ClassInfo classInfo9 = jomniMapper3.getClassInfo((java.lang.Class) wildcardClass8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.ClassInfo classInfo19 = jomniMapper12.getClassInfo((java.lang.Class) wildcardClass17);
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.lang.Class<?> wildcardClass24 = jomniBuilderArray21.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        org.jomni.PropInfo propInfo27 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass24, method25, method26);
        org.jomni.MapperException mapperException28 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass24);
        org.jomni.JomniBuilder[] jomniBuilderArray31 = null;
        org.jomni.MapperException.Error error32 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass33 = error32.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair34 = org.jomni.util.Pair.newPair(jomniBuilderArray31, (java.lang.reflect.GenericDeclaration) wildcardClass33);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray36 = new org.jomni.JomniBuilder[] { jomniBuilder35 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet37 = org.jomni.util.Maps.setOf(jomniBuilderArray36);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray36);
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray40 = new org.jomni.JomniBuilder[] { jomniBuilder39 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet41 = org.jomni.util.Maps.setOf(jomniBuilderArray40);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair42 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap38, jomniBuilderSet41);
        java.lang.Class<?> wildcardClass43 = strMap38.getClass();
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass33, (java.lang.Class) wildcardClass43);
        org.jomni.JomniBuilder[] jomniBuilderArray45 = null;
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair48 = org.jomni.util.Pair.newPair(jomniBuilderArray45, (java.lang.reflect.GenericDeclaration) wildcardClass47);
        org.jomni.MapperException.Error error49 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass50 = error49.getClass();
        org.jomni.MapperException mapperException51 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass47, (java.lang.Class) wildcardClass50);
        org.jomni.MapperException.Error error53 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass54 = error53.getClass();
        org.jomni.MapperException.Error error55 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass56 = error55.getClass();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        org.jomni.PropInfo propInfo59 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass54, (java.lang.Class) wildcardClass56, method57, method58);
        org.jomni.MapperException mapperException60 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass56);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        org.jomni.PropInfo propInfo63 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass50, method61, method62);
        org.jomni.JomniBuilder jomniBuilder64 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper65 = jomniBuilder64.build();
        org.jomni.JomniMapper jomniMapper66 = jomniBuilder64.build();
        org.jomni.JomniBuilder[] jomniBuilderArray67 = null;
        org.jomni.MapperException.Error error68 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass69 = error68.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair70 = org.jomni.util.Pair.newPair(jomniBuilderArray67, (java.lang.reflect.GenericDeclaration) wildcardClass69);
        org.jomni.MapperException.Error error71 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass72 = error71.getClass();
        org.jomni.MapperException mapperException73 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass72);
        org.jomni.ClassInfo classInfo74 = jomniMapper66.getClassInfo((java.lang.Class) wildcardClass69);
        org.jomni.JomniBuilder jomniBuilder75 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray76 = new org.jomni.JomniBuilder[] { jomniBuilder75 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet77 = org.jomni.util.Maps.setOf(jomniBuilderArray76);
        java.util.Map<java.lang.String, java.lang.Object> strMap78 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray76);
        org.jomni.JomniBuilder jomniBuilder79 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray80 = new org.jomni.JomniBuilder[] { jomniBuilder79 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet81 = org.jomni.util.Maps.setOf(jomniBuilderArray80);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair82 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap78, jomniBuilderSet81);
        java.lang.Class<?> wildcardClass83 = strMap78.getClass();
        org.jomni.MapperException mapperException84 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass69, (java.lang.Class) wildcardClass83);
        java.lang.reflect.Method method85 = null;
        java.lang.reflect.Method method86 = null;
        org.jomni.PropInfo propInfo87 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass50, (java.lang.Class) wildcardClass83, method85, method86);
        org.jomni.ClassInfo classInfo88 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass83);
        java.lang.reflect.Method method89 = null;
        java.lang.reflect.Method method90 = null;
        org.jomni.PropInfo propInfo91 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass83, method89, method90);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(mapperException28);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair34);
        org.junit.Assert.assertNotNull(jomniBuilderArray36);
        org.junit.Assert.assertNotNull(jomniBuilderSet37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(jomniBuilderArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSet41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair48);
        org.junit.Assert.assertTrue("'" + error49 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error49.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(mapperException51);
        org.junit.Assert.assertTrue("'" + error53 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error53.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(mapperException60);
        org.junit.Assert.assertNotNull(jomniMapper65);
        org.junit.Assert.assertNotNull(jomniMapper66);
        org.junit.Assert.assertTrue("'" + error68 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error68.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair70);
        org.junit.Assert.assertTrue("'" + error71 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error71.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(mapperException73);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertNotNull(jomniBuilderArray76);
        org.junit.Assert.assertNotNull(jomniBuilderSet77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(jomniBuilderArray80);
        org.junit.Assert.assertNotNull(jomniBuilderSet81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(mapperException84);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = jomniMapper2.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray5 = null;
        org.jomni.MapperException.Error error6 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass7 = error6.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair8 = org.jomni.util.Pair.newPair(jomniBuilderArray5, (java.lang.reflect.GenericDeclaration) wildcardClass7);
        org.jomni.ClassInfo classInfo9 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass7);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray11);
        java.lang.Class<?> wildcardClass14 = jomniBuilderArray11.getClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        org.jomni.PropInfo propInfo17 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass7, (java.lang.Class) wildcardClass14, method15, method16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = propInfo17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + error6 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error6.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.CharSequence charSequence39 = charSequenceOmni18.get();
        org.jomni.JomniBuilder[] jomniBuilderArray41 = null;
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair44 = org.jomni.util.Pair.newPair(jomniBuilderArray41, (java.lang.reflect.GenericDeclaration) wildcardClass43);
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = new org.jomni.JomniBuilder[] { jomniBuilder45 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet47 = org.jomni.util.Maps.setOf(jomniBuilderArray46);
        java.util.Map<java.lang.String, java.lang.Object> strMap48 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray46);
        org.jomni.JomniBuilder jomniBuilder49 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray50 = new org.jomni.JomniBuilder[] { jomniBuilder49 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet51 = org.jomni.util.Maps.setOf(jomniBuilderArray50);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair52 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap48, jomniBuilderSet51);
        java.lang.Class<?> wildcardClass53 = strMap48.getClass();
        org.jomni.MapperException mapperException54 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass53);
        org.jomni.MapperException.Error error55 = mapperException54.getError();
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) mapperException54);
        org.jomni.MapperException.Error error57 = mapperException54.getError();
        org.jomni.MapperException.Error error58 = mapperException54.getError();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair44);
        org.junit.Assert.assertNotNull(jomniBuilderArray46);
        org.junit.Assert.assertNotNull(jomniBuilderSet47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(jomniBuilderArray50);
        org.junit.Assert.assertNotNull(jomniBuilderSet51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(mapperException54);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error57 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error57.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error58 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error58.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper5 = jomniBuilder4.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = jomniMapper5.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.ClassInfo classInfo12 = jomniMapper5.getClassInfo((java.lang.Class) wildcardClass10);
        boolean boolean16 = classInfo12.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) 100.0d);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.asFlatMap(strMap21);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = new org.jomni.JomniBuilder[] { jomniBuilder23, jomniBuilder24 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet26 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet26, jomniBuilderArray25);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair28 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap21, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair29 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet26);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = org.jomni.util.Maps.asNestedMap(strMap17);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = org.jomni.util.Maps.asNestedMap(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniMapper5);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        java.lang.Object obj12 = null;
        org.jomni.util.Pair<java.io.Serializable, java.lang.Object> serializablePair13 = org.jomni.util.Pair.newPair((java.io.Serializable) true, obj12);
        java.lang.Object obj15 = classInfo10.getValue((java.lang.Object) serializablePair13, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.Class class16 = classInfo10.getObjectClass();
        java.lang.Class<?> wildcardClass17 = classInfo10.getClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(serializablePair13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test199");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        java.lang.reflect.Method method7 = propInfo5.getWriteMethod();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper16 = jomniBuilder15.build();
        org.jomni.JomniBuilder[] jomniBuilderArray17 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.HashSet<org.jomni.JomniBuilder> jomniBuilderSet18 = new java.util.HashSet<org.jomni.JomniBuilder>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet18, jomniBuilderArray17);
        org.jomni.util.Pair<java.lang.reflect.GenericDeclaration, java.util.HashSet<org.jomni.JomniBuilder>> genericDeclarationPair20 = org.jomni.util.Pair.newPair((java.lang.reflect.GenericDeclaration) wildcardClass13, jomniBuilderSet18);
        org.jomni.util.Pair<org.jomni.PropInfo, java.util.AbstractSet<org.jomni.JomniBuilder>> propInfoPair21 = org.jomni.util.Pair.newPair(propInfo5, (java.util.AbstractSet<org.jomni.JomniBuilder>) jomniBuilderSet18);
        java.util.Optional<java.lang.Class> classOptional22 = propInfo5.getGenericType();
        java.lang.String str23 = propInfo5.getName();
        java.lang.Class class24 = propInfo5.getType();
        org.junit.Assert.assertNotNull(classOptional6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertNotNull(jomniMapper16);
        org.junit.Assert.assertNotNull(jomniBuilderArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(genericDeclarationPair20);
        org.junit.Assert.assertNotNull(propInfoPair21);
        org.junit.Assert.assertNotNull(classOptional22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(class24);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = strMapPair7.getA();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.asNestedMap(strMap13);
        org.jomni.util.Maps.NamesValues namesValues15 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap13);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = org.jomni.util.Maps.asNestedMap(strMap13);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = org.jomni.util.Maps.asFlatMap(strMap16);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(namesValues15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.util.Optional<java.lang.Class> classOptional21 = propInfo20.getGenericType();
        java.util.Optional<java.lang.Class> classOptional22 = propInfo20.getGenericType();
        java.lang.Object obj24 = classInfo8.getValue((java.lang.Object) classOptional22, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.jomni.JomniBuilder jomniBuilder25 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray26 = new org.jomni.JomniBuilder[] { jomniBuilder25 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet27 = org.jomni.util.Maps.setOf(jomniBuilderArray26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray26);
        org.jomni.JomniBuilder jomniBuilder29 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray30 = new org.jomni.JomniBuilder[] { jomniBuilder29 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet31 = org.jomni.util.Maps.setOf(jomniBuilderArray30);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair32 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap28, jomniBuilderSet31);
        java.lang.String str33 = strMapPair32.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = strMapPair32.getB();
        java.lang.Class<?> wildcardClass35 = jomniBuilderSet34.getClass();
        java.lang.Object obj37 = null;
        boolean boolean38 = classInfo8.setValue((java.lang.Object) jomniBuilderSet34, "", obj37);
        java.lang.Class class39 = classInfo8.getObjectClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classOptional21);
        org.junit.Assert.assertNotNull(classOptional22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(jomniBuilderArray26);
        org.junit.Assert.assertNotNull(jomniBuilderSet27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(jomniBuilderArray30);
        org.junit.Assert.assertNotNull(jomniBuilderSet31);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(class39);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray5);
        org.jomni.JomniBuilder jomniBuilder8 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray9 = new org.jomni.JomniBuilder[] { jomniBuilder8 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet10 = org.jomni.util.Maps.setOf(jomniBuilderArray9);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap7, jomniBuilderSet10);
        java.lang.Class<?> wildcardClass12 = strMap7.getClass();
        org.jomni.MapperException mapperException13 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass12);
        org.jomni.JomniBuilder jomniBuilder14 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = new org.jomni.JomniBuilder[] { jomniBuilder14 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet16 = org.jomni.util.Maps.setOf(jomniBuilderArray15);
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray15);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray19 = new org.jomni.JomniBuilder[] { jomniBuilder18 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet20 = org.jomni.util.Maps.setOf(jomniBuilderArray19);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap17, jomniBuilderSet20);
        boolean boolean23 = strMapPair21.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder24 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper25 = jomniBuilder24.build();
        boolean boolean26 = strMapPair21.equals((java.lang.Object) jomniMapper25);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper28 = jomniBuilder27.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair30 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper28, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni32 = jomniMapper28.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper35 = jomniBuilder34.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair37 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper35, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = jomniMapper35.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        charSequenceOmni32.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni39);
        java.util.Map map51 = charSequenceOmni32.asMap();
        boolean boolean52 = strMapPair21.equals((java.lang.Object) charSequenceOmni32);
        java.lang.CharSequence charSequence53 = charSequenceOmni32.get();
        org.jomni.JomniBuilder[] jomniBuilderArray55 = null;
        org.jomni.MapperException.Error error56 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass57 = error56.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair58 = org.jomni.util.Pair.newPair(jomniBuilderArray55, (java.lang.reflect.GenericDeclaration) wildcardClass57);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray60);
        org.jomni.JomniBuilder jomniBuilder63 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray64 = new org.jomni.JomniBuilder[] { jomniBuilder63 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet65 = org.jomni.util.Maps.setOf(jomniBuilderArray64);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair66 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap62, jomniBuilderSet65);
        java.lang.Class<?> wildcardClass67 = strMap62.getClass();
        org.jomni.MapperException mapperException68 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass57, (java.lang.Class) wildcardClass67);
        org.jomni.MapperException.Error error69 = mapperException68.getError();
        charSequenceOmni32.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) mapperException68);
        org.jomni.JomniBuilder[] jomniBuilderArray71 = null;
        org.jomni.MapperException.Error error72 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass73 = error72.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair74 = org.jomni.util.Pair.newPair(jomniBuilderArray71, (java.lang.reflect.GenericDeclaration) wildcardClass73);
        org.jomni.MapperException.Error error75 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass76 = error75.getClass();
        org.jomni.MapperException mapperException77 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass73, (java.lang.Class) wildcardClass76);
        org.jomni.MapperException.Error error78 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean79 = mapperException77.isError(error78);
        boolean boolean80 = mapperException68.isError(error78);
        boolean boolean81 = mapperException13.isError(error78);
        java.lang.Throwable[] throwableArray82 = mapperException13.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(jomniBuilderArray9);
        org.junit.Assert.assertNotNull(jomniBuilderSet10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(mapperException13);
        org.junit.Assert.assertNotNull(jomniBuilderArray15);
        org.junit.Assert.assertNotNull(jomniBuilderSet16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniBuilderArray19);
        org.junit.Assert.assertNotNull(jomniBuilderSet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jomniMapper25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jomniMapper28);
        org.junit.Assert.assertNotNull(charSequenceOmni32);
        org.junit.Assert.assertNotNull(jomniMapper35);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(map51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertTrue("'" + error56 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error56.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(jomniBuilderArray64);
        org.junit.Assert.assertNotNull(jomniBuilderSet65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(mapperException68);
        org.junit.Assert.assertTrue("'" + error69 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error69.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + error72 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error72.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair74);
        org.junit.Assert.assertTrue("'" + error75 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error75.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(mapperException77);
        org.junit.Assert.assertTrue("'" + error78 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error78.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test203");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        java.lang.String[] strArray45 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map map52 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues53 = new org.jomni.util.Maps.NamesValues(strArray45, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues54 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = charSequenceOmni5.setAll((java.lang.Object) jomniBuilderArray47);
        org.jomni.JomniBuilder jomniBuilder57 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper58 = jomniBuilder57.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap60 = jomniMapper58.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray61 = null;
        org.jomni.MapperException.Error error62 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass63 = error62.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair64 = org.jomni.util.Pair.newPair(jomniBuilderArray61, (java.lang.reflect.GenericDeclaration) wildcardClass63);
        org.jomni.ClassInfo classInfo65 = jomniMapper58.getClassInfo((java.lang.Class) wildcardClass63);
        org.jomni.JomniBuilder jomniBuilder66 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray67 = new org.jomni.JomniBuilder[] { jomniBuilder66 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet68 = org.jomni.util.Maps.setOf(jomniBuilderArray67);
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray67);
        org.jomni.JomniBuilder jomniBuilder70 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray71 = new org.jomni.JomniBuilder[] { jomniBuilder70 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet72 = org.jomni.util.Maps.setOf(jomniBuilderArray71);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair73 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap69, jomniBuilderSet72);
        boolean boolean75 = strMapPair73.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder76 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper77 = jomniBuilder76.build();
        boolean boolean78 = strMapPair73.equals((java.lang.Object) jomniMapper77);
        boolean boolean81 = classInfo65.setValue((java.lang.Object) boolean78, "", (java.lang.Object) '4');
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni82 = charSequenceOmni55.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) boolean81);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(map52);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertNotNull(jomniMapper58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + error62 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error62.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(jomniBuilderArray67);
        org.junit.Assert.assertNotNull(jomniBuilderSet68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(jomniBuilderArray71);
        org.junit.Assert.assertNotNull(jomniBuilderSet72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jomniMapper77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charSequenceOmni82);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        java.lang.Boolean boolean1 = org.jomni.ExtraConverters.toBoolean((java.lang.Number) (short) 100);
        org.junit.Assert.assertEquals("'" + boolean1 + "' != '" + false + "'", boolean1, false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map map3 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray1);
        java.lang.Object obj5 = org.jomni.util.Maps.nestedValue(map3, "hi!");
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(map3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = null;
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair6 = org.jomni.util.Pair.newPair(jomniBuilderArray3, (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException mapperException9 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass5);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair18 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, jomniBuilderSet17);
        java.lang.Class<?> wildcardClass19 = strMap14.getClass();
        org.jomni.MapperException mapperException20 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass19);
        java.lang.Throwable[] throwableArray21 = mapperException20.getSuppressed();
        java.lang.String str22 = mapperException20.toString();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mapperException9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(mapperException20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap" + "'", str22, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.Object obj52 = charSequenceOmni50.get("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.lang.Object obj54 = charSequenceOmni50.get("hi!");
        java.lang.CharSequence charSequence55 = charSequenceOmni50.get();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder[] jomniBuilderArray9 = null;
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair12 = org.jomni.util.Pair.newPair(jomniBuilderArray9, (java.lang.reflect.GenericDeclaration) wildcardClass11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder17 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet19 = org.jomni.util.Maps.setOf(jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair20 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap16, jomniBuilderSet19);
        java.lang.Class<?> wildcardClass21 = strMap16.getClass();
        org.jomni.MapperException mapperException22 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass11, (java.lang.Class) wildcardClass21);
        org.jomni.JomniBuilder[] jomniBuilderArray23 = null;
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair26 = org.jomni.util.Pair.newPair(jomniBuilderArray23, (java.lang.reflect.GenericDeclaration) wildcardClass25);
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException mapperException29 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass28);
        org.jomni.MapperException.Error error31 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass32 = error31.getClass();
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass34 = error33.getClass();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        org.jomni.PropInfo propInfo37 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass32, (java.lang.Class) wildcardClass34, method35, method36);
        org.jomni.MapperException mapperException38 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass34);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        org.jomni.PropInfo propInfo41 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass21, (java.lang.Class) wildcardClass28, method39, method40);
        org.jomni.JomniBuilder jomniBuilder42 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper43 = jomniBuilder42.build();
        org.jomni.JomniMapper jomniMapper44 = jomniBuilder42.build();
        org.jomni.JomniBuilder[] jomniBuilderArray45 = null;
        org.jomni.MapperException.Error error46 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass47 = error46.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair48 = org.jomni.util.Pair.newPair(jomniBuilderArray45, (java.lang.reflect.GenericDeclaration) wildcardClass47);
        org.jomni.MapperException.Error error49 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass50 = error49.getClass();
        org.jomni.MapperException mapperException51 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass47, (java.lang.Class) wildcardClass50);
        org.jomni.ClassInfo classInfo52 = jomniMapper44.getClassInfo((java.lang.Class) wildcardClass47);
        org.jomni.JomniBuilder jomniBuilder53 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray54 = new org.jomni.JomniBuilder[] { jomniBuilder53 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet55 = org.jomni.util.Maps.setOf(jomniBuilderArray54);
        java.util.Map<java.lang.String, java.lang.Object> strMap56 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray54);
        org.jomni.JomniBuilder jomniBuilder57 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray58 = new org.jomni.JomniBuilder[] { jomniBuilder57 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet59 = org.jomni.util.Maps.setOf(jomniBuilderArray58);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair60 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap56, jomniBuilderSet59);
        java.lang.Class<?> wildcardClass61 = strMap56.getClass();
        org.jomni.MapperException mapperException62 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass47, (java.lang.Class) wildcardClass61);
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass61, method63, method64);
        org.jomni.JomniBuilder jomniBuilder66 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper67 = jomniBuilder66.build();
        org.jomni.JomniMapper jomniMapper68 = jomniBuilder66.build();
        org.jomni.JomniBuilder[] jomniBuilderArray69 = null;
        org.jomni.MapperException.Error error70 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass71 = error70.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair72 = org.jomni.util.Pair.newPair(jomniBuilderArray69, (java.lang.reflect.GenericDeclaration) wildcardClass71);
        org.jomni.MapperException.Error error73 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass74 = error73.getClass();
        org.jomni.MapperException mapperException75 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass71, (java.lang.Class) wildcardClass74);
        org.jomni.ClassInfo classInfo76 = jomniMapper68.getClassInfo((java.lang.Class) wildcardClass71);
        org.jomni.JomniBuilder jomniBuilder77 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray78 = new org.jomni.JomniBuilder[] { jomniBuilder77 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet79 = org.jomni.util.Maps.setOf(jomniBuilderArray78);
        java.util.Map<java.lang.String, java.lang.Object> strMap80 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray78);
        org.jomni.JomniBuilder jomniBuilder81 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray82 = new org.jomni.JomniBuilder[] { jomniBuilder81 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet83 = org.jomni.util.Maps.setOf(jomniBuilderArray82);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair84 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap80, jomniBuilderSet83);
        java.lang.Class<?> wildcardClass85 = strMap80.getClass();
        org.jomni.MapperException mapperException86 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass71, (java.lang.Class) wildcardClass85);
        java.lang.reflect.Method method87 = null;
        java.lang.reflect.Method method88 = null;
        org.jomni.PropInfo propInfo89 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass85, method87, method88);
        org.jomni.ClassInfo classInfo90 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass85);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertNotNull(jomniBuilderSet19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(mapperException22);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair26);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(mapperException29);
        org.junit.Assert.assertTrue("'" + error31 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error31.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(mapperException38);
        org.junit.Assert.assertNotNull(jomniMapper43);
        org.junit.Assert.assertNotNull(jomniMapper44);
        org.junit.Assert.assertTrue("'" + error46 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error46.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair48);
        org.junit.Assert.assertTrue("'" + error49 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error49.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(mapperException51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(jomniBuilderArray54);
        org.junit.Assert.assertNotNull(jomniBuilderSet55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(jomniBuilderArray58);
        org.junit.Assert.assertNotNull(jomniBuilderSet59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(mapperException62);
        org.junit.Assert.assertNotNull(jomniMapper67);
        org.junit.Assert.assertNotNull(jomniMapper68);
        org.junit.Assert.assertTrue("'" + error70 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error70.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair72);
        org.junit.Assert.assertTrue("'" + error73 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error73.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(mapperException75);
        org.junit.Assert.assertNotNull(classInfo76);
        org.junit.Assert.assertNotNull(jomniBuilderArray78);
        org.junit.Assert.assertNotNull(jomniBuilderSet79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(jomniBuilderArray82);
        org.junit.Assert.assertNotNull(jomniBuilderSet83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(mapperException86);
        org.junit.Assert.assertNotNull(classInfo90);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test209");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = jomniMapper1.asMap((java.lang.Object) (short) 1);
        java.util.Map<java.lang.String, java.lang.Object> strMap6 = org.jomni.util.Maps.asFlatMap(strMap5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = org.jomni.util.Maps.asFlatMap(strMap6);
        org.jomni.util.Maps.NamesValues namesValues8 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap6);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(namesValues8);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test210");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        java.lang.Class class50 = charSequenceOmni5.getType("");
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.MapperException.Error error54 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass55 = error54.getClass();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        org.jomni.PropInfo propInfo58 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass55, method56, method57);
        java.lang.reflect.Method method59 = propInfo58.getWriteMethod();
        java.lang.reflect.Method method60 = propInfo58.getReadMethod();
        org.jomni.PropInfo propInfo61 = charSequenceOmni5.into(propInfo58);
        org.jomni.PropInfo[] propInfoArray62 = new org.jomni.PropInfo[] { propInfo58 };
        java.util.Set<org.jomni.PropInfo> propInfoSet63 = org.jomni.util.Maps.setOf(propInfoArray62);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNull(class50);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + error54 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error54.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertNotNull(propInfo61);
        org.junit.Assert.assertNotNull(propInfoArray62);
        org.junit.Assert.assertNotNull(propInfoSet63);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        org.jomni.JomniBuilder[] jomniBuilderArray1 = null;
        org.jomni.MapperException.Error error2 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass3 = error2.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair4 = org.jomni.util.Pair.newPair(jomniBuilderArray1, (java.lang.reflect.GenericDeclaration) wildcardClass3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray6 = new org.jomni.JomniBuilder[] { jomniBuilder5 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet7 = org.jomni.util.Maps.setOf(jomniBuilderArray6);
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair12 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap8, jomniBuilderSet11);
        java.lang.Class<?> wildcardClass13 = strMap8.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass3, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        org.jomni.MapperException mapperException21 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass20);
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.MapperException.Error error25 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass26 = error25.getClass();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        org.jomni.PropInfo propInfo29 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass24, (java.lang.Class) wildcardClass26, method27, method28);
        org.jomni.MapperException mapperException30 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass20, (java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass20, method31, method32);
        java.lang.Class class34 = propInfo33.getType();
        java.lang.reflect.Method method35 = propInfo33.getWriteMethod();
        org.junit.Assert.assertTrue("'" + error2 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error2.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair4);
        org.junit.Assert.assertNotNull(jomniBuilderArray6);
        org.junit.Assert.assertNotNull(jomniBuilderSet7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(mapperException21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + error25 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error25.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(mapperException30);
        org.junit.Assert.assertNotNull(class34);
        org.junit.Assert.assertNull(method35);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test212");
        org.jomni.JomniBuilder jomniBuilder1 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder1.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = jomniMapper2.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.asFlatMap(strMap4);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder6, jomniBuilder7 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet9 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet9, jomniBuilderArray8);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair11 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap4, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet9);
        java.lang.Class<?> wildcardClass12 = jomniBuilderSet9.getClass();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = null;
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair18 = org.jomni.util.Pair.newPair(jomniBuilderArray15, (java.lang.reflect.GenericDeclaration) wildcardClass17);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray20);
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder23 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet25 = org.jomni.util.Maps.setOf(jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair26 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap22, jomniBuilderSet25);
        java.lang.Class<?> wildcardClass27 = strMap22.getClass();
        org.jomni.MapperException mapperException28 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass17, (java.lang.Class) wildcardClass27);
        org.jomni.JomniBuilder[] jomniBuilderArray29 = null;
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair32 = org.jomni.util.Pair.newPair(jomniBuilderArray29, (java.lang.reflect.GenericDeclaration) wildcardClass31);
        org.jomni.MapperException.Error error33 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass34 = error33.getClass();
        org.jomni.MapperException mapperException35 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass31, (java.lang.Class) wildcardClass34);
        org.jomni.MapperException.Error error37 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass38 = error37.getClass();
        org.jomni.MapperException.Error error39 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass40 = error39.getClass();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        org.jomni.PropInfo propInfo43 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass38, (java.lang.Class) wildcardClass40, method41, method42);
        org.jomni.MapperException mapperException44 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass34, (java.lang.Class) wildcardClass40);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass27, (java.lang.Class) wildcardClass34, method45, method46);
        org.jomni.JomniBuilder jomniBuilder48 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper49 = jomniBuilder48.build();
        org.jomni.JomniMapper jomniMapper50 = jomniBuilder48.build();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = null;
        org.jomni.MapperException.Error error52 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass53 = error52.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair54 = org.jomni.util.Pair.newPair(jomniBuilderArray51, (java.lang.reflect.GenericDeclaration) wildcardClass53);
        org.jomni.MapperException.Error error55 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass56 = error55.getClass();
        org.jomni.MapperException mapperException57 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass56);
        org.jomni.ClassInfo classInfo58 = jomniMapper50.getClassInfo((java.lang.Class) wildcardClass53);
        org.jomni.JomniBuilder jomniBuilder59 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray60 = new org.jomni.JomniBuilder[] { jomniBuilder59 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet61 = org.jomni.util.Maps.setOf(jomniBuilderArray60);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray60);
        org.jomni.JomniBuilder jomniBuilder63 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray64 = new org.jomni.JomniBuilder[] { jomniBuilder63 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet65 = org.jomni.util.Maps.setOf(jomniBuilderArray64);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair66 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap62, jomniBuilderSet65);
        java.lang.Class<?> wildcardClass67 = strMap62.getClass();
        org.jomni.MapperException mapperException68 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass53, (java.lang.Class) wildcardClass67);
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        org.jomni.PropInfo propInfo71 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass34, (java.lang.Class) wildcardClass67, method69, method70);
        org.jomni.ClassInfo classInfo72 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass67);
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        org.jomni.PropInfo propInfo75 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass12, (java.lang.Class) wildcardClass67, method73, method74);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSet25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mapperException28);
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair32);
        org.junit.Assert.assertTrue("'" + error33 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error33.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(mapperException35);
        org.junit.Assert.assertTrue("'" + error37 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error37.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + error39 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error39.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mapperException44);
        org.junit.Assert.assertNotNull(jomniMapper49);
        org.junit.Assert.assertNotNull(jomniMapper50);
        org.junit.Assert.assertTrue("'" + error52 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error52.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair54);
        org.junit.Assert.assertTrue("'" + error55 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error55.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(mapperException57);
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertNotNull(jomniBuilderArray60);
        org.junit.Assert.assertNotNull(jomniBuilderSet61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(jomniBuilderArray64);
        org.junit.Assert.assertNotNull(jomniBuilderSet65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(mapperException68);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.util.Optional<java.lang.Class> classOptional21 = propInfo20.getGenericType();
        java.util.Optional<java.lang.Class> classOptional22 = propInfo20.getGenericType();
        java.lang.Object obj24 = classInfo8.getValue((java.lang.Object) classOptional22, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.util.Set<java.lang.String> strSet25 = classInfo8.getPropertyNames();
        org.jomni.JomniBuilder jomniBuilder26 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper27 = jomniBuilder26.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair29 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper27, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni31 = jomniMapper27.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper34 = jomniBuilder33.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair36 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper34, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni38 = jomniMapper34.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error40 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass41 = error40.getClass();
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        org.jomni.PropInfo propInfo46 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass41, (java.lang.Class) wildcardClass43, method44, method45);
        java.lang.reflect.Method method47 = propInfo46.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni38.setAll((java.lang.Object) method47);
        charSequenceOmni31.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni38);
        java.util.Map map50 = charSequenceOmni31.asMap();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder58 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray59 = new org.jomni.JomniBuilder[] { jomniBuilder58 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet60 = org.jomni.util.Maps.setOf(jomniBuilderArray59);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray59);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray59);
        java.util.Map map63 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray59);
        org.jomni.util.Maps.NamesValues namesValues64 = new org.jomni.util.Maps.NamesValues(strArray57, (java.lang.Object[]) jomniBuilderArray59);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni65 = charSequenceOmni31.setAll((java.lang.Object) namesValues64);
        java.util.Map map66 = charSequenceOmni65.asMap();
        boolean boolean68 = charSequenceOmni65.containsKey("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.lang.Object obj70 = classInfo8.getValue((java.lang.Object) charSequenceOmni65, "");
        java.lang.Class class71 = classInfo8.getObjectClass();
        boolean boolean73 = classInfo8.hasProperty("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classOptional21);
        org.junit.Assert.assertNotNull(classOptional22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(jomniMapper27);
        org.junit.Assert.assertNotNull(charSequenceOmni31);
        org.junit.Assert.assertNotNull(jomniMapper34);
        org.junit.Assert.assertNotNull(charSequenceOmni38);
        org.junit.Assert.assertTrue("'" + error40 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error40.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(method47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNotNull(map50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(jomniBuilderArray59);
        org.junit.Assert.assertNotNull(jomniBuilderSet60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(map63);
        org.junit.Assert.assertNotNull(charSequenceOmni65);
        org.junit.Assert.assertNotNull(map66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(class71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test214");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass10, method11, method12);
        java.lang.reflect.Method method14 = propInfo13.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni15 = charSequenceOmni5.setAll((java.lang.Object) method14);
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper18 = jomniBuilder17.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap20 = jomniMapper18.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = org.jomni.util.Maps.asFlatMap(strMap20);
        org.jomni.JomniBuilder jomniBuilder22 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray24 = new org.jomni.JomniBuilder[] { jomniBuilder22, jomniBuilder23 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet25 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet25, jomniBuilderArray24);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair27 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap20, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet25);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper29 = jomniBuilder28.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = jomniMapper29.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray35 = new org.jomni.JomniBuilder[] { jomniBuilder33, jomniBuilder34 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet36 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet36, jomniBuilderArray35);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair38 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap31, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet36);
        java.util.LinkedHashSet[] linkedHashSetArray40 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray41 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray40;
        jomniBuilderSetArray41[0] = jomniBuilderSet25;
        jomniBuilderSetArray41[1] = jomniBuilderSet36;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet46 = org.jomni.util.Maps.setOf(jomniBuilderSetArray41);
        java.util.Set<java.lang.Cloneable> cloneableSet47 = org.jomni.util.Maps.setOf((java.lang.Cloneable[]) jomniBuilderSetArray41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni5.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) cloneableSet47);
        org.jomni.JomniBuilder jomniBuilder49 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray50 = new org.jomni.JomniBuilder[] { jomniBuilder49 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet51 = org.jomni.util.Maps.setOf(jomniBuilderArray50);
        java.util.Map<java.lang.String, java.lang.Object> strMap52 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray50);
        org.jomni.JomniBuilder jomniBuilder53 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray54 = new org.jomni.JomniBuilder[] { jomniBuilder53 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet55 = org.jomni.util.Maps.setOf(jomniBuilderArray54);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair56 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap52, jomniBuilderSet55);
        // The following exception was thrown during execution in test generation
        try {
            org.jomni.Omni<java.lang.CharSequence> charSequenceOmni57 = charSequenceOmni48.setAll((java.lang.Object) jomniBuilderSet55);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NoSuchFieldException: TYPE");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNotNull(charSequenceOmni15);
        org.junit.Assert.assertNotNull(jomniMapper18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(jomniBuilderArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jomniMapper29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(jomniBuilderArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray40);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet46);
        org.junit.Assert.assertNotNull(cloneableSet47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNotNull(jomniBuilderArray50);
        org.junit.Assert.assertNotNull(jomniBuilderSet51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(jomniBuilderArray54);
        org.junit.Assert.assertNotNull(jomniBuilderSet55);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray51 = new org.jomni.JomniBuilder[] { jomniBuilder50 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet52 = org.jomni.util.Maps.setOf(jomniBuilderArray51);
        org.jomni.JomniBuilder[] jomniBuilderArray53 = charSequenceOmni49.into(jomniBuilderArray51);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertNotNull(jomniBuilderArray51);
        org.junit.Assert.assertNotNull(jomniBuilderSet52);
        org.junit.Assert.assertNotNull(jomniBuilderArray53);
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test216");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean8 = mapperException6.isError(error7);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean10 = mapperException6.isError(error9);
        org.jomni.JomniBuilder[] jomniBuilderArray11 = null;
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair14 = org.jomni.util.Pair.newPair(jomniBuilderArray11, (java.lang.reflect.GenericDeclaration) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray16 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet17 = org.jomni.util.Maps.setOf(jomniBuilderArray16);
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray16);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray20 = new org.jomni.JomniBuilder[] { jomniBuilder19 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet21 = org.jomni.util.Maps.setOf(jomniBuilderArray20);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair22 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap18, jomniBuilderSet21);
        java.lang.Class<?> wildcardClass23 = strMap18.getClass();
        org.jomni.MapperException mapperException24 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass13, (java.lang.Class) wildcardClass23);
        mapperException6.addSuppressed((java.lang.Throwable) mapperException24);
        java.lang.Throwable[] throwableArray26 = mapperException24.getSuppressed();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair14);
        org.junit.Assert.assertNotNull(jomniBuilderArray16);
        org.junit.Assert.assertNotNull(jomniBuilderSet17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(jomniBuilderArray20);
        org.junit.Assert.assertNotNull(jomniBuilderSet21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mapperException24);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        org.jomni.JomniBuilder[] jomniBuilderArray25 = null;
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass27 = error26.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair28 = org.jomni.util.Pair.newPair(jomniBuilderArray25, (java.lang.reflect.GenericDeclaration) wildcardClass27);
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        org.jomni.MapperException mapperException31 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass27, (java.lang.Class) wildcardClass30);
        org.jomni.MapperException.Error error32 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean33 = mapperException31.isError(error32);
        org.jomni.MapperException.Error error34 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean35 = mapperException31.isError(error34);
        org.jomni.JomniBuilder[] jomniBuilderArray36 = null;
        org.jomni.MapperException.Error error37 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass38 = error37.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair39 = org.jomni.util.Pair.newPair(jomniBuilderArray36, (java.lang.reflect.GenericDeclaration) wildcardClass38);
        org.jomni.JomniBuilder jomniBuilder40 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray41 = new org.jomni.JomniBuilder[] { jomniBuilder40 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet42 = org.jomni.util.Maps.setOf(jomniBuilderArray41);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray41);
        org.jomni.JomniBuilder jomniBuilder44 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray45 = new org.jomni.JomniBuilder[] { jomniBuilder44 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet46 = org.jomni.util.Maps.setOf(jomniBuilderArray45);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair47 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap43, jomniBuilderSet46);
        java.lang.Class<?> wildcardClass48 = strMap43.getClass();
        org.jomni.MapperException mapperException49 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass38, (java.lang.Class) wildcardClass48);
        mapperException31.addSuppressed((java.lang.Throwable) mapperException49);
        java.lang.Throwable[] throwableArray51 = mapperException31.getSuppressed();
        java.lang.Throwable[] throwableArray52 = charSequenceOmni5.into(throwableArray51);
        java.lang.Class class54 = charSequenceOmni5.getType("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(mapperException31);
        org.junit.Assert.assertTrue("'" + error32 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error32.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + error34 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error34.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + error37 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error37.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair39);
        org.junit.Assert.assertNotNull(jomniBuilderArray41);
        org.junit.Assert.assertNotNull(jomniBuilderSet42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(jomniBuilderArray45);
        org.junit.Assert.assertNotNull(jomniBuilderSet46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(mapperException49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNull(class54);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        org.jomni.JomniBuilder jomniBuilder2 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper3 = jomniBuilder2.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = jomniMapper3.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray6 = null;
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair9 = org.jomni.util.Pair.newPair(jomniBuilderArray6, (java.lang.reflect.GenericDeclaration) wildcardClass8);
        org.jomni.ClassInfo classInfo10 = jomniMapper3.getClassInfo((java.lang.Class) wildcardClass8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray12 = new org.jomni.JomniBuilder[] { jomniBuilder11 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet13 = org.jomni.util.Maps.setOf(jomniBuilderArray12);
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray12);
        java.lang.Class<?> wildcardClass15 = jomniBuilderArray12.getClass();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        org.jomni.PropInfo propInfo18 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass15, method16, method17);
        org.jomni.MapperException.Error error19 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass20 = error19.getClass();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        org.jomni.PropInfo propInfo23 = new org.jomni.PropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass20, method21, method22);
        java.lang.Class class24 = propInfo23.getType();
        org.junit.Assert.assertNotNull(jomniMapper3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray12);
        org.junit.Assert.assertNotNull(jomniBuilderSet13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error19 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error19.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(class24);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        java.util.Map<java.lang.String, java.lang.Object> strMap31 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map30);
        java.util.Map<java.lang.String, java.lang.Object> strMap32 = org.jomni.util.Maps.asFlatMap(strMap31);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        java.lang.String[] strArray6 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map13 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues14 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.lang.String[] strArray15 = namesValues14.names;
        java.lang.String[] strArray16 = namesValues14.names;
        org.jomni.JomniBuilder[] jomniBuilderArray17 = null;
        org.jomni.MapperException.Error error18 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass19 = error18.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair20 = org.jomni.util.Pair.newPair(jomniBuilderArray17, (java.lang.reflect.GenericDeclaration) wildcardClass19);
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        org.jomni.MapperException mapperException23 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass19, (java.lang.Class) wildcardClass22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean25 = mapperException23.isError(error24);
        org.jomni.MapperException.Error error26 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        boolean boolean27 = mapperException23.isError(error26);
        org.jomni.JomniBuilder[] jomniBuilderArray28 = null;
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair31 = org.jomni.util.Pair.newPair(jomniBuilderArray28, (java.lang.reflect.GenericDeclaration) wildcardClass30);
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.JomniBuilder jomniBuilder36 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray37 = new org.jomni.JomniBuilder[] { jomniBuilder36 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet38 = org.jomni.util.Maps.setOf(jomniBuilderArray37);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair39 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap35, jomniBuilderSet38);
        java.lang.Class<?> wildcardClass40 = strMap35.getClass();
        org.jomni.MapperException mapperException41 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass30, (java.lang.Class) wildcardClass40);
        mapperException23.addSuppressed((java.lang.Throwable) mapperException41);
        java.lang.Throwable[] throwableArray43 = mapperException23.getSuppressed();
        org.jomni.util.Maps.NamesValues namesValues44 = new org.jomni.util.Maps.NamesValues(strArray16, (java.lang.Object[]) throwableArray43);
        java.lang.Object[] objArray45 = namesValues44.values;
        java.lang.String[] strArray46 = namesValues44.names;
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(map13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + error18 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error18.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair20);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(mapperException23);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + error26 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error26.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(jomniBuilderArray37);
        org.junit.Assert.assertNotNull(jomniBuilderSet38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(mapperException41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap]");
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test221");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.util.Set<java.lang.String> strSet51 = charSequenceOmni50.keySet();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        java.lang.String[] strArray19 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray21 = new org.jomni.JomniBuilder[] { jomniBuilder20 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet22 = org.jomni.util.Maps.setOf(jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap23 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map<java.lang.String, java.lang.Object> strMap25 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray21);
        java.util.Map map26 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray21);
        org.jomni.util.Maps.NamesValues namesValues27 = new org.jomni.util.Maps.NamesValues(strArray19, (java.lang.Object[]) jomniBuilderArray21);
        java.lang.String[] strArray28 = namesValues27.names;
        boolean boolean29 = strMapPair7.equals((java.lang.Object) namesValues27);
        java.lang.String str30 = strMapPair7.toString();
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(jomniBuilderArray21);
        org.junit.Assert.assertNotNull(jomniBuilderSet22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(map26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray10);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair16 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap12, jomniBuilderSet15);
        boolean boolean18 = strMapPair16.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder19 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper20 = jomniBuilder19.build();
        boolean boolean21 = strMapPair16.equals((java.lang.Object) jomniMapper20);
        boolean boolean24 = classInfo8.setValue((java.lang.Object) boolean21, "", (java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet25 = classInfo8.getPropertyNames();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jomniMapper20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.JomniBuilder jomniBuilder9 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray10 = new org.jomni.JomniBuilder[] { jomniBuilder9 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet11 = org.jomni.util.Maps.setOf(jomniBuilderArray10);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray10);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray14 = new org.jomni.JomniBuilder[] { jomniBuilder13 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet15 = org.jomni.util.Maps.setOf(jomniBuilderArray14);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair16 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap12, jomniBuilderSet15);
        java.lang.String str17 = strMapPair16.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet18 = strMapPair16.getB();
        java.lang.Object obj20 = classInfo8.getValue((java.lang.Object) jomniBuilderSet18, "");
        org.jomni.PropInfo propInfo22 = classInfo8.getPropInfo("hi!");
        org.jomni.JomniBuilder jomniBuilder23 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper24 = jomniBuilder23.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap26 = jomniMapper24.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap27 = org.jomni.util.Maps.asFlatMap(strMap26);
        org.jomni.JomniBuilder jomniBuilder28 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder29 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray30 = new org.jomni.JomniBuilder[] { jomniBuilder28, jomniBuilder29 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet31 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet31, jomniBuilderArray30);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair33 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap26, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet31);
        org.jomni.JomniBuilder jomniBuilder34 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper35 = jomniBuilder34.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = jomniMapper35.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = org.jomni.util.Maps.asFlatMap(strMap37);
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder40 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray41 = new org.jomni.JomniBuilder[] { jomniBuilder39, jomniBuilder40 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet42 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet42, jomniBuilderArray41);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair44 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap37, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet42);
        java.util.LinkedHashSet[] linkedHashSetArray46 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray47 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray46;
        jomniBuilderSetArray47[0] = jomniBuilderSet31;
        jomniBuilderSetArray47[1] = jomniBuilderSet42;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet52 = org.jomni.util.Maps.setOf(jomniBuilderSetArray47);
        java.util.Map map53 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray47);
        java.lang.Object obj55 = classInfo8.getValue((java.lang.Object) jomniBuilderSetArray47, "");
        org.jomni.JomniBuilder jomniBuilder56 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray57 = new org.jomni.JomniBuilder[] { jomniBuilder56 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet58 = org.jomni.util.Maps.setOf(jomniBuilderArray57);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray57);
        org.jomni.JomniBuilder jomniBuilder60 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray61 = new org.jomni.JomniBuilder[] { jomniBuilder60 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet62 = org.jomni.util.Maps.setOf(jomniBuilderArray61);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair63 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap59, jomniBuilderSet62);
        boolean boolean65 = strMapPair63.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder66 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper67 = jomniBuilder66.build();
        boolean boolean68 = strMapPair63.equals((java.lang.Object) jomniMapper67);
        java.util.Map<java.lang.String, java.lang.Object> strMap69 = strMapPair63.getA();
        java.lang.String str70 = strMapPair63.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet71 = strMapPair63.getB();
        java.lang.Object obj73 = classInfo8.getValue((java.lang.Object) strMapPair63, "org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(jomniBuilderArray10);
        org.junit.Assert.assertNotNull(jomniBuilderSet11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(jomniBuilderArray14);
        org.junit.Assert.assertNotNull(jomniBuilderSet15);
        org.junit.Assert.assertNotNull(jomniBuilderSet18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(propInfo22);
        org.junit.Assert.assertNotNull(jomniMapper24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(jomniBuilderArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jomniMapper35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(jomniBuilderArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray46);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet52);
        org.junit.Assert.assertNotNull(map53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(jomniBuilderArray57);
        org.junit.Assert.assertNotNull(jomniBuilderSet58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(jomniBuilderArray61);
        org.junit.Assert.assertNotNull(jomniBuilderSet62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jomniMapper67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(jomniBuilderSet71);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        java.util.Map map40 = charSequenceOmni39.asMap();
        java.util.Map<java.lang.String, java.lang.Object> strMap41 = org.jomni.util.Maps.asNestedMap((java.util.Map<java.lang.String, java.lang.Object>) map40);
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = org.jomni.util.Maps.asFlatMap(strMap41);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = org.jomni.util.Maps.asFlatMap(strMap42);
        java.lang.Object obj45 = org.jomni.util.Maps.nestedValue((java.util.Map) strMap42, "org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertNotNull(map40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        org.jomni.util.Maps.NamesValues namesValues31 = org.jomni.util.Maps.namesValuesOf(map30);
        org.jomni.util.Maps.NamesValues namesValues32 = org.jomni.util.Maps.namesValuesOf(map30);
        java.lang.String[] strArray33 = namesValues32.names;
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(namesValues31);
        org.junit.Assert.assertNotNull(namesValues32);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test227");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper40 = jomniBuilder39.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = jomniMapper40.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap43 = org.jomni.util.Maps.asFlatMap(strMap42);
        org.jomni.JomniBuilder jomniBuilder44 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray46 = new org.jomni.JomniBuilder[] { jomniBuilder44, jomniBuilder45 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet47 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet47, jomniBuilderArray46);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair49 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap42, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet47);
        org.jomni.JomniBuilder jomniBuilder50 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper51 = jomniBuilder50.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap53 = jomniMapper51.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap54 = org.jomni.util.Maps.asFlatMap(strMap53);
        org.jomni.JomniBuilder jomniBuilder55 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder56 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray57 = new org.jomni.JomniBuilder[] { jomniBuilder55, jomniBuilder56 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet58 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet58, jomniBuilderArray57);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair60 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap53, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet58);
        java.util.LinkedHashSet[] linkedHashSetArray62 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray63 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray62;
        jomniBuilderSetArray63[0] = jomniBuilderSet47;
        jomniBuilderSetArray63[1] = jomniBuilderSet58;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet68 = org.jomni.util.Maps.setOf(jomniBuilderSetArray63);
        java.util.Map map69 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray63);
        org.jomni.util.Maps.NamesValues namesValues70 = org.jomni.util.Maps.namesValuesOf(map69);
        org.jomni.util.Maps.NamesValues namesValues71 = org.jomni.util.Maps.namesValuesOf(map69);
        org.jomni.JomniBuilder jomniBuilder72 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper73 = jomniBuilder72.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap75 = jomniMapper73.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap76 = org.jomni.util.Maps.asFlatMap(strMap75);
        org.jomni.JomniBuilder jomniBuilder77 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder78 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray79 = new org.jomni.JomniBuilder[] { jomniBuilder77, jomniBuilder78 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet80 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet80, jomniBuilderArray79);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair82 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap75, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet80);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair83 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>((java.util.Map<java.lang.String, java.lang.Object>) map69, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractCollection<org.jomni.JomniBuilder> jomniBuilderCollection84 = charSequenceOmni18.into((java.util.AbstractCollection<org.jomni.JomniBuilder>) jomniBuilderSet80);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NoSuchFieldException: TYPE");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jomniMapper40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(jomniBuilderArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jomniMapper51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(jomniBuilderArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray62);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray63);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet68);
        org.junit.Assert.assertNotNull(map69);
        org.junit.Assert.assertNotNull(namesValues70);
        org.junit.Assert.assertNotNull(namesValues71);
        org.junit.Assert.assertNotNull(jomniMapper73);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(jomniBuilderArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map map4 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        java.util.Map map6 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(map4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(map6);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni12.asMap();
        org.jomni.JomniBuilder jomniBuilder25 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray26 = new org.jomni.JomniBuilder[] { jomniBuilder25 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet27 = org.jomni.util.Maps.setOf(jomniBuilderArray26);
        java.util.Map<java.lang.String, java.lang.Object> strMap28 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray26);
        org.jomni.JomniBuilder jomniBuilder29 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray30 = new org.jomni.JomniBuilder[] { jomniBuilder29 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet31 = org.jomni.util.Maps.setOf(jomniBuilderArray30);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair32 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap28, jomniBuilderSet31);
        boolean boolean34 = strMapPair32.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder35 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper36 = jomniBuilder35.build();
        boolean boolean37 = strMapPair32.equals((java.lang.Object) jomniMapper36);
        java.util.Map<java.lang.String, java.lang.Object> strMap38 = strMapPair32.getA();
        java.lang.String str39 = strMapPair32.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet40 = strMapPair32.getB();
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair41 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>((java.util.Map<java.lang.String, java.lang.Object>) map24, jomniBuilderSet40);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(jomniBuilderArray26);
        org.junit.Assert.assertNotNull(jomniBuilderSet27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(jomniBuilderArray30);
        org.junit.Assert.assertNotNull(jomniBuilderSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jomniMapper36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(jomniBuilderSet40);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test230");
        java.lang.Class class1 = null;
        org.jomni.JomniBuilder jomniBuilder2 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray3 = new org.jomni.JomniBuilder[] { jomniBuilder2 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet4 = org.jomni.util.Maps.setOf(jomniBuilderArray3);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray3);
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder6 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet8 = org.jomni.util.Maps.setOf(jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair9 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap5, jomniBuilderSet8);
        java.lang.Class<?> wildcardClass10 = strMap5.getClass();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        org.jomni.PropInfo propInfo13 = new org.jomni.PropInfo("", class1, (java.lang.Class) wildcardClass10, method11, method12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = propInfo13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jomniBuilderArray3);
        org.junit.Assert.assertNotNull(jomniBuilderSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertNotNull(jomniBuilderSet8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.util.Optional<java.lang.Class> classOptional6 = propInfo5.getGenericType();
        java.lang.reflect.Method method7 = propInfo5.getWriteMethod();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = null;
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair11 = org.jomni.util.Pair.newPair(jomniBuilderArray8, (java.lang.reflect.GenericDeclaration) wildcardClass10);
        org.jomni.MapperException.Error error12 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass13 = error12.getClass();
        org.jomni.MapperException mapperException14 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass13);
        org.jomni.JomniBuilder jomniBuilder15 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper16 = jomniBuilder15.build();
        org.jomni.JomniBuilder[] jomniBuilderArray17 = new org.jomni.JomniBuilder[] { jomniBuilder15 };
        java.util.HashSet<org.jomni.JomniBuilder> jomniBuilderSet18 = new java.util.HashSet<org.jomni.JomniBuilder>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet18, jomniBuilderArray17);
        org.jomni.util.Pair<java.lang.reflect.GenericDeclaration, java.util.HashSet<org.jomni.JomniBuilder>> genericDeclarationPair20 = org.jomni.util.Pair.newPair((java.lang.reflect.GenericDeclaration) wildcardClass13, jomniBuilderSet18);
        org.jomni.util.Pair<org.jomni.PropInfo, java.util.AbstractSet<org.jomni.JomniBuilder>> propInfoPair21 = org.jomni.util.Pair.newPair(propInfo5, (java.util.AbstractSet<org.jomni.JomniBuilder>) jomniBuilderSet18);
        java.lang.String str22 = propInfo5.getName();
        org.junit.Assert.assertNotNull(classOptional6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair11);
        org.junit.Assert.assertTrue("'" + error12 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error12.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mapperException14);
        org.junit.Assert.assertNotNull(jomniMapper16);
        org.junit.Assert.assertNotNull(jomniBuilderArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(genericDeclarationPair20);
        org.junit.Assert.assertNotNull(propInfoPair21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test232");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni39 = charSequenceOmni5.setAll((java.lang.Object) namesValues38);
        org.jomni.MapperException.Error error41 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass42 = error41.getClass();
        org.jomni.MapperException.Error error43 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass44 = error43.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        org.jomni.PropInfo propInfo47 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass42, (java.lang.Class) wildcardClass44, method45, method46);
        java.lang.reflect.Method method48 = propInfo47.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni49 = charSequenceOmni39.setAll((java.lang.Object) method48);
        java.lang.CharSequence charSequence50 = charSequenceOmni39.get();
        java.lang.Object obj52 = charSequenceOmni39.get("hi!");
        org.jomni.JomniBuilder jomniBuilder54 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray55 = new org.jomni.JomniBuilder[] { jomniBuilder54 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet56 = org.jomni.util.Maps.setOf(jomniBuilderArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap57 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray55);
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray55);
        java.util.Map map60 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray55);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni61 = charSequenceOmni39.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) map60);
        java.lang.Object obj63 = org.jomni.util.Maps.nestedValue(map60, "org.jomni.MapperException: Cannot find resolver for sourceClass [Lorg.jomni.JomniBuilder; to targetClass [Lorg.jomni.JomniBuilder;");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(charSequenceOmni39);
        org.junit.Assert.assertTrue("'" + error41 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error41.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + error43 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error43.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNull(method48);
        org.junit.Assert.assertNotNull(charSequenceOmni49);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(jomniBuilderArray55);
        org.junit.Assert.assertNotNull(jomniBuilderSet56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(map60);
        org.junit.Assert.assertNotNull(charSequenceOmni61);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray1 = new org.jomni.JomniBuilder[] { jomniBuilder0 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet2 = org.jomni.util.Maps.setOf(jomniBuilderArray1);
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray1);
        org.jomni.JomniBuilder jomniBuilder4 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray5 = new org.jomni.JomniBuilder[] { jomniBuilder4 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet6 = org.jomni.util.Maps.setOf(jomniBuilderArray5);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair7 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, jomniBuilderSet6);
        boolean boolean9 = strMapPair7.equals((java.lang.Object) (byte) -1);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper11 = jomniBuilder10.build();
        boolean boolean12 = strMapPair7.equals((java.lang.Object) jomniMapper11);
        org.jomni.JomniBuilder jomniBuilder13 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper14 = jomniBuilder13.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair16 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper14, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni18 = jomniMapper14.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder20 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper21 = jomniBuilder20.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair23 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper21, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni25 = jomniMapper21.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error27 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass28 = error27.getClass();
        org.jomni.MapperException.Error error29 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass30 = error29.getClass();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        org.jomni.PropInfo propInfo33 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass28, (java.lang.Class) wildcardClass30, method31, method32);
        java.lang.reflect.Method method34 = propInfo33.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni35 = charSequenceOmni25.setAll((java.lang.Object) method34);
        charSequenceOmni18.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni25);
        java.util.Map map37 = charSequenceOmni18.asMap();
        boolean boolean38 = strMapPair7.equals((java.lang.Object) charSequenceOmni18);
        java.lang.Class class40 = charSequenceOmni18.getType("");
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        org.jomni.MapperException.Error error44 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass45 = error44.getClass();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        org.jomni.PropInfo propInfo48 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass43, (java.lang.Class) wildcardClass45, method46, method47);
        java.lang.reflect.Method method49 = propInfo48.getWriteMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = charSequenceOmni18.setAll((java.lang.Object) method49);
        java.lang.CharSequence charSequence51 = charSequenceOmni50.get();
        java.lang.Class class53 = charSequenceOmni50.getType("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni56 = charSequenceOmni50.set("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) 10.0d);
        org.jomni.MapperException.Error error59 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass60 = error59.getClass();
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass60, (java.lang.Class) wildcardClass62, method63, method64);
        java.lang.reflect.Method method66 = propInfo65.getWriteMethod();
        java.lang.reflect.Method method67 = propInfo65.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni68 = charSequenceOmni50.set("hi!", (java.lang.Object) propInfo65);
        org.junit.Assert.assertNotNull(jomniBuilderArray1);
        org.junit.Assert.assertNotNull(jomniBuilderSet2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(jomniBuilderArray5);
        org.junit.Assert.assertNotNull(jomniBuilderSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jomniMapper11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jomniMapper14);
        org.junit.Assert.assertNotNull(charSequenceOmni18);
        org.junit.Assert.assertNotNull(jomniMapper21);
        org.junit.Assert.assertNotNull(charSequenceOmni25);
        org.junit.Assert.assertTrue("'" + error27 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error27.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + error29 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error29.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNull(method34);
        org.junit.Assert.assertNotNull(charSequenceOmni35);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(class40);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + error44 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error44.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(method49);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertNull(class53);
        org.junit.Assert.assertNotNull(charSequenceOmni56);
        org.junit.Assert.assertTrue("'" + error59 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error59.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(method66);
        org.junit.Assert.assertNull(method67);
        org.junit.Assert.assertNotNull(charSequenceOmni68);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test234");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        boolean boolean25 = charSequenceOmni5.containsKey("");
        java.util.Set<java.lang.String> strSet26 = charSequenceOmni5.keySet();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        org.jomni.PropInfo propInfo10 = classInfo8.getPropInfo("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.lang.String[] strArray11 = null;
        org.jomni.JomniBuilder jomniBuilder12 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray13 = new org.jomni.JomniBuilder[] { jomniBuilder12 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet14 = org.jomni.util.Maps.setOf(jomniBuilderArray13);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray13);
        java.util.Map map16 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray13);
        java.util.Map map17 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray13);
        org.jomni.util.Maps.NamesValues namesValues18 = new org.jomni.util.Maps.NamesValues(strArray11, (java.lang.Object[]) jomniBuilderArray13);
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        org.jomni.PropInfo propInfo27 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass22, (java.lang.Class) wildcardClass24, method25, method26);
        org.jomni.ClassInfo classInfo28 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass22);
        java.util.Set<java.lang.String> strSet29 = classInfo28.getPropertyNames();
        boolean boolean30 = classInfo8.setValue((java.lang.Object) jomniBuilderArray13, "", (java.lang.Object) strSet29);
        java.lang.Class class31 = classInfo8.getObjectClass();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(propInfo10);
        org.junit.Assert.assertNotNull(jomniBuilderArray13);
        org.junit.Assert.assertNotNull(jomniBuilderSet14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(map16);
        org.junit.Assert.assertNotNull(map17);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(class31);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        java.lang.Class class1 = null;
        java.lang.Class class2 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        org.jomni.PropInfo propInfo5 = new org.jomni.PropInfo("", class1, class2, method3, method4);
        java.lang.String str6 = propInfo5.getName();
        java.util.Optional<java.lang.Class> classOptional7 = propInfo5.getGenericType();
        java.lang.reflect.Method method8 = propInfo5.getReadMethod();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(classOptional7);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.MapperException.Error error3 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass4 = error3.getClass();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        org.jomni.PropInfo propInfo7 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass4, method5, method6);
        org.jomni.ClassInfo classInfo8 = new org.jomni.ClassInfo((java.lang.Class) wildcardClass2);
        java.util.Set<java.lang.String> strSet9 = classInfo8.getPropertyNames();
        java.util.Set<java.lang.String> strSet10 = classInfo8.getPropertyNames();
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + error3 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error3.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = jomniMapper1.asMap((java.lang.Object) (short) 1);
        org.jomni.Omni<java.lang.Number> numberOmni7 = jomniMapper1.omni((java.lang.Number) 0L);
        org.jomni.MapperException.Error error9 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass10 = error9.getClass();
        org.jomni.MapperException.Error error11 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass12 = error11.getClass();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        org.jomni.PropInfo propInfo15 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass10, (java.lang.Class) wildcardClass12, method13, method14);
        java.lang.reflect.Method method16 = propInfo15.getReadMethod();
        java.util.Map<java.lang.String, java.lang.Object> strMap17 = jomniMapper1.asMap((java.lang.Object) propInfo15);
        org.jomni.JomniBuilder jomniBuilder18 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper19 = jomniBuilder18.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap21 = jomniMapper19.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray22 = null;
        org.jomni.MapperException.Error error23 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass24 = error23.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair25 = org.jomni.util.Pair.newPair(jomniBuilderArray22, (java.lang.reflect.GenericDeclaration) wildcardClass24);
        org.jomni.ClassInfo classInfo26 = jomniMapper19.getClassInfo((java.lang.Class) wildcardClass24);
        org.jomni.JomniBuilder jomniBuilder27 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray28 = new org.jomni.JomniBuilder[] { jomniBuilder27 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet29 = org.jomni.util.Maps.setOf(jomniBuilderArray28);
        java.util.Map<java.lang.String, java.lang.Object> strMap30 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray28);
        org.jomni.JomniBuilder jomniBuilder31 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray32 = new org.jomni.JomniBuilder[] { jomniBuilder31 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet33 = org.jomni.util.Maps.setOf(jomniBuilderArray32);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair34 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap30, jomniBuilderSet33);
        java.lang.String str35 = strMapPair34.toString();
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet36 = strMapPair34.getB();
        java.lang.Object obj38 = classInfo26.getValue((java.lang.Object) jomniBuilderSet36, "");
        org.jomni.PropInfo propInfo40 = classInfo26.getPropInfo("hi!");
        java.lang.Class class41 = classInfo26.getObjectClass();
        java.util.Map<java.lang.String, java.lang.Object> strMap42 = jomniMapper1.asMap((java.lang.Object) class41);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni44 = jomniMapper1.omni((java.lang.CharSequence) "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(numberOmni7);
        org.junit.Assert.assertTrue("'" + error9 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error9.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + error11 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error11.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(jomniMapper19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + error23 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error23.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(jomniBuilderArray28);
        org.junit.Assert.assertNotNull(jomniBuilderSet29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(jomniBuilderArray32);
        org.junit.Assert.assertNotNull(jomniBuilderSet33);
        org.junit.Assert.assertNotNull(jomniBuilderSet36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(propInfo40);
        org.junit.Assert.assertNotNull(class41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(charSequenceOmni44);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test239");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap4 = org.jomni.util.Maps.asFlatMap(strMap3);
        org.jomni.JomniBuilder jomniBuilder5 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder6 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray7 = new org.jomni.JomniBuilder[] { jomniBuilder5, jomniBuilder6 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet8 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet8, jomniBuilderArray7);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair10 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap3, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet8);
        org.jomni.JomniBuilder jomniBuilder11 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper12 = jomniBuilder11.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = jomniMapper12.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = org.jomni.util.Maps.asFlatMap(strMap14);
        org.jomni.JomniBuilder jomniBuilder16 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder17 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray18 = new org.jomni.JomniBuilder[] { jomniBuilder16, jomniBuilder17 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet19 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet19, jomniBuilderArray18);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair21 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap14, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet19);
        java.util.LinkedHashSet[] linkedHashSetArray23 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<org.jomni.JomniBuilder>[] jomniBuilderSetArray24 = (java.util.LinkedHashSet<org.jomni.JomniBuilder>[]) linkedHashSetArray23;
        jomniBuilderSetArray24[0] = jomniBuilderSet8;
        jomniBuilderSetArray24[1] = jomniBuilderSet19;
        java.util.Set<java.util.LinkedHashSet<org.jomni.JomniBuilder>> jomniBuilderSetSet29 = org.jomni.util.Maps.setOf(jomniBuilderSetArray24);
        java.util.Map map30 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderSetArray24);
        org.jomni.util.Maps.NamesValues namesValues31 = org.jomni.util.Maps.namesValuesOf(map30);
        org.jomni.util.Maps.NamesValues namesValues32 = org.jomni.util.Maps.namesValuesOf(map30);
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper34 = jomniBuilder33.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = jomniMapper34.asMap((java.lang.Object) 0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap37 = org.jomni.util.Maps.asFlatMap(strMap36);
        org.jomni.JomniBuilder jomniBuilder38 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder jomniBuilder39 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray40 = new org.jomni.JomniBuilder[] { jomniBuilder38, jomniBuilder39 };
        java.util.LinkedHashSet<org.jomni.JomniBuilder> jomniBuilderSet41 = new java.util.LinkedHashSet<org.jomni.JomniBuilder>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.jomni.JomniBuilder>) jomniBuilderSet41, jomniBuilderArray40);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair43 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap36, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet41);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair44 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>((java.util.Map<java.lang.String, java.lang.Object>) map30, (java.util.Set<org.jomni.JomniBuilder>) jomniBuilderSet41);
        org.jomni.JomniBuilder jomniBuilder45 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper46 = jomniBuilder45.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair48 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper46, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni50 = jomniMapper46.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder52 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper53 = jomniBuilder52.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair55 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper53, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni57 = jomniMapper53.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error59 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass60 = error59.getClass();
        org.jomni.MapperException.Error error61 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass62 = error61.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        org.jomni.PropInfo propInfo65 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass60, (java.lang.Class) wildcardClass62, method63, method64);
        java.lang.reflect.Method method66 = propInfo65.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni67 = charSequenceOmni57.setAll((java.lang.Object) method66);
        charSequenceOmni50.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni57);
        java.util.Map map69 = charSequenceOmni50.asMap();
        boolean boolean70 = strMapPair44.equals((java.lang.Object) map69);
        java.util.Map<java.lang.String, java.lang.Object> strMap71 = strMapPair44.getA();
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(jomniBuilderArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jomniMapper12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(jomniBuilderArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(linkedHashSetArray23);
        org.junit.Assert.assertNotNull(jomniBuilderSetArray24);
        org.junit.Assert.assertNotNull(jomniBuilderSetSet29);
        org.junit.Assert.assertNotNull(map30);
        org.junit.Assert.assertNotNull(namesValues31);
        org.junit.Assert.assertNotNull(namesValues32);
        org.junit.Assert.assertNotNull(jomniMapper34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(jomniBuilderArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jomniMapper46);
        org.junit.Assert.assertNotNull(charSequenceOmni50);
        org.junit.Assert.assertNotNull(jomniMapper53);
        org.junit.Assert.assertNotNull(charSequenceOmni57);
        org.junit.Assert.assertTrue("'" + error59 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error59.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + error61 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error61.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(method66);
        org.junit.Assert.assertNotNull(charSequenceOmni67);
        org.junit.Assert.assertNotNull(map69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strMap71);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test240");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.JomniMapper jomniMapper2 = jomniBuilder0.build();
        org.jomni.Omni<java.lang.Comparable<java.lang.String>> strComparableOmni4 = jomniMapper2.omni((java.lang.Comparable<java.lang.String>) "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        org.jomni.JomniBuilder[] jomniBuilderArray6 = null;
        org.jomni.MapperException.Error error7 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass8 = error7.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair9 = org.jomni.util.Pair.newPair(jomniBuilderArray6, (java.lang.reflect.GenericDeclaration) wildcardClass8);
        org.jomni.JomniBuilder jomniBuilder10 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray11 = new org.jomni.JomniBuilder[] { jomniBuilder10 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet12 = org.jomni.util.Maps.setOf(jomniBuilderArray11);
        java.util.Map<java.lang.String, java.lang.Object> strMap13 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray11);
        org.jomni.JomniBuilder jomniBuilder14 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray15 = new org.jomni.JomniBuilder[] { jomniBuilder14 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet16 = org.jomni.util.Maps.setOf(jomniBuilderArray15);
        org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>> strMapPair17 = new org.jomni.util.Pair<java.util.Map<java.lang.String, java.lang.Object>, java.util.Set<org.jomni.JomniBuilder>>(strMap13, jomniBuilderSet16);
        java.lang.Class<?> wildcardClass18 = strMap13.getClass();
        org.jomni.MapperException mapperException19 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass8, (java.lang.Class) wildcardClass18);
        org.jomni.JomniBuilder[] jomniBuilderArray20 = null;
        org.jomni.MapperException.Error error21 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass22 = error21.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair23 = org.jomni.util.Pair.newPair(jomniBuilderArray20, (java.lang.reflect.GenericDeclaration) wildcardClass22);
        org.jomni.MapperException.Error error24 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass25 = error24.getClass();
        org.jomni.MapperException mapperException26 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass22, (java.lang.Class) wildcardClass25);
        org.jomni.MapperException.Error error28 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass29 = error28.getClass();
        org.jomni.MapperException.Error error30 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass31 = error30.getClass();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        org.jomni.PropInfo propInfo34 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass29, (java.lang.Class) wildcardClass31, method32, method33);
        org.jomni.MapperException mapperException35 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass25, (java.lang.Class) wildcardClass31);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        org.jomni.PropInfo propInfo38 = new org.jomni.PropInfo("", (java.lang.Class) wildcardClass18, (java.lang.Class) wildcardClass25, method36, method37);
        org.jomni.ClassInfo classInfo39 = jomniMapper2.getClassInfo((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(jomniMapper2);
        org.junit.Assert.assertNotNull(strComparableOmni4);
        org.junit.Assert.assertTrue("'" + error7 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error7.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair9);
        org.junit.Assert.assertNotNull(jomniBuilderArray11);
        org.junit.Assert.assertNotNull(jomniBuilderSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(jomniBuilderArray15);
        org.junit.Assert.assertNotNull(jomniBuilderSet16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(mapperException19);
        org.junit.Assert.assertTrue("'" + error21 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error21.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair23);
        org.junit.Assert.assertTrue("'" + error24 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error24.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(mapperException26);
        org.junit.Assert.assertTrue("'" + error28 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error28.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + error30 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error30.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(mapperException35);
        org.junit.Assert.assertNotNull(classInfo39);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test241");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        java.util.Map<java.lang.String, java.lang.Object> strMap3 = jomniMapper1.asMap((java.lang.Object) 0L);
        org.jomni.JomniBuilder[] jomniBuilderArray4 = null;
        org.jomni.MapperException.Error error5 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass6 = error5.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair7 = org.jomni.util.Pair.newPair(jomniBuilderArray4, (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.jomni.ClassInfo classInfo8 = jomniMapper1.getClassInfo((java.lang.Class) wildcardClass6);
        boolean boolean12 = classInfo8.setValue((java.lang.Object) 100.0d, "", (java.lang.Object) (-1.0d));
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.util.Optional<java.lang.Class> classOptional21 = propInfo20.getGenericType();
        java.util.Optional<java.lang.Class> classOptional22 = propInfo20.getGenericType();
        java.lang.Object obj24 = classInfo8.getValue((java.lang.Object) classOptional22, "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error");
        java.util.Set<java.lang.String> strSet25 = classInfo8.getPropertyNames();
        org.jomni.JomniBuilder jomniBuilder26 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper27 = jomniBuilder26.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair29 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper27, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni31 = jomniMapper27.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder33 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper34 = jomniBuilder33.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair36 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper34, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni38 = jomniMapper34.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error40 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass41 = error40.getClass();
        org.jomni.MapperException.Error error42 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass43 = error42.getClass();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        org.jomni.PropInfo propInfo46 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass41, (java.lang.Class) wildcardClass43, method44, method45);
        java.lang.reflect.Method method47 = propInfo46.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni48 = charSequenceOmni38.setAll((java.lang.Object) method47);
        charSequenceOmni31.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni38);
        java.util.Map map50 = charSequenceOmni31.asMap();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder58 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray59 = new org.jomni.JomniBuilder[] { jomniBuilder58 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet60 = org.jomni.util.Maps.setOf(jomniBuilderArray59);
        java.util.Map<java.lang.String, java.lang.Object> strMap61 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray59);
        java.util.Map<java.lang.String, java.lang.Object> strMap62 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray59);
        java.util.Map map63 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray59);
        org.jomni.util.Maps.NamesValues namesValues64 = new org.jomni.util.Maps.NamesValues(strArray57, (java.lang.Object[]) jomniBuilderArray59);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni65 = charSequenceOmni31.setAll((java.lang.Object) namesValues64);
        java.util.Map map66 = charSequenceOmni65.asMap();
        boolean boolean68 = charSequenceOmni65.containsKey("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass java.util.HashMap");
        java.lang.Object obj70 = classInfo8.getValue((java.lang.Object) charSequenceOmni65, "");
        java.lang.Class class72 = charSequenceOmni65.getType("");
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + error5 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error5.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classOptional21);
        org.junit.Assert.assertNotNull(classOptional22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(jomniMapper27);
        org.junit.Assert.assertNotNull(charSequenceOmni31);
        org.junit.Assert.assertNotNull(jomniMapper34);
        org.junit.Assert.assertNotNull(charSequenceOmni38);
        org.junit.Assert.assertTrue("'" + error40 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error40.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + error42 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error42.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(method47);
        org.junit.Assert.assertNotNull(charSequenceOmni48);
        org.junit.Assert.assertNotNull(map50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(jomniBuilderArray59);
        org.junit.Assert.assertNotNull(jomniBuilderSet60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(map63);
        org.junit.Assert.assertNotNull(charSequenceOmni65);
        org.junit.Assert.assertNotNull(map66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(class72);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        org.jomni.JomniBuilder[] jomniBuilderArray0 = null;
        org.jomni.MapperException.Error error1 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass2 = error1.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair3 = org.jomni.util.Pair.newPair(jomniBuilderArray0, (java.lang.reflect.GenericDeclaration) wildcardClass2);
        org.jomni.MapperException.Error error4 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass5 = error4.getClass();
        org.jomni.MapperException mapperException6 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass2, (java.lang.Class) wildcardClass5);
        org.jomni.MapperException.Error error8 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass9 = error8.getClass();
        org.jomni.MapperException.Error error10 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass11 = error10.getClass();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        org.jomni.PropInfo propInfo14 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass9, (java.lang.Class) wildcardClass11, method12, method13);
        org.jomni.MapperException mapperException15 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass5, (java.lang.Class) wildcardClass11);
        java.lang.Throwable[] throwableArray16 = mapperException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mapperException15.getSuppressed();
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) throwableArray17);
        org.junit.Assert.assertTrue("'" + error1 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error1.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair3);
        org.junit.Assert.assertTrue("'" + error4 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error4.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(mapperException6);
        org.junit.Assert.assertTrue("'" + error8 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error8.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + error10 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error10.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(mapperException15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test243");
        org.jomni.JomniBuilder jomniBuilder0 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper1 = jomniBuilder0.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair3 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper1, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni5 = jomniMapper1.omni((java.lang.CharSequence) "");
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniMapper jomniMapper8 = jomniBuilder7.build();
        org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>> jomniMapperPair10 = new org.jomni.util.Pair<org.jomni.JomniMapper, java.lang.Comparable<java.lang.String>>(jomniMapper8, (java.lang.Comparable<java.lang.String>) "");
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni12 = jomniMapper8.omni((java.lang.CharSequence) "");
        org.jomni.MapperException.Error error14 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass15 = error14.getClass();
        org.jomni.MapperException.Error error16 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass17 = error16.getClass();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        org.jomni.PropInfo propInfo20 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass15, (java.lang.Class) wildcardClass17, method18, method19);
        java.lang.reflect.Method method21 = propInfo20.getReadMethod();
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni22 = charSequenceOmni12.setAll((java.lang.Object) method21);
        charSequenceOmni5.put("org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", (java.lang.Object) charSequenceOmni12);
        java.util.Map map24 = charSequenceOmni5.asMap();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "hi!", "hi!", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "" };
        org.jomni.JomniBuilder jomniBuilder32 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray33 = new org.jomni.JomniBuilder[] { jomniBuilder32 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet34 = org.jomni.util.Maps.setOf(jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap35 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map<java.lang.String, java.lang.Object> strMap36 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray33);
        java.util.Map map37 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray33);
        org.jomni.util.Maps.NamesValues namesValues38 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray33);
        java.lang.String[] strArray45 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder46 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray47 = new org.jomni.JomniBuilder[] { jomniBuilder46 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet48 = org.jomni.util.Maps.setOf(jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap49 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap50 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map<java.lang.String, java.lang.Object> strMap51 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray47);
        java.util.Map map52 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues53 = new org.jomni.util.Maps.NamesValues(strArray45, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.util.Maps.NamesValues namesValues54 = new org.jomni.util.Maps.NamesValues(strArray31, (java.lang.Object[]) jomniBuilderArray47);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni55 = charSequenceOmni5.setAll((java.lang.Object) jomniBuilderArray47);
        org.jomni.JomniBuilder[] jomniBuilderArray56 = null;
        org.jomni.MapperException.Error error57 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass58 = error57.getClass();
        org.jomni.util.Pair<org.jomni.JomniBuilder[], java.lang.reflect.GenericDeclaration> jomniBuilderArrayPair59 = org.jomni.util.Pair.newPair(jomniBuilderArray56, (java.lang.reflect.GenericDeclaration) wildcardClass58);
        org.jomni.MapperException.Error error60 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass61 = error60.getClass();
        org.jomni.MapperException mapperException62 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass58, (java.lang.Class) wildcardClass61);
        org.jomni.MapperException.Error error64 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass65 = error64.getClass();
        org.jomni.MapperException.Error error66 = org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER;
        java.lang.Class<?> wildcardClass67 = error66.getClass();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        org.jomni.PropInfo propInfo70 = new org.jomni.PropInfo("hi!", (java.lang.Class) wildcardClass65, (java.lang.Class) wildcardClass67, method68, method69);
        org.jomni.MapperException mapperException71 = org.jomni.MapperException.noResolverFoundFor((java.lang.Class) wildcardClass61, (java.lang.Class) wildcardClass67);
        java.lang.Throwable[] throwableArray72 = mapperException71.getSuppressed();
        java.util.Map<java.lang.String, java.lang.Object> strMap73 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) throwableArray72);
        java.util.Map<java.lang.String, java.lang.Object> strMap74 = org.jomni.util.Maps.asFlatMap(strMap73);
        org.jomni.util.Maps.NamesValues namesValues75 = org.jomni.util.Maps.namesValuesOf((java.util.Map) strMap74);
        org.jomni.Omni<java.lang.CharSequence> charSequenceOmni76 = charSequenceOmni55.setAll((java.lang.Object) strMap74);
        org.junit.Assert.assertNotNull(jomniMapper1);
        org.junit.Assert.assertNotNull(charSequenceOmni5);
        org.junit.Assert.assertNotNull(jomniMapper8);
        org.junit.Assert.assertNotNull(charSequenceOmni12);
        org.junit.Assert.assertTrue("'" + error14 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error14.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + error16 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error16.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(method21);
        org.junit.Assert.assertNotNull(charSequenceOmni22);
        org.junit.Assert.assertNotNull(map24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(jomniBuilderArray33);
        org.junit.Assert.assertNotNull(jomniBuilderSet34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(map37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(jomniBuilderArray47);
        org.junit.Assert.assertNotNull(jomniBuilderSet48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(map52);
        org.junit.Assert.assertNotNull(charSequenceOmni55);
        org.junit.Assert.assertTrue("'" + error57 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error57.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(jomniBuilderArrayPair59);
        org.junit.Assert.assertTrue("'" + error60 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error60.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(mapperException62);
        org.junit.Assert.assertTrue("'" + error64 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error64.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + error66 + "' != '" + org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER + "'", error66.equals(org.jomni.MapperException.Error.CANNOT_FIND_RESOLVER));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(mapperException71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(namesValues75);
        org.junit.Assert.assertNotNull(charSequenceOmni76);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test244");
        java.lang.Number number0 = null;
        java.math.BigDecimal bigDecimal1 = org.jomni.ExtraConverters.toBigDecimal(number0);
        org.junit.Assert.assertNull(bigDecimal1);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        java.lang.String[] strArray6 = new java.lang.String[] { "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "org.jomni.MapperException: Cannot find resolver for sourceClass org.jomni.MapperException$Error to targetClass org.jomni.MapperException$Error", "hi!", "hi!", "hi!", "" };
        org.jomni.JomniBuilder jomniBuilder7 = new org.jomni.JomniBuilder();
        org.jomni.JomniBuilder[] jomniBuilderArray8 = new org.jomni.JomniBuilder[] { jomniBuilder7 };
        java.util.Set<org.jomni.JomniBuilder> jomniBuilderSet9 = org.jomni.util.Maps.setOf(jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = org.jomni.util.Maps.propMapOf((java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map13 = org.jomni.util.Maps.mapOf((java.lang.Object[]) jomniBuilderArray8);
        org.jomni.util.Maps.NamesValues namesValues14 = new org.jomni.util.Maps.NamesValues(strArray6, (java.lang.Object[]) jomniBuilderArray8);
        java.util.Map map15 = org.jomni.util.Maps.mapOf((java.lang.Object[]) strArray6);
        org.jomni.util.Maps.NamesValues namesValues16 = org.jomni.util.Maps.namesValuesOf(map15);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(jomniBuilderArray8);
        org.junit.Assert.assertNotNull(jomniBuilderSet9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(map13);
        org.junit.Assert.assertNotNull(map15);
        org.junit.Assert.assertNotNull(namesValues16);
    }
}

