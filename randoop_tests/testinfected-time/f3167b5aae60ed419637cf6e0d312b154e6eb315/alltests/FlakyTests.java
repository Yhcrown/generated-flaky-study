import org.junit.FixMethodOrder;

import org.junit.Test;

import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)

public class FlakyTests{
    public static boolean debug = false;


    public void test012_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor9 = null;
        daytimeServer8.removeMonitor(serverMonitor9);
         daytimeServer8.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test025_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        org.testinfected.time.DaytimeServer daytimeServer1 = new org.testinfected.time.DaytimeServer((int) (byte) 1);
         daytimeServer1.start();
    }

    public void test032_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test032_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
// flaky:         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test032_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
// flaky:         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test032_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
// flaky:         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test032_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
// flaky:         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test036_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test036_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test036_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test036_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test036_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test037_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test037");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeClient daytimeClient10 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect3);
        org.testinfected.time.DaytimeServer daytimeServer11 = new org.testinfected.time.DaytimeServer(100, daytimeDialect3);
        org.testinfected.time.ServerMonitor serverMonitor12 = null;
        daytimeServer11.removeMonitor(serverMonitor12);
         daytimeServer11.start();
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test040_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar(10, (int) (short) 0, 100);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder3.inZone("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        java.lang.Class<?> wildcardClass10 = dateBuilder3.getClass();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
        org.junit.Assert.assertNotNull(dateBuilder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test050_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        org.testinfected.time.Clock clock12 = org.testinfected.time.lib.BrokenClock.stoppedAt(date11);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(clock12);
    }

    public void test053_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test053_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test053_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test053_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test053_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test054_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test054_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test054_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test054_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test054_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test054_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test056_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        java.util.Date date3 = dateBuilder2.build();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Oct 30 19:00:00 CDT 2023");
    }

    public void test059_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test059_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test059_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test059_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test059_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test059_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test070_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder0.atTime((int) (byte) 10, (int) '4', (int) ' ', 100);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder4);
        org.junit.Assert.assertNotNull(dateBuilder9);
    }

    public void test071_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test071_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test071_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test071_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test071_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test071_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test082_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *", 0, daytimeDialect2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = daytimeClient14.now();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.NoRouteToHostException: Can't assign requested address (Address not available)");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test082_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *", 0, daytimeDialect2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = daytimeClient14.now();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.NoRouteToHostException: Can't assign requested address (Address not available)");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test082_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *", 0, daytimeDialect2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = daytimeClient14.now();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.NoRouteToHostException: Can't assign requested address (Address not available)");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test082_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *", 0, daytimeDialect2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = daytimeClient14.now();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.NoRouteToHostException: Can't assign requested address (Address not available)");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:00 CDT 2023");
         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test084_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test084_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test084_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test092_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test092_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test092_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test092_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test092_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test093_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.ServerMonitor serverMonitor48 = null;
        daytimeServer8.addMonitor(serverMonitor48);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
    }

    public void test093_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.ServerMonitor serverMonitor48 = null;
        daytimeServer8.addMonitor(serverMonitor48);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
    }

    public void test093_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.ServerMonitor serverMonitor48 = null;
        daytimeServer8.addMonitor(serverMonitor48);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
    }

    public void test094_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.addMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test094_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.addMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test094_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.addMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test097_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.removeMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test097_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.removeMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test097_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.removeMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test103_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test103_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test103_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test103_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test103_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test104_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer8.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test104_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer8.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test104_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer8.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test106_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeDialect daytimeDialect9 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect9.encode(date11);
        org.testinfected.time.Clock clock13 = org.testinfected.time.lib.BrokenClock.stoppedAt(date11);
        java.lang.String str14 = daytimeDialect2.encode(date11);
        org.testinfected.time.DaytimeClient daytimeClient15 = new org.testinfected.time.DaytimeClient("", (int) (byte) 100, daytimeDialect2);
        java.util.Date date16 = daytimeClient15.now();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test110_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.lang.Class<?> wildcardClass5 = date4.getClass();
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test110_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.lang.Class<?> wildcardClass5 = date4.getClass();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test110_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.lang.Class<?> wildcardClass5 = date4.getClass();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test110_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.lang.Class<?> wildcardClass5 = date4.getClass();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test121_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test121_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test121_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test121_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test121_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test122_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder6.onCalendar((int) 'a', (int) (short) 10, 0);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
    }

    public void test123_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeClient daytimeClient5 = new org.testinfected.time.DaytimeClient("", (int) '4', daytimeDialect3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = daytimeClient5.now();
             org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.ConnectException: Connection refused (Connection refused)");
        }

    public void test125_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test125_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test125_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test125_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test125_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test134_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar((int) (byte) 10, (int) (short) 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
    }

    public void test138_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:04 CDT 2023");
    }

    public void test138_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:04 CDT 2023");
    }

    public void test138_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:04 CDT 2023");
    }

    public void test140_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar(0, (int) (short) 1, 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
    }

    public void test150_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.lib.SystemClock systemClock41 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date42 = systemClock41.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock41);
        org.testinfected.time.ServerMonitor serverMonitor44 = null;
        daytimeServer8.addMonitor(serverMonitor44);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date42);
         org.junit.Assert.assertEquals(date42.toString(), "Tue Oct 31 18:38:09 CDT 2023");
    }

    public void test154_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.testinfected.time.DaytimeDialect daytimeDialect0 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder1 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date2 = dateBuilder1.build();
        java.lang.String str3 = daytimeDialect0.encode(date2);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect0.encode(date5);
        org.testinfected.time.lib.SystemClock systemClock7 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date8 = systemClock7.now();
        java.util.Date date9 = systemClock7.now();
        java.util.Date date10 = systemClock7.now();
        java.lang.String str11 = daytimeDialect0.encode(date10);
        java.util.Date date13 = daytimeDialect0.decode("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect0);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str3, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:10 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:48 CDT 2023");
    }

    public void test154_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.testinfected.time.DaytimeDialect daytimeDialect0 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder1 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date2 = dateBuilder1.build();
        java.lang.String str3 = daytimeDialect0.encode(date2);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect0.encode(date5);
        org.testinfected.time.lib.SystemClock systemClock7 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date8 = systemClock7.now();
        java.util.Date date9 = systemClock7.now();
        java.util.Date date10 = systemClock7.now();
        java.lang.String str11 = daytimeDialect0.encode(date10);
        java.util.Date date13 = daytimeDialect0.decode("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect0);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str3, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:10 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:48 CDT 2023");
    }

    public void test154_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.testinfected.time.DaytimeDialect daytimeDialect0 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder1 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date2 = dateBuilder1.build();
        java.lang.String str3 = daytimeDialect0.encode(date2);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect0.encode(date5);
        org.testinfected.time.lib.SystemClock systemClock7 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date8 = systemClock7.now();
        java.util.Date date9 = systemClock7.now();
        java.util.Date date10 = systemClock7.now();
        java.lang.String str11 = daytimeDialect0.encode(date10);
        java.util.Date date13 = daytimeDialect0.decode("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect0);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str3, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:10 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:48 CDT 2023");
    }

    public void test154_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.testinfected.time.DaytimeDialect daytimeDialect0 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder1 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date2 = dateBuilder1.build();
        java.lang.String str3 = daytimeDialect0.encode(date2);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect0.encode(date5);
        org.testinfected.time.lib.SystemClock systemClock7 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date8 = systemClock7.now();
        java.util.Date date9 = systemClock7.now();
        java.util.Date date10 = systemClock7.now();
        java.lang.String str11 = daytimeDialect0.encode(date10);
        java.util.Date date13 = daytimeDialect0.decode("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect0);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str3, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:10 CDT 2023");
         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:48 CDT 2023");
    }

    public void test163_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder13 = dateBuilder6.at((int) (short) 0, (-1), (-1), (-1), 10, (int) '4');
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder13);
    }

    public void test164_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar(10, (int) (short) 0, 100);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder3.inZone("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.testinfected.time.lib.DateBuilder dateBuilder13 = dateBuilder9.atTime((int) '#', (int) '#', 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
        org.junit.Assert.assertNotNull(dateBuilder9);
        org.junit.Assert.assertNotNull(dateBuilder13);
    }

    public void test169_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test169_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test169_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test169_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test169_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test171_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test171_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test171_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test171_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test171_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test176_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar((int) (short) 10, (int) (byte) 1, (int) '4');
        org.testinfected.time.lib.DateBuilder dateBuilder12 = dateBuilder10.inZone("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:20 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
        org.junit.Assert.assertNotNull(dateBuilder12);
    }

    public void test178_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        org.testinfected.time.ServerMonitor serverMonitor51 = null;
        daytimeServer4.addMonitor(serverMonitor51);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:20 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:20 CDT 2023");
    }

    public void test178_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        org.testinfected.time.ServerMonitor serverMonitor51 = null;
        daytimeServer4.addMonitor(serverMonitor51);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:20 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:20 CDT 2023");
    }

    public void test179_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        java.util.Date date8 = daytimeDialect1.decode("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:37:52 CDT 2023");
    }

    public void test179_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        java.util.Date date8 = daytimeDialect1.decode("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:37:52 CDT 2023");
    }

    public void test179_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        java.util.Date date8 = daytimeDialect1.decode("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:37:52 CDT 2023");
    }

    public void test182_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        org.testinfected.time.Clock clock7 = org.testinfected.time.lib.BrokenClock.stoppedAt(date5);
        java.util.Date date8 = clock7.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test182_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        org.testinfected.time.Clock clock7 = org.testinfected.time.lib.BrokenClock.stoppedAt(date5);
        java.util.Date date8 = clock7.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test182_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        org.testinfected.time.Clock clock7 = org.testinfected.time.lib.BrokenClock.stoppedAt(date5);
        java.util.Date date8 = clock7.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test182_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        org.testinfected.time.Clock clock7 = org.testinfected.time.lib.BrokenClock.stoppedAt(date5);
        java.util.Date date8 = clock7.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(date8);
         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test183_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        java.lang.String str19 = daytimeDialect2.encode(date17);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect21);
        org.testinfected.time.lib.SystemClock systemClock23 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date24 = systemClock23.now();
        java.util.Date date25 = systemClock23.now();
        java.lang.String str26 = daytimeDialect21.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        org.testinfected.time.Clock clock28 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.lang.String str29 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date24);
         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(clock28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test183_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        java.lang.String str19 = daytimeDialect2.encode(date17);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect21);
        org.testinfected.time.lib.SystemClock systemClock23 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date24 = systemClock23.now();
        java.util.Date date25 = systemClock23.now();
        java.lang.String str26 = daytimeDialect21.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        org.testinfected.time.Clock clock28 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.lang.String str29 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(clock28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test183_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        java.lang.String str19 = daytimeDialect2.encode(date17);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect21);
        org.testinfected.time.lib.SystemClock systemClock23 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date24 = systemClock23.now();
        java.util.Date date25 = systemClock23.now();
        java.lang.String str26 = daytimeDialect21.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        org.testinfected.time.Clock clock28 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.lang.String str29 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:21 CDT 2023");
         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(clock28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test183_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        java.lang.String str19 = daytimeDialect2.encode(date17);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect21);
        org.testinfected.time.lib.SystemClock systemClock23 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date24 = systemClock23.now();
        java.util.Date date25 = systemClock23.now();
        java.lang.String str26 = daytimeDialect21.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        org.testinfected.time.Clock clock28 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.lang.String str29 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(clock28);
         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test184_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect10 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder11 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date12 = dateBuilder11.build();
        java.lang.String str13 = daytimeDialect10.encode(date12);
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect10.encode(date15);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect10);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect20);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient27);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeServer daytimeServer37 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect30);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeClient daytimeClient47 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect40);
        daytimeServer37.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        org.testinfected.time.DaytimeDialect daytimeDialect51 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder52 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date53 = dateBuilder52.build();
        java.lang.String str54 = daytimeDialect51.encode(date53);
        org.testinfected.time.lib.DateBuilder dateBuilder55 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date56 = dateBuilder55.build();
        java.lang.String str57 = daytimeDialect51.encode(date56);
        org.testinfected.time.DaytimeServer daytimeServer58 = new org.testinfected.time.DaytimeServer(0, daytimeDialect51);
        org.testinfected.time.lib.SystemClock systemClock59 = new org.testinfected.time.lib.SystemClock();
        daytimeServer58.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) systemClock59);
        java.util.Date date62 = systemClock59.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer8.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect51);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str54, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str57, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date62);
         org.junit.Assert.assertEquals(date62.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test189_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test189_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test189_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test189_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test189_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test189_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test190_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
         daytimeServer4.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
    }

    public void test202_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor14 = null;
        daytimeServer13.removeMonitor(serverMonitor14);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test202_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor14 = null;
        daytimeServer13.removeMonitor(serverMonitor14);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test202_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor14 = null;
        daytimeServer13.removeMonitor(serverMonitor14);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test202_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor14 = null;
        daytimeServer13.removeMonitor(serverMonitor14);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test206_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.atTime((int) (short) 10, (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
    }

    public void test207_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
    }

    public void test207_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
    }

    public void test208_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_7() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_8() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test208_9() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test213_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeServer daytimeServer20 = new org.testinfected.time.DaytimeServer(0, daytimeDialect13);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        daytimeServer20.setInternalClock((org.testinfected.time.Clock) systemClock21);
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.util.Date date25 = systemClock21.now();
        java.lang.String str26 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test213_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeServer daytimeServer20 = new org.testinfected.time.DaytimeServer(0, daytimeDialect13);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        daytimeServer20.setInternalClock((org.testinfected.time.Clock) systemClock21);
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.util.Date date25 = systemClock21.now();
        java.lang.String str26 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test213_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeServer daytimeServer20 = new org.testinfected.time.DaytimeServer(0, daytimeDialect13);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        daytimeServer20.setInternalClock((org.testinfected.time.Clock) systemClock21);
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.util.Date date25 = systemClock21.now();
        java.lang.String str26 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test213_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeServer daytimeServer20 = new org.testinfected.time.DaytimeServer(0, daytimeDialect13);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        daytimeServer20.setInternalClock((org.testinfected.time.Clock) systemClock21);
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.util.Date date25 = systemClock21.now();
        java.lang.String str26 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:27 CDT 2023");
         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test217_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.atTime((int) 'a', 0, (int) 'a');
        java.util.TimeZone timeZone7 = null;
        org.testinfected.time.lib.DateBuilder dateBuilder8 = dateBuilder6.in(timeZone7);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder8);
    }

    public void test224_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        org.testinfected.time.DaytimeServer daytimeServer1 = new org.testinfected.time.DaytimeServer((int) (byte) 0);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer(0, daytimeDialect3);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        daytimeServer10.setInternalClock((org.testinfected.time.Clock) systemClock11);
        java.util.Date date13 = systemClock11.now();
        daytimeServer1.setInternalClock((org.testinfected.time.Clock) systemClock11);
        org.testinfected.time.ServerMonitor serverMonitor15 = null;
        daytimeServer1.addMonitor(serverMonitor15);
        org.testinfected.time.ServerMonitor serverMonitor17 = null;
        daytimeServer1.addMonitor(serverMonitor17);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:27 CDT 2023");
    }

    public void test231_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = dateBuilder6.inZone("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        java.util.Date date9 = dateBuilder6.build();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Sep 29 18:00:00 CST 1");
    }

    public void test233_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test233_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test233_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test233_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test233_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test233_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test238_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.util.Date date13 = systemClock9.now();
        org.testinfected.time.Clock clock14 = org.testinfected.time.lib.BrokenClock.stoppedAt(date13);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock14);
    }

    public void test238_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.util.Date date13 = systemClock9.now();
        org.testinfected.time.Clock clock14 = org.testinfected.time.lib.BrokenClock.stoppedAt(date13);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock14);
    }

    public void test238_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.util.Date date13 = systemClock9.now();
        org.testinfected.time.Clock clock14 = org.testinfected.time.lib.BrokenClock.stoppedAt(date13);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock14);
    }

    public void test247_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_7() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test247_8() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test250_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar((int) (short) 10, (int) (byte) 1, (int) '4');
        org.testinfected.time.lib.DateBuilder dateBuilder12 = dateBuilder10.fromMillis((long) (byte) 0);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:29 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
        org.junit.Assert.assertNotNull(dateBuilder12);
    }

    public void test253_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        org.testinfected.time.Clock clock54 = org.testinfected.time.lib.BrokenClock.stoppedAt(date53);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:34 CDT 2023");
        org.junit.Assert.assertNotNull(clock54);
    }

    public void test257_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer4.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:39 CDT 2023");
    }

    public void test257_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer4.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:39 CDT 2023");
    }

    public void test259_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect10 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder11 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date12 = dateBuilder11.build();
        java.lang.String str13 = daytimeDialect10.encode(date12);
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect10.encode(date15);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect10);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect20);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient27);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeServer daytimeServer37 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect30);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeClient daytimeClient47 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect40);
        daytimeServer37.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        org.testinfected.time.DaytimeDialect daytimeDialect51 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder52 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date53 = dateBuilder52.build();
        java.lang.String str54 = daytimeDialect51.encode(date53);
        org.testinfected.time.lib.DateBuilder dateBuilder55 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date56 = dateBuilder55.build();
        java.lang.String str57 = daytimeDialect51.encode(date56);
        org.testinfected.time.DaytimeServer daytimeServer58 = new org.testinfected.time.DaytimeServer(0, daytimeDialect51);
        org.testinfected.time.lib.SystemClock systemClock59 = new org.testinfected.time.lib.SystemClock();
        daytimeServer58.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) systemClock59);
        java.util.Date date62 = systemClock59.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock59);
        org.testinfected.time.ServerMonitor serverMonitor64 = null;
        daytimeServer8.addMonitor(serverMonitor64);
        org.testinfected.time.ServerMonitor serverMonitor66 = null;
        daytimeServer8.addMonitor(serverMonitor66);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect51);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str54, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str57, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date62);
         org.junit.Assert.assertEquals(date62.toString(), "Tue Oct 31 18:38:39 CDT 2023");
    }

    public void test261_1() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }

    public void test261_2() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }

    public void test261_3() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }

    public void test261_4() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }

    public void test261_5() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }

    public void test261_6() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }
}