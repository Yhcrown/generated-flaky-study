[TIME]: 0:00:25.745268
Randoop for Java version "4.3.2, local changes, branch master, commit df17bc8, 2023-01-08".

Will try to generate tests for 102 classes.
PUBLIC MEMBERS=663
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    sideEffectFreeMethods: 1115, runtimePrimitivesSeen: 38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2023-11-20T09:01:12.201Z     53.4M used)
Progress update: steps=1000, test inputs generated=471, failing inputs=0      (2023-11-20T09:01:26.309Z     654M used)
Progress update: steps=1063, test inputs generated=520, failing inputs=0      (2023-11-20T09:01:30.553Z     1.42G used)
Normal method executions: 352338
Exceptional method executions: 26

Average method execution time (normal termination):      0.0350
Average method execution time (exceptional termination): 0.186
Approximate memory usage 1.42G
Explorer = ForwardGenerator(steps: 1063, null steps: 543, num_sequences_generated: 520;
    allSequences: 520, regresson seqs: 500, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 20;
    sideEffectFreeMethods: 1115, runtimePrimitivesSeen: 518)

No error-revealing tests to output.

About to look for failing assertions in 269 regression sequences.

Regression test output:
Regression test count: 269
Writing regression JUnit tests...
Created file /Users/yhcrown/Documents/GitHub/generated-flaky-study/randoop_tests/DiUS-java-faker/a8b8ff0acc6fcc629d08a3a9952f83be56a9a3c3/alltests/TestGroup100Case0.java
Created file /Users/yhcrown/Documents/GitHub/generated-flaky-study/randoop_tests/DiUS-java-faker/a8b8ff0acc6fcc629d08a3a9952f83be56a9a3c3/alltests/TestGroup100Case.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  java.util.Collections.addAll(java.util.Collection<java.lang.String>,java.lang.String[])
  Possibly flaky:  java.util.Arrays.toString(byte[])
  Possibly flaky:  java.lang.String.valueOf(long)
  Possibly flaky:  java.lang.String.valueOf(int)
  Possibly flaky:  java.lang.Long.valueOf(long)
  Possibly flaky:  java.lang.Long.toString(long)
  Possibly flaky:  java.lang.Long.toOctalString(long)
  Possibly flaky:  java.lang.Long.toHexString(long)
  Possibly flaky:  java.lang.Long.toBinaryString(long)
  Possibly flaky:  java.lang.Integer.valueOf(int)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Uncompilable sequences generated (count: 19).
Please report uncompilable sequences at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .
