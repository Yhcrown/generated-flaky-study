[TIME]: 0:01:04.870172
Randoop for Java version "4.3.2, local changes, branch master, commit df17bc8, 2023-01-08".

Will try to generate tests for 37 classes.
PUBLIC MEMBERS=142
Explorer = ForwardGenerator(steps: 0, null steps: 0, num_sequences_generated: 0;
    allSequences: 0, regresson seqs: 0, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 0;
    sideEffectFreeMethods: 1115, runtimePrimitivesSeen: 38)

Progress update: steps=1, test inputs generated=0, failing inputs=0      (2023-11-20T08:33:44.870Z     35.4M used)
Progress update: steps=531, test inputs generated=336, failing inputs=0      (2023-11-20T08:34:44.884Z     45.2M used)
Progress update: steps=531, test inputs generated=337, failing inputs=0      (2023-11-20T08:34:45.004Z     72.3M used)
Normal method executions: 736657
Exceptional method executions: 77

Average method execution time (normal termination):      0.0315
Average method execution time (exceptional termination): 0.858
Approximate memory usage 72.3M
Explorer = ForwardGenerator(steps: 531, null steps: 194, num_sequences_generated: 337;
    allSequences: 337, regresson seqs: 310, error seqs: 0=0=0, invalid seqs: 0, subsumed_sequences: 0, num_failed_output_test: 27;
    sideEffectFreeMethods: 1115, runtimePrimitivesSeen: 51)

No error-revealing tests to output.

About to look for failing assertions in 153 regression sequences.

Regression test output:
Regression test count: 153
Writing regression JUnit tests...
Created file /Users/yhcrown/Documents/GitHub/generated-flaky-study/randoop_tests/goldolphin-cate/1a04b8191892147d033983a580ba57aef3ded7ff/alltests/TestGroup100Case0.java
Created file /Users/yhcrown/Documents/GitHub/generated-flaky-study/randoop_tests/goldolphin-cate/1a04b8191892147d033983a580ba57aef3ded7ff/alltests/TestGroup100Case.java
Wrote regression JUnit tests.
About to look for flaky methods.

Flaky tests were generated. This means that your program contains
methods that are nondeterministic or depend on non-local state.
The following methods, in decreasing order of likelihood,
are the most likely to be the problem.
  Possibly flaky:  net.goldolphin.cate.IStore.contains(net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit,net.goldolphin.cate.Unit>>>)
  Possibly flaky:  net.goldolphin.cate.partitioned.HashedPartitioner.partition(net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler,net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence,java.io.Serializable>>,int)
  Possibly flaky:  net.goldolphin.cate.partitioned.HashedPartitioner.instance()
  Possibly flaky:  net.goldolphin.cate.partitioned.IPartitioner.partition(net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler,net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence,java.io.Serializable>>,int)
  Possibly flaky:  net.goldolphin.cate.partitioned.PartitionedStore.put(net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit,net.goldolphin.cate.Unit>>>,net.goldolphin.cate.IScheduler)
  Possibly flaky:  java.lang.String.valueOf(int)
  Possibly flaky:  java.lang.Integer.valueOf(int)
  Possibly flaky:  java.lang.Integer.toString(int)
  Possibly flaky:  java.lang.Integer.toOctalString(int)
  Possibly flaky:  java.lang.Integer.toHexString(int)
To prevent the generation of flaky tests, see section 'Randoop generated flaky tests'
 at https://randoop.github.io/randoop/manual/#flaky-tests .


Invalid tests generated: 0

Uncompilable sequences generated (count: 14).
Please report uncompilable sequences at https://github.com/randoop/randoop/issues ,
providing the information requested at https://randoop.github.io/randoop/manual/index.html#bug-reporting .
