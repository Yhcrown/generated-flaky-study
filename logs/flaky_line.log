fabric8io-zjsonpatch, length: 87

    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        java.lang.String str15 = jsonPatchApplicationException12.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1347819518 + "'", int9 == 1347819518);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2049555381 + "'", int13 == 2049555381);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2049555381 + "'", int14 == 2049555381);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str15, "io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test021");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        java.lang.Class<?> wildcardClass17 = jsonPatchApplicationException14.getClass();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 327715875 + "'", int9 == 327715875);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 476901113 + "'", int15 == 476901113);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException15 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.String str16 = jsonPatchApplicationException12.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1522751537 + "'", int9 == 1522751537);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1599034247 + "'", int13 == 1599034247);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1599034247 + "'", int14 == 1599034247);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str16, "io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test034");
        com.fasterxml.jackson.databind.JsonNode jsonNode0 = null;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags1 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags2 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor4 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        noopProcessor4.remove((java.util.List<java.lang.String>) strList8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator11 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException16);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript23 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand24 = null;
        serializableEditScript23.append(serializableKeepCommand24);
        java.lang.Object[] objArray26 = new java.lang.Object[] { noopProcessor4, int20, true, 100.0f, serializableEditScript23 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags27 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags2, "", objArray26);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags28 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor30 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        noopProcessor30.remove((java.util.List<java.lang.String>) strList34);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator37 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException44 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator37.hash(jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript49 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand50 = null;
        serializableEditScript49.append(serializableKeepCommand50);
        java.lang.Object[] objArray52 = new java.lang.Object[] { noopProcessor30, int46, true, 100.0f, serializableEditScript49 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags53 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags28, "", objArray52);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsInsertCommand54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags53);
        io.fabric8.zjsonpatch.CompatibilityFlags[] compatibilityFlagsArray55 = new io.fabric8.zjsonpatch.CompatibilityFlags[] { compatibilityFlags1, compatibilityFlags2, compatibilityFlags53 };
        java.util.EnumSet<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsSet57 = java.util.EnumSet.noneOf(io.fabric8.zjsonpatch.CompatibilityFlags.class);
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<io.fabric8.zjsonpatch.CompatibilityFlags>) compatibilityFlagsSet57, compatibilityFlagsArray55);
        // The following exception was thrown during execution in test generation
        try {
            io.fabric8.zjsonpatch.JsonPatch.validate(jsonNode0, compatibilityFlagsSet57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + compatibilityFlags1 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags1.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags2 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags2.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator11);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1588662624 + "'", int20 == 1588662624);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertTrue("'" + compatibilityFlags27 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags27.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags28 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags28.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator37);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1811383524 + "'", int46 == 1811383524);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + compatibilityFlags53 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags53.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(compatibilityFlagsArray55);
        org.junit.Assert.assertNotNull(compatibilityFlagsSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        int int8 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        jsonPatchApplicationException11.addSuppressed((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator19 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        int int22 = jsonPatchApplicationExceptionDefaultEquator19.hash(jsonPatchApplicationException21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException24 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException21);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException28.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException24, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        jsonPatchApplicationException35.addSuppressed((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException40 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException41);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator43 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        jsonPatchApplicationException45.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException50 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException50);
        int int52 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator53 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator53.hash(jsonPatchApplicationException55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException58 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException55);
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException60);
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        jsonPatchApplicationException60.addSuppressed((java.lang.Throwable) jsonPatchApplicationException63);
        boolean boolean65 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException55, jsonPatchApplicationException63);
        int int66 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException55);
        java.lang.String str67 = jsonPatchApplicationException55.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 811003950 + "'", int8 == 811003950);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 426226554 + "'", int18 == 426226554);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1814011141 + "'", int22 == 1814011141);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1814011141 + "'", int23 == 1814011141);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1205441224 + "'", int42 == 1205441224);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator43);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 143595372 + "'", int52 == 143595372);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator53);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 280580631 + "'", int56 == 280580631);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 280580631 + "'", int57 == 280580631);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 280580631 + "'", int66 == 280580631);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str67, "io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        com.fasterxml.jackson.databind.JsonNode jsonNode0 = null;
        com.fasterxml.jackson.databind.JsonNode jsonNode1 = null;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags2 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags3 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor5 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        noopProcessor5.remove((java.util.List<java.lang.String>) strList9);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException19 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException19);
        int int21 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript24 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand25 = null;
        serializableEditScript24.append(serializableKeepCommand25);
        java.lang.Object[] objArray27 = new java.lang.Object[] { noopProcessor5, int21, true, 100.0f, serializableEditScript24 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags28 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags3, "", objArray27);
        io.fabric8.zjsonpatch.CompatibilityFlags[] compatibilityFlagsArray29 = new io.fabric8.zjsonpatch.CompatibilityFlags[] { compatibilityFlags2, compatibilityFlags3 };
        java.util.EnumSet<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsSet31 = java.util.EnumSet.noneOf(io.fabric8.zjsonpatch.CompatibilityFlags.class);
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<io.fabric8.zjsonpatch.CompatibilityFlags>) compatibilityFlagsSet31, compatibilityFlagsArray29);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonNode jsonNode33 = io.fabric8.zjsonpatch.JsonPatch.apply(jsonNode0, jsonNode1, compatibilityFlagsSet31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + compatibilityFlags2 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags2.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags3 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags3.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1819028791 + "'", int21 == 1819028791);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertTrue("'" + compatibilityFlags28 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags28.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(compatibilityFlagsArray29);
        org.junit.Assert.assertNotNull(compatibilityFlagsSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test043");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        java.lang.Throwable[] throwableArray48 = jsonPatchApplicationException18.getSuppressed();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 267167027 + "'", int9 == 267167027);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 795691606 + "'", int19 == 795691606);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 548111135 + "'", int23 == 548111135);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1153877426 + "'", int27 == 1153877426);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2121286572 + "'", int39 == 2121286572);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 911366251 + "'", int43 == 911366251);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 911366251 + "'", int44 == 911366251);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor0 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList8, (java.util.List<java.lang.String>) strList14);
        noopProcessor0.remove(strList16);
        java.lang.String[] strArray22 = new java.lang.String[] { "integer", "test", "hi!", "io.fabric8.zjsonpatch.JsonPatchApplicationException" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray28 = new java.lang.String[] { "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "integer" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        noopProcessor0.move((java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList29);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags33 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor35 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        noopProcessor35.remove((java.util.List<java.lang.String>) strList39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException49 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand55 = null;
        serializableEditScript54.append(serializableKeepCommand55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { noopProcessor35, int51, true, 100.0f, serializableEditScript54 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags58 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags33, "", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor59 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(noopProcessor0, "io.fabric8.zjsonpatch.JsonPatchApplicationException", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor60 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray67 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList68, (java.util.List<java.lang.String>) strList74);
        noopProcessor60.remove(strList76);
        java.lang.String[] strArray82 = new java.lang.String[] { "integer", "test", "hi!", "io.fabric8.zjsonpatch.JsonPatchApplicationException" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        java.lang.String[] strArray88 = new java.lang.String[] { "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "integer" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        noopProcessor60.move((java.util.List<java.lang.String>) strList83, (java.util.List<java.lang.String>) strList89);
        noopProcessor59.remove((java.util.List<java.lang.String>) strList89);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags33 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags33.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1592922289 + "'", int51 == 1592922289);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + compatibilityFlags58 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags58.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(noopProcessor59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.String str10 = jsonPatchApplicationException8.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1575932410 + "'", int9 == 1575932410);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str10, "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test062");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        jsonPatchApplicationException23.addSuppressed((java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException28 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException29);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator41 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException43);
        java.lang.Throwable throwable45 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        int int48 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator51 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        jsonPatchApplicationException53.addSuppressed((java.lang.Throwable) jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException58 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException58);
        int int60 = jsonPatchApplicationExceptionDefaultEquator51.hash(jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator61 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        int int64 = jsonPatchApplicationExceptionDefaultEquator61.hash(jsonPatchApplicationException63);
        int int65 = jsonPatchApplicationExceptionDefaultEquator51.hash(jsonPatchApplicationException63);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException66 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException63);
        boolean boolean67 = jsonPatchApplicationExceptionDefaultEquator41.equate(jsonPatchApplicationException50, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException66);
        boolean boolean68 = jsonPatchApplicationExceptionDefaultEquator21.equate(jsonPatchApplicationException39, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException66);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator69 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable70 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable70);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException71);
        java.lang.Throwable throwable73 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable73);
        jsonPatchApplicationException71.addSuppressed((java.lang.Throwable) jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException76 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException71);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException77 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException76);
        int int78 = jsonPatchApplicationExceptionDefaultEquator69.hash(jsonPatchApplicationException77);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator79 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable80 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException81 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable80);
        int int82 = jsonPatchApplicationExceptionDefaultEquator79.hash(jsonPatchApplicationException81);
        int int83 = jsonPatchApplicationExceptionDefaultEquator69.hash(jsonPatchApplicationException81);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException84 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException81);
        int int85 = jsonPatchApplicationExceptionDefaultEquator21.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException84);
        jsonPatchApplicationException17.addSuppressed((java.lang.Throwable) invalidJsonPatchException84);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 181726517 + "'", int3 == 181726517);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 557450689 + "'", int7 == 557450689);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 722610355 + "'", int11 == 722610355);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 770386255 + "'", int30 == 770386255);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 541353441 + "'", int40 == 541353441);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 251365787 + "'", int44 == 251365787);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 613830049 + "'", int48 == 613830049);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator51);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 246496444 + "'", int60 == 246496444);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator61);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1920316059 + "'", int64 == 1920316059);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1920316059 + "'", int65 == 1920316059);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator69);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1930300917 + "'", int78 == 1930300917);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator79);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 673349690 + "'", int82 == 673349690);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 673349690 + "'", int83 == 673349690);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1347089194 + "'", int85 == 1347089194);
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        int int12 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        boolean boolean19 = jsonPatchApplicationExceptionDefaultEquator9.equate(jsonPatchApplicationException14, jsonPatchApplicationException18);
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        jsonPatchApplicationException21.addSuppressed((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable[] throwableArray28 = jsonPatchApplicationException21.getSuppressed();
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator9.equate(jsonPatchApplicationException21, jsonPatchApplicationException31);
        boolean boolean33 = jsonPatchApplicationExceptionDefaultEquator1.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException8, jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException34 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("add", (java.lang.Throwable) jsonPatchApplicationException21);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1165981979 + "'", int12 == 1165981979);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor0 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList8, (java.util.List<java.lang.String>) strList14);
        noopProcessor0.remove(strList16);
        java.lang.String[] strArray22 = new java.lang.String[] { "integer", "test", "hi!", "io.fabric8.zjsonpatch.JsonPatchApplicationException" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray28 = new java.lang.String[] { "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "integer" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        noopProcessor0.move((java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList29);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags33 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor35 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        noopProcessor35.remove((java.util.List<java.lang.String>) strList39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException49 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand55 = null;
        serializableEditScript54.append(serializableKeepCommand55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { noopProcessor35, int51, true, 100.0f, serializableEditScript54 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags58 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags33, "", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor59 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(noopProcessor0, "io.fabric8.zjsonpatch.JsonPatchApplicationException", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor60 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray67 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList68, (java.util.List<java.lang.String>) strList74);
        noopProcessor60.remove(strList76);
        noopProcessor59.remove(strList76);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags33 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags33.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 935267389 + "'", int51 == 935267389);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + compatibilityFlags58 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags58.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(noopProcessor59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
    }

    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        com.fasterxml.jackson.databind.JsonNode jsonNode0 = null;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags1 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor3 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        noopProcessor3.remove((java.util.List<java.lang.String>) strList7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript22 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand23 = null;
        serializableEditScript22.append(serializableKeepCommand23);
        java.lang.Object[] objArray25 = new java.lang.Object[] { noopProcessor3, int19, true, 100.0f, serializableEditScript22 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags26 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags1, "", objArray25);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags27 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags28 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor30 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        noopProcessor30.remove((java.util.List<java.lang.String>) strList34);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator37 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException44 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator37.hash(jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript49 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand50 = null;
        serializableEditScript49.append(serializableKeepCommand50);
        java.lang.Object[] objArray52 = new java.lang.Object[] { noopProcessor30, int46, true, 100.0f, serializableEditScript49 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags53 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags28, "", objArray52);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsInsertCommand54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags53);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags55 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor57 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        noopProcessor57.remove((java.util.List<java.lang.String>) strList61);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator64 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable65 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable65);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException66);
        java.lang.Throwable throwable68 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable68);
        jsonPatchApplicationException66.addSuppressed((java.lang.Throwable) jsonPatchApplicationException69);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException71 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException71);
        int int73 = jsonPatchApplicationExceptionDefaultEquator64.hash(jsonPatchApplicationException72);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript76 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand77 = null;
        serializableEditScript76.append(serializableKeepCommand77);
        java.lang.Object[] objArray79 = new java.lang.Object[] { noopProcessor57, int73, true, 100.0f, serializableEditScript76 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags80 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags55, "", objArray79);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsInsertCommand81 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags80);
        io.fabric8.zjsonpatch.CompatibilityFlags[] compatibilityFlagsArray82 = new io.fabric8.zjsonpatch.CompatibilityFlags[] { compatibilityFlags26, compatibilityFlags27, compatibilityFlags53, compatibilityFlags80 };
        java.util.EnumSet<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsSet84 = java.util.EnumSet.noneOf(io.fabric8.zjsonpatch.CompatibilityFlags.class);
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<io.fabric8.zjsonpatch.CompatibilityFlags>) compatibilityFlagsSet84, compatibilityFlagsArray82);
        // The following exception was thrown during execution in test generation
        try {
            io.fabric8.zjsonpatch.JsonPatch.validate(jsonNode0, compatibilityFlagsSet84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + compatibilityFlags1 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags1.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 825306719 + "'", int19 == 825306719);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + compatibilityFlags26 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags26.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags27 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags27.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags28 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags28.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator37);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1850388814 + "'", int46 == 1850388814);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertTrue("'" + compatibilityFlags53 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags53.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertTrue("'" + compatibilityFlags55 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags55.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator64);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1126756612 + "'", int73 == 1126756612);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertTrue("'" + compatibilityFlags80 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags80.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(compatibilityFlagsArray82);
        org.junit.Assert.assertNotNull(compatibilityFlagsSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException20 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean21 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException20);
        java.lang.String str22 = jsonPatchApplicationException18.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1220064911 + "'", int9 == 1220064911);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 389875969 + "'", int15 == 389875969);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str22, "io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        int int19 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException27 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        int int28 = jsonPatchApplicationExceptionDefaultEquator20.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException27);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator29 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException31);
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        jsonPatchApplicationException31.addSuppressed((java.lang.Throwable) jsonPatchApplicationException34);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException36 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException36);
        int int38 = jsonPatchApplicationExceptionDefaultEquator29.hash(jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator39 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator39.hash(jsonPatchApplicationException41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator29.hash(jsonPatchApplicationException41);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException44 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException41);
        java.lang.Throwable throwable45 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        jsonPatchApplicationException48.addSuppressed((java.lang.Throwable) jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator20.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException44, jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("remove");
        boolean boolean55 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException44, jsonPatchApplicationException54);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 558039556 + "'", int9 == 558039556);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1077904083 + "'", int15 == 1077904083);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 478301653 + "'", int19 == 478301653);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39528904 + "'", int28 == 39528904);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator29);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 287897725 + "'", int38 == 287897725);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 614163468 + "'", int42 == 614163468);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 614163468 + "'", int43 == 614163468);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException22, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException34 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("null");
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) invalidJsonPatchException34);
        java.lang.Throwable[] throwableArray36 = new java.lang.Throwable[] { jsonPatchApplicationException22 };
        io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<java.lang.Throwable[]> throwableArrayDeleteCommand37 = new io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<java.lang.Throwable[]>(throwableArray36);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1032768559 + "'", int9 == 1032768559);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 471656571 + "'", int19 == 471656571);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1536934259 + "'", int23 == 1536934259);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1536934259 + "'", int24 == 1536934259);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        int int19 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException27 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException27);
        int int29 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException42, jsonPatchApplicationException50);
        int int53 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException50);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 510292620 + "'", int9 == 510292620);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1311944026 + "'", int15 == 1311944026);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 352816282 + "'", int19 == 352816282);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 611085112 + "'", int29 == 611085112);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1001959568 + "'", int39 == 1001959568);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 32966818 + "'", int43 == 32966818);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32966818 + "'", int44 == 32966818);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 341883424 + "'", int53 == 341883424);
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        int int8 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        jsonPatchApplicationException11.addSuppressed((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator19 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        int int22 = jsonPatchApplicationExceptionDefaultEquator19.hash(jsonPatchApplicationException21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException24 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException21);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException28.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException24, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException33 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException24);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        jsonPatchApplicationException35.addSuppressed((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException40 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable[] throwableArray41 = invalidJsonPatchException40.getSuppressed();
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException42 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException40);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        invalidJsonPatchException42.addSuppressed((java.lang.Throwable) invalidJsonPatchException45);
        invalidJsonPatchException33.addSuppressed((java.lang.Throwable) invalidJsonPatchException45);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 224220578 + "'", int8 == 224220578);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1776649593 + "'", int18 == 1776649593);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 202778198 + "'", int22 == 202778198);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 202778198 + "'", int23 == 202778198);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags0 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor2 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        noopProcessor2.remove((java.util.List<java.lang.String>) strList6);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        jsonPatchApplicationException11.addSuppressed((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript21 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand22 = null;
        serializableEditScript21.append(serializableKeepCommand22);
        java.lang.Object[] objArray24 = new java.lang.Object[] { noopProcessor2, int18, true, 100.0f, serializableEditScript21 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags25 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags0, "", objArray24);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsInsertCommand26 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags25);
        io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsDeleteCommand27 = new io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags25);
        org.junit.Assert.assertTrue("'" + compatibilityFlags0 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags0.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 973167970 + "'", int18 == 973167970);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + compatibilityFlags25 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags25.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator16 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator16.hash(jsonPatchApplicationException18);
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        boolean boolean26 = jsonPatchApplicationExceptionDefaultEquator16.equate(jsonPatchApplicationException21, jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        jsonPatchApplicationException28.addSuppressed((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable[] throwableArray35 = jsonPatchApplicationException28.getSuppressed();
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        boolean boolean39 = jsonPatchApplicationExceptionDefaultEquator16.equate(jsonPatchApplicationException28, jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException38);
        int int41 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException38);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 709078517 + "'", int9 == 709078517);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 258091108 + "'", int13 == 258091108);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 258091108 + "'", int14 == 258091108);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 118800074 + "'", int19 == 118800074);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2127959241 + "'", int41 == 2127959241);
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags0 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor2 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        noopProcessor2.remove((java.util.List<java.lang.String>) strList6);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        jsonPatchApplicationException11.addSuppressed((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript21 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand22 = null;
        serializableEditScript21.append(serializableKeepCommand22);
        java.lang.Object[] objArray24 = new java.lang.Object[] { noopProcessor2, int18, true, 100.0f, serializableEditScript21 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags25 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags0, "", objArray24);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException31);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException31);
        java.lang.Throwable[] throwableArray34 = jsonPatchApplicationException27.getSuppressed();
        java.lang.Object[][] objArray35 = new java.lang.Object[][] { objArray24, throwableArray34 };
        java.util.ArrayList<java.lang.Object[]> objArrayList36 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList36, objArray35);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags38 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor40 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        noopProcessor40.remove((java.util.List<java.lang.String>) strList44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator47 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        jsonPatchApplicationException49.addSuppressed((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException54 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript59 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand60 = null;
        serializableEditScript59.append(serializableKeepCommand60);
        java.lang.Object[] objArray62 = new java.lang.Object[] { noopProcessor40, int56, true, 100.0f, serializableEditScript59 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags63 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags38, "", objArray62);
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable throwable67 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable67);
        jsonPatchApplicationException65.addSuppressed((java.lang.Throwable) jsonPatchApplicationException68);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException70 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable[] throwableArray71 = invalidJsonPatchException70.getSuppressed();
        java.lang.Object[][] objArray72 = new java.lang.Object[][] { objArray62, throwableArray71 };
        java.util.ArrayList<java.lang.Object[]> objArrayList73 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList73, objArray72);
        io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]> objArraySequencesComparator75 = new io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>((java.util.List<java.lang.Object[]>) objArrayList36, (java.util.List<java.lang.Object[]>) objArrayList73);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.lang.Object[]> objArrayEditScript76 = objArraySequencesComparator75.getScript();
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.lang.Object[]> objArrayEditScript77 = objArraySequencesComparator75.getScript();
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.lang.Object[]> objArrayEditScript78 = objArraySequencesComparator75.getScript();
        java.lang.Class<?> wildcardClass79 = objArraySequencesComparator75.getClass();
        org.junit.Assert.assertTrue("'" + compatibilityFlags0 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags0.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1446395933 + "'", int18 == 1446395933);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + compatibilityFlags25 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags25.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags38 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags38.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator47);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1379666305 + "'", int56 == 1379666305);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + compatibilityFlags63 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags63.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArrayEditScript76);
        org.junit.Assert.assertNotNull(objArrayEditScript77);
        org.junit.Assert.assertNotNull(objArrayEditScript78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException20 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean21 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException20);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator22 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        jsonPatchApplicationException24.addSuppressed((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException29 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException29);
        int int31 = jsonPatchApplicationExceptionDefaultEquator22.hash(jsonPatchApplicationException30);
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator34 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        int int37 = jsonPatchApplicationExceptionDefaultEquator34.hash(jsonPatchApplicationException36);
        boolean boolean38 = jsonPatchApplicationExceptionDefaultEquator22.equate(jsonPatchApplicationException33, jsonPatchApplicationException36);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException42 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean43 = jsonPatchApplicationExceptionDefaultEquator22.equate(jsonPatchApplicationException40, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException42);
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator22.hash(jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator52 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        jsonPatchApplicationException54.addSuppressed((java.lang.Throwable) jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException59 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException54);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator60 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        int int63 = jsonPatchApplicationExceptionDefaultEquator60.hash(jsonPatchApplicationException62);
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable throwable68 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable68);
        boolean boolean70 = jsonPatchApplicationExceptionDefaultEquator60.equate(jsonPatchApplicationException65, jsonPatchApplicationException69);
        java.lang.Throwable throwable71 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable71);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException72);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException72);
        java.lang.Throwable throwable75 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException76 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable75);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException77 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException76);
        jsonPatchApplicationException72.addSuppressed((java.lang.Throwable) jsonPatchApplicationException76);
        java.lang.Throwable[] throwableArray79 = jsonPatchApplicationException72.getSuppressed();
        java.lang.Throwable throwable80 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException81 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable80);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException82 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException81);
        boolean boolean83 = jsonPatchApplicationExceptionDefaultEquator60.equate(jsonPatchApplicationException72, jsonPatchApplicationException82);
        boolean boolean84 = jsonPatchApplicationExceptionDefaultEquator52.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException59, jsonPatchApplicationException72);
        int int85 = jsonPatchApplicationExceptionDefaultEquator22.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException86 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException59);
        int int87 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException86);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26932904 + "'", int9 == 26932904);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 776595681 + "'", int15 == 776595681);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator22);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 218351748 + "'", int31 == 218351748);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1474293092 + "'", int37 == 1474293092);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 673641285 + "'", int51 == 673641285);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator52);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator60);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 314688730 + "'", int63 == 314688730);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1695733099 + "'", int85 == 1695733099);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 683327086 + "'", int87 == 683327086);
    }

    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        int int8 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator10.equate(jsonPatchApplicationException15, jsonPatchApplicationException19);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable[] throwableArray29 = jsonPatchApplicationException22.getSuppressed();
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException31);
        boolean boolean33 = jsonPatchApplicationExceptionDefaultEquator10.equate(jsonPatchApplicationException22, jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator35 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        int int38 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException37);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException40);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator45 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException52 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException52);
        int int54 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator55 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        int int58 = jsonPatchApplicationExceptionDefaultEquator55.hash(jsonPatchApplicationException57);
        int int59 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException60 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException57);
        boolean boolean61 = jsonPatchApplicationExceptionDefaultEquator35.equate(jsonPatchApplicationException44, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException60);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException62 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException60);
        boolean boolean63 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException34, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException62);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1067144022 + "'", int8 == 1067144022);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 647842880 + "'", int13 == 647842880);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1308850497 + "'", int38 == 1308850497);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1245802872 + "'", int42 == 1245802872);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator45);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 304173858 + "'", int54 == 304173858);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator55);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 945370635 + "'", int58 == 945370635);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 945370635 + "'", int59 == 945370635);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        jsonPatchApplicationException20.addSuppressed((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable[] throwableArray27 = jsonPatchApplicationException20.getSuppressed();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        boolean boolean31 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException20, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator32 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        int int35 = jsonPatchApplicationExceptionDefaultEquator32.hash(jsonPatchApplicationException34);
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        boolean boolean42 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException37, jsonPatchApplicationException41);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException48);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        java.lang.Throwable[] throwableArray51 = jsonPatchApplicationException44.getSuppressed();
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        boolean boolean55 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException44, jsonPatchApplicationException54);
        boolean boolean56 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException20, jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException58 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("integer");
        int int59 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException58);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1667732622 + "'", int3 == 1667732622);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1903995925 + "'", int7 == 1903995925);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1137778180 + "'", int11 == 1137778180);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1216228663 + "'", int35 == 1216228663);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 125282657 + "'", int59 == 125282657);
    }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        int int28 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator41 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException46 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException43);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator21.equate(jsonPatchApplicationException30, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46, jsonPatchApplicationException50);
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException55);
        java.lang.Throwable throwable57 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable57);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException62);
        jsonPatchApplicationException58.addSuppressed((java.lang.Throwable) jsonPatchApplicationException62);
        boolean boolean65 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException55, jsonPatchApplicationException62);
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException67);
        java.lang.Throwable throwable69 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable69);
        jsonPatchApplicationException67.addSuppressed((java.lang.Throwable) jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException72 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException67);
        int int73 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException67);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 408477875 + "'", int3 == 408477875);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2085415905 + "'", int7 == 2085415905);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 990467544 + "'", int11 == 990467544);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1043369347 + "'", int24 == 1043369347);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1458007722 + "'", int28 == 1458007722);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1301140636 + "'", int40 == 1301140636);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1666244056 + "'", int44 == 1666244056);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1666244056 + "'", int45 == 1666244056);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 124444999 + "'", int51 == 124444999);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 233257825 + "'", int73 == 233257825);
    }

    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException16);
        int int19 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException16);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException27 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable[] throwableArray28 = invalidJsonPatchException27.getSuppressed();
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("remove", (java.lang.Throwable) invalidJsonPatchException27);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        int int33 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        boolean boolean40 = jsonPatchApplicationExceptionDefaultEquator30.equate(jsonPatchApplicationException35, jsonPatchApplicationException39);
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException42);
        java.lang.Throwable throwable45 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        jsonPatchApplicationException42.addSuppressed((java.lang.Throwable) jsonPatchApplicationException46);
        java.lang.Throwable[] throwableArray49 = jsonPatchApplicationException42.getSuppressed();
        java.lang.Throwable throwable50 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        boolean boolean53 = jsonPatchApplicationExceptionDefaultEquator30.equate(jsonPatchApplicationException42, jsonPatchApplicationException52);
        boolean boolean54 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException27, jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator55 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException57);
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        jsonPatchApplicationException57.addSuppressed((java.lang.Throwable) jsonPatchApplicationException60);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException62 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException62);
        int int64 = jsonPatchApplicationExceptionDefaultEquator55.hash(jsonPatchApplicationException63);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator65 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException67);
        java.lang.Throwable throwable69 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable69);
        jsonPatchApplicationException67.addSuppressed((java.lang.Throwable) jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException72 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException67);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException72);
        int int74 = jsonPatchApplicationExceptionDefaultEquator65.hash(jsonPatchApplicationException73);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator75 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable76 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException77 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable76);
        int int78 = jsonPatchApplicationExceptionDefaultEquator75.hash(jsonPatchApplicationException77);
        int int79 = jsonPatchApplicationExceptionDefaultEquator65.hash(jsonPatchApplicationException77);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException80 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException77);
        java.lang.Throwable throwable81 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException82 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable81);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException83 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException82);
        java.lang.Throwable throwable84 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException85 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable84);
        jsonPatchApplicationException82.addSuppressed((java.lang.Throwable) jsonPatchApplicationException85);
        boolean boolean87 = jsonPatchApplicationExceptionDefaultEquator55.equate(jsonPatchApplicationException77, jsonPatchApplicationException85);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException89 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("null");
        jsonPatchApplicationException77.addSuppressed((java.lang.Throwable) invalidJsonPatchException89);
        int int91 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException89);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 621128342 + "'", int9 == 621128342);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2048396815 + "'", int13 == 2048396815);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2048396815 + "'", int14 == 2048396815);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1391399263 + "'", int19 == 1391399263);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2118066356 + "'", int33 == 2118066356);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator55);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 943812020 + "'", int64 == 943812020);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator65);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1117612056 + "'", int74 == 1117612056);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator75);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 836938374 + "'", int78 == 836938374);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 836938374 + "'", int79 == 836938374);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1549181673 + "'", int91 == 1549181673);
    }

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        boolean boolean17 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException12, jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("integer", (java.lang.Throwable) jsonPatchApplicationException15);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1242606671 + "'", int10 == 1242606671);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1585488809 + "'", int16 == 1585488809);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        int int28 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator41 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException46 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException43);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator21.equate(jsonPatchApplicationException30, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46, jsonPatchApplicationException50);
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException55);
        java.lang.Throwable throwable57 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable57);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException62);
        jsonPatchApplicationException58.addSuppressed((java.lang.Throwable) jsonPatchApplicationException62);
        boolean boolean65 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException55, jsonPatchApplicationException62);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException67 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
        int int68 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException67);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException70 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        java.lang.Throwable throwable71 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable71);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException72);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException72);
        java.lang.Throwable throwable75 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException76 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable75);
        jsonPatchApplicationException74.addSuppressed((java.lang.Throwable) jsonPatchApplicationException76);
        boolean boolean78 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException70, jsonPatchApplicationException74);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2029597363 + "'", int3 == 2029597363);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1383996035 + "'", int7 == 1383996035);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1574461454 + "'", int11 == 1574461454);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1872024814 + "'", int24 == 1872024814);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 105199603 + "'", int28 == 105199603);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1489168251 + "'", int40 == 1489168251);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1520223971 + "'", int44 == 1520223971);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1520223971 + "'", int45 == 1520223971);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1044495352 + "'", int51 == 1044495352);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1564391658 + "'", int68 == 1564391658);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        int int28 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator41 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException46 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException43);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator21.equate(jsonPatchApplicationException30, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46, jsonPatchApplicationException50);
        java.lang.Throwable[] throwableArray53 = invalidJsonPatchException46.getSuppressed();
        java.lang.String str54 = invalidJsonPatchException46.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 419787976 + "'", int3 == 419787976);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1709885388 + "'", int7 == 1709885388);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1895171421 + "'", int11 == 1895171421);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1843753058 + "'", int24 == 1843753058);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1859523484 + "'", int28 == 1859523484);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1903545134 + "'", int40 == 1903545134);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1011274900 + "'", int44 == 1011274900);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1011274900 + "'", int45 == 1011274900);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 329952390 + "'", int51 == 329952390);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str54, "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        jsonPatchApplicationException20.addSuppressed((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable[] throwableArray27 = jsonPatchApplicationException20.getSuppressed();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        boolean boolean31 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException20, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator32 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        int int35 = jsonPatchApplicationExceptionDefaultEquator32.hash(jsonPatchApplicationException34);
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        boolean boolean42 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException37, jsonPatchApplicationException41);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException48);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        java.lang.Throwable[] throwableArray51 = jsonPatchApplicationException44.getSuppressed();
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        boolean boolean55 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException44, jsonPatchApplicationException54);
        boolean boolean56 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException20, jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator57 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable58 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        jsonPatchApplicationException59.addSuppressed((java.lang.Throwable) jsonPatchApplicationException62);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException64 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException64);
        int int66 = jsonPatchApplicationExceptionDefaultEquator57.hash(jsonPatchApplicationException65);
        java.lang.Throwable throwable67 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable67);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator69 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable70 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable70);
        int int72 = jsonPatchApplicationExceptionDefaultEquator69.hash(jsonPatchApplicationException71);
        boolean boolean73 = jsonPatchApplicationExceptionDefaultEquator57.equate(jsonPatchApplicationException68, jsonPatchApplicationException71);
        java.lang.Throwable throwable74 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException75 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable74);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException77 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean78 = jsonPatchApplicationExceptionDefaultEquator57.equate(jsonPatchApplicationException75, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException77);
        int int79 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException75);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115047962 + "'", int3 == 115047962);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1568879591 + "'", int7 == 1568879591);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1140868562 + "'", int11 == 1140868562);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 99838345 + "'", int35 == 99838345);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator57);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2070069175 + "'", int66 == 2070069175);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator69);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1865463923 + "'", int72 == 1865463923);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 82355163 + "'", int79 == 82355163);
    }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator defaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.INSTANCE;
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        boolean boolean17 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException12, jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException21 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean22 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException19, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException21);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException26.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException26);
        int int31 = defaultEquator0.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException33 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator35 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        int int38 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException37);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException40);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException40);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        boolean boolean45 = jsonPatchApplicationExceptionDefaultEquator35.equate(jsonPatchApplicationException40, jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        java.lang.Throwable throwable50 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException51);
        java.lang.Throwable[] throwableArray54 = jsonPatchApplicationException47.getSuppressed();
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException56);
        boolean boolean58 = jsonPatchApplicationExceptionDefaultEquator35.equate(jsonPatchApplicationException47, jsonPatchApplicationException57);
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException60);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException60);
        java.lang.Throwable throwable63 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException64);
        jsonPatchApplicationException60.addSuppressed((java.lang.Throwable) jsonPatchApplicationException64);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException64);
        boolean boolean69 = defaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException33, jsonPatchApplicationException64);
        org.junit.Assert.assertNotNull(defaultEquator0);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1988950517 + "'", int10 == 1988950517);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 884635569 + "'", int16 == 884635569);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1666034470 + "'", int30 == 1666034470);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1666034470 + "'", int31 == 1666034470);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1094387696 + "'", int38 == 1094387696);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        java.lang.Throwable throwable8 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable8);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException19 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException19);
        int int21 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException20);
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator24 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator24.hash(jsonPatchApplicationException26);
        boolean boolean28 = jsonPatchApplicationExceptionDefaultEquator12.equate(jsonPatchApplicationException23, jsonPatchApplicationException26);
        boolean boolean29 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException9, jsonPatchApplicationException23);
        java.lang.String str30 = jsonPatchApplicationException9.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1292258568 + "'", int3 == 1292258568);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1404340102 + "'", int7 == 1404340102);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 406375182 + "'", int21 == 406375182);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1132948845 + "'", int27 == 1132948845);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str30, "io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator defaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.INSTANCE;
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        boolean boolean17 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException12, jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException21 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean22 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException19, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException21);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException26.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException26);
        int int31 = defaultEquator0.hash(jsonPatchApplicationException26);
        java.lang.Throwable[] throwableArray32 = jsonPatchApplicationException26.getSuppressed();
        org.junit.Assert.assertNotNull(defaultEquator0);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 65271952 + "'", int10 == 65271952);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 428411892 + "'", int16 == 428411892);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 126408793 + "'", int30 == 126408793);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 126408793 + "'", int31 == 126408793);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        boolean boolean12 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException7, jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable[] throwableArray21 = jsonPatchApplicationException14.getSuppressed();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean25 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException14, jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("add", (java.lang.Throwable) jsonPatchApplicationException24);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55818822 + "'", int5 == 55818822);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = null;
        int int22 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator23 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException25.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException30 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException25);
        int int31 = jsonPatchApplicationExceptionDefaultEquator23.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator32 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException34);
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        jsonPatchApplicationException34.addSuppressed((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException39 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException39);
        int int41 = jsonPatchApplicationExceptionDefaultEquator32.hash(jsonPatchApplicationException40);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator32.hash(jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException47 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        jsonPatchApplicationException51.addSuppressed((java.lang.Throwable) jsonPatchApplicationException53);
        boolean boolean55 = jsonPatchApplicationExceptionDefaultEquator23.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException47, jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException56 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException47);
        int int57 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException56);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1042323582 + "'", int3 == 1042323582);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 842735347 + "'", int7 == 842735347);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 880602087 + "'", int11 == 880602087);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator23);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1399449644 + "'", int31 == 1399449644);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator32);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1260957823 + "'", int41 == 1260957823);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 438480978 + "'", int45 == 438480978);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 438480978 + "'", int46 == 438480978);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 546534354 + "'", int57 == 546534354);
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        boolean boolean11 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException6, jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException17);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        java.lang.Throwable[] throwableArray20 = jsonPatchApplicationException13.getSuppressed();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        boolean boolean24 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException13, jsonPatchApplicationException23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable[] throwableArray26 = jsonPatchApplicationException25.getSuppressed();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1737931999 + "'", int4 == 1737931999);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        int int28 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator41 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator41.hash(jsonPatchApplicationException43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator31.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException46 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException43);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator21.equate(jsonPatchApplicationException30, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException50);
        boolean boolean52 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException46, jsonPatchApplicationException50);
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException56 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException57 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("remove", (java.lang.Throwable) invalidJsonPatchException56);
        jsonPatchApplicationException50.addSuppressed((java.lang.Throwable) invalidJsonPatchException56);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 87715690 + "'", int3 == 87715690);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 275722069 + "'", int7 == 275722069);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 402495932 + "'", int11 == 402495932);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1101395944 + "'", int24 == 1101395944);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 385169727 + "'", int28 == 385169727);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2054521805 + "'", int40 == 2054521805);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1281810958 + "'", int44 == 1281810958);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1281810958 + "'", int45 == 1281810958);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1781536738 + "'", int51 == 1781536738);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        boolean boolean17 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException12, jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException21 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        boolean boolean22 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException19, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException21);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException26.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator31 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        jsonPatchApplicationException33.addSuppressed((java.lang.Throwable) jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator39 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator39.hash(jsonPatchApplicationException41);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        boolean boolean49 = jsonPatchApplicationExceptionDefaultEquator39.equate(jsonPatchApplicationException44, jsonPatchApplicationException48);
        java.lang.Throwable throwable50 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException55);
        jsonPatchApplicationException51.addSuppressed((java.lang.Throwable) jsonPatchApplicationException55);
        java.lang.Throwable[] throwableArray58 = jsonPatchApplicationException51.getSuppressed();
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException60);
        boolean boolean62 = jsonPatchApplicationExceptionDefaultEquator39.equate(jsonPatchApplicationException51, jsonPatchApplicationException61);
        boolean boolean63 = jsonPatchApplicationExceptionDefaultEquator31.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException38, jsonPatchApplicationException51);
        int int64 = jsonPatchApplicationExceptionDefaultEquator1.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException65 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("add", (java.lang.Throwable) invalidJsonPatchException38);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 375326255 + "'", int10 == 375326255);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 224567385 + "'", int16 == 224567385);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 218665569 + "'", int30 == 218665569);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator31);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 171624483 + "'", int42 == 171624483);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1635090189 + "'", int64 == 1635090189);
    }

    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        java.lang.Throwable throwable0 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException1 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable0);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException1);
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        jsonPatchApplicationException1.addSuppressed((java.lang.Throwable) jsonPatchApplicationException4);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException6 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException1);
        java.lang.Throwable[] throwableArray7 = invalidJsonPatchException6.getSuppressed();
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException6);
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException11 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException10);
        invalidJsonPatchException8.addSuppressed((java.lang.Throwable) invalidJsonPatchException11);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException13 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator14 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        int int17 = jsonPatchApplicationExceptionDefaultEquator14.hash(jsonPatchApplicationException16);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException19);
        int int21 = jsonPatchApplicationExceptionDefaultEquator14.hash(jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator22 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        int int25 = jsonPatchApplicationExceptionDefaultEquator22.hash(jsonPatchApplicationException24);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator22.equate(jsonPatchApplicationException27, jsonPatchApplicationException31);
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException34);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        jsonPatchApplicationException34.addSuppressed((java.lang.Throwable) jsonPatchApplicationException38);
        java.lang.Throwable[] throwableArray41 = jsonPatchApplicationException34.getSuppressed();
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException43);
        boolean boolean45 = jsonPatchApplicationExceptionDefaultEquator22.equate(jsonPatchApplicationException34, jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator46 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        int int49 = jsonPatchApplicationExceptionDefaultEquator46.hash(jsonPatchApplicationException48);
        java.lang.Throwable throwable50 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        boolean boolean56 = jsonPatchApplicationExceptionDefaultEquator46.equate(jsonPatchApplicationException51, jsonPatchApplicationException55);
        java.lang.Throwable throwable57 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable57);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException58);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException62);
        jsonPatchApplicationException58.addSuppressed((java.lang.Throwable) jsonPatchApplicationException62);
        java.lang.Throwable[] throwableArray65 = jsonPatchApplicationException58.getSuppressed();
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException67);
        boolean boolean69 = jsonPatchApplicationExceptionDefaultEquator46.equate(jsonPatchApplicationException58, jsonPatchApplicationException68);
        boolean boolean70 = jsonPatchApplicationExceptionDefaultEquator14.equate(jsonPatchApplicationException34, jsonPatchApplicationException58);
        invalidJsonPatchException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException58);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1076238388 + "'", int17 == 1076238388);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1810182625 + "'", int21 == 1810182625);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1776644173 + "'", int25 == 1776644173);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 453127065 + "'", int49 == 453127065);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        boolean boolean26 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException9, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException25);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator27 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        jsonPatchApplicationException29.addSuppressed((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException34 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException29);
        int int35 = jsonPatchApplicationExceptionDefaultEquator27.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException34);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator36 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        jsonPatchApplicationException38.addSuppressed((java.lang.Throwable) jsonPatchApplicationException41);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException43 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException43);
        int int45 = jsonPatchApplicationExceptionDefaultEquator36.hash(jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator46 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        int int49 = jsonPatchApplicationExceptionDefaultEquator46.hash(jsonPatchApplicationException48);
        int int50 = jsonPatchApplicationExceptionDefaultEquator36.hash(jsonPatchApplicationException48);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException51 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException48);
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        jsonPatchApplicationException55.addSuppressed((java.lang.Throwable) jsonPatchApplicationException57);
        boolean boolean59 = jsonPatchApplicationExceptionDefaultEquator27.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException51, jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException60 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException51);
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable throwable65 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable65);
        jsonPatchApplicationException63.addSuppressed((java.lang.Throwable) jsonPatchApplicationException66);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException68 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable[] throwableArray69 = invalidJsonPatchException68.getSuppressed();
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("remove", (java.lang.Throwable) invalidJsonPatchException68);
        boolean boolean71 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException60, jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException72 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException60);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 664790769 + "'", int3 == 664790769);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1289440359 + "'", int7 == 1289440359);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1103741398 + "'", int19 == 1103741398);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1306247342 + "'", int23 == 1306247342);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1306247342 + "'", int24 == 1306247342);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator27);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 163056595 + "'", int35 == 163056595);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator36);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1640054646 + "'", int45 == 1640054646);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1890861403 + "'", int49 == 1890861403);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1890861403 + "'", int50 == 1890861403);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        boolean boolean12 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException7, jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable[] throwableArray21 = jsonPatchApplicationException14.getSuppressed();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean25 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException14, jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.String str28 = jsonPatchApplicationException27.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 339508669 + "'", int5 == 339508669);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str28, "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        int int8 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator11 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException16);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        int int25 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException23);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException26 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean27 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException10, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException26);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator28 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException30);
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        jsonPatchApplicationException30.addSuppressed((java.lang.Throwable) jsonPatchApplicationException33);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException35 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException30);
        int int36 = jsonPatchApplicationExceptionDefaultEquator28.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException35);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator37 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException44 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator37.hash(jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator47 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        int int50 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator37.hash(jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException52 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        java.lang.Throwable throwable57 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable57);
        jsonPatchApplicationException56.addSuppressed((java.lang.Throwable) jsonPatchApplicationException58);
        boolean boolean60 = jsonPatchApplicationExceptionDefaultEquator28.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException52, jsonPatchApplicationException58);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException61 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException52);
        java.lang.Throwable throwable63 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException64);
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        jsonPatchApplicationException64.addSuppressed((java.lang.Throwable) jsonPatchApplicationException67);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException69 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException64);
        java.lang.Throwable[] throwableArray70 = invalidJsonPatchException69.getSuppressed();
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("remove", (java.lang.Throwable) invalidJsonPatchException69);
        boolean boolean72 = jsonPatchApplicationExceptionDefaultEquator1.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException61, jsonPatchApplicationException71);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException73 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("remove", (java.lang.Throwable) invalidJsonPatchException61);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1340504654 + "'", int4 == 1340504654);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1634920323 + "'", int8 == 1634920323);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator11);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 355659311 + "'", int20 == 355659311);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1180110868 + "'", int24 == 1180110868);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1180110868 + "'", int25 == 1180110868);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator28);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1211796472 + "'", int36 == 1211796472);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator37);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 220033239 + "'", int46 == 220033239);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1460073743 + "'", int50 == 1460073743);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1460073743 + "'", int51 == 1460073743);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        java.lang.Throwable[] throwableArray48 = invalidJsonPatchException45.getSuppressed();
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException53 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException54 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("remove", (java.lang.Throwable) invalidJsonPatchException53);
        java.lang.Throwable[] throwableArray55 = invalidJsonPatchException53.getSuppressed();
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException56 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(invalidJsonPatchException45, "object", (java.lang.Object[]) throwableArray55);
        io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<java.lang.Throwable[]> throwableArrayDeleteCommand57 = new io.fabric8.zjsonpatch.internal.collections4.sequence.DeleteCommand<java.lang.Throwable[]>(throwableArray55);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 612338606 + "'", int9 == 612338606);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1645696877 + "'", int19 == 1645696877);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1495612038 + "'", int23 == 1495612038);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1540917995 + "'", int27 == 1540917995);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 129614987 + "'", int39 == 129614987);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1831377551 + "'", int43 == 1831377551);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1831377551 + "'", int44 == 1831377551);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(invalidJsonPatchException56);
    }

    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test148");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator10.equate(jsonPatchApplicationException15, jsonPatchApplicationException19);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable[] throwableArray29 = jsonPatchApplicationException22.getSuppressed();
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException31);
        boolean boolean33 = jsonPatchApplicationExceptionDefaultEquator10.equate(jsonPatchApplicationException22, jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator34 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        int int37 = jsonPatchApplicationExceptionDefaultEquator34.hash(jsonPatchApplicationException36);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        boolean boolean44 = jsonPatchApplicationExceptionDefaultEquator34.equate(jsonPatchApplicationException39, jsonPatchApplicationException43);
        java.lang.Throwable throwable45 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException50);
        jsonPatchApplicationException46.addSuppressed((java.lang.Throwable) jsonPatchApplicationException50);
        java.lang.Throwable[] throwableArray53 = jsonPatchApplicationException46.getSuppressed();
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException55);
        boolean boolean57 = jsonPatchApplicationExceptionDefaultEquator34.equate(jsonPatchApplicationException46, jsonPatchApplicationException56);
        boolean boolean58 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException22, jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException59 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("", (java.lang.Throwable) jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException60 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("remove", (java.lang.Throwable) jsonPatchApplicationException46);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 913508879 + "'", int5 == 913508879);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 651013755 + "'", int9 == 651013755);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 437715740 + "'", int13 == 437715740);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1272982205 + "'", int37 == 1272982205);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        boolean boolean12 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException7, jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable[] throwableArray21 = jsonPatchApplicationException14.getSuppressed();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean25 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException14, jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 783442232 + "'", int5 == 783442232);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        java.lang.Throwable[] throwableArray9 = invalidJsonPatchException7.getSuppressed();
        int int10 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7);
        java.lang.String str11 = invalidJsonPatchException7.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
        org.junit.Assert.assertNotNull(throwableArray9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 252036463 + "'", int10 == 252036463);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str11, "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator15 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator15.hash(jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        int int22 = jsonPatchApplicationExceptionDefaultEquator15.hash(jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator23 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        int int26 = jsonPatchApplicationExceptionDefaultEquator23.hash(jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        boolean boolean33 = jsonPatchApplicationExceptionDefaultEquator23.equate(jsonPatchApplicationException28, jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        jsonPatchApplicationException35.addSuppressed((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable[] throwableArray42 = jsonPatchApplicationException35.getSuppressed();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator23.equate(jsonPatchApplicationException35, jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator47 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        int int50 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException49);
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException52);
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        boolean boolean57 = jsonPatchApplicationExceptionDefaultEquator47.equate(jsonPatchApplicationException52, jsonPatchApplicationException56);
        java.lang.Throwable throwable58 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        jsonPatchApplicationException59.addSuppressed((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable[] throwableArray66 = jsonPatchApplicationException59.getSuppressed();
        java.lang.Throwable throwable67 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable67);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException68);
        boolean boolean70 = jsonPatchApplicationExceptionDefaultEquator47.equate(jsonPatchApplicationException59, jsonPatchApplicationException69);
        boolean boolean71 = jsonPatchApplicationExceptionDefaultEquator15.equate(jsonPatchApplicationException35, jsonPatchApplicationException59);
        java.lang.Throwable throwable72 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable72);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException73);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException75 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException73);
        int int76 = jsonPatchApplicationExceptionDefaultEquator15.hash(jsonPatchApplicationException73);
        int int77 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException73);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 780303838 + "'", int9 == 780303838);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 908244333 + "'", int13 == 908244333);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 908244333 + "'", int14 == 908244333);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2096462688 + "'", int18 == 2096462688);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 644919505 + "'", int22 == 644919505);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator23);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 903011275 + "'", int26 == 903011275);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 91672944 + "'", int50 == 91672944);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 923141434 + "'", int76 == 923141434);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 923141434 + "'", int77 == 923141434);
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException15 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException15);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 492511094 + "'", int9 == 492511094);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1639365546 + "'", int13 == 1639365546);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1639365546 + "'", int14 == 1639365546);
    }

    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        boolean boolean11 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException6, jsonPatchApplicationException10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException10);
        java.lang.Throwable throwable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonPatchApplicationException12.addSuppressed(throwable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 124250457 + "'", int4 == 124250457);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable8 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable8);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException9);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException12 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("add", (java.lang.Throwable) jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator23 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException25.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException30 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException30);
        int int32 = jsonPatchApplicationExceptionDefaultEquator23.hash(jsonPatchApplicationException31);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        int int36 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException35);
        int int37 = jsonPatchApplicationExceptionDefaultEquator23.hash(jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException38 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException35);
        boolean boolean39 = jsonPatchApplicationExceptionDefaultEquator13.equate(jsonPatchApplicationException22, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException40 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException38);
        invalidJsonPatchException12.addSuppressed((java.lang.Throwable) invalidJsonPatchException38);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 586762020 + "'", int16 == 586762020);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 817720791 + "'", int20 == 817720791);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator23);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2069100331 + "'", int32 == 2069100331);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1976896260 + "'", int36 == 1976896260);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1976896260 + "'", int37 == 1976896260);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException50);
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        jsonPatchApplicationException50.addSuppressed((java.lang.Throwable) jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException55 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator58 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        int int61 = jsonPatchApplicationExceptionDefaultEquator58.hash(jsonPatchApplicationException60);
        int int62 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException60);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException63 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException60);
        int int64 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException63);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator65 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException67);
        java.lang.Throwable throwable69 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable69);
        jsonPatchApplicationException67.addSuppressed((java.lang.Throwable) jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException72 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException67);
        int int73 = jsonPatchApplicationExceptionDefaultEquator65.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException72);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator74 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable75 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException76 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable75);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException77 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException76);
        java.lang.Throwable throwable78 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException79 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable78);
        jsonPatchApplicationException76.addSuppressed((java.lang.Throwable) jsonPatchApplicationException79);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException81 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException76);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException82 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException81);
        int int83 = jsonPatchApplicationExceptionDefaultEquator74.hash(jsonPatchApplicationException82);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator84 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable85 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException86 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable85);
        int int87 = jsonPatchApplicationExceptionDefaultEquator84.hash(jsonPatchApplicationException86);
        int int88 = jsonPatchApplicationExceptionDefaultEquator74.hash(jsonPatchApplicationException86);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException89 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException86);
        java.lang.Throwable throwable90 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException91 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable90);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException92 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException91);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException93 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException91);
        java.lang.Throwable throwable94 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException95 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable94);
        jsonPatchApplicationException93.addSuppressed((java.lang.Throwable) jsonPatchApplicationException95);
        boolean boolean97 = jsonPatchApplicationExceptionDefaultEquator65.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException89, jsonPatchApplicationException95);
        int int98 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException89);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1947780245 + "'", int9 == 1947780245);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 337030091 + "'", int19 == 337030091);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 607324655 + "'", int23 == 607324655);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1386933012 + "'", int27 == 1386933012);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 608498265 + "'", int39 == 608498265);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2051178795 + "'", int43 == 2051178795);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2051178795 + "'", int44 == 2051178795);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 535189560 + "'", int57 == 535189560);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator58);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2113105233 + "'", int61 == 2113105233);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2113105233 + "'", int62 == 2113105233);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1604078672 + "'", int64 == 1604078672);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator65);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1307090516 + "'", int73 == 1307090516);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator74);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1093830465 + "'", int83 == 1093830465);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator84);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 373486932 + "'", int87 == 373486932);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 373486932 + "'", int88 == 373486932);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1986980023 + "'", int98 == 1986980023);
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        int int8 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        int int12 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        boolean boolean19 = jsonPatchApplicationExceptionDefaultEquator9.equate(jsonPatchApplicationException14, jsonPatchApplicationException18);
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException21);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        jsonPatchApplicationException21.addSuppressed((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable[] throwableArray28 = jsonPatchApplicationException21.getSuppressed();
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator9.equate(jsonPatchApplicationException21, jsonPatchApplicationException31);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        int int36 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        boolean boolean43 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException38, jsonPatchApplicationException42);
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        jsonPatchApplicationException45.addSuppressed((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable[] throwableArray52 = jsonPatchApplicationException45.getSuppressed();
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException54);
        boolean boolean56 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException45, jsonPatchApplicationException55);
        boolean boolean57 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException21, jsonPatchApplicationException45);
        java.lang.Throwable throwable58 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        int int62 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException63 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("object", (java.lang.Throwable) jsonPatchApplicationException59);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1105100643 + "'", int4 == 1105100643);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 261969881 + "'", int8 == 261969881);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 288513700 + "'", int12 == 288513700);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1877781031 + "'", int36 == 1877781031);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 32622040 + "'", int62 == 32622040);
    }

    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags0 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor2 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        noopProcessor2.remove((java.util.List<java.lang.String>) strList6);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator9 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        jsonPatchApplicationException11.addSuppressed((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException16 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException16);
        int int18 = jsonPatchApplicationExceptionDefaultEquator9.hash(jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript21 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand22 = null;
        serializableEditScript21.append(serializableKeepCommand22);
        java.lang.Object[] objArray24 = new java.lang.Object[] { noopProcessor2, int18, true, 100.0f, serializableEditScript21 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags25 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags0, "", objArray24);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable30 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException31);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException31);
        java.lang.Throwable[] throwableArray34 = jsonPatchApplicationException27.getSuppressed();
        java.lang.Object[][] objArray35 = new java.lang.Object[][] { objArray24, throwableArray34 };
        java.util.ArrayList<java.lang.Object[]> objArrayList36 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList36, objArray35);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags38 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor40 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        noopProcessor40.remove((java.util.List<java.lang.String>) strList44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator47 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        jsonPatchApplicationException49.addSuppressed((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException54 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript59 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand60 = null;
        serializableEditScript59.append(serializableKeepCommand60);
        java.lang.Object[] objArray62 = new java.lang.Object[] { noopProcessor40, int56, true, 100.0f, serializableEditScript59 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags63 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags38, "", objArray62);
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable throwable67 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable67);
        jsonPatchApplicationException65.addSuppressed((java.lang.Throwable) jsonPatchApplicationException68);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException70 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable[] throwableArray71 = invalidJsonPatchException70.getSuppressed();
        java.lang.Object[][] objArray72 = new java.lang.Object[][] { objArray62, throwableArray71 };
        java.util.ArrayList<java.lang.Object[]> objArrayList73 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList73, objArray72);
        io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]> objArraySequencesComparator75 = new io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>((java.util.List<java.lang.Object[]>) objArrayList36, (java.util.List<java.lang.Object[]>) objArrayList73);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>> objArraySequencesComparatorInsertCommand76 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>>(objArraySequencesComparator75);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.lang.Object[]> objArrayEditScript77 = objArraySequencesComparator75.getScript();
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.lang.Object[]> objArrayEditScript78 = objArraySequencesComparator75.getScript();
        org.junit.Assert.assertTrue("'" + compatibilityFlags0 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags0.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 321291154 + "'", int18 == 321291154);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertTrue("'" + compatibilityFlags25 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags25.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags38 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags38.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator47);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1520639445 + "'", int56 == 1520639445);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertTrue("'" + compatibilityFlags63 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags63.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArrayEditScript77);
        org.junit.Assert.assertNotNull(objArrayEditScript78);
    }

    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        java.lang.Throwable throwable0 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException1 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable0);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException1);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator3 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        int int6 = jsonPatchApplicationExceptionDefaultEquator3.hash(jsonPatchApplicationException5);
        java.lang.Throwable throwable7 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator3.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator15 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        jsonPatchApplicationException17.addSuppressed((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException22 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator15.hash(jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator27 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator27.hash(jsonPatchApplicationException29);
        boolean boolean31 = jsonPatchApplicationExceptionDefaultEquator15.equate(jsonPatchApplicationException26, jsonPatchApplicationException29);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator3.equate(jsonPatchApplicationException12, jsonPatchApplicationException26);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException34 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 116706294 + "'", int6 == 116706294);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1973507205 + "'", int10 == 1973507205);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator15);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 988990206 + "'", int24 == 988990206);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 366390592 + "'", int30 == 366390592);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException1 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException19 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException19);
        int int21 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator22 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        int int25 = jsonPatchApplicationExceptionDefaultEquator22.hash(jsonPatchApplicationException24);
        int int26 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException27 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException24);
        boolean boolean28 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException11, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException27);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException29 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException27);
        jsonPatchApplicationException1.addSuppressed((java.lang.Throwable) invalidJsonPatchException29);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1385002085 + "'", int5 == 1385002085);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1764486925 + "'", int9 == 1764486925);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 361683152 + "'", int21 == 361683152);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1225511084 + "'", int25 == 1225511084);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1225511084 + "'", int26 == 1225511084);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator3 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        int int6 = jsonPatchApplicationExceptionDefaultEquator3.hash(jsonPatchApplicationException5);
        java.lang.Throwable throwable7 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException8);
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        boolean boolean13 = jsonPatchApplicationExceptionDefaultEquator3.equate(jsonPatchApplicationException8, jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException19);
        jsonPatchApplicationException15.addSuppressed((java.lang.Throwable) jsonPatchApplicationException19);
        java.lang.Throwable[] throwableArray22 = jsonPatchApplicationException15.getSuppressed();
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        boolean boolean26 = jsonPatchApplicationExceptionDefaultEquator3.equate(jsonPatchApplicationException15, jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("add", (java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException28 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException29 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("number", (java.lang.Throwable) invalidJsonPatchException28);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1139154596 + "'", int6 == 1139154596);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        java.lang.Throwable[] throwableArray48 = invalidJsonPatchException45.getSuppressed();
        java.lang.String str49 = invalidJsonPatchException45.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 774042455 + "'", int9 == 774042455);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1181877772 + "'", int19 == 1181877772);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 401589329 + "'", int23 == 401589329);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1295453738 + "'", int27 == 1295453738);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1147452925 + "'", int39 == 1147452925);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1147536021 + "'", int43 == 1147536021);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1147536021 + "'", int44 == 1147536021);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str49, "io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        jsonPatchApplicationException4.addSuppressed((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException9 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable throwable20 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable20);
        jsonPatchApplicationException18.addSuppressed((java.lang.Throwable) jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException23 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("object", (java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer", (java.lang.Throwable) invalidJsonPatchException25);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1072717468 + "'", int11 == 1072717468);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 541425900 + "'", int15 == 541425900);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 541425900 + "'", int16 == 541425900);
    }

    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        com.fasterxml.jackson.databind.JsonNode jsonNode0 = null;
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags1 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor3 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        noopProcessor3.remove((java.util.List<java.lang.String>) strList7);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript22 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand23 = null;
        serializableEditScript22.append(serializableKeepCommand23);
        java.lang.Object[] objArray25 = new java.lang.Object[] { noopProcessor3, int19, true, 100.0f, serializableEditScript22 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags26 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags1, "", objArray25);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsInsertCommand27 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.CompatibilityFlags>(compatibilityFlags26);
        io.fabric8.zjsonpatch.CompatibilityFlags[] compatibilityFlagsArray28 = new io.fabric8.zjsonpatch.CompatibilityFlags[] { compatibilityFlags26 };
        java.util.EnumSet<io.fabric8.zjsonpatch.CompatibilityFlags> compatibilityFlagsSet30 = java.util.EnumSet.noneOf(io.fabric8.zjsonpatch.CompatibilityFlags.class);
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<io.fabric8.zjsonpatch.CompatibilityFlags>) compatibilityFlagsSet30, compatibilityFlagsArray28);
        // The following exception was thrown during execution in test generation
        try {
            io.fabric8.zjsonpatch.JsonPatch.validate(jsonNode0, compatibilityFlagsSet30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + compatibilityFlags1 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags1.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 756344188 + "'", int19 == 756344188);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertTrue("'" + compatibilityFlags26 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags26.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(compatibilityFlagsArray28);
        org.junit.Assert.assertNotNull(compatibilityFlagsSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        jsonPatchApplicationException20.addSuppressed((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable[] throwableArray27 = jsonPatchApplicationException20.getSuppressed();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        boolean boolean31 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException20, jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7, jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        int int36 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator43 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        jsonPatchApplicationException45.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException50 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException50);
        int int52 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator53 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator53.hash(jsonPatchApplicationException55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException58 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException55);
        boolean boolean59 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException42, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException58);
        int int60 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException58);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 972404072 + "'", int11 == 972404072);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 293623642 + "'", int36 == 293623642);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1336085282 + "'", int40 == 1336085282);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator43);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1027021854 + "'", int52 == 1027021854);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator53);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1610363972 + "'", int56 == 1610363972);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1610363972 + "'", int57 == 1610363972);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1797156130 + "'", int60 == 1797156130);
    }

    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        boolean boolean26 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException9, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException25);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator27 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator27.hash(jsonPatchApplicationException29);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        boolean boolean37 = jsonPatchApplicationExceptionDefaultEquator27.equate(jsonPatchApplicationException32, jsonPatchApplicationException36);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException43);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException43);
        jsonPatchApplicationException36.addSuppressed((java.lang.Throwable) jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator47 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException49);
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        jsonPatchApplicationException49.addSuppressed((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException54 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator57 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable58 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable58);
        int int60 = jsonPatchApplicationExceptionDefaultEquator57.hash(jsonPatchApplicationException59);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException62);
        int int64 = jsonPatchApplicationExceptionDefaultEquator57.hash(jsonPatchApplicationException62);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator65 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        int int68 = jsonPatchApplicationExceptionDefaultEquator65.hash(jsonPatchApplicationException67);
        java.lang.Throwable throwable69 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable69);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException70);
        java.lang.Throwable throwable73 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable73);
        boolean boolean75 = jsonPatchApplicationExceptionDefaultEquator65.equate(jsonPatchApplicationException70, jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException76 = null;
        boolean boolean77 = jsonPatchApplicationExceptionDefaultEquator57.equate(jsonPatchApplicationException74, jsonPatchApplicationException76);
        int int78 = jsonPatchApplicationExceptionDefaultEquator47.hash(jsonPatchApplicationException74);
        boolean boolean79 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException36, jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator80 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable81 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException82 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable81);
        int int83 = jsonPatchApplicationExceptionDefaultEquator80.hash(jsonPatchApplicationException82);
        java.lang.Throwable throwable84 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException85 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable84);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException86 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException85);
        int int87 = jsonPatchApplicationExceptionDefaultEquator80.hash(jsonPatchApplicationException85);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException88 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException85);
        int int89 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException88);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 538672943 + "'", int3 == 538672943);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1464007497 + "'", int7 == 1464007497);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1575545563 + "'", int19 == 1575545563);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1268932571 + "'", int23 == 1268932571);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1268932571 + "'", int24 == 1268932571);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 667416236 + "'", int30 == 667416236);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator47);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 54067074 + "'", int56 == 54067074);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator57);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1300393856 + "'", int60 == 1300393856);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 627572104 + "'", int64 == 627572104);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator65);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1443768063 + "'", int68 == 1443768063);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1717064746 + "'", int78 == 1717064746);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator80);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 366909319 + "'", int83 == 366909319);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 398542502 + "'", int87 == 398542502);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 244670553 + "'", int89 == 244670553);
    }

    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("test");
        int int12 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException11);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        jsonPatchApplicationException15.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException20 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        jsonPatchApplicationException15.addSuppressed((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("add", (java.lang.Throwable) jsonPatchApplicationException22);
        int int26 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException22);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1874274734 + "'", int9 == 1874274734);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 95028322 + "'", int12 == 95028322);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 458966451 + "'", int26 == 458966451);
    }

    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("test");
        int int13 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator14 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException16);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        jsonPatchApplicationException16.addSuppressed((java.lang.Throwable) jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException21 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator14.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator24 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        jsonPatchApplicationException26.addSuppressed((java.lang.Throwable) jsonPatchApplicationException29);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException31 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException31);
        int int33 = jsonPatchApplicationExceptionDefaultEquator24.hash(jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator34 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        int int37 = jsonPatchApplicationExceptionDefaultEquator34.hash(jsonPatchApplicationException36);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        int int41 = jsonPatchApplicationExceptionDefaultEquator34.hash(jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator44 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable45 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException46);
        java.lang.Throwable throwable48 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable48);
        jsonPatchApplicationException46.addSuppressed((java.lang.Throwable) jsonPatchApplicationException49);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException51 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException51);
        int int53 = jsonPatchApplicationExceptionDefaultEquator44.hash(jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator54 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator54.hash(jsonPatchApplicationException56);
        int int58 = jsonPatchApplicationExceptionDefaultEquator44.hash(jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException59 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException56);
        boolean boolean60 = jsonPatchApplicationExceptionDefaultEquator34.equate(jsonPatchApplicationException43, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException59);
        boolean boolean61 = jsonPatchApplicationExceptionDefaultEquator14.equate(jsonPatchApplicationException32, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException59);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator62 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable63 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException64);
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        jsonPatchApplicationException64.addSuppressed((java.lang.Throwable) jsonPatchApplicationException67);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException69 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException69);
        int int71 = jsonPatchApplicationExceptionDefaultEquator62.hash(jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator72 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable73 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable73);
        int int75 = jsonPatchApplicationExceptionDefaultEquator72.hash(jsonPatchApplicationException74);
        int int76 = jsonPatchApplicationExceptionDefaultEquator62.hash(jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException77 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException74);
        int int78 = jsonPatchApplicationExceptionDefaultEquator14.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException77);
        int int79 = jsonPatchApplicationExceptionDefaultEquator1.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException77);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException80 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.InvalidJsonPatchException: io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) invalidJsonPatchException77);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 903525487 + "'", int10 == 903525487);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 890794728 + "'", int13 == 890794728);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator14);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 790153889 + "'", int23 == 790153889);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator24);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1765393276 + "'", int33 == 1765393276);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 422768428 + "'", int37 == 422768428);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 905848574 + "'", int41 == 905848574);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator44);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1690942882 + "'", int53 == 1690942882);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator54);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1998560713 + "'", int57 == 1998560713);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1998560713 + "'", int58 == 1998560713);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator62);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2018970057 + "'", int71 == 2018970057);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 603747386 + "'", int75 == 603747386);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 603747386 + "'", int76 == 603747386);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 102917414 + "'", int78 == 102917414);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 102917414 + "'", int79 == 102917414);
    }

    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        int int9 = jsonPatchApplicationExceptionDefaultEquator1.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException8);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException10 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("integer", (java.lang.Throwable) invalidJsonPatchException8);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 995196832 + "'", int9 == 995196832);
    }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        boolean boolean11 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException6, jsonPatchApplicationException10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException10);
        java.lang.String str13 = jsonPatchApplicationException12.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1320183032 + "'", int4 == 1320183032);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.JsonPatchApplicationException" + "'", str13, "io.fabric8.zjsonpatch.JsonPatchApplicationException: io.fabric8.zjsonpatch.JsonPatchApplicationException");
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        java.lang.Throwable[] throwableArray48 = invalidJsonPatchException45.getSuppressed();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.lang.Throwable[]> throwableArrayKeepCommand49 = new io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.lang.Throwable[]>(throwableArray48);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2062463965 + "'", int9 == 2062463965);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1489779819 + "'", int19 == 1489779819);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14232363 + "'", int23 == 14232363);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1620115584 + "'", int27 == 1620115584);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 961457987 + "'", int39 == 961457987);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 418815993 + "'", int43 == 418815993);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 418815993 + "'", int44 == 418815993);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        boolean boolean12 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException7, jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable[] throwableArray21 = jsonPatchApplicationException14.getSuppressed();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean25 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException14, jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("io.fabric8.zjsonpatch.JsonPatchApplicationException", (java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.String str28 = jsonPatchApplicationException26.toString();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 994620819 + "'", int5 == 994620819);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "io.fabric8.zjsonpatch.JsonPatchApplicationException: number" + "'", str28, "io.fabric8.zjsonpatch.JsonPatchApplicationException: number");
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException22, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        jsonPatchApplicationException35.addSuppressed((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException40 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException41);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator45 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        int int48 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException47);
        boolean boolean49 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException44, jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException51 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("hi!");
        int int52 = jsonPatchApplicationExceptionDefaultEquator33.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException51);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) invalidJsonPatchException51);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 664124079 + "'", int9 == 664124079);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1876713277 + "'", int19 == 1876713277);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 766197643 + "'", int23 == 766197643);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 766197643 + "'", int24 == 766197643);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 988037664 + "'", int42 == 988037664);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1400979775 + "'", int48 == 1400979775);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1963847193 + "'", int52 == 1963847193);
    }

    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator30 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        jsonPatchApplicationException32.addSuppressed((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException37 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException37);
        int int39 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator40 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable41 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable41);
        int int43 = jsonPatchApplicationExceptionDefaultEquator40.hash(jsonPatchApplicationException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator30.hash(jsonPatchApplicationException42);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException42);
        boolean boolean46 = jsonPatchApplicationExceptionDefaultEquator20.equate(jsonPatchApplicationException29, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        boolean boolean47 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException18, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException45);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator48 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException50);
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        jsonPatchApplicationException50.addSuppressed((java.lang.Throwable) jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException55 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator58 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        int int61 = jsonPatchApplicationExceptionDefaultEquator58.hash(jsonPatchApplicationException60);
        int int62 = jsonPatchApplicationExceptionDefaultEquator48.hash(jsonPatchApplicationException60);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException63 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException60);
        int int64 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException63);
        java.lang.Throwable[] throwableArray65 = invalidJsonPatchException63.getSuppressed();
        java.lang.Class<?> wildcardClass66 = invalidJsonPatchException63.getClass();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1319191637 + "'", int9 == 1319191637);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1937210946 + "'", int19 == 1937210946);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1752838494 + "'", int23 == 1752838494);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1409067741 + "'", int27 == 1409067741);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator30);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1902454638 + "'", int39 == 1902454638);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1740398787 + "'", int43 == 1740398787);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1740398787 + "'", int44 == 1740398787);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator48);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1290780455 + "'", int57 == 1290780455);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator58);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 435143445 + "'", int61 == 435143445);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 435143445 + "'", int62 == 435143445);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2116723797 + "'", int64 == 2116723797);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 879376229 + "'", int9 == 879376229);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 695165212 + "'", int15 == 695165212);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor0 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList8, (java.util.List<java.lang.String>) strList14);
        noopProcessor0.remove(strList16);
        java.lang.String[] strArray22 = new java.lang.String[] { "integer", "test", "hi!", "io.fabric8.zjsonpatch.JsonPatchApplicationException" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray28 = new java.lang.String[] { "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "integer" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        noopProcessor0.move((java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList29);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags33 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor35 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        noopProcessor35.remove((java.util.List<java.lang.String>) strList39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException49 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand55 = null;
        serializableEditScript54.append(serializableKeepCommand55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { noopProcessor35, int51, true, 100.0f, serializableEditScript54 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags58 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags33, "", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor59 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(noopProcessor0, "io.fabric8.zjsonpatch.JsonPatchApplicationException", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor60 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray67 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.lang.String[] strArray73 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList68, (java.util.List<java.lang.String>) strList74);
        noopProcessor60.remove(strList76);
        com.fasterxml.jackson.databind.JsonNode jsonNode78 = null;
        noopProcessor0.add(strList76, jsonNode78);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags33 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags33.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 560734060 + "'", int51 == 560734060);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + compatibilityFlags58 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags58.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(noopProcessor59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException22, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        jsonPatchApplicationException35.addSuppressed((java.lang.Throwable) jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException40 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException35);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException40);
        int int42 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException41);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator43 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException45);
        int int47 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException48 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException45);
        int int49 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator51 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        int int54 = jsonPatchApplicationExceptionDefaultEquator51.hash(jsonPatchApplicationException53);
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException56);
        java.lang.Throwable throwable59 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable59);
        boolean boolean61 = jsonPatchApplicationExceptionDefaultEquator51.equate(jsonPatchApplicationException56, jsonPatchApplicationException60);
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException67);
        jsonPatchApplicationException63.addSuppressed((java.lang.Throwable) jsonPatchApplicationException67);
        java.lang.Throwable[] throwableArray70 = jsonPatchApplicationException63.getSuppressed();
        java.lang.Throwable throwable71 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable71);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException72);
        boolean boolean74 = jsonPatchApplicationExceptionDefaultEquator51.equate(jsonPatchApplicationException63, jsonPatchApplicationException73);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException75 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("add", (java.lang.Throwable) jsonPatchApplicationException73);
        int int76 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException73);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1151391762 + "'", int9 == 1151391762);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92274206 + "'", int19 == 92274206);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 46013165 + "'", int23 == 46013165);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 46013165 + "'", int24 == 46013165);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1929129678 + "'", int42 == 1929129678);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator43);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 126089657 + "'", int46 == 126089657);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 126089657 + "'", int47 == 126089657);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 126089657 + "'", int49 == 126089657);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1902935021 + "'", int54 == 1902935021);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1121727955 + "'", int76 == 1121727955);
    }

    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test234");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        int int4 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException6);
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        boolean boolean11 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException6, jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException17);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        java.lang.Throwable[] throwableArray20 = jsonPatchApplicationException13.getSuppressed();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        boolean boolean24 = jsonPatchApplicationExceptionDefaultEquator1.equate(jsonPatchApplicationException13, jsonPatchApplicationException23);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException26);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException30);
        jsonPatchApplicationException26.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("boolean", (java.lang.Throwable) jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator35 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        jsonPatchApplicationException37.addSuppressed((java.lang.Throwable) jsonPatchApplicationException40);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException42 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator45 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        int int48 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException47);
        int int49 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException47);
        java.lang.Throwable throwable50 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable50);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException51);
        int int54 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException51);
        jsonPatchApplicationException30.addSuppressed((java.lang.Throwable) jsonPatchApplicationException51);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 348946448 + "'", int4 == 348946448);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator35);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1836449272 + "'", int44 == 1836449272);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1250951418 + "'", int48 == 1250951418);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1250951418 + "'", int49 == 1250951418);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1702404188 + "'", int54 == 1702404188);
    }

    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable[] throwableArray8 = invalidJsonPatchException7.getSuppressed();
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("remove", (java.lang.Throwable) invalidJsonPatchException7);
        java.lang.Throwable[] throwableArray10 = jsonPatchApplicationException9.getSuppressed();
        java.lang.Object[][] objArray11 = new java.lang.Object[][] { throwableArray10 };
        java.util.ArrayList<java.lang.Object[]> objArrayList12 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList12, objArray11);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags14 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor16 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        noopProcessor16.remove((java.util.List<java.lang.String>) strList20);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator23 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException25.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException30 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException30);
        int int32 = jsonPatchApplicationExceptionDefaultEquator23.hash(jsonPatchApplicationException31);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript35 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand36 = null;
        serializableEditScript35.append(serializableKeepCommand36);
        java.lang.Object[] objArray38 = new java.lang.Object[] { noopProcessor16, int32, true, 100.0f, serializableEditScript35 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags39 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags14, "", objArray38);
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException41);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException41);
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        jsonPatchApplicationException41.addSuppressed((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable[] throwableArray48 = jsonPatchApplicationException41.getSuppressed();
        java.lang.Object[][] objArray49 = new java.lang.Object[][] { objArray38, throwableArray48 };
        java.util.ArrayList<java.lang.Object[]> objArrayList50 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList50, objArray49);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags52 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor54 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        noopProcessor54.remove((java.util.List<java.lang.String>) strList58);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator61 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable throwable65 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable65);
        jsonPatchApplicationException63.addSuppressed((java.lang.Throwable) jsonPatchApplicationException66);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException68 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException68);
        int int70 = jsonPatchApplicationExceptionDefaultEquator61.hash(jsonPatchApplicationException69);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript73 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand74 = null;
        serializableEditScript73.append(serializableKeepCommand74);
        java.lang.Object[] objArray76 = new java.lang.Object[] { noopProcessor54, int70, true, 100.0f, serializableEditScript73 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags77 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags52, "", objArray76);
        java.lang.Throwable throwable78 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException79 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable78);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException80 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException79);
        java.lang.Throwable throwable81 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException82 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable81);
        jsonPatchApplicationException79.addSuppressed((java.lang.Throwable) jsonPatchApplicationException82);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException84 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException79);
        java.lang.Throwable[] throwableArray85 = invalidJsonPatchException84.getSuppressed();
        java.lang.Object[][] objArray86 = new java.lang.Object[][] { objArray76, throwableArray85 };
        java.util.ArrayList<java.lang.Object[]> objArrayList87 = new java.util.ArrayList<java.lang.Object[]>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.Object[]>) objArrayList87, objArray86);
        io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]> objArraySequencesComparator89 = new io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>((java.util.List<java.lang.Object[]>) objArrayList50, (java.util.List<java.lang.Object[]>) objArrayList87);
        io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]> objArraySequencesComparator90 = new io.fabric8.zjsonpatch.internal.collections4.sequence.SequencesComparator<java.lang.Object[]>((java.util.List<java.lang.Object[]>) objArrayList12, (java.util.List<java.lang.Object[]>) objArrayList87);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags14 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags14.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator23);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 402154413 + "'", int32 == 402154413);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertTrue("'" + compatibilityFlags39 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags39.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags52 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags52.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator61);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1474994855 + "'", int70 == 1474994855);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertTrue("'" + compatibilityFlags77 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags77.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        jsonPatchApplicationException20.addSuppressed((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable[] throwableArray27 = jsonPatchApplicationException20.getSuppressed();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        boolean boolean31 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException20, jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator32 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable33 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable33);
        int int35 = jsonPatchApplicationExceptionDefaultEquator32.hash(jsonPatchApplicationException34);
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        java.lang.Throwable throwable40 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable40);
        boolean boolean42 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException37, jsonPatchApplicationException41);
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException48);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        java.lang.Throwable[] throwableArray51 = jsonPatchApplicationException44.getSuppressed();
        java.lang.Throwable throwable52 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException53);
        boolean boolean55 = jsonPatchApplicationExceptionDefaultEquator32.equate(jsonPatchApplicationException44, jsonPatchApplicationException54);
        boolean boolean56 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException20, jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator57 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable58 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException59 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable58);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException59);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        jsonPatchApplicationException59.addSuppressed((java.lang.Throwable) jsonPatchApplicationException62);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException64 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException59);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException64);
        int int66 = jsonPatchApplicationExceptionDefaultEquator57.hash(jsonPatchApplicationException65);
        int int67 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException65);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException68 = null;
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator69 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable70 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable70);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException72 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException71);
        java.lang.Throwable throwable73 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable73);
        jsonPatchApplicationException71.addSuppressed((java.lang.Throwable) jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException76 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException71);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException77 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException76);
        int int78 = jsonPatchApplicationExceptionDefaultEquator69.hash(jsonPatchApplicationException77);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator79 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable80 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException81 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable80);
        int int82 = jsonPatchApplicationExceptionDefaultEquator79.hash(jsonPatchApplicationException81);
        int int83 = jsonPatchApplicationExceptionDefaultEquator69.hash(jsonPatchApplicationException81);
        java.lang.Throwable throwable84 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException85 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable84);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException86 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException85);
        java.lang.Throwable throwable87 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException88 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable87);
        jsonPatchApplicationException85.addSuppressed((java.lang.Throwable) jsonPatchApplicationException88);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException90 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException85);
        jsonPatchApplicationException81.addSuppressed((java.lang.Throwable) jsonPatchApplicationException85);
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionKeepCommand92 = new io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<io.fabric8.zjsonpatch.JsonPatchApplicationException>(jsonPatchApplicationException81);
        boolean boolean93 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException68, jsonPatchApplicationException81);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 137751950 + "'", int3 == 137751950);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 550355061 + "'", int7 == 550355061);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 564707646 + "'", int11 == 564707646);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1281355383 + "'", int35 == 1281355383);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator57);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1929237196 + "'", int66 == 1929237196);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1929237196 + "'", int67 == 1929237196);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator69);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1547565209 + "'", int78 == 1547565209);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator79);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1208052045 + "'", int82 == 1208052045);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1208052045 + "'", int83 == 1208052045);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("test");
        int int12 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException15);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        jsonPatchApplicationException15.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException20 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException20);
        int int22 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException21);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator23 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable24 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException25);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        jsonPatchApplicationException25.addSuppressed((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException30 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException25);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException30);
        int int32 = jsonPatchApplicationExceptionDefaultEquator23.hash(jsonPatchApplicationException31);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator33 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable34 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException35 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable34);
        int int36 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException35);
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator33.hash(jsonPatchApplicationException38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException42 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator43 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException46 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException45);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        jsonPatchApplicationException45.addSuppressed((java.lang.Throwable) jsonPatchApplicationException48);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException50 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException45);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException51 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException50);
        int int52 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException51);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator53 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        int int56 = jsonPatchApplicationExceptionDefaultEquator53.hash(jsonPatchApplicationException55);
        int int57 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException58 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException55);
        boolean boolean59 = jsonPatchApplicationExceptionDefaultEquator33.equate(jsonPatchApplicationException42, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException58);
        boolean boolean60 = jsonPatchApplicationExceptionDefaultEquator13.equate(jsonPatchApplicationException31, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException58);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator61 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable62 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable62);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException63);
        java.lang.Throwable throwable65 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable65);
        jsonPatchApplicationException63.addSuppressed((java.lang.Throwable) jsonPatchApplicationException66);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException68 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException68);
        int int70 = jsonPatchApplicationExceptionDefaultEquator61.hash(jsonPatchApplicationException69);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator71 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable72 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException73 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable72);
        int int74 = jsonPatchApplicationExceptionDefaultEquator71.hash(jsonPatchApplicationException73);
        int int75 = jsonPatchApplicationExceptionDefaultEquator61.hash(jsonPatchApplicationException73);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException76 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException73);
        int int77 = jsonPatchApplicationExceptionDefaultEquator13.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException76);
        int int78 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException76);
        java.lang.Throwable throwable79 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException80 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable79);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException81 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException80);
        java.lang.Throwable throwable82 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException83 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable82);
        jsonPatchApplicationException80.addSuppressed((java.lang.Throwable) jsonPatchApplicationException83);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException85 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException80);
        java.lang.Throwable throwable86 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException87 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable86);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException88 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException87);
        jsonPatchApplicationException80.addSuppressed((java.lang.Throwable) jsonPatchApplicationException87);
        int int90 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException87);
        java.lang.Throwable throwable91 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException92 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable91);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException93 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException92);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException95 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("boolean");
        boolean boolean96 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException93, jsonPatchApplicationException95);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 151176196 + "'", int9 == 151176196);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1613984934 + "'", int12 == 1613984934);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2089967091 + "'", int22 == 2089967091);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator23);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69388231 + "'", int32 == 69388231);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1794599797 + "'", int36 == 1794599797);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1229385130 + "'", int40 == 1229385130);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator43);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1968535257 + "'", int52 == 1968535257);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator53);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1693684903 + "'", int56 == 1693684903);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1693684903 + "'", int57 == 1693684903);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator61);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 883041727 + "'", int70 == 883041727);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator71);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 946382601 + "'", int74 == 946382601);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 946382601 + "'", int75 == 946382601);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 418091221 + "'", int77 == 418091221);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 418091221 + "'", int78 == 418091221);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1396226359 + "'", int90 == 1396226359);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor0 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "remove", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "remove", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.lang.String[] strArray13 = new java.lang.String[] { "test", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = io.fabric8.zjsonpatch.internal.collections4.ListUtils.longestCommonSubsequence((java.util.List<java.lang.String>) strList8, (java.util.List<java.lang.String>) strList14);
        noopProcessor0.remove(strList16);
        java.lang.String[] strArray22 = new java.lang.String[] { "integer", "test", "hi!", "io.fabric8.zjsonpatch.JsonPatchApplicationException" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String[] strArray28 = new java.lang.String[] { "io.fabric8.zjsonpatch.JsonPatchApplicationException", "", "integer" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        noopProcessor0.move((java.util.List<java.lang.String>) strList23, (java.util.List<java.lang.String>) strList29);
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags33 = io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS;
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor35 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        noopProcessor35.remove((java.util.List<java.lang.String>) strList39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException49 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable> serializableEditScript54 = new io.fabric8.zjsonpatch.internal.collections4.sequence.EditScript<java.io.Serializable>();
        io.fabric8.zjsonpatch.internal.collections4.sequence.KeepCommand<java.io.Serializable> serializableKeepCommand55 = null;
        serializableEditScript54.append(serializableKeepCommand55);
        java.lang.Object[] objArray57 = new java.lang.Object[] { noopProcessor35, int51, true, 100.0f, serializableEditScript54 };
        io.fabric8.zjsonpatch.CompatibilityFlags compatibilityFlags58 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(compatibilityFlags33, "", objArray57);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor59 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(noopProcessor0, "io.fabric8.zjsonpatch.JsonPatchApplicationException", objArray57);
        java.lang.String[] strArray66 = new java.lang.String[] { "test", "", "io.fabric8.zjsonpatch.JsonPatchApplicationException", "number", "add", "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        noopProcessor59.remove((java.util.List<java.lang.String>) strList67);
        io.fabric8.zjsonpatch.NoopProcessor noopProcessor70 = new io.fabric8.zjsonpatch.NoopProcessor();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "test" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        noopProcessor70.remove((java.util.List<java.lang.String>) strList74);
        noopProcessor59.remove((java.util.List<java.lang.String>) strList74);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + compatibilityFlags33 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags33.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 902619308 + "'", int51 == 902619308);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertTrue("'" + compatibilityFlags58 + "' != '" + io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS + "'", compatibilityFlags58.equals(io.fabric8.zjsonpatch.CompatibilityFlags.MISSING_VALUES_AS_NULLS));
        org.junit.Assert.assertNotNull(noopProcessor59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        java.lang.Throwable throwable8 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable8);
        boolean boolean10 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException5, jsonPatchApplicationException9);
        java.lang.Class<?> wildcardClass11 = jsonPatchApplicationException5.getClass();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1651814299 + "'", int3 == 1651814299);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        jsonPatchApplicationException4.addSuppressed((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException9 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException4);
        int int10 = jsonPatchApplicationExceptionDefaultEquator2.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException9);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator11 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException16);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException18 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator21 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator21.hash(jsonPatchApplicationException23);
        int int25 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException23);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException26 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException23);
        java.lang.Throwable throwable27 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException28);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        jsonPatchApplicationException30.addSuppressed((java.lang.Throwable) jsonPatchApplicationException32);
        boolean boolean34 = jsonPatchApplicationExceptionDefaultEquator2.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException26, jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator35 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable36 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException37 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable36);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException37);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        jsonPatchApplicationException37.addSuppressed((java.lang.Throwable) jsonPatchApplicationException40);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException42 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException42);
        int int44 = jsonPatchApplicationExceptionDefaultEquator35.hash(jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator45 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        java.lang.Throwable throwable49 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable49);
        jsonPatchApplicationException47.addSuppressed((java.lang.Throwable) jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException52 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException52);
        int int54 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException53);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator55 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        int int58 = jsonPatchApplicationExceptionDefaultEquator55.hash(jsonPatchApplicationException57);
        int int59 = jsonPatchApplicationExceptionDefaultEquator45.hash(jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException60 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException57);
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException63 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException62);
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        jsonPatchApplicationException62.addSuppressed((java.lang.Throwable) jsonPatchApplicationException65);
        boolean boolean67 = jsonPatchApplicationExceptionDefaultEquator35.equate(jsonPatchApplicationException57, jsonPatchApplicationException65);
        int int68 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException69 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("", (java.lang.Throwable) jsonPatchApplicationException57);
        java.lang.Throwable[] throwableArray70 = invalidJsonPatchException69.getSuppressed();
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException71 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("boolean", (java.lang.Throwable) invalidJsonPatchException69);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1859694231 + "'", int10 == 1859694231);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator11);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2106967564 + "'", int20 == 2106967564);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 543249370 + "'", int24 == 543249370);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 543249370 + "'", int25 == 543249370);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator35);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 658601447 + "'", int44 == 658601447);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator45);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1092008783 + "'", int54 == 1092008783);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator55);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 816656790 + "'", int58 == 816656790);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 816656790 + "'", int59 == 816656790);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 816656790 + "'", int68 == 816656790);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator2 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable3 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable3);
        int int5 = jsonPatchApplicationExceptionDefaultEquator2.hash(jsonPatchApplicationException4);
        java.lang.Throwable throwable6 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException7 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable6);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException7);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        boolean boolean12 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException7, jsonPatchApplicationException11);
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException14);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        jsonPatchApplicationException14.addSuppressed((java.lang.Throwable) jsonPatchApplicationException18);
        java.lang.Throwable[] throwableArray21 = jsonPatchApplicationException14.getSuppressed();
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException23);
        boolean boolean25 = jsonPatchApplicationExceptionDefaultEquator2.equate(jsonPatchApplicationException14, jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("number", (java.lang.Throwable) jsonPatchApplicationException24);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException27 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("", (java.lang.Throwable) jsonPatchApplicationException26);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 164942907 + "'", int5 == 164942907);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test267");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        int int13 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException12);
        java.lang.Throwable throwable15 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException16 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable15);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException16);
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        jsonPatchApplicationException16.addSuppressed((java.lang.Throwable) jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException21 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException16);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException16);
        java.lang.Throwable[] throwableArray23 = jsonPatchApplicationException16.getSuppressed();
        java.lang.Object[] objArray25 = null;
        java.lang.Throwable[] throwableArray26 = io.fabric8.zjsonpatch.internal.guava.Preconditions.checkNotNull(throwableArray23, "remove", objArray25);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 56873533 + "'", int9 == 56873533);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1572846811 + "'", int13 == 1572846811);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1572846811 + "'", int14 == 1572846811);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test268");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        java.lang.Throwable throwable10 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable10);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator12 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable13 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator12.hash(jsonPatchApplicationException14);
        boolean boolean16 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException11, jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator18 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException20);
        java.lang.Throwable throwable22 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable22);
        jsonPatchApplicationException20.addSuppressed((java.lang.Throwable) jsonPatchApplicationException23);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException25);
        int int27 = jsonPatchApplicationExceptionDefaultEquator18.hash(jsonPatchApplicationException26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("test");
        int int30 = jsonPatchApplicationExceptionDefaultEquator18.hash(jsonPatchApplicationException29);
        invalidJsonPatchException17.addSuppressed((java.lang.Throwable) jsonPatchApplicationException29);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 161995681 + "'", int9 == 161995681);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1266625242 + "'", int15 == 1266625242);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator18);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1178364376 + "'", int27 == 1178364376);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1813284499 + "'", int30 == 1813284499);
    }

    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test270");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        int int3 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        int int7 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator8 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable9 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException10 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable9);
        int int11 = jsonPatchApplicationExceptionDefaultEquator8.hash(jsonPatchApplicationException10);
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        boolean boolean18 = jsonPatchApplicationExceptionDefaultEquator8.equate(jsonPatchApplicationException13, jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = null;
        boolean boolean20 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException17, jsonPatchApplicationException19);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException21 = null;
        int int22 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException21);
        java.lang.Throwable throwable23 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable23);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException25 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        jsonPatchApplicationException24.addSuppressed((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException29 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException24);
        java.lang.Throwable[] throwableArray30 = invalidJsonPatchException29.getSuppressed();
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException31 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException29);
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException34 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException33);
        invalidJsonPatchException31.addSuppressed((java.lang.Throwable) invalidJsonPatchException34);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException36 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException31);
        int int37 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException36);
        java.lang.Throwable throwable39 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException40);
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        jsonPatchApplicationException40.addSuppressed((java.lang.Throwable) jsonPatchApplicationException43);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException45 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException40);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException47);
        jsonPatchApplicationException40.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException50 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("add", (java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator52 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        int int55 = jsonPatchApplicationExceptionDefaultEquator52.hash(jsonPatchApplicationException54);
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException57);
        int int59 = jsonPatchApplicationExceptionDefaultEquator52.hash(jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator62 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable63 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException64 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable63);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException64);
        java.lang.Throwable throwable66 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable66);
        jsonPatchApplicationException64.addSuppressed((java.lang.Throwable) jsonPatchApplicationException67);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException69 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException70 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException69);
        int int71 = jsonPatchApplicationExceptionDefaultEquator62.hash(jsonPatchApplicationException70);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator72 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable73 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException74 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable73);
        int int75 = jsonPatchApplicationExceptionDefaultEquator72.hash(jsonPatchApplicationException74);
        int int76 = jsonPatchApplicationExceptionDefaultEquator62.hash(jsonPatchApplicationException74);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException77 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException74);
        boolean boolean78 = jsonPatchApplicationExceptionDefaultEquator52.equate(jsonPatchApplicationException61, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException77);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException79 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("string", (java.lang.Throwable) jsonPatchApplicationException61);
        boolean boolean80 = jsonPatchApplicationExceptionDefaultEquator0.equate((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException50, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException79);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 470643915 + "'", int3 == 470643915);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1323635819 + "'", int7 == 1323635819);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1001470113 + "'", int11 == 1001470113);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(throwableArray30);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1260689076 + "'", int37 == 1260689076);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1015120870 + "'", int55 == 1015120870);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1187039236 + "'", int59 == 1187039236);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator62);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 386352229 + "'", int71 == 386352229);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1942307564 + "'", int75 == 1942307564);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1942307564 + "'", int76 == 1942307564);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test275");
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException1 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("null");
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException2 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) invalidJsonPatchException1);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator3 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException5);
        java.lang.Throwable throwable7 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable7);
        jsonPatchApplicationException5.addSuppressed((java.lang.Throwable) jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException10 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException10);
        java.lang.Throwable[] throwableArray12 = invalidJsonPatchException10.getSuppressed();
        int int13 = jsonPatchApplicationExceptionDefaultEquator3.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException10);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException14 = null;
        int int15 = jsonPatchApplicationExceptionDefaultEquator3.hash(jsonPatchApplicationException14);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator17 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable18 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator17.hash(jsonPatchApplicationException19);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable25 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException26 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable25);
        boolean boolean27 = jsonPatchApplicationExceptionDefaultEquator17.equate(jsonPatchApplicationException22, jsonPatchApplicationException26);
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException31 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException29);
        java.lang.Throwable throwable32 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException33);
        jsonPatchApplicationException29.addSuppressed((java.lang.Throwable) jsonPatchApplicationException33);
        java.lang.Throwable[] throwableArray36 = jsonPatchApplicationException29.getSuppressed();
        java.lang.Throwable throwable37 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException38 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable37);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException38);
        boolean boolean40 = jsonPatchApplicationExceptionDefaultEquator17.equate(jsonPatchApplicationException29, jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("add", (java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator42 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable43 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable43);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException44);
        java.lang.Throwable throwable46 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException47 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable46);
        jsonPatchApplicationException44.addSuppressed((java.lang.Throwable) jsonPatchApplicationException47);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException49 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException44);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException50 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException49);
        int int51 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException50);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator52 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable53 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable53);
        int int55 = jsonPatchApplicationExceptionDefaultEquator52.hash(jsonPatchApplicationException54);
        java.lang.Throwable throwable56 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable56);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException57);
        int int59 = jsonPatchApplicationExceptionDefaultEquator52.hash(jsonPatchApplicationException57);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator60 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable61 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException62 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable61);
        int int63 = jsonPatchApplicationExceptionDefaultEquator60.hash(jsonPatchApplicationException62);
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException66 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException67 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException65);
        java.lang.Throwable throwable68 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException69 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable68);
        boolean boolean70 = jsonPatchApplicationExceptionDefaultEquator60.equate(jsonPatchApplicationException65, jsonPatchApplicationException69);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException71 = null;
        boolean boolean72 = jsonPatchApplicationExceptionDefaultEquator52.equate(jsonPatchApplicationException69, jsonPatchApplicationException71);
        int int73 = jsonPatchApplicationExceptionDefaultEquator42.hash(jsonPatchApplicationException69);
        java.lang.Throwable[] throwableArray74 = jsonPatchApplicationException69.getSuppressed();
        boolean boolean75 = jsonPatchApplicationExceptionDefaultEquator3.equate(jsonPatchApplicationException41, jsonPatchApplicationException69);
        invalidJsonPatchException1.addSuppressed((java.lang.Throwable) jsonPatchApplicationException69);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator3);
        org.junit.Assert.assertNotNull(throwableArray12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1325293608 + "'", int13 == 1325293608);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1234476766 + "'", int20 == 1234476766);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator42);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1068291058 + "'", int51 == 1068291058);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2039062448 + "'", int55 == 2039062448);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1159327065 + "'", int59 == 1159327065);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator60);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 415891580 + "'", int63 == 415891580);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1077094086 + "'", int73 == 1077094086);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test278");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        int int9 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException8);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator10 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable11 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException12 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable11);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException12);
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        jsonPatchApplicationException12.addSuppressed((java.lang.Throwable) jsonPatchApplicationException15);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException17 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException12);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException17);
        int int19 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException18);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator20 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        int int23 = jsonPatchApplicationExceptionDefaultEquator20.hash(jsonPatchApplicationException22);
        int int24 = jsonPatchApplicationExceptionDefaultEquator10.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException25 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        boolean boolean32 = jsonPatchApplicationExceptionDefaultEquator0.equate(jsonPatchApplicationException22, jsonPatchApplicationException30);
        java.lang.Throwable[] throwableArray33 = jsonPatchApplicationException22.getSuppressed();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1786012285 + "'", int9 == 1786012285);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator10);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 407209242 + "'", int19 == 407209242);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1856611739 + "'", int23 == 1856611739);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1856611739 + "'", int24 == 1856611739);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test282");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator0 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable1 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException2 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable1);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException2);
        java.lang.Throwable throwable4 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException5 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable4);
        jsonPatchApplicationException2.addSuppressed((java.lang.Throwable) jsonPatchApplicationException5);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException7 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException8 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException7);
        java.lang.Throwable[] throwableArray9 = invalidJsonPatchException7.getSuppressed();
        int int10 = jsonPatchApplicationExceptionDefaultEquator0.hash((io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException7);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException11 = null;
        int int12 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException11);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator13 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable14 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException15 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable14);
        int int16 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException15);
        java.lang.Throwable throwable17 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable17);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException19 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException18);
        int int20 = jsonPatchApplicationExceptionDefaultEquator13.hash(jsonPatchApplicationException18);
        java.lang.Throwable throwable21 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException22 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable21);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException23 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException24 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator25 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable26 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException27 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable26);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException28 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException27);
        java.lang.Throwable throwable29 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException30 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable29);
        jsonPatchApplicationException27.addSuppressed((java.lang.Throwable) jsonPatchApplicationException30);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException32 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException27);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException32);
        int int34 = jsonPatchApplicationExceptionDefaultEquator25.hash(jsonPatchApplicationException33);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator37 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        int int40 = jsonPatchApplicationExceptionDefaultEquator37.hash(jsonPatchApplicationException39);
        boolean boolean41 = jsonPatchApplicationExceptionDefaultEquator25.equate(jsonPatchApplicationException36, jsonPatchApplicationException39);
        boolean boolean42 = jsonPatchApplicationExceptionDefaultEquator13.equate(jsonPatchApplicationException22, jsonPatchApplicationException36);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator43 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable44 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException45 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable44);
        int int46 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException45);
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException48);
        int int50 = jsonPatchApplicationExceptionDefaultEquator43.hash(jsonPatchApplicationException48);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("integer");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator53 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable54 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException55 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable54);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException55);
        java.lang.Throwable throwable57 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException58 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable57);
        jsonPatchApplicationException55.addSuppressed((java.lang.Throwable) jsonPatchApplicationException58);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException60 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException55);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException61 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException60);
        int int62 = jsonPatchApplicationExceptionDefaultEquator53.hash(jsonPatchApplicationException61);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator63 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable64 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException65 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable64);
        int int66 = jsonPatchApplicationExceptionDefaultEquator63.hash(jsonPatchApplicationException65);
        int int67 = jsonPatchApplicationExceptionDefaultEquator53.hash(jsonPatchApplicationException65);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException68 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException65);
        boolean boolean69 = jsonPatchApplicationExceptionDefaultEquator43.equate(jsonPatchApplicationException52, (io.fabric8.zjsonpatch.JsonPatchApplicationException) invalidJsonPatchException68);
        jsonPatchApplicationException22.addSuppressed((java.lang.Throwable) invalidJsonPatchException68);
        int int71 = jsonPatchApplicationExceptionDefaultEquator0.hash(jsonPatchApplicationException22);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException72 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException22);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator0);
        org.junit.Assert.assertNotNull(throwableArray9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 829542098 + "'", int10 == 829542098);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1205055916 + "'", int16 == 1205055916);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 438988126 + "'", int20 == 438988126);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator25);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 687810530 + "'", int34 == 687810530);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator37);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2071979682 + "'", int40 == 2071979682);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator43);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 231520811 + "'", int46 == 231520811);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2116787805 + "'", int50 == 2116787805);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator53);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 773407278 + "'", int62 == 773407278);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator63);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1076004902 + "'", int66 == 1076004902);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1076004902 + "'", int67 == 1076004902);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1557558084 + "'", int71 == 1557558084);
    }

    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test283");
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator1 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable2 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException3 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable2);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException4 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException3);
        java.lang.Throwable throwable5 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException6 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable5);
        jsonPatchApplicationException3.addSuppressed((java.lang.Throwable) jsonPatchApplicationException6);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException8 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException3);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException9 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) invalidJsonPatchException8);
        int int10 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException9);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator11 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable12 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException13 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable12);
        int int14 = jsonPatchApplicationExceptionDefaultEquator11.hash(jsonPatchApplicationException13);
        int int15 = jsonPatchApplicationExceptionDefaultEquator1.hash(jsonPatchApplicationException13);
        java.lang.Throwable throwable16 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException17 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable16);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException18 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException17);
        java.lang.Throwable throwable19 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException20 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable19);
        jsonPatchApplicationException17.addSuppressed((java.lang.Throwable) jsonPatchApplicationException20);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException22 = new io.fabric8.zjsonpatch.InvalidJsonPatchException((java.lang.Throwable) jsonPatchApplicationException17);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException17);
        io.fabric8.zjsonpatch.InvalidJsonPatchException invalidJsonPatchException24 = new io.fabric8.zjsonpatch.InvalidJsonPatchException("object", (java.lang.Throwable) jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionInsertCommand25 = new io.fabric8.zjsonpatch.internal.collections4.sequence.InsertCommand<io.fabric8.zjsonpatch.JsonPatchApplicationException>(jsonPatchApplicationException13);
        io.fabric8.zjsonpatch.internal.collections4.DefaultEquator<io.fabric8.zjsonpatch.JsonPatchApplicationException> jsonPatchApplicationExceptionDefaultEquator27 = io.fabric8.zjsonpatch.internal.collections4.DefaultEquator.defaultEquator();
        java.lang.Throwable throwable28 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException29 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable28);
        int int30 = jsonPatchApplicationExceptionDefaultEquator27.hash(jsonPatchApplicationException29);
        java.lang.Throwable throwable31 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException32 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable31);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException33 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException34 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException32);
        java.lang.Throwable throwable35 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException36 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable35);
        boolean boolean37 = jsonPatchApplicationExceptionDefaultEquator27.equate(jsonPatchApplicationException32, jsonPatchApplicationException36);
        java.lang.Throwable throwable38 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException39 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable38);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException40 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException41 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException39);
        java.lang.Throwable throwable42 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException43 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable42);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException44 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException43);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException43);
        java.lang.Throwable[] throwableArray46 = jsonPatchApplicationException39.getSuppressed();
        java.lang.Throwable throwable47 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException48 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable47);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException49 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException48);
        boolean boolean50 = jsonPatchApplicationExceptionDefaultEquator27.equate(jsonPatchApplicationException39, jsonPatchApplicationException49);
        java.lang.Throwable throwable51 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException52 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable51);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException53 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException52);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException54 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException52);
        java.lang.Throwable throwable55 = null;
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException56 = new io.fabric8.zjsonpatch.JsonPatchApplicationException(throwable55);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException57 = new io.fabric8.zjsonpatch.JsonPatchApplicationException((java.lang.Throwable) jsonPatchApplicationException56);
        jsonPatchApplicationException52.addSuppressed((java.lang.Throwable) jsonPatchApplicationException56);
        jsonPatchApplicationException39.addSuppressed((java.lang.Throwable) jsonPatchApplicationException56);
        io.fabric8.zjsonpatch.JsonPatchApplicationException jsonPatchApplicationException60 = new io.fabric8.zjsonpatch.JsonPatchApplicationException("boolean", (java.lang.Throwable) jsonPatchApplicationException56);
        jsonPatchApplicationException13.addSuppressed((java.lang.Throwable) jsonPatchApplicationException56);
        java.lang.Throwable[] throwableArray62 = jsonPatchApplicationException56.getSuppressed();
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 836000960 + "'", int10 == 836000960);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1712216635 + "'", int14 == 1712216635);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1712216635 + "'", int15 == 1712216635);
        org.junit.Assert.assertNotNull(jsonPatchApplicationExceptionDefaultEquator27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1836228179 + "'", int30 == 1836228179);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(throwableArray62);
    }
testinfected-time, length: 60

    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor9 = null;
        daytimeServer8.removeMonitor(serverMonitor9);
// flaky:         daytimeServer8.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        org.testinfected.time.DaytimeServer daytimeServer1 = new org.testinfected.time.DaytimeServer((int) (byte) 1);
// flaky:         daytimeServer1.start();
    }

    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
// flaky:         daytimeServer13.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
    }

    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.util.Date date5 = systemClock0.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:37:51 CDT 2023");
    }

    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test037");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeClient daytimeClient10 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect3);
        org.testinfected.time.DaytimeServer daytimeServer11 = new org.testinfected.time.DaytimeServer(100, daytimeDialect3);
        org.testinfected.time.ServerMonitor serverMonitor12 = null;
        daytimeServer11.removeMonitor(serverMonitor12);
// flaky:         daytimeServer11.start();
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar(10, (int) (short) 0, 100);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder3.inZone("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        java.lang.Class<?> wildcardClass10 = dateBuilder3.getClass();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
        org.junit.Assert.assertNotNull(dateBuilder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        org.testinfected.time.Clock clock12 = org.testinfected.time.lib.BrokenClock.stoppedAt(date11);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(clock12);
    }

    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date17 = daytimeDialect1.decode("");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 23");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:52 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:52 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
    }

    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect4 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect4.encode(date6);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date9 = dateBuilder8.build();
        java.lang.String str10 = daytimeDialect4.encode(date9);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date12 = systemClock11.now();
        java.util.Date date13 = systemClock11.now();
        java.util.Date date14 = systemClock11.now();
        java.lang.String str15 = daytimeDialect4.encode(date14);
        java.lang.String str16 = daytimeDialect2.encode(date14);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
// flaky:         daytimeServer17.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str10, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        java.util.Date date3 = dateBuilder2.build();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Oct 30 19:00:00 CDT 2023");
    }

    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.DaytimeClient daytimeClient12 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect5);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer(100, daytimeDialect5);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *", (int) (byte) 10, daytimeDialect5);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.lib.SystemClock systemClock22 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date23 = systemClock22.now();
        java.util.Date date24 = systemClock22.now();
        java.util.Date date25 = systemClock22.now();
        java.lang.String str26 = daytimeDialect15.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.util.Date date28 = clock27.now();
        java.lang.String str29 = daytimeDialect5.encode(date28);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:37:53 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:37:53 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:37:53 TT L H msADV UTC(NIST) *");
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder0.atTime((int) (byte) 10, (int) '4', (int) ' ', 100);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder4);
        org.junit.Assert.assertNotNull(dateBuilder9);
    }

    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeClient daytimeClient20 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect13);
        java.util.Date date22 = daytimeDialect13.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect23 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect23.encode(date25);
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect23.encode(date28);
        org.testinfected.time.lib.SystemClock systemClock30 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date31 = systemClock30.now();
        java.util.Date date32 = systemClock30.now();
        java.util.Date date33 = systemClock30.now();
        java.lang.String str34 = daytimeDialect23.encode(date33);
        java.lang.String str35 = daytimeDialect13.encode(date33);
        java.lang.String str36 = daytimeDialect3.encode(date33);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("hi!", 1, daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect23);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeClient daytimeClient14 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *", 0, daytimeDialect2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date15 = daytimeClient14.now();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.NoRouteToHostException: Can't assign requested address (Address not available)");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:00 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
    }

    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:00 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.lib.SystemClock systemClock19 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date20 = systemClock19.now();
        java.util.Date date21 = systemClock19.now();
        java.util.Date date22 = systemClock19.now();
        java.lang.String str23 = daytimeDialect12.encode(date22);
        java.lang.String str24 = daytimeDialect2.encode(date22);
        java.util.Date date25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = daytimeDialect2.encode(date25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:01 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 23-10-31 23:38:01 TT L H msADV UTC(NIST) *");
    }

    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.ServerMonitor serverMonitor48 = null;
        daytimeServer8.addMonitor(serverMonitor48);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
    }

    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.addMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        org.testinfected.time.ServerMonitor serverMonitor60 = null;
        daytimeServer8.removeMonitor(serverMonitor60);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:01 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.lib.SystemClock systemClock10 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date11 = systemClock10.now();
        java.util.Date date12 = systemClock10.now();
        java.util.Date date13 = systemClock10.now();
        java.lang.String str14 = daytimeDialect3.encode(date13);
        java.lang.String str15 = daytimeDialect1.encode(date13);
        java.util.Date date17 = daytimeDialect1.decode("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:02 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 23-10-31 23:38:02 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:38:00 CDT 2023");
    }

    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer8.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeDialect daytimeDialect9 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect9.encode(date11);
        org.testinfected.time.Clock clock13 = org.testinfected.time.lib.BrokenClock.stoppedAt(date11);
        java.lang.String str14 = daytimeDialect2.encode(date11);
        org.testinfected.time.DaytimeClient daytimeClient15 = new org.testinfected.time.DaytimeClient("", (int) (byte) 100, daytimeDialect2);
        java.util.Date date16 = daytimeClient15.now();
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect9);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        java.lang.Class<?> wildcardClass5 = date4.getClass();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        org.testinfected.time.DaytimeDialect daytimeDialect49 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder50 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date51 = dateBuilder50.build();
        java.lang.String str52 = daytimeDialect49.encode(date51);
        org.testinfected.time.lib.DateBuilder dateBuilder53 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date54 = dateBuilder53.build();
        java.lang.String str55 = daytimeDialect49.encode(date54);
        org.testinfected.time.DaytimeServer daytimeServer56 = new org.testinfected.time.DaytimeServer(0, daytimeDialect49);
        org.testinfected.time.lib.SystemClock systemClock57 = new org.testinfected.time.lib.SystemClock();
        daytimeServer56.setInternalClock((org.testinfected.time.Clock) systemClock57);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock57);
        java.util.Date date60 = systemClock57.now();
        java.util.Date date61 = systemClock57.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str52, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str55, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Oct 31 18:38:02 CDT 2023");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:02 CDT 2023");
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder6.onCalendar((int) 'a', (int) (short) 10, 0);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeClient daytimeClient5 = new org.testinfected.time.DaytimeClient("", (int) '4', daytimeDialect3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = daytimeClient5.now();
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.ConnectException: Connection refused (Connection refused)");
        }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect15 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect15.encode(date17);
        org.testinfected.time.lib.DateBuilder dateBuilder19 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date20 = dateBuilder19.build();
        java.lang.String str21 = daytimeDialect15.encode(date20);
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect15);
        org.testinfected.time.DaytimeDialect daytimeDialect25 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect25.encode(date27);
        org.testinfected.time.lib.DateBuilder dateBuilder29 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date30 = dateBuilder29.build();
        java.lang.String str31 = daytimeDialect25.encode(date30);
        org.testinfected.time.DaytimeClient daytimeClient32 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect25);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient32);
        org.testinfected.time.DaytimeDialect daytimeDialect35 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder36 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date37 = dateBuilder36.build();
        java.lang.String str38 = daytimeDialect35.encode(date37);
        org.testinfected.time.lib.DateBuilder dateBuilder39 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date40 = dateBuilder39.build();
        java.lang.String str41 = daytimeDialect35.encode(date40);
        org.testinfected.time.DaytimeServer daytimeServer42 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect35);
        org.testinfected.time.DaytimeDialect daytimeDialect45 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect45.encode(date47);
        org.testinfected.time.lib.DateBuilder dateBuilder49 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date50 = dateBuilder49.build();
        java.lang.String str51 = daytimeDialect45.encode(date50);
        org.testinfected.time.DaytimeClient daytimeClient52 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect45);
        daytimeServer42.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) daytimeClient52);
        org.testinfected.time.lib.SystemClock systemClock55 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date56 = systemClock55.now();
        daytimeServer22.setInternalClock((org.testinfected.time.Clock) systemClock55);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock55);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:03 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str21, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect25);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str38, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str41, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect45);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str51, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar((int) (byte) 10, (int) (short) 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        java.util.Date date54 = systemClock50.now();
        java.util.Date date55 = systemClock50.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Oct 31 18:38:04 CDT 2023");
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar(0, (int) (short) 1, 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:04 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.lib.SystemClock systemClock41 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date42 = systemClock41.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock41);
        org.testinfected.time.ServerMonitor serverMonitor44 = null;
        daytimeServer8.addMonitor(serverMonitor44);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Oct 31 18:38:09 CDT 2023");
    }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.testinfected.time.DaytimeDialect daytimeDialect0 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder1 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date2 = dateBuilder1.build();
        java.lang.String str3 = daytimeDialect0.encode(date2);
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect0.encode(date5);
        org.testinfected.time.lib.SystemClock systemClock7 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date8 = systemClock7.now();
        java.util.Date date9 = systemClock7.now();
        java.util.Date date10 = systemClock7.now();
        java.lang.String str11 = daytimeDialect0.encode(date10);
        java.util.Date date13 = daytimeDialect0.decode("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect0);
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str3, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:10 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 23-10-31 23:38:10 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:37:48 CDT 2023");
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder13 = dateBuilder6.at((int) (short) 0, (-1), (-1), (-1), 10, (int) '4');
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder13);
    }

    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder3 = dateBuilder0.fromMillis(10L);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = dateBuilder3.onCalendar(10, (int) (short) 0, 100);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = dateBuilder3.inZone("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *");
        org.testinfected.time.lib.DateBuilder dateBuilder13 = dateBuilder9.atTime((int) '#', (int) '#', 10);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder3);
        org.junit.Assert.assertNotNull(dateBuilder7);
        org.junit.Assert.assertNotNull(dateBuilder9);
        org.junit.Assert.assertNotNull(dateBuilder13);
    }

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.ServerMonitor serverMonitor41 = null;
        daytimeServer8.addMonitor(serverMonitor41);
        org.testinfected.time.lib.SystemClock systemClock43 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date44 = systemClock43.now();
        java.util.Date date45 = systemClock43.now();
        java.util.Date date46 = systemClock43.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock43);
        java.util.Date date48 = systemClock43.now();
        java.util.Date date49 = systemClock43.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date45);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Oct 31 18:38:10 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:10 CDT 2023");
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        org.testinfected.time.lib.SystemClock systemClock0 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date1 = systemClock0.now();
        java.util.Date date2 = systemClock0.now();
        java.util.Date date3 = systemClock0.now();
        java.util.Date date4 = systemClock0.now();
        org.testinfected.time.Clock clock5 = org.testinfected.time.lib.BrokenClock.stoppedAt(date4);
        java.util.Date date6 = clock5.now();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:15 CDT 2023");
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:38:15 CDT 2023");
    }

    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar((int) (short) 10, (int) (byte) 1, (int) '4');
        org.testinfected.time.lib.DateBuilder dateBuilder12 = dateBuilder10.inZone("JJJJJ 23-10-31 23:38:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:20 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
        org.junit.Assert.assertNotNull(dateBuilder12);
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        org.testinfected.time.ServerMonitor serverMonitor51 = null;
        daytimeServer4.addMonitor(serverMonitor51);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:20 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:20 CDT 2023");
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        java.util.Date date8 = daytimeDialect1.decode("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:37:52 CDT 2023");
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer2 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock3 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date4 = systemClock3.now();
        java.util.Date date5 = systemClock3.now();
        java.lang.String str6 = daytimeDialect1.encode(date5);
        org.testinfected.time.Clock clock7 = org.testinfected.time.lib.BrokenClock.stoppedAt(date5);
        java.util.Date date8 = clock7.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        java.lang.String str19 = daytimeDialect2.encode(date17);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer22 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect21);
        org.testinfected.time.lib.SystemClock systemClock23 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date24 = systemClock23.now();
        java.util.Date date25 = systemClock23.now();
        java.lang.String str26 = daytimeDialect21.encode(date25);
        org.testinfected.time.Clock clock27 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        org.testinfected.time.Clock clock28 = org.testinfected.time.lib.BrokenClock.stoppedAt(date25);
        java.lang.String str29 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(clock28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect10 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder11 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date12 = dateBuilder11.build();
        java.lang.String str13 = daytimeDialect10.encode(date12);
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect10.encode(date15);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect10);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect20);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient27);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeServer daytimeServer37 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect30);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeClient daytimeClient47 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect40);
        daytimeServer37.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        org.testinfected.time.DaytimeDialect daytimeDialect51 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder52 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date53 = dateBuilder52.build();
        java.lang.String str54 = daytimeDialect51.encode(date53);
        org.testinfected.time.lib.DateBuilder dateBuilder55 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date56 = dateBuilder55.build();
        java.lang.String str57 = daytimeDialect51.encode(date56);
        org.testinfected.time.DaytimeServer daytimeServer58 = new org.testinfected.time.DaytimeServer(0, daytimeDialect51);
        org.testinfected.time.lib.SystemClock systemClock59 = new org.testinfected.time.lib.SystemClock();
        daytimeServer58.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) systemClock59);
        java.util.Date date62 = systemClock59.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer8.start();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect51);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str54, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str57, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Oct 31 18:38:21 CDT 2023");
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect12 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder13 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date14 = dateBuilder13.build();
        java.lang.String str15 = daytimeDialect12.encode(date14);
        org.testinfected.time.lib.DateBuilder dateBuilder16 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date17 = dateBuilder16.build();
        java.lang.String str18 = daytimeDialect12.encode(date17);
        org.testinfected.time.DaytimeClient daytimeClient19 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect12);
        java.util.Date date21 = daytimeDialect12.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect22 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder23 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date24 = dateBuilder23.build();
        java.lang.String str25 = daytimeDialect22.encode(date24);
        org.testinfected.time.lib.DateBuilder dateBuilder26 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date27 = dateBuilder26.build();
        java.lang.String str28 = daytimeDialect22.encode(date27);
        org.testinfected.time.lib.SystemClock systemClock29 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date30 = systemClock29.now();
        java.util.Date date31 = systemClock29.now();
        java.util.Date date32 = systemClock29.now();
        java.lang.String str33 = daytimeDialect22.encode(date32);
        java.lang.String str34 = daytimeDialect12.encode(date32);
        java.lang.String str35 = daytimeDialect2.encode(date32);
        org.testinfected.time.DaytimeServer daytimeServer36 = new org.testinfected.time.DaytimeServer((int) (byte) 1, daytimeDialect2);
        org.testinfected.time.ServerMonitor serverMonitor37 = null;
        daytimeServer36.addMonitor(serverMonitor37);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer36.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str15, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str18, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect22);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str28, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:21 CDT 2023");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Oct 31 18:38:21 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *" + "'", str35, "JJJJJ 23-10-31 23:38:21 TT L H msADV UTC(NIST) *");
    }

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
// flaky:         daytimeServer4.start();
        org.junit.Assert.assertNotNull(daytimeDialect2);
    }

    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.lib.SystemClock systemClock8 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date9 = systemClock8.now();
        java.util.Date date10 = systemClock8.now();
        java.util.Date date11 = systemClock8.now();
        java.lang.String str12 = daytimeDialect1.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) (byte) 10, daytimeDialect1);
        org.testinfected.time.ServerMonitor serverMonitor14 = null;
        daytimeServer13.removeMonitor(serverMonitor14);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.atTime((int) (short) 10, (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
    }

    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date10 = systemClock9.now();
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.lang.String str13 = daytimeDialect2.encode(date12);
        org.testinfected.time.DaytimeDialect daytimeDialect14 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect14.encode(date16);
        org.testinfected.time.lib.DateBuilder dateBuilder18 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date19 = dateBuilder18.build();
        java.lang.String str20 = daytimeDialect14.encode(date19);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date22 = systemClock21.now();
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.lang.String str25 = daytimeDialect14.encode(date24);
        java.lang.String str26 = daytimeDialect2.encode(date24);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("JJJJJ 99-12-31 23:00:37 TT L H msADV UTC(NIST) *", 10, daytimeDialect2);
        java.util.Date date29 = daytimeDialect2.decode("JJJJJ 23-10-31 23:38:03 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str20, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str25, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:03 CDT 2023");
    }

    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeClient daytimeClient9 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect13 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect13.encode(date15);
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect13.encode(date18);
        org.testinfected.time.DaytimeServer daytimeServer20 = new org.testinfected.time.DaytimeServer(0, daytimeDialect13);
        org.testinfected.time.lib.SystemClock systemClock21 = new org.testinfected.time.lib.SystemClock();
        daytimeServer20.setInternalClock((org.testinfected.time.Clock) systemClock21);
        java.util.Date date23 = systemClock21.now();
        java.util.Date date24 = systemClock21.now();
        java.util.Date date25 = systemClock21.now();
        java.lang.String str26 = daytimeDialect2.encode(date25);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect13);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:38:27 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 23-10-31 23:38:27 TT L H msADV UTC(NIST) *");
    }

    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.atTime((int) 'a', 0, (int) 'a');
        java.util.TimeZone timeZone7 = null;
        org.testinfected.time.lib.DateBuilder dateBuilder8 = dateBuilder6.in(timeZone7);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:27 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder8);
    }

    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        org.testinfected.time.DaytimeServer daytimeServer1 = new org.testinfected.time.DaytimeServer((int) (byte) 0);
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder4 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date5 = dateBuilder4.build();
        java.lang.String str6 = daytimeDialect3.encode(date5);
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect3.encode(date8);
        org.testinfected.time.DaytimeServer daytimeServer10 = new org.testinfected.time.DaytimeServer(0, daytimeDialect3);
        org.testinfected.time.lib.SystemClock systemClock11 = new org.testinfected.time.lib.SystemClock();
        daytimeServer10.setInternalClock((org.testinfected.time.Clock) systemClock11);
        java.util.Date date13 = systemClock11.now();
        daytimeServer1.setInternalClock((org.testinfected.time.Clock) systemClock11);
        org.testinfected.time.ServerMonitor serverMonitor15 = null;
        daytimeServer1.addMonitor(serverMonitor15);
        org.testinfected.time.ServerMonitor serverMonitor17 = null;
        daytimeServer1.addMonitor(serverMonitor17);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str6, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:27 CDT 2023");
    }

    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder2.onCalendar((int) (short) 1, (int) (byte) 10, 0);
        org.testinfected.time.lib.DateBuilder dateBuilder8 = dateBuilder6.inZone("JJJJJ 23-10-31 23:37:52 TT L H msADV UTC(NIST) *");
        java.util.Date date9 = dateBuilder6.build();
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Sep 29 18:00:00 CST 1");
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder3 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date4 = dateBuilder3.build();
        java.lang.String str5 = daytimeDialect2.encode(date4);
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect2.encode(date7);
        org.testinfected.time.DaytimeServer daytimeServer9 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect2);
        java.util.Date date11 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:50 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeServer daytimeServer12 = new org.testinfected.time.DaytimeServer((int) ' ', daytimeDialect2);
        java.util.Date date14 = daytimeDialect2.decode("JJJJJ 23-10-31 23:37:51 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeServer daytimeServer23 = new org.testinfected.time.DaytimeServer(0, daytimeDialect16);
        org.testinfected.time.lib.SystemClock systemClock24 = new org.testinfected.time.lib.SystemClock();
        daytimeServer23.setInternalClock((org.testinfected.time.Clock) systemClock24);
        java.util.Date date26 = systemClock24.now();
        java.util.Date date27 = systemClock24.now();
        java.util.Date date28 = systemClock24.now();
        java.util.Date date29 = systemClock24.now();
        java.util.Date date30 = systemClock24.now();
        java.lang.String str31 = daytimeDialect2.encode(date30);
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str5, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:37:50 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:37:51 CDT 2023");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str31, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.lib.SystemClock systemClock9 = new org.testinfected.time.lib.SystemClock();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock9);
        java.util.Date date11 = systemClock9.now();
        java.util.Date date12 = systemClock9.now();
        java.util.Date date13 = systemClock9.now();
        org.testinfected.time.Clock clock14 = org.testinfected.time.lib.BrokenClock.stoppedAt(date13);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock14);
    }

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.testinfected.time.DaytimeDialect daytimeDialect3 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect5 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder6 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date7 = dateBuilder6.build();
        java.lang.String str8 = daytimeDialect5.encode(date7);
        org.testinfected.time.lib.DateBuilder dateBuilder9 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date10 = dateBuilder9.build();
        java.lang.String str11 = daytimeDialect5.encode(date10);
        org.testinfected.time.lib.SystemClock systemClock12 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date13 = systemClock12.now();
        java.util.Date date14 = systemClock12.now();
        java.util.Date date15 = systemClock12.now();
        java.lang.String str16 = daytimeDialect5.encode(date15);
        java.lang.String str17 = daytimeDialect3.encode(date15);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("JJJJJ 23-10-31 23:37:48 TT L H msADV UTC(NIST) *", 0, daytimeDialect3);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeServer daytimeServer27 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect20);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeClient daytimeClient37 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect30);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient37);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeServer daytimeServer47 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect40);
        org.testinfected.time.DaytimeDialect daytimeDialect50 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder51 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date52 = dateBuilder51.build();
        java.lang.String str53 = daytimeDialect50.encode(date52);
        org.testinfected.time.lib.DateBuilder dateBuilder54 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date55 = dateBuilder54.build();
        java.lang.String str56 = daytimeDialect50.encode(date55);
        org.testinfected.time.DaytimeClient daytimeClient57 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect50);
        daytimeServer47.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) daytimeClient57);
        org.testinfected.time.lib.SystemClock systemClock60 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date61 = systemClock60.now();
        daytimeServer27.setInternalClock((org.testinfected.time.Clock) systemClock60);
        java.util.Date date63 = systemClock60.now();
        org.testinfected.time.Clock clock64 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        org.testinfected.time.Clock clock65 = org.testinfected.time.lib.BrokenClock.stoppedAt(date63);
        java.lang.String str66 = daytimeDialect3.encode(date63);
        org.junit.Assert.assertNotNull(daytimeDialect3);
        org.junit.Assert.assertNotNull(daytimeDialect5);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str8, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str11, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:38:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect50);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str53, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str56, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Tue Oct 31 18:38:28 CDT 2023");
        org.junit.Assert.assertNotNull(clock64);
        org.junit.Assert.assertNotNull(clock65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *" + "'", str66, "JJJJJ 23-10-31 23:38:28 TT L H msADV UTC(NIST) *");
    }

    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        org.testinfected.time.lib.DateBuilder dateBuilder0 = org.testinfected.time.lib.DateBuilder.aDate();
        java.util.Date date1 = dateBuilder0.build();
        org.testinfected.time.lib.DateBuilder dateBuilder2 = dateBuilder0.atMidnight();
        org.testinfected.time.lib.DateBuilder dateBuilder6 = dateBuilder0.onCalendar((int) (short) 0, 100, (int) (byte) -1);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = dateBuilder0.onCalendar((int) (short) 10, (int) (byte) 1, (int) '4');
        org.testinfected.time.lib.DateBuilder dateBuilder12 = dateBuilder10.fromMillis((long) (byte) 0);
        org.junit.Assert.assertNotNull(dateBuilder0);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 31 18:38:29 CDT 2023");
        org.junit.Assert.assertNotNull(dateBuilder2);
        org.junit.Assert.assertNotNull(dateBuilder6);
        org.junit.Assert.assertNotNull(dateBuilder10);
        org.junit.Assert.assertNotNull(dateBuilder12);
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient18);
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.DaytimeServer daytimeServer28 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect21);
        org.testinfected.time.DaytimeDialect daytimeDialect31 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder32 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date33 = dateBuilder32.build();
        java.lang.String str34 = daytimeDialect31.encode(date33);
        org.testinfected.time.lib.DateBuilder dateBuilder35 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date36 = dateBuilder35.build();
        java.lang.String str37 = daytimeDialect31.encode(date36);
        org.testinfected.time.DaytimeClient daytimeClient38 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect31);
        daytimeServer28.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) daytimeClient38);
        org.testinfected.time.DaytimeDialect daytimeDialect42 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder43 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date44 = dateBuilder43.build();
        java.lang.String str45 = daytimeDialect42.encode(date44);
        org.testinfected.time.lib.DateBuilder dateBuilder46 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date47 = dateBuilder46.build();
        java.lang.String str48 = daytimeDialect42.encode(date47);
        org.testinfected.time.DaytimeServer daytimeServer49 = new org.testinfected.time.DaytimeServer(0, daytimeDialect42);
        org.testinfected.time.lib.SystemClock systemClock50 = new org.testinfected.time.lib.SystemClock();
        daytimeServer49.setInternalClock((org.testinfected.time.Clock) systemClock50);
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock50);
        java.util.Date date53 = systemClock50.now();
        org.testinfected.time.Clock clock54 = org.testinfected.time.lib.BrokenClock.stoppedAt(date53);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str37, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str45, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str48, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Oct 31 18:38:34 CDT 2023");
        org.junit.Assert.assertNotNull(clock54);
    }

    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        org.testinfected.time.DaytimeDialect daytimeDialect2 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.DaytimeServer daytimeServer3 = new org.testinfected.time.DaytimeServer((int) (short) 0, daytimeDialect2);
        org.testinfected.time.DaytimeServer daytimeServer4 = new org.testinfected.time.DaytimeServer((int) '4', daytimeDialect2);
        org.testinfected.time.DaytimeDialect daytimeDialect6 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder7 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date8 = dateBuilder7.build();
        java.lang.String str9 = daytimeDialect6.encode(date8);
        org.testinfected.time.lib.DateBuilder dateBuilder10 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date11 = dateBuilder10.build();
        java.lang.String str12 = daytimeDialect6.encode(date11);
        org.testinfected.time.DaytimeServer daytimeServer13 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect6);
        org.testinfected.time.DaytimeDialect daytimeDialect16 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder17 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date18 = dateBuilder17.build();
        java.lang.String str19 = daytimeDialect16.encode(date18);
        org.testinfected.time.lib.DateBuilder dateBuilder20 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date21 = dateBuilder20.build();
        java.lang.String str22 = daytimeDialect16.encode(date21);
        org.testinfected.time.DaytimeClient daytimeClient23 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect16);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient23);
        org.testinfected.time.DaytimeDialect daytimeDialect26 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder27 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date28 = dateBuilder27.build();
        java.lang.String str29 = daytimeDialect26.encode(date28);
        org.testinfected.time.lib.DateBuilder dateBuilder30 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date31 = dateBuilder30.build();
        java.lang.String str32 = daytimeDialect26.encode(date31);
        org.testinfected.time.DaytimeServer daytimeServer33 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect26);
        org.testinfected.time.DaytimeDialect daytimeDialect36 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder37 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date38 = dateBuilder37.build();
        java.lang.String str39 = daytimeDialect36.encode(date38);
        org.testinfected.time.lib.DateBuilder dateBuilder40 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date41 = dateBuilder40.build();
        java.lang.String str42 = daytimeDialect36.encode(date41);
        org.testinfected.time.DaytimeClient daytimeClient43 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect36);
        daytimeServer33.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) daytimeClient43);
        org.testinfected.time.lib.SystemClock systemClock46 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date47 = systemClock46.now();
        daytimeServer13.setInternalClock((org.testinfected.time.Clock) systemClock46);
        java.util.Date date49 = systemClock46.now();
        daytimeServer4.setInternalClock((org.testinfected.time.Clock) systemClock46);
        // The following exception was thrown during execution in test generation
        try {
            daytimeServer4.start();
            org.junit.Assert.fail("Expected exception of type java.net.BindException; message: Address already in use (Bind failed)");
        } catch (java.net.BindException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(daytimeDialect2);
        org.junit.Assert.assertNotNull(daytimeDialect6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str9, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str12, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect16);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str19, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str22, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect26);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str29, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect36);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str39, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str42, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Oct 31 18:38:39 CDT 2023");
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer(0, daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect10 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder11 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date12 = dateBuilder11.build();
        java.lang.String str13 = daytimeDialect10.encode(date12);
        org.testinfected.time.lib.DateBuilder dateBuilder14 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date15 = dateBuilder14.build();
        java.lang.String str16 = daytimeDialect10.encode(date15);
        org.testinfected.time.DaytimeServer daytimeServer17 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect10);
        org.testinfected.time.DaytimeDialect daytimeDialect20 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder21 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date22 = dateBuilder21.build();
        java.lang.String str23 = daytimeDialect20.encode(date22);
        org.testinfected.time.lib.DateBuilder dateBuilder24 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date25 = dateBuilder24.build();
        java.lang.String str26 = daytimeDialect20.encode(date25);
        org.testinfected.time.DaytimeClient daytimeClient27 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect20);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient27);
        org.testinfected.time.DaytimeDialect daytimeDialect30 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder31 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date32 = dateBuilder31.build();
        java.lang.String str33 = daytimeDialect30.encode(date32);
        org.testinfected.time.lib.DateBuilder dateBuilder34 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date35 = dateBuilder34.build();
        java.lang.String str36 = daytimeDialect30.encode(date35);
        org.testinfected.time.DaytimeServer daytimeServer37 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect30);
        org.testinfected.time.DaytimeDialect daytimeDialect40 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder41 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date42 = dateBuilder41.build();
        java.lang.String str43 = daytimeDialect40.encode(date42);
        org.testinfected.time.lib.DateBuilder dateBuilder44 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date45 = dateBuilder44.build();
        java.lang.String str46 = daytimeDialect40.encode(date45);
        org.testinfected.time.DaytimeClient daytimeClient47 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect40);
        daytimeServer37.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) daytimeClient47);
        org.testinfected.time.DaytimeDialect daytimeDialect51 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder52 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date53 = dateBuilder52.build();
        java.lang.String str54 = daytimeDialect51.encode(date53);
        org.testinfected.time.lib.DateBuilder dateBuilder55 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date56 = dateBuilder55.build();
        java.lang.String str57 = daytimeDialect51.encode(date56);
        org.testinfected.time.DaytimeServer daytimeServer58 = new org.testinfected.time.DaytimeServer(0, daytimeDialect51);
        org.testinfected.time.lib.SystemClock systemClock59 = new org.testinfected.time.lib.SystemClock();
        daytimeServer58.setInternalClock((org.testinfected.time.Clock) systemClock59);
        daytimeServer17.setInternalClock((org.testinfected.time.Clock) systemClock59);
        java.util.Date date62 = systemClock59.now();
        daytimeServer8.setInternalClock((org.testinfected.time.Clock) systemClock59);
        org.testinfected.time.ServerMonitor serverMonitor64 = null;
        daytimeServer8.addMonitor(serverMonitor64);
        org.testinfected.time.ServerMonitor serverMonitor66 = null;
        daytimeServer8.addMonitor(serverMonitor66);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect10);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str13, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str16, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect20);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str23, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str26, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect30);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str36, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect40);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str43, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str46, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect51);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str54, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str57, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Oct 31 18:38:39 CDT 2023");
    }

    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        org.testinfected.time.DaytimeDialect daytimeDialect1 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder2 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date3 = dateBuilder2.build();
        java.lang.String str4 = daytimeDialect1.encode(date3);
        org.testinfected.time.lib.DateBuilder dateBuilder5 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date6 = dateBuilder5.build();
        java.lang.String str7 = daytimeDialect1.encode(date6);
        org.testinfected.time.DaytimeServer daytimeServer8 = new org.testinfected.time.DaytimeServer((int) '#', daytimeDialect1);
        org.testinfected.time.DaytimeDialect daytimeDialect11 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder12 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date13 = dateBuilder12.build();
        java.lang.String str14 = daytimeDialect11.encode(date13);
        org.testinfected.time.lib.DateBuilder dateBuilder15 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date16 = dateBuilder15.build();
        java.lang.String str17 = daytimeDialect11.encode(date16);
        org.testinfected.time.DaytimeClient daytimeClient18 = new org.testinfected.time.DaytimeClient("", (int) (byte) 0, daytimeDialect11);
        java.util.Date date20 = daytimeDialect11.decode("JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.testinfected.time.DaytimeDialect daytimeDialect21 = org.testinfected.time.nist.NISTDialect.INSTANCE;
        org.testinfected.time.lib.DateBuilder dateBuilder22 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date23 = dateBuilder22.build();
        java.lang.String str24 = daytimeDialect21.encode(date23);
        org.testinfected.time.lib.DateBuilder dateBuilder25 = new org.testinfected.time.lib.DateBuilder();
        java.util.Date date26 = dateBuilder25.build();
        java.lang.String str27 = daytimeDialect21.encode(date26);
        org.testinfected.time.lib.SystemClock systemClock28 = new org.testinfected.time.lib.SystemClock();
        java.util.Date date29 = systemClock28.now();
        java.util.Date date30 = systemClock28.now();
        java.util.Date date31 = systemClock28.now();
        java.lang.String str32 = daytimeDialect21.encode(date31);
        java.lang.String str33 = daytimeDialect11.encode(date31);
        java.lang.String str34 = daytimeDialect1.encode(date31);
        org.testinfected.time.Clock clock35 = org.testinfected.time.lib.BrokenClock.stoppedAt(date31);
        org.junit.Assert.assertNotNull(daytimeDialect1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str4, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str7, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(daytimeDialect11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str14, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str17, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Nov 29 18:00:00 CST 2002");
        org.junit.Assert.assertNotNull(daytimeDialect21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str24, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Nov 29 18:00:00 CST 2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *" + "'", str27, "JJJJJ 02-11-30 00:00:00 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Oct 31 18:38:39 CDT 2023");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 31 18:38:39 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str32, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str33, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *" + "'", str34, "JJJJJ 23-10-31 23:38:39 TT L H msADV UTC(NIST) *");
        org.junit.Assert.assertNotNull(clock35);
    }
goldolphin-cate, length: 12

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner0 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask1 = null;
        net.goldolphin.cate.Action0 action0_2 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask3 = net.goldolphin.cate.Task.create(action0_2);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter4 = unitTask3.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitWaiter4.continueWithWaiter();
        java.util.concurrent.Executor executor6 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler7 = new net.goldolphin.cate.ExecutorScheduler(executor6);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask8 = unitWaiter4.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler7);
        java.util.concurrent.Executor executor9 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler10 = new net.goldolphin.cate.ExecutorScheduler(executor9);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask11 = unitWaiter4.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler10);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler12 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask1, (net.goldolphin.cate.IScheduler) executorScheduler10);
        int int14 = iSchedulerTaskWithSchedulerHashedPartitioner0.partition(iSchedulerTaskWithScheduler12, (int) (byte) 10);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner16 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore17 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>(1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner16);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner18 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask19 = null;
        net.goldolphin.cate.Action0 action0_20 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask21 = net.goldolphin.cate.Task.create(action0_20);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter22 = unitTask21.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter23 = unitWaiter22.continueWithWaiter();
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter22.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask29 = unitWaiter22.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler28);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler30 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask19, (net.goldolphin.cate.IScheduler) executorScheduler28);
        int int32 = iSchedulerTaskWithSchedulerHashedPartitioner18.partition(iSchedulerTaskWithScheduler30, (int) (byte) 10);
        int int34 = iSchedulerTaskWithSchedulerHashedPartitioner16.partition(iSchedulerTaskWithScheduler30, (int) '4');
        int int36 = iSchedulerTaskWithSchedulerHashedPartitioner0.partition(iSchedulerTaskWithScheduler30, (int) (short) -1);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner0);
        org.junit.Assert.assertNotNull(unitTask3);
        org.junit.Assert.assertNotNull(unitWaiter4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitTask8);
        org.junit.Assert.assertNotNull(unitTask11);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner16);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner18);
        org.junit.Assert.assertNotNull(unitTask21);
        org.junit.Assert.assertNotNull(unitWaiter22);
        org.junit.Assert.assertNotNull(unitWaiter23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36 + "'", int34 == 36);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        net.goldolphin.cate.Action0 action0_0 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask1 = net.goldolphin.cate.Task.create(action0_0);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter2 = unitTask1.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter3 = unitWaiter2.continueWithWaiter();
        java.util.concurrent.Executor executor4 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler5 = new net.goldolphin.cate.ExecutorScheduler(executor4);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask6 = unitWaiter2.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler5);
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter2.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask12 = null;
        net.goldolphin.cate.Action0 action0_13 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask14 = net.goldolphin.cate.Task.create(action0_13);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter15 = unitTask14.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter16 = unitWaiter15.continueWithWaiter();
        java.util.concurrent.Executor executor17 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler18 = new net.goldolphin.cate.ExecutorScheduler(executor17);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask19 = unitWaiter15.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler18);
        java.util.concurrent.Executor executor20 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler21 = new net.goldolphin.cate.ExecutorScheduler(executor20);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask22 = unitWaiter15.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler21);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler23 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask12, (net.goldolphin.cate.IScheduler) executorScheduler21);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.IScheduler[] iSchedulerArray26 = new net.goldolphin.cate.IScheduler[] { executorScheduler8, executorScheduler11, executorScheduler21, executorScheduler25 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner27 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool28 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray26, unitWaiterFunc0TaskIPartitioner27);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore29 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool28);
        int int30 = unitWaiterFunc0TaskPartitionedSchedulerPool28.getPartitionNum();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore31 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool28);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner33 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask34 = null;
        net.goldolphin.cate.Action0 action0_35 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = net.goldolphin.cate.Task.create(action0_35);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter37 = unitTask36.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter38 = unitWaiter37.continueWithWaiter();
        java.util.concurrent.Executor executor39 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler40 = new net.goldolphin.cate.ExecutorScheduler(executor39);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask41 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler40);
        java.util.concurrent.Executor executor42 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler43 = new net.goldolphin.cate.ExecutorScheduler(executor42);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask44 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler43);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler45 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask34, (net.goldolphin.cate.IScheduler) executorScheduler43);
        int int47 = iSchedulerTaskWithSchedulerHashedPartitioner33.partition(iSchedulerTaskWithScheduler45, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore48 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner33);
        net.goldolphin.cate.Action0 action0_49 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask50 = net.goldolphin.cate.Task.create(action0_49);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter51 = unitTask50.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter52 = unitWaiter51.continueWithWaiter();
        java.util.concurrent.Executor executor53 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler54 = new net.goldolphin.cate.ExecutorScheduler(executor53);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask55 = unitWaiter51.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler54);
        java.util.concurrent.Executor executor56 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler57 = new net.goldolphin.cate.ExecutorScheduler(executor56);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask58 = unitWaiter51.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler57);
        java.util.concurrent.Executor executor59 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler60 = new net.goldolphin.cate.ExecutorScheduler(executor59);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask61 = null;
        net.goldolphin.cate.Action0 action0_62 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask63 = net.goldolphin.cate.Task.create(action0_62);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter64 = unitTask63.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter65 = unitWaiter64.continueWithWaiter();
        java.util.concurrent.Executor executor66 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler67 = new net.goldolphin.cate.ExecutorScheduler(executor66);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask68 = unitWaiter64.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler67);
        java.util.concurrent.Executor executor69 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler70 = new net.goldolphin.cate.ExecutorScheduler(executor69);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask71 = unitWaiter64.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler70);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler72 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask61, (net.goldolphin.cate.IScheduler) executorScheduler70);
        java.util.concurrent.Executor executor73 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler74 = new net.goldolphin.cate.ExecutorScheduler(executor73);
        net.goldolphin.cate.IScheduler[] iSchedulerArray75 = new net.goldolphin.cate.IScheduler[] { executorScheduler57, executorScheduler60, executorScheduler70, executorScheduler74 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner76 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool77 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray75, unitWaiterFunc0TaskIPartitioner76);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore78 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool77);
        int int79 = unitWaiterFunc0TaskPartitionedSchedulerPool77.getPartitionNum();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore80 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool77);
        net.goldolphin.cate.partitioned.IPartitioner iPartitioner81 = unitWaiterFunc0TaskPartitionedSchedulerPool77.getPartitioner();
        net.goldolphin.cate.IScheduler iScheduler82 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore48.get(unitWaiterFunc0TaskPartitionedSchedulerPool77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore31.contains(unitWaiterFunc0TaskPartitionedSchedulerPool77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unitTask1);
        org.junit.Assert.assertNotNull(unitWaiter2);
        org.junit.Assert.assertNotNull(unitWaiter3);
        org.junit.Assert.assertNotNull(unitTask6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask14);
        org.junit.Assert.assertNotNull(unitWaiter15);
        org.junit.Assert.assertNotNull(unitWaiter16);
        org.junit.Assert.assertNotNull(unitTask19);
        org.junit.Assert.assertNotNull(unitTask22);
        org.junit.Assert.assertNotNull(iSchedulerArray26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitWaiter37);
        org.junit.Assert.assertNotNull(unitWaiter38);
        org.junit.Assert.assertNotNull(unitTask41);
        org.junit.Assert.assertNotNull(unitTask44);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(unitTask50);
        org.junit.Assert.assertNotNull(unitWaiter51);
        org.junit.Assert.assertNotNull(unitWaiter52);
        org.junit.Assert.assertNotNull(unitTask55);
        org.junit.Assert.assertNotNull(unitTask58);
        org.junit.Assert.assertNotNull(unitTask63);
        org.junit.Assert.assertNotNull(unitWaiter64);
        org.junit.Assert.assertNotNull(unitWaiter65);
        org.junit.Assert.assertNotNull(unitTask68);
        org.junit.Assert.assertNotNull(unitTask71);
        org.junit.Assert.assertNotNull(iSchedulerArray75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNull(iPartitioner81);
        org.junit.Assert.assertNull(iScheduler82);
    }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask17 = null;
        net.goldolphin.cate.Action0 action0_18 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask19 = net.goldolphin.cate.Task.create(action0_18);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitTask19.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter21 = unitWaiter20.continueWithWaiter();
        java.util.concurrent.Executor executor22 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler23 = new net.goldolphin.cate.ExecutorScheduler(executor22);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask24 = unitWaiter20.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler23);
        java.util.concurrent.Executor executor25 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler26 = new net.goldolphin.cate.ExecutorScheduler(executor25);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask27 = unitWaiter20.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler26);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler28 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask17, (net.goldolphin.cate.IScheduler) executorScheduler26);
        int int30 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler28, (int) (short) 100);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner32 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore33 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>(1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner32);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner34 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask35 = null;
        net.goldolphin.cate.Action0 action0_36 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask37 = net.goldolphin.cate.Task.create(action0_36);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter38 = unitTask37.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter39 = unitWaiter38.continueWithWaiter();
        java.util.concurrent.Executor executor40 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler41 = new net.goldolphin.cate.ExecutorScheduler(executor40);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask42 = unitWaiter38.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler41);
        java.util.concurrent.Executor executor43 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler44 = new net.goldolphin.cate.ExecutorScheduler(executor43);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask45 = unitWaiter38.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler44);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler46 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask35, (net.goldolphin.cate.IScheduler) executorScheduler44);
        int int48 = iSchedulerTaskWithSchedulerHashedPartitioner34.partition(iSchedulerTaskWithScheduler46, (int) (byte) 10);
        int int50 = iSchedulerTaskWithSchedulerHashedPartitioner32.partition(iSchedulerTaskWithScheduler46, (int) '4');
        int int52 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler46, (int) (byte) 1);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(unitTask19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitWaiter21);
        org.junit.Assert.assertNotNull(unitTask24);
        org.junit.Assert.assertNotNull(unitTask27);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 56 + "'", int30 == 56);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner32);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner34);
        org.junit.Assert.assertNotNull(unitTask37);
        org.junit.Assert.assertNotNull(unitWaiter38);
        org.junit.Assert.assertNotNull(unitWaiter39);
        org.junit.Assert.assertNotNull(unitTask42);
        org.junit.Assert.assertNotNull(unitTask45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        net.goldolphin.cate.Action0 action0_0 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask1 = net.goldolphin.cate.Task.create(action0_0);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter2 = unitTask1.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter3 = unitWaiter2.continueWithWaiter();
        java.util.concurrent.Executor executor4 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler5 = new net.goldolphin.cate.ExecutorScheduler(executor4);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask6 = unitWaiter2.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler5);
        net.goldolphin.cate.Unit unit7 = net.goldolphin.cate.Unit.VALUE;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask8 = unitWaiter2.withInitState(unit7);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter9 = unitWaiter2.continueWithWaiter();
        net.goldolphin.cate.Action0 action0_10 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask11 = net.goldolphin.cate.Task.create(action0_10);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter12 = unitTask11.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter13 = unitWaiter12.continueWithWaiter();
        java.util.concurrent.Executor executor14 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler15 = new net.goldolphin.cate.ExecutorScheduler(executor14);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask16 = unitWaiter12.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler15);
        java.util.concurrent.Executor executor17 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler18 = new net.goldolphin.cate.ExecutorScheduler(executor17);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask19 = unitWaiter12.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler18);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner20 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask21 = null;
        net.goldolphin.cate.Action0 action0_22 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = net.goldolphin.cate.Task.create(action0_22);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter24 = unitTask23.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter25 = unitWaiter24.continueWithWaiter();
        java.util.concurrent.Executor executor26 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler27 = new net.goldolphin.cate.ExecutorScheduler(executor26);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask28 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler27);
        java.util.concurrent.Executor executor29 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler30 = new net.goldolphin.cate.ExecutorScheduler(executor29);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler30);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler32 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask21, (net.goldolphin.cate.IScheduler) executorScheduler30);
        int int34 = iSchedulerTaskWithSchedulerHashedPartitioner20.partition(iSchedulerTaskWithScheduler32, (int) (byte) 10);
        net.goldolphin.cate.SynchronizedScheduler synchronizedScheduler35 = new net.goldolphin.cate.SynchronizedScheduler();
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler36 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>((net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>) iSchedulerTaskWithScheduler32, (net.goldolphin.cate.IScheduler) synchronizedScheduler35);
        // The following exception was thrown during execution in test generation
        try {
            unitWaiter9.execute((java.lang.Object) executorScheduler18, (net.goldolphin.cate.IScheduler) synchronizedScheduler35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unitTask1);
        org.junit.Assert.assertNotNull(unitWaiter2);
        org.junit.Assert.assertNotNull(unitWaiter3);
        org.junit.Assert.assertNotNull(unitTask6);
        org.junit.Assert.assertNotNull(unit7);
        org.junit.Assert.assertNotNull(unitTask8);
        org.junit.Assert.assertNotNull(unitWaiter9);
        org.junit.Assert.assertNotNull(unitTask11);
        org.junit.Assert.assertNotNull(unitWaiter12);
        org.junit.Assert.assertNotNull(unitWaiter13);
        org.junit.Assert.assertNotNull(unitTask16);
        org.junit.Assert.assertNotNull(unitTask19);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitWaiter24);
        org.junit.Assert.assertNotNull(unitWaiter25);
        org.junit.Assert.assertNotNull(unitTask28);
        org.junit.Assert.assertNotNull(unitTask31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.Action0 action0_17 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask18 = net.goldolphin.cate.Task.create(action0_17);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitTask18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitWaiter19.continueWithWaiter();
        java.util.concurrent.Executor executor21 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler22 = new net.goldolphin.cate.ExecutorScheduler(executor21);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler22);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask29 = null;
        net.goldolphin.cate.Action0 action0_30 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = net.goldolphin.cate.Task.create(action0_30);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter32 = unitTask31.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter33 = unitWaiter32.continueWithWaiter();
        java.util.concurrent.Executor executor34 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler35 = new net.goldolphin.cate.ExecutorScheduler(executor34);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler35);
        java.util.concurrent.Executor executor37 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler38 = new net.goldolphin.cate.ExecutorScheduler(executor37);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask39 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler38);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler40 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask29, (net.goldolphin.cate.IScheduler) executorScheduler38);
        java.util.concurrent.Executor executor41 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler42 = new net.goldolphin.cate.ExecutorScheduler(executor41);
        net.goldolphin.cate.IScheduler[] iSchedulerArray43 = new net.goldolphin.cate.IScheduler[] { executorScheduler25, executorScheduler28, executorScheduler38, executorScheduler42 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner44 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool45 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray43, unitWaiterFunc0TaskIPartitioner44);
        boolean boolean46 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool45);
        net.goldolphin.cate.Action0 action0_47 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask48 = net.goldolphin.cate.Task.create(action0_47);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter49 = unitTask48.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter50 = unitWaiter49.continueWithWaiter();
        java.util.concurrent.Executor executor51 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler52 = new net.goldolphin.cate.ExecutorScheduler(executor51);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask53 = unitWaiter49.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler52);
        java.util.concurrent.Executor executor54 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler55 = new net.goldolphin.cate.ExecutorScheduler(executor54);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask56 = unitWaiter49.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler55);
        java.util.concurrent.Executor executor57 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler58 = new net.goldolphin.cate.ExecutorScheduler(executor57);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask59 = null;
        net.goldolphin.cate.Action0 action0_60 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask61 = net.goldolphin.cate.Task.create(action0_60);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter62 = unitTask61.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter63 = unitWaiter62.continueWithWaiter();
        java.util.concurrent.Executor executor64 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler65 = new net.goldolphin.cate.ExecutorScheduler(executor64);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask66 = unitWaiter62.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler65);
        java.util.concurrent.Executor executor67 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler68 = new net.goldolphin.cate.ExecutorScheduler(executor67);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask69 = unitWaiter62.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler68);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler70 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask59, (net.goldolphin.cate.IScheduler) executorScheduler68);
        java.util.concurrent.Executor executor71 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler72 = new net.goldolphin.cate.ExecutorScheduler(executor71);
        net.goldolphin.cate.IScheduler[] iSchedulerArray73 = new net.goldolphin.cate.IScheduler[] { executorScheduler55, executorScheduler58, executorScheduler68, executorScheduler72 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner74 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool75 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray73, unitWaiterFunc0TaskIPartitioner74);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore76 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool75);
        int int77 = unitWaiterFunc0TaskPartitionedSchedulerPool75.getPartitionNum();
        net.goldolphin.cate.IScheduler iScheduler78 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.remove(unitWaiterFunc0TaskPartitionedSchedulerPool75);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore79 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool75);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(unitTask18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitWaiter32);
        org.junit.Assert.assertNotNull(unitWaiter33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitTask39);
        org.junit.Assert.assertNotNull(iSchedulerArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(unitTask48);
        org.junit.Assert.assertNotNull(unitWaiter49);
        org.junit.Assert.assertNotNull(unitWaiter50);
        org.junit.Assert.assertNotNull(unitTask53);
        org.junit.Assert.assertNotNull(unitTask56);
        org.junit.Assert.assertNotNull(unitTask61);
        org.junit.Assert.assertNotNull(unitWaiter62);
        org.junit.Assert.assertNotNull(unitWaiter63);
        org.junit.Assert.assertNotNull(unitTask66);
        org.junit.Assert.assertNotNull(unitTask69);
        org.junit.Assert.assertNotNull(iSchedulerArray73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNull(iScheduler78);
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        net.goldolphin.cate.Func0<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>> unitWaiterFunc0_0 = null;
        net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>> unitWaiterFunc0Task1 = new net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>(unitWaiterFunc0_0);
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter7 = new net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>((net.goldolphin.cate.ITask<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>) unitWaiter6);
        net.goldolphin.cate.IContinuation iContinuation8 = null;
        net.goldolphin.cate.FlattenTask.Continuation continuation9 = new net.goldolphin.cate.FlattenTask.Continuation(iContinuation8);
        net.goldolphin.cate.IContinuation iContinuation10 = unitWaiter6.buildContinuation(iContinuation8);
        net.goldolphin.cate.CollectTask.IndexContinuation indexContinuation11 = new net.goldolphin.cate.CollectTask.IndexContinuation((int) (byte) 100, iContinuation8);
        net.goldolphin.cate.IContinuation iContinuation12 = unitWaiterFunc0Task1.buildContinuation(iContinuation8);
        net.goldolphin.cate.ContextAction<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceContextAction14 = null;
        net.goldolphin.cate.ContextTask<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceContextTask15 = new net.goldolphin.cate.ContextTask<java.lang.CharSequence, java.lang.reflect.GenericDeclaration>(charSequenceContextAction14);
        net.goldolphin.cate.Action0 action0_16 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask17 = net.goldolphin.cate.Task.create(action0_16);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter18 = unitTask17.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitWaiter18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = new net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>((net.goldolphin.cate.ITask<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>) unitWaiter19);
        net.goldolphin.cate.IContinuation iContinuation21 = null;
        net.goldolphin.cate.FlattenTask.Continuation continuation22 = new net.goldolphin.cate.FlattenTask.Continuation(iContinuation21);
        net.goldolphin.cate.IContinuation iContinuation23 = unitWaiter19.buildContinuation(iContinuation21);
        net.goldolphin.cate.IContinuation iContinuation24 = charSequenceContextTask15.buildContinuation(iContinuation23);
        net.goldolphin.cate.CollectTask.IndexContinuation indexContinuation25 = new net.goldolphin.cate.CollectTask.IndexContinuation(10, iContinuation24);
        net.goldolphin.cate.IContinuation iContinuation26 = unitWaiterFunc0Task1.buildContinuation((net.goldolphin.cate.IContinuation) indexContinuation25);
        net.goldolphin.cate.Action0 action0_27 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask28 = net.goldolphin.cate.Task.create(action0_27);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter29 = unitTask28.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter30 = unitWaiter29.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter31 = new net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>((net.goldolphin.cate.ITask<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>) unitWaiter30);
        net.goldolphin.cate.Environment environment32 = null;
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner33 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask34 = null;
        net.goldolphin.cate.Action0 action0_35 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = net.goldolphin.cate.Task.create(action0_35);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter37 = unitTask36.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter38 = unitWaiter37.continueWithWaiter();
        java.util.concurrent.Executor executor39 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler40 = new net.goldolphin.cate.ExecutorScheduler(executor39);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask41 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler40);
        java.util.concurrent.Executor executor42 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler43 = new net.goldolphin.cate.ExecutorScheduler(executor42);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask44 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler43);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler45 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask34, (net.goldolphin.cate.IScheduler) executorScheduler43);
        int int47 = iSchedulerTaskWithSchedulerHashedPartitioner33.partition(iSchedulerTaskWithScheduler45, (int) (byte) 10);
        net.goldolphin.cate.SynchronizedScheduler synchronizedScheduler48 = new net.goldolphin.cate.SynchronizedScheduler();
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler49 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>((net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>) iSchedulerTaskWithScheduler45, (net.goldolphin.cate.IScheduler) synchronizedScheduler48);
        // The following exception was thrown during execution in test generation
        try {
            indexContinuation25.apply((java.lang.Object) unitWaiter31, environment32, (net.goldolphin.cate.IScheduler) synchronizedScheduler48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(iContinuation10);
        org.junit.Assert.assertNotNull(iContinuation12);
        org.junit.Assert.assertNotNull(unitTask17);
        org.junit.Assert.assertNotNull(unitWaiter18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(iContinuation23);
        org.junit.Assert.assertNotNull(iContinuation24);
        org.junit.Assert.assertNotNull(iContinuation26);
        org.junit.Assert.assertNotNull(unitTask28);
        org.junit.Assert.assertNotNull(unitWaiter29);
        org.junit.Assert.assertNotNull(unitWaiter30);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitWaiter37);
        org.junit.Assert.assertNotNull(unitWaiter38);
        org.junit.Assert.assertNotNull(unitTask41);
        org.junit.Assert.assertNotNull(unitTask44);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.Action0 action0_17 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask18 = net.goldolphin.cate.Task.create(action0_17);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitTask18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitWaiter19.continueWithWaiter();
        java.util.concurrent.Executor executor21 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler22 = new net.goldolphin.cate.ExecutorScheduler(executor21);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler22);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask29 = null;
        net.goldolphin.cate.Action0 action0_30 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = net.goldolphin.cate.Task.create(action0_30);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter32 = unitTask31.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter33 = unitWaiter32.continueWithWaiter();
        java.util.concurrent.Executor executor34 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler35 = new net.goldolphin.cate.ExecutorScheduler(executor34);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler35);
        java.util.concurrent.Executor executor37 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler38 = new net.goldolphin.cate.ExecutorScheduler(executor37);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask39 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler38);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler40 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask29, (net.goldolphin.cate.IScheduler) executorScheduler38);
        java.util.concurrent.Executor executor41 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler42 = new net.goldolphin.cate.ExecutorScheduler(executor41);
        net.goldolphin.cate.IScheduler[] iSchedulerArray43 = new net.goldolphin.cate.IScheduler[] { executorScheduler25, executorScheduler28, executorScheduler38, executorScheduler42 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner44 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool45 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray43, unitWaiterFunc0TaskIPartitioner44);
        boolean boolean46 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool45);
        java.util.Map<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>[] func0TaskPartitionedSchedulerPoolMapArray47 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.getData();
        net.goldolphin.cate.Action0 action0_48 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask49 = net.goldolphin.cate.Task.create(action0_48);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter50 = unitTask49.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter51 = unitWaiter50.continueWithWaiter();
        java.util.concurrent.Executor executor52 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler53 = new net.goldolphin.cate.ExecutorScheduler(executor52);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask54 = unitWaiter50.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler53);
        java.util.concurrent.Executor executor55 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler56 = new net.goldolphin.cate.ExecutorScheduler(executor55);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask57 = unitWaiter50.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler56);
        java.util.concurrent.Executor executor58 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler59 = new net.goldolphin.cate.ExecutorScheduler(executor58);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask60 = null;
        net.goldolphin.cate.Action0 action0_61 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask62 = net.goldolphin.cate.Task.create(action0_61);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter63 = unitTask62.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter64 = unitWaiter63.continueWithWaiter();
        java.util.concurrent.Executor executor65 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler66 = new net.goldolphin.cate.ExecutorScheduler(executor65);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask67 = unitWaiter63.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler66);
        java.util.concurrent.Executor executor68 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler69 = new net.goldolphin.cate.ExecutorScheduler(executor68);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask70 = unitWaiter63.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler69);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler71 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask60, (net.goldolphin.cate.IScheduler) executorScheduler69);
        java.util.concurrent.Executor executor72 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler73 = new net.goldolphin.cate.ExecutorScheduler(executor72);
        net.goldolphin.cate.IScheduler[] iSchedulerArray74 = new net.goldolphin.cate.IScheduler[] { executorScheduler56, executorScheduler59, executorScheduler69, executorScheduler73 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner75 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool76 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray74, unitWaiterFunc0TaskIPartitioner75);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore77 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool76);
        net.goldolphin.cate.partitioned.IPartitioner iPartitioner78 = unitWaiterFunc0TaskPartitionedSchedulerPool76.getPartitioner();
        net.goldolphin.cate.IScheduler iScheduler79 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.get(unitWaiterFunc0TaskPartitionedSchedulerPool76);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(unitTask18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitWaiter32);
        org.junit.Assert.assertNotNull(unitWaiter33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitTask39);
        org.junit.Assert.assertNotNull(iSchedulerArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(func0TaskPartitionedSchedulerPoolMapArray47);
        org.junit.Assert.assertNotNull(unitTask49);
        org.junit.Assert.assertNotNull(unitWaiter50);
        org.junit.Assert.assertNotNull(unitWaiter51);
        org.junit.Assert.assertNotNull(unitTask54);
        org.junit.Assert.assertNotNull(unitTask57);
        org.junit.Assert.assertNotNull(unitTask62);
        org.junit.Assert.assertNotNull(unitWaiter63);
        org.junit.Assert.assertNotNull(unitWaiter64);
        org.junit.Assert.assertNotNull(unitTask67);
        org.junit.Assert.assertNotNull(unitTask70);
        org.junit.Assert.assertNotNull(iSchedulerArray74);
        org.junit.Assert.assertNull(iPartitioner78);
        org.junit.Assert.assertNull(iScheduler79);
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore2 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>(1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner3 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask4 = null;
        net.goldolphin.cate.Action0 action0_5 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask6 = net.goldolphin.cate.Task.create(action0_5);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter7 = unitTask6.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter8 = unitWaiter7.continueWithWaiter();
        java.util.concurrent.Executor executor9 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler10 = new net.goldolphin.cate.ExecutorScheduler(executor9);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask11 = unitWaiter7.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler10);
        java.util.concurrent.Executor executor12 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler13 = new net.goldolphin.cate.ExecutorScheduler(executor12);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask14 = unitWaiter7.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler13);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler15 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask4, (net.goldolphin.cate.IScheduler) executorScheduler13);
        int int17 = iSchedulerTaskWithSchedulerHashedPartitioner3.partition(iSchedulerTaskWithScheduler15, (int) (byte) 10);
        int int19 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler15, (int) '4');
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner20 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask21 = null;
        net.goldolphin.cate.Action0 action0_22 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = net.goldolphin.cate.Task.create(action0_22);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter24 = unitTask23.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter25 = unitWaiter24.continueWithWaiter();
        java.util.concurrent.Executor executor26 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler27 = new net.goldolphin.cate.ExecutorScheduler(executor26);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask28 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler27);
        java.util.concurrent.Executor executor29 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler30 = new net.goldolphin.cate.ExecutorScheduler(executor29);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler30);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler32 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask21, (net.goldolphin.cate.IScheduler) executorScheduler30);
        int int34 = iSchedulerTaskWithSchedulerHashedPartitioner20.partition(iSchedulerTaskWithScheduler32, (int) (byte) 10);
        net.goldolphin.cate.SynchronizedScheduler synchronizedScheduler35 = new net.goldolphin.cate.SynchronizedScheduler();
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler36 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>((net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>) iSchedulerTaskWithScheduler32, (net.goldolphin.cate.IScheduler) synchronizedScheduler35);
        int int38 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler36, 9);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner3);
        org.junit.Assert.assertNotNull(unitTask6);
        org.junit.Assert.assertNotNull(unitWaiter7);
        org.junit.Assert.assertNotNull(unitWaiter8);
        org.junit.Assert.assertNotNull(unitTask11);
        org.junit.Assert.assertNotNull(unitTask14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitWaiter24);
        org.junit.Assert.assertNotNull(unitWaiter25);
        org.junit.Assert.assertNotNull(unitTask28);
        org.junit.Assert.assertNotNull(unitTask31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner2 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.Maybe<java.lang.Comparable<java.lang.String>>, net.goldolphin.cate.Unit> strComparableMaybePartitionedStore3 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.Maybe<java.lang.Comparable<java.lang.String>>, net.goldolphin.cate.Unit>((int) '#', (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner2);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore4 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (short) 100, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner2);
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner6 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask7 = null;
        net.goldolphin.cate.Action0 action0_8 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = net.goldolphin.cate.Task.create(action0_8);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter10 = unitTask9.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter11 = unitWaiter10.continueWithWaiter();
        java.util.concurrent.Executor executor12 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler13 = new net.goldolphin.cate.ExecutorScheduler(executor12);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask14 = unitWaiter10.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler13);
        java.util.concurrent.Executor executor15 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler16 = new net.goldolphin.cate.ExecutorScheduler(executor15);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask17 = unitWaiter10.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler16);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler18 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask7, (net.goldolphin.cate.IScheduler) executorScheduler16);
        int int20 = iSchedulerTaskWithSchedulerHashedPartitioner6.partition(iSchedulerTaskWithScheduler18, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore21 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner6);
        net.goldolphin.cate.Action0 action0_22 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = net.goldolphin.cate.Task.create(action0_22);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter24 = unitTask23.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter25 = unitWaiter24.continueWithWaiter();
        java.util.concurrent.Executor executor26 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler27 = new net.goldolphin.cate.ExecutorScheduler(executor26);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask28 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler27);
        java.util.concurrent.Executor executor29 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler30 = new net.goldolphin.cate.ExecutorScheduler(executor29);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = unitWaiter24.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler30);
        java.util.concurrent.Executor executor32 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler33 = new net.goldolphin.cate.ExecutorScheduler(executor32);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask34 = null;
        net.goldolphin.cate.Action0 action0_35 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = net.goldolphin.cate.Task.create(action0_35);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter37 = unitTask36.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter38 = unitWaiter37.continueWithWaiter();
        java.util.concurrent.Executor executor39 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler40 = new net.goldolphin.cate.ExecutorScheduler(executor39);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask41 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler40);
        java.util.concurrent.Executor executor42 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler43 = new net.goldolphin.cate.ExecutorScheduler(executor42);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask44 = unitWaiter37.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler43);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler45 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask34, (net.goldolphin.cate.IScheduler) executorScheduler43);
        java.util.concurrent.Executor executor46 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler47 = new net.goldolphin.cate.ExecutorScheduler(executor46);
        net.goldolphin.cate.IScheduler[] iSchedulerArray48 = new net.goldolphin.cate.IScheduler[] { executorScheduler30, executorScheduler33, executorScheduler43, executorScheduler47 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner49 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool50 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray48, unitWaiterFunc0TaskIPartitioner49);
        boolean boolean51 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore21.contains(unitWaiterFunc0TaskPartitionedSchedulerPool50);
        net.goldolphin.cate.Action0 action0_52 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask53 = net.goldolphin.cate.Task.create(action0_52);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter54 = unitTask53.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter55 = unitWaiter54.continueWithWaiter();
        java.util.concurrent.Executor executor56 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler57 = new net.goldolphin.cate.ExecutorScheduler(executor56);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask58 = unitWaiter54.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler57);
        java.util.concurrent.Executor executor59 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler60 = new net.goldolphin.cate.ExecutorScheduler(executor59);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask61 = unitWaiter54.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler60);
        java.util.concurrent.Executor executor62 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler63 = new net.goldolphin.cate.ExecutorScheduler(executor62);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask64 = null;
        net.goldolphin.cate.Action0 action0_65 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask66 = net.goldolphin.cate.Task.create(action0_65);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter67 = unitTask66.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter68 = unitWaiter67.continueWithWaiter();
        java.util.concurrent.Executor executor69 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler70 = new net.goldolphin.cate.ExecutorScheduler(executor69);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask71 = unitWaiter67.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler70);
        java.util.concurrent.Executor executor72 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler73 = new net.goldolphin.cate.ExecutorScheduler(executor72);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask74 = unitWaiter67.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler73);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler75 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask64, (net.goldolphin.cate.IScheduler) executorScheduler73);
        java.util.concurrent.Executor executor76 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler77 = new net.goldolphin.cate.ExecutorScheduler(executor76);
        net.goldolphin.cate.IScheduler[] iSchedulerArray78 = new net.goldolphin.cate.IScheduler[] { executorScheduler60, executorScheduler63, executorScheduler73, executorScheduler77 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner79 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool80 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray78, unitWaiterFunc0TaskIPartitioner79);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore81 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool80);
        int int82 = unitWaiterFunc0TaskPartitionedSchedulerPool80.getPartitionNum();
        net.goldolphin.cate.IScheduler iScheduler83 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore21.remove(unitWaiterFunc0TaskPartitionedSchedulerPool80);
        net.goldolphin.cate.IScheduler iScheduler84 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore4.remove(unitWaiterFunc0TaskPartitionedSchedulerPool80);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner2);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitWaiter10);
        org.junit.Assert.assertNotNull(unitWaiter11);
        org.junit.Assert.assertNotNull(unitTask14);
        org.junit.Assert.assertNotNull(unitTask17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitWaiter24);
        org.junit.Assert.assertNotNull(unitWaiter25);
        org.junit.Assert.assertNotNull(unitTask28);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitWaiter37);
        org.junit.Assert.assertNotNull(unitWaiter38);
        org.junit.Assert.assertNotNull(unitTask41);
        org.junit.Assert.assertNotNull(unitTask44);
        org.junit.Assert.assertNotNull(iSchedulerArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(unitTask53);
        org.junit.Assert.assertNotNull(unitWaiter54);
        org.junit.Assert.assertNotNull(unitWaiter55);
        org.junit.Assert.assertNotNull(unitTask58);
        org.junit.Assert.assertNotNull(unitTask61);
        org.junit.Assert.assertNotNull(unitTask66);
        org.junit.Assert.assertNotNull(unitWaiter67);
        org.junit.Assert.assertNotNull(unitWaiter68);
        org.junit.Assert.assertNotNull(unitTask71);
        org.junit.Assert.assertNotNull(unitTask74);
        org.junit.Assert.assertNotNull(iSchedulerArray78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNull(iScheduler83);
        org.junit.Assert.assertNull(iScheduler84);
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.Action0 action0_17 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask18 = net.goldolphin.cate.Task.create(action0_17);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitTask18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitWaiter19.continueWithWaiter();
        java.util.concurrent.Executor executor21 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler22 = new net.goldolphin.cate.ExecutorScheduler(executor21);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler22);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask29 = null;
        net.goldolphin.cate.Action0 action0_30 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = net.goldolphin.cate.Task.create(action0_30);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter32 = unitTask31.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter33 = unitWaiter32.continueWithWaiter();
        java.util.concurrent.Executor executor34 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler35 = new net.goldolphin.cate.ExecutorScheduler(executor34);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler35);
        java.util.concurrent.Executor executor37 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler38 = new net.goldolphin.cate.ExecutorScheduler(executor37);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask39 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler38);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler40 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask29, (net.goldolphin.cate.IScheduler) executorScheduler38);
        java.util.concurrent.Executor executor41 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler42 = new net.goldolphin.cate.ExecutorScheduler(executor41);
        net.goldolphin.cate.IScheduler[] iSchedulerArray43 = new net.goldolphin.cate.IScheduler[] { executorScheduler25, executorScheduler28, executorScheduler38, executorScheduler42 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner44 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool45 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray43, unitWaiterFunc0TaskIPartitioner44);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore46 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool45);
        int int47 = unitWaiterFunc0TaskPartitionedSchedulerPool45.getPartitionNum();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore48 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool45);
        net.goldolphin.cate.partitioned.IPartitioner iPartitioner49 = unitWaiterFunc0TaskPartitionedSchedulerPool45.getPartitioner();
        boolean boolean50 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool45);
        net.goldolphin.cate.Action0 action0_51 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask52 = net.goldolphin.cate.Task.create(action0_51);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter53 = unitTask52.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter54 = unitWaiter53.continueWithWaiter();
        java.util.concurrent.Executor executor55 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler56 = new net.goldolphin.cate.ExecutorScheduler(executor55);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask57 = unitWaiter53.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler56);
        java.util.concurrent.Executor executor58 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler59 = new net.goldolphin.cate.ExecutorScheduler(executor58);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask60 = unitWaiter53.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler59);
        java.util.concurrent.Executor executor61 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler62 = new net.goldolphin.cate.ExecutorScheduler(executor61);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask63 = null;
        net.goldolphin.cate.Action0 action0_64 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask65 = net.goldolphin.cate.Task.create(action0_64);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter66 = unitTask65.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter67 = unitWaiter66.continueWithWaiter();
        java.util.concurrent.Executor executor68 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler69 = new net.goldolphin.cate.ExecutorScheduler(executor68);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask70 = unitWaiter66.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler69);
        java.util.concurrent.Executor executor71 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler72 = new net.goldolphin.cate.ExecutorScheduler(executor71);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask73 = unitWaiter66.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler72);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler74 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask63, (net.goldolphin.cate.IScheduler) executorScheduler72);
        java.util.concurrent.Executor executor75 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler76 = new net.goldolphin.cate.ExecutorScheduler(executor75);
        net.goldolphin.cate.IScheduler[] iSchedulerArray77 = new net.goldolphin.cate.IScheduler[] { executorScheduler59, executorScheduler62, executorScheduler72, executorScheduler76 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner78 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool79 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray77, unitWaiterFunc0TaskIPartitioner78);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore80 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool79);
        net.goldolphin.cate.partitioned.IPartitioner iPartitioner81 = unitWaiterFunc0TaskPartitionedSchedulerPool79.getPartitioner();
        net.goldolphin.cate.Action0 action0_82 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask83 = net.goldolphin.cate.Task.create(action0_82);
        net.goldolphin.cate.util.ExecutorTimer executorTimer84 = new net.goldolphin.cate.util.ExecutorTimer();
        net.goldolphin.cate.Action0 action0_85 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask86 = net.goldolphin.cate.Task.create(action0_85);
        net.goldolphin.cate.Action0 action0_87 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask88 = net.goldolphin.cate.Task.create(action0_87);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter89 = unitTask88.continueWithWaiter();
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask90 = unitTask86.continueWith((net.goldolphin.cate.ITask<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>) unitWaiter89);
        net.goldolphin.cate.Action1<net.goldolphin.cate.Unit> unitAction1_91 = null;
        java.util.concurrent.TimeUnit timeUnit93 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Maybe<net.goldolphin.cate.Unit>> unitTask94 = executorTimer84.withTimeout((net.goldolphin.cate.ITask<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>) unitTask86, unitAction1_91, (long) (byte) -1, timeUnit93);
        net.goldolphin.cate.SynchronizedScheduler synchronizedScheduler95 = new net.goldolphin.cate.SynchronizedScheduler();
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask96 = unitTask86.withScheduler((net.goldolphin.cate.IScheduler) synchronizedScheduler95);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask97 = unitTask83.withScheduler((net.goldolphin.cate.IScheduler) synchronizedScheduler95);
        waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.put(unitWaiterFunc0TaskPartitionedSchedulerPool79, (net.goldolphin.cate.IScheduler) synchronizedScheduler95);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(unitTask18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitWaiter32);
        org.junit.Assert.assertNotNull(unitWaiter33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitTask39);
        org.junit.Assert.assertNotNull(iSchedulerArray43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNull(iPartitioner49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(unitTask52);
        org.junit.Assert.assertNotNull(unitWaiter53);
        org.junit.Assert.assertNotNull(unitWaiter54);
        org.junit.Assert.assertNotNull(unitTask57);
        org.junit.Assert.assertNotNull(unitTask60);
        org.junit.Assert.assertNotNull(unitTask65);
        org.junit.Assert.assertNotNull(unitWaiter66);
        org.junit.Assert.assertNotNull(unitWaiter67);
        org.junit.Assert.assertNotNull(unitTask70);
        org.junit.Assert.assertNotNull(unitTask73);
        org.junit.Assert.assertNotNull(iSchedulerArray77);
        org.junit.Assert.assertNull(iPartitioner81);
        org.junit.Assert.assertNotNull(unitTask83);
        org.junit.Assert.assertNotNull(unitTask86);
        org.junit.Assert.assertNotNull(unitTask88);
        org.junit.Assert.assertNotNull(unitWaiter89);
        org.junit.Assert.assertNotNull(unitTask90);
        org.junit.Assert.assertNotNull(unitTask94);
        org.junit.Assert.assertNotNull(unitTask96);
        org.junit.Assert.assertNotNull(unitTask97);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.Action0 action0_17 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask18 = net.goldolphin.cate.Task.create(action0_17);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitTask18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitWaiter19.continueWithWaiter();
        java.util.concurrent.Executor executor21 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler22 = new net.goldolphin.cate.ExecutorScheduler(executor21);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler22);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask29 = null;
        net.goldolphin.cate.Action0 action0_30 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = net.goldolphin.cate.Task.create(action0_30);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter32 = unitTask31.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter33 = unitWaiter32.continueWithWaiter();
        java.util.concurrent.Executor executor34 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler35 = new net.goldolphin.cate.ExecutorScheduler(executor34);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler35);
        java.util.concurrent.Executor executor37 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler38 = new net.goldolphin.cate.ExecutorScheduler(executor37);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask39 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler38);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler40 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask29, (net.goldolphin.cate.IScheduler) executorScheduler38);
        java.util.concurrent.Executor executor41 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler42 = new net.goldolphin.cate.ExecutorScheduler(executor41);
        net.goldolphin.cate.IScheduler[] iSchedulerArray43 = new net.goldolphin.cate.IScheduler[] { executorScheduler25, executorScheduler28, executorScheduler38, executorScheduler42 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner44 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool45 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray43, unitWaiterFunc0TaskIPartitioner44);
        boolean boolean46 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool45);
        java.util.Map<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>[] func0TaskPartitionedSchedulerPoolMapArray47 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.getData();
        net.goldolphin.cate.Action0 action0_48 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask49 = net.goldolphin.cate.Task.create(action0_48);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter50 = unitTask49.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter51 = unitWaiter50.continueWithWaiter();
        java.util.concurrent.Executor executor52 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler53 = new net.goldolphin.cate.ExecutorScheduler(executor52);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask54 = unitWaiter50.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler53);
        java.util.concurrent.Executor executor55 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler56 = new net.goldolphin.cate.ExecutorScheduler(executor55);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask57 = unitWaiter50.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler56);
        java.util.concurrent.Executor executor58 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler59 = new net.goldolphin.cate.ExecutorScheduler(executor58);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask60 = null;
        net.goldolphin.cate.Action0 action0_61 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask62 = net.goldolphin.cate.Task.create(action0_61);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter63 = unitTask62.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter64 = unitWaiter63.continueWithWaiter();
        java.util.concurrent.Executor executor65 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler66 = new net.goldolphin.cate.ExecutorScheduler(executor65);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask67 = unitWaiter63.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler66);
        java.util.concurrent.Executor executor68 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler69 = new net.goldolphin.cate.ExecutorScheduler(executor68);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask70 = unitWaiter63.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler69);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler71 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask60, (net.goldolphin.cate.IScheduler) executorScheduler69);
        java.util.concurrent.Executor executor72 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler73 = new net.goldolphin.cate.ExecutorScheduler(executor72);
        net.goldolphin.cate.IScheduler[] iSchedulerArray74 = new net.goldolphin.cate.IScheduler[] { executorScheduler56, executorScheduler59, executorScheduler69, executorScheduler73 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner75 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool76 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray74, unitWaiterFunc0TaskIPartitioner75);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore77 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool76);
        int int78 = unitWaiterFunc0TaskPartitionedSchedulerPool76.getPartitionNum();
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore79 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool76);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.CollectTask<java.lang.CharSequence, java.lang.Object[]>, java.lang.reflect.AnnotatedElement> charSequenceCollectTaskPartitionedStore80 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.CollectTask<java.lang.CharSequence, java.lang.Object[]>, java.lang.reflect.AnnotatedElement>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool76);
        boolean boolean81 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool76);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(unitTask18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitWaiter32);
        org.junit.Assert.assertNotNull(unitWaiter33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitTask39);
        org.junit.Assert.assertNotNull(iSchedulerArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(func0TaskPartitionedSchedulerPoolMapArray47);
        org.junit.Assert.assertNotNull(unitTask49);
        org.junit.Assert.assertNotNull(unitWaiter50);
        org.junit.Assert.assertNotNull(unitWaiter51);
        org.junit.Assert.assertNotNull(unitTask54);
        org.junit.Assert.assertNotNull(unitTask57);
        org.junit.Assert.assertNotNull(unitTask62);
        org.junit.Assert.assertNotNull(unitWaiter63);
        org.junit.Assert.assertNotNull(unitWaiter64);
        org.junit.Assert.assertNotNull(unitTask67);
        org.junit.Assert.assertNotNull(unitTask70);
        org.junit.Assert.assertNotNull(iSchedulerArray74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        net.goldolphin.cate.partitioned.HashedPartitioner<net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>> iSchedulerTaskWithSchedulerHashedPartitioner1 = net.goldolphin.cate.partitioned.HashedPartitioner.instance();
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask2 = null;
        net.goldolphin.cate.Action0 action0_3 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask4 = net.goldolphin.cate.Task.create(action0_3);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter5 = unitTask4.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter6 = unitWaiter5.continueWithWaiter();
        java.util.concurrent.Executor executor7 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler8 = new net.goldolphin.cate.ExecutorScheduler(executor7);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask9 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler8);
        java.util.concurrent.Executor executor10 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler11 = new net.goldolphin.cate.ExecutorScheduler(executor10);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask12 = unitWaiter5.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler11);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler13 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask2, (net.goldolphin.cate.IScheduler) executorScheduler11);
        int int15 = iSchedulerTaskWithSchedulerHashedPartitioner1.partition(iSchedulerTaskWithScheduler13, (int) (byte) 10);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((int) (byte) 1, (net.goldolphin.cate.partitioned.IPartitioner) iSchedulerTaskWithSchedulerHashedPartitioner1);
        net.goldolphin.cate.Action0 action0_17 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask18 = net.goldolphin.cate.Task.create(action0_17);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter19 = unitTask18.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter20 = unitWaiter19.continueWithWaiter();
        java.util.concurrent.Executor executor21 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler22 = new net.goldolphin.cate.ExecutorScheduler(executor21);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask23 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler22);
        java.util.concurrent.Executor executor24 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler25 = new net.goldolphin.cate.ExecutorScheduler(executor24);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask26 = unitWaiter19.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler25);
        java.util.concurrent.Executor executor27 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler28 = new net.goldolphin.cate.ExecutorScheduler(executor27);
        net.goldolphin.cate.ITask<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerITask29 = null;
        net.goldolphin.cate.Action0 action0_30 = null;
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask31 = net.goldolphin.cate.Task.create(action0_30);
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter32 = unitTask31.continueWithWaiter();
        net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitWaiter33 = unitWaiter32.continueWithWaiter();
        java.util.concurrent.Executor executor34 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler35 = new net.goldolphin.cate.ExecutorScheduler(executor34);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask36 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler35);
        java.util.concurrent.Executor executor37 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler38 = new net.goldolphin.cate.ExecutorScheduler(executor37);
        net.goldolphin.cate.Task<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit> unitTask39 = unitWaiter32.withScheduler((net.goldolphin.cate.IScheduler) executorScheduler38);
        net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>> iSchedulerTaskWithScheduler40 = new net.goldolphin.cate.TaskWithScheduler<net.goldolphin.cate.IScheduler, net.goldolphin.cate.TaskWithInitState<java.lang.CharSequence, java.io.Serializable>>(iSchedulerITask29, (net.goldolphin.cate.IScheduler) executorScheduler38);
        java.util.concurrent.Executor executor41 = null;
        net.goldolphin.cate.ExecutorScheduler executorScheduler42 = new net.goldolphin.cate.ExecutorScheduler(executor41);
        net.goldolphin.cate.IScheduler[] iSchedulerArray43 = new net.goldolphin.cate.IScheduler[] { executorScheduler25, executorScheduler28, executorScheduler38, executorScheduler42 };
        net.goldolphin.cate.partitioned.IPartitioner<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskIPartitioner44 = null;
        net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>> unitWaiterFunc0TaskPartitionedSchedulerPool45 = new net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>(iSchedulerArray43, unitWaiterFunc0TaskIPartitioner44);
        boolean boolean46 = waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore16.contains(unitWaiterFunc0TaskPartitionedSchedulerPool45);
        net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler> waiterFunc0TaskPartitionedSchedulerPoolPartitionedStore47 = new net.goldolphin.cate.partitioned.PartitionedStore<net.goldolphin.cate.partitioned.PartitionedSchedulerPool<net.goldolphin.cate.Func0Task<net.goldolphin.cate.Waiter<net.goldolphin.cate.Unit, net.goldolphin.cate.Unit>>>, net.goldolphin.cate.IScheduler>((net.goldolphin.cate.partitioned.PartitionedSchedulerPool) unitWaiterFunc0TaskPartitionedSchedulerPool45);
        org.junit.Assert.assertNotNull(iSchedulerTaskWithSchedulerHashedPartitioner1);
        org.junit.Assert.assertNotNull(unitTask4);
        org.junit.Assert.assertNotNull(unitWaiter5);
        org.junit.Assert.assertNotNull(unitWaiter6);
        org.junit.Assert.assertNotNull(unitTask9);
        org.junit.Assert.assertNotNull(unitTask12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(unitTask18);
        org.junit.Assert.assertNotNull(unitWaiter19);
        org.junit.Assert.assertNotNull(unitWaiter20);
        org.junit.Assert.assertNotNull(unitTask23);
        org.junit.Assert.assertNotNull(unitTask26);
        org.junit.Assert.assertNotNull(unitTask31);
        org.junit.Assert.assertNotNull(unitWaiter32);
        org.junit.Assert.assertNotNull(unitWaiter33);
        org.junit.Assert.assertNotNull(unitTask36);
        org.junit.Assert.assertNotNull(unitTask39);
        org.junit.Assert.assertNotNull(iSchedulerArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }
swiftech-swifttime, length: 4

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder0 = com.github.swiftech.swifttime.TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_TIME_MINUS;
        com.github.swiftech.swifttime.TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_MINUS = timeFormatBuilder0;
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder2 = timeFormatBuilder0.day();
        java.lang.String str4 = timeFormatBuilder2.format((long) 1970);
        org.junit.Assert.assertNotNull(timeFormatBuilder0);
        org.junit.Assert.assertNotNull(timeFormatBuilder2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31 18:0031-01- 01120118120001_01181200:01:-31" + "'", str4, "1969-12-31 18:0031-01- 01120118120001_01181200:01:-31");
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1698796569430,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2023,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=56,SECOND=9,MILLISECOND=430,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }

    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder0 = com.github.swiftech.swifttime.TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_SECOND_MINUS;
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder1 = timeFormatBuilder0.minus();
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder2 = timeFormatBuilder1.year();
        java.lang.String str4 = timeFormatBuilder2.format((long) (-336));
        org.junit.Assert.assertNotNull(timeFormatBuilder0);
        org.junit.Assert.assertNotNull(timeFormatBuilder1);
        org.junit.Assert.assertNotNull(timeFormatBuilder2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31 17:5931-59- 59125917125959_59171259:59:-3112591759-1259:17 1217591759:59_59-19691259:1712_::5912591969-12-31 18:0031-01- 01120118120001_01181200:01:-31-1969" + "'", str4, "1969-12-31 17:5931-59- 59125917125959_59171259:59:-3112591759-1259:17 1217591759:59_59-19691259:1712_::5912591969-12-31 18:0031-01- 01120118120001_01181200:01:-31-1969");
    }

    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder0 = com.github.swiftech.swifttime.TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_TIME_MINUS;
        com.github.swiftech.swifttime.TimeFormatBuilder.TIME_FORMAT_BUILDER_DATE_MINUS = timeFormatBuilder0;
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder2 = timeFormatBuilder0.month();
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder3 = timeFormatBuilder0.minute();
        com.github.swiftech.swifttime.TimeFormatBuilder timeFormatBuilder5 = timeFormatBuilder0.separator("1969-12-31 18:0031-01- 01120118120001_01181200:01:-31");
        com.github.swiftech.swifttime.Time time7 = new com.github.swiftech.swifttime.Time((long) (-1));
        time7.setLenient(true);
        int int11 = time7.getLeastMaximum(4);
        com.github.swiftech.swifttime.Time time12 = time7.increaseDate();
        com.github.swiftech.swifttime.Time time14 = time7.increaseDates((int) '#');
        time7.setTime(0, 23504, 4);
        time7.setTimeInMillis((long) 52);
        java.util.Date date21 = time7.getGregorianChange();
        java.lang.String str22 = timeFormatBuilder5.format(date21);
        org.junit.Assert.assertNotNull(timeFormatBuilder0);
        org.junit.Assert.assertNotNull(timeFormatBuilder2);
        org.junit.Assert.assertNotNull(timeFormatBuilder3);
        org.junit.Assert.assertNotNull(timeFormatBuilder5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(time12);
        org.junit.Assert.assertNotNull(time14);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Oct 04 18:00:00 CST 1582");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1582-10-04 18:0004-00- 00100018100000_00181000:00:-0410001800-1000:18 1018001800:00_00-15821000:1810_::0010001969-12-31 18:0031-01- 01120118120001_01181200:01:-31-15820010001969-12-31 18:0031-01- 01120118120001_01181200:01:-31" + "'", str22, "1582-10-04 18:0004-00- 00100018100000_00181000:00:-0410001800-1000:18 1018001800:00_00-15821000:1810_::0010001969-12-31 18:0031-01- 01120118120001_01181200:01:-31-15820010001969-12-31 18:0031-01- 01120118120001_01181200:01:-31");
    }
ThaliaBuecherGmbH-thalia-junit-postgres, length: 1

    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test07");
        int int0 = de.thalia.junit.postgres.PostgresEmbedder.freePortNumber();
// flaky:         org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64680 + "'", int0 == 64680);
    }
j256-simplemetrics, length: 2

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        com.j256.simplemetrics.metric.ControlledMetricTimer controlledMetricTimer4 = new com.j256.simplemetrics.metric.ControlledMetricTimer("hi!", "never", "hi!", "com.j256");
        long long6 = controlledMetricTimer4.stop((long) (byte) 10);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698796522535L + "'", long6 == 1698796522535L);
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        com.j256.simplemetrics.metric.ControlledMetricTimer controlledMetricTimer4 = new com.j256.simplemetrics.metric.ControlledMetricTimer("hi!", "never", "hi!", "com.j256");
        long long6 = controlledMetricTimer4.stop((long) 100);
        long long7 = controlledMetricTimer4.start();
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698796525183L + "'", long6 == 1698796525183L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698796525283L + "'", long7 == 1698796525283L);
    }
StefaniniInspiring-pugtsdb, length: 6

    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastMonths((long) (byte) 100);
        com.inspiring.pugtsdb.time.Interval interval3 = builder1.fromDaysAgo((long) (short) 100);
        long long4 = interval3.getUntilTime();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1690154967698L + "'", long4 == 1690154967698L);
    }

    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastMonths((long) (byte) 10);
        com.inspiring.pugtsdb.time.Interval interval3 = builder1.fromMinutesAgo((long) (byte) 100);
        java.lang.String str4 = interval3.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Interval{fromTime=1672491509360, untilTime=1698788969360}

    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastMonths((long) (byte) 100);
        com.inspiring.pugtsdb.time.Interval interval3 = builder1.fromMinutesAgo((-1L));
        long long4 = interval3.getFromTime();
        long long5 = interval3.getFromTime();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1435820430292L + "'", long4 == 1435820430292L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1435820430292L + "'", long5 == 1435820430292L);
    }

    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastDays((long) '4');
        com.inspiring.pugtsdb.time.Interval interval3 = builder1.fromDaysAgo(0L);
        com.inspiring.pugtsdb.time.Interval interval4 = builder1.fromNow();
        long long5 = interval4.getFromTime();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1694302170624L + "'", long5 == 1694302170624L);
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastMonths((long) (byte) 100);
        com.inspiring.pugtsdb.time.Interval interval2 = builder1.fromNow();
        com.inspiring.pugtsdb.time.Interval interval4 = builder1.fromMonthsAgo((long) ' ');
        com.inspiring.pugtsdb.time.Interval interval6 = builder1.fromSecondsAgo(1690154967698L);
        java.lang.String str7 = interval6.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Interval{fromTime=-1688719147327133, untilTime=-1688456172727133}

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        com.inspiring.pugtsdb.time.Interval.Builder builder1 = com.inspiring.pugtsdb.time.Interval.ofLastMonths((long) (byte) 10);
        com.inspiring.pugtsdb.time.Interval interval3 = builder1.fromMinutesAgo((long) (byte) 100);
        long long4 = interval3.getFromTime();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(interval3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1672491512541L + "'", long4 == 1672491512541L);
    }
edwardcapriolo-gossip, length: 8

    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (short) 0, "hi!");
        boolean boolean6 = remoteGossipMember4.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = remoteGossipMember4.equals((java.lang.Object) 86400000L);
        long long9 = remoteGossipMember4.getHeartbeat();
        java.lang.String str10 = remoteGossipMember4.getId();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1698797233244L + "'", long9 == 1698797233244L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (short) 0, "hi!");
        boolean boolean6 = remoteGossipMember4.equals((java.lang.Object) (byte) 1);
        java.lang.String str7 = remoteGossipMember4.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Member [address=:0, id=hi!, heartbeat=1698797234652]" + "'", str7, "Member [address=:0, id=hi!, heartbeat=1698797234652]");
    }

    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (short) 0, "hi!");
        java.lang.String str5 = remoteGossipMember4.getAddress();
        java.lang.String str6 = remoteGossipMember4.getAddress();
        long long7 = remoteGossipMember4.getHeartbeat();
        remoteGossipMember4.setHeartbeat(1698797232207L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":0" + "'", str5, ":0");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":0" + "'", str6, ":0");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698797234974L + "'", long7 == 1698797234974L);
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (short) 0, "hi!");
        java.lang.String str5 = remoteGossipMember4.getAddress();
        java.lang.String str6 = remoteGossipMember4.getAddress();
        long long7 = remoteGossipMember4.getHeartbeat();
        java.lang.String str8 = remoteGossipMember4.getClusterName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":0" + "'", str5, ":0");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":0" + "'", str6, ":0");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698797236152L + "'", long7 == 1698797236152L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (short) 0, "hi!");
        java.lang.String str5 = remoteGossipMember4.getAddress();
        java.lang.String str6 = remoteGossipMember4.getAddress();
        long long7 = remoteGossipMember4.getHeartbeat();
        java.lang.String str8 = remoteGossipMember4.toString();
        java.lang.String str9 = remoteGossipMember4.getHost();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":0" + "'", str5, ":0");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ":0" + "'", str6, ":0");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698797238955L + "'", long7 == 1698797238955L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Member [address=:0, id=hi!, heartbeat=1698797238955]" + "'", str8, "Member [address=:0, id=hi!, heartbeat=1698797238955]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        com.google.code.gossip.RemoteGossipMember remoteGossipMember4 = new com.google.code.gossip.RemoteGossipMember("hi!", "", (int) (byte) 1, "Member [address=:0, id=hi!, heartbeat=1698797232207]");
        long long5 = remoteGossipMember4.getHeartbeat();
        int int6 = remoteGossipMember4.getPort();
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698797244075L + "'", long5 == 1698797244075L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        com.google.code.gossip.GossipSettings gossipSettings7 = null;
        com.google.code.gossip.StartupSettings startupSettings9 = new com.google.code.gossip.StartupSettings("", (int) (short) 1, gossipSettings7, "hi!");
        startupSettings9.setPort(10);
        startupSettings9.setPort((int) 'a');
        java.lang.String str14 = startupSettings9.getId();
        java.util.List<com.google.code.gossip.GossipMember> gossipMemberList15 = startupSettings9.getGossipMembers();
        com.google.code.gossip.GossipSettings gossipSettings16 = new com.google.code.gossip.GossipSettings();
        gossipSettings16.setCleanupInterval((int) (short) 0);
        com.google.code.gossip.event.GossipListener gossipListener19 = null;
        com.google.code.gossip.GossipService gossipService20 = new com.google.code.gossip.GossipService("", "hi!", 1, "", gossipMemberList15, gossipSettings16, gossipListener19);
        com.google.code.gossip.manager.GossipManager gossipManager21 = gossipService20.get_gossipManager();
        com.google.code.gossip.GossipSettings gossipSettings28 = null;
        com.google.code.gossip.StartupSettings startupSettings30 = new com.google.code.gossip.StartupSettings("", (int) (short) 1, gossipSettings28, "hi!");
        startupSettings30.setPort(10);
        startupSettings30.setPort((int) 'a');
        java.lang.String str35 = startupSettings30.getId();
        java.util.List<com.google.code.gossip.GossipMember> gossipMemberList36 = startupSettings30.getGossipMembers();
        com.google.code.gossip.GossipSettings gossipSettings37 = new com.google.code.gossip.GossipSettings();
        gossipSettings37.setCleanupInterval((int) (short) 0);
        com.google.code.gossip.event.GossipListener gossipListener40 = null;
        com.google.code.gossip.GossipService gossipService41 = new com.google.code.gossip.GossipService("", "hi!", 1, "", gossipMemberList36, gossipSettings37, gossipListener40);
        com.google.code.gossip.manager.GossipManager gossipManager42 = gossipService41.get_gossipManager();
        gossipService20.set_gossipManager(gossipManager42);
        com.google.code.gossip.GossipSettings gossipSettings50 = null;
        com.google.code.gossip.StartupSettings startupSettings52 = new com.google.code.gossip.StartupSettings("", (int) (short) 1, gossipSettings50, "hi!");
        startupSettings52.setPort(10);
        startupSettings52.setPort((int) 'a');
        java.lang.String str57 = startupSettings52.getId();
        java.util.List<com.google.code.gossip.GossipMember> gossipMemberList58 = startupSettings52.getGossipMembers();
        com.google.code.gossip.GossipSettings gossipSettings59 = new com.google.code.gossip.GossipSettings();
        gossipSettings59.setCleanupInterval((int) (short) 0);
        com.google.code.gossip.event.GossipListener gossipListener62 = null;
        com.google.code.gossip.GossipService gossipService63 = new com.google.code.gossip.GossipService("", "hi!", 1, "", gossipMemberList58, gossipSettings59, gossipListener62);
        com.google.code.gossip.manager.GossipManager gossipManager64 = gossipService63.get_gossipManager();
        gossipService20.set_gossipManager(gossipManager64);
        gossipManager64.shutdown();
        com.google.code.gossip.GossipSettings gossipSettings73 = null;
        com.google.code.gossip.StartupSettings startupSettings75 = new com.google.code.gossip.StartupSettings("", (int) (short) 1, gossipSettings73, "hi!");
        startupSettings75.setPort(10);
        startupSettings75.setPort((int) 'a');
        java.lang.String str80 = startupSettings75.getId();
        java.util.List<com.google.code.gossip.GossipMember> gossipMemberList81 = startupSettings75.getGossipMembers();
        com.google.code.gossip.GossipSettings gossipSettings82 = new com.google.code.gossip.GossipSettings();
        gossipSettings82.setCleanupInterval((int) (short) 0);
        com.google.code.gossip.event.GossipListener gossipListener85 = null;
        com.google.code.gossip.GossipService gossipService86 = new com.google.code.gossip.GossipService("", "hi!", 1, "", gossipMemberList81, gossipSettings82, gossipListener85);
        com.google.code.gossip.manager.GossipManager gossipManager87 = gossipService86.get_gossipManager();
        gossipManager87.shutdown();
        com.google.code.gossip.LocalGossipMember localGossipMember89 = gossipManager87.getMyself();
        boolean boolean91 = localGossipMember89.equals((java.lang.Object) 3600000L);
        com.google.code.gossip.GossipTimeoutTimer gossipTimeoutTimer92 = new com.google.code.gossip.GossipTimeoutTimer((long) 1000, (javax.management.NotificationListener) gossipManager64, localGossipMember89);
        gossipTimeoutTimer92.reset();
        gossipTimeoutTimer92.postRegister((java.lang.Boolean) true);
        java.lang.Object obj97 = gossipTimeoutTimer92.getNotificationUserData((java.lang.Integer) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(gossipMemberList15);
        org.junit.Assert.assertNotNull(gossipManager21);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(gossipMemberList36);
        org.junit.Assert.assertNotNull(gossipManager42);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(gossipMemberList58);
        org.junit.Assert.assertNotNull(gossipManager64);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(gossipMemberList81);
        org.junit.Assert.assertNotNull(gossipManager87);
        org.junit.Assert.assertNotNull(localGossipMember89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(obj97);
// flaky:         org.junit.Assert.assertEquals(obj97.toString(), "Member [address=hi!:1, id=, heartbeat=1698797245592]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "Member [address=hi!:1, id=, heartbeat=1698797245592]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "Member [address=hi!:1, id=, heartbeat=1698797245592]");
    }

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        com.google.code.gossip.GossipSettings gossipSettings6 = null;
        com.google.code.gossip.StartupSettings startupSettings8 = new com.google.code.gossip.StartupSettings("", (int) (short) 1, gossipSettings6, "hi!");
        startupSettings8.setPort(10);
        startupSettings8.setPort((int) 'a');
        java.lang.String str13 = startupSettings8.getId();
        java.util.List<com.google.code.gossip.GossipMember> gossipMemberList14 = startupSettings8.getGossipMembers();
        com.google.code.gossip.GossipSettings gossipSettings15 = new com.google.code.gossip.GossipSettings();
        gossipSettings15.setCleanupInterval((int) (short) 0);
        com.google.code.gossip.event.GossipListener gossipListener18 = null;
        com.google.code.gossip.GossipService gossipService19 = new com.google.code.gossip.GossipService("", "hi!", 1, "", gossipMemberList14, gossipSettings15, gossipListener18);
        com.google.code.gossip.manager.GossipManager gossipManager20 = gossipService19.get_gossipManager();
        gossipManager20.shutdown();
        com.google.code.gossip.LocalGossipMember localGossipMember22 = gossipManager20.getMyself();
        java.util.List<com.google.code.gossip.LocalGossipMember> localGossipMemberList23 = gossipManager20.getDeadList();
        com.google.code.gossip.LocalGossipMember localGossipMember24 = gossipManager20.getMyself();
        java.lang.String str25 = localGossipMember24.toString();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(gossipMemberList14);
        org.junit.Assert.assertNotNull(gossipManager20);
        org.junit.Assert.assertNotNull(localGossipMember22);
        org.junit.Assert.assertNotNull(localGossipMemberList23);
        org.junit.Assert.assertNotNull(localGossipMember24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Member [address=hi!:1, id=, heartbeat=1698797249120]" + "'", str25, "Member [address=hi!:1, id=, heartbeat=1698797249120]");
    }
yankeguo-xlog-java, length: 15

    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        java.lang.String str0 = net.landzero.xlog.utils.Hex.randomHex16();
// flaky:         org.junit.Assert.assertEquals("'" + str0 + "' != '" + "2b91ee34d8daadf5" + "'", str0, "2b91ee34d8daadf5");
    }

    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        net.landzero.xlog.mybatis.TrackEventBuilder trackEventBuilder0 = new net.landzero.xlog.mybatis.TrackEventBuilder();
        trackEventBuilder0.commit();
        net.landzero.xlog.mybatis.TrackEvent trackEvent2 = trackEventBuilder0.build();
        trackEvent2.setError("DIGEST");
        long long5 = trackEvent2.getDuration();
        java.lang.String str6 = trackEvent2.getMethod();
        org.junit.Assert.assertNotNull(trackEvent2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str6);
    }

    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
        java.lang.String str0 = net.landzero.xlog.XLog.crid();
// flaky:         org.junit.Assert.assertEquals("'" + str0 + "' != '" + "-" + "'", str0, "-");
    }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        net.landzero.xlog.http.AccessEvent accessEvent0 = new net.landzero.xlog.http.AccessEvent();
        java.util.ArrayList<java.lang.String> strList1 = accessEvent0.getHeaderAppInfo();
        long long2 = accessEvent0.getDuration();
        java.util.Date date3 = net.landzero.xlog.utils.Dates.yesterday();
        accessEvent0.setTimestamp(date3);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Oct 30 18:23:47 CDT 2023");
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        net.landzero.xlog.utils.CallerInfo callerInfo0 = net.landzero.xlog.utils.Reflections.getCallerInfo();
        java.lang.String str1 = callerInfo0.getMethodName();
        java.lang.String str2 = callerInfo0.getClassName();
        java.lang.String str3 = callerInfo0.getClassName();
        org.junit.Assert.assertNotNull(callerInfo0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "invoke" + "'", str1, "invoke");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "sun.reflect.DelegatingMethodAccessorImpl" + "'", str2, "sun.reflect.DelegatingMethodAccessorImpl");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "sun.reflect.DelegatingMethodAccessorImpl" + "'", str3, "sun.reflect.DelegatingMethodAccessorImpl");
    }

    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        net.landzero.xlog.utils.CallerInfo callerInfo0 = net.landzero.xlog.utils.Reflections.getCallerInfo();
        java.lang.String str1 = callerInfo0.getMethodName();
        java.lang.String str2 = callerInfo0.getClassName();
        java.lang.String str3 = callerInfo0.getMethodName();
        org.junit.Assert.assertNotNull(callerInfo0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "invoke" + "'", str1, "invoke");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "sun.reflect.DelegatingMethodAccessorImpl" + "'", str2, "sun.reflect.DelegatingMethodAccessorImpl");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "invoke" + "'", str3, "invoke");
    }

    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        net.landzero.xlog.perf.XPerfEventBuilder xPerfEventBuilder2 = new net.landzero.xlog.perf.XPerfEventBuilder("CRID[-]", "FORM");
        xPerfEventBuilder2.commit();
        net.landzero.xlog.perf.XPerfEvent xPerfEvent4 = xPerfEventBuilder2.build();
        java.lang.String str5 = xPerfEvent4.getPath();
        org.junit.Assert.assertNotNull(xPerfEvent4);
// flaky:         org.junit.Assert.assertNull(str5);
    }

    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        net.landzero.xlog.perf.XPerfEvent xPerfEvent0 = new net.landzero.xlog.perf.XPerfEvent();
        java.lang.String str1 = xPerfEvent0.getPathDigest();
        java.lang.String str2 = xPerfEvent0.topic();
        java.lang.String str3 = xPerfEvent0.getPathDigest();
        java.util.Date date4 = net.landzero.xlog.utils.Dates.yesterday();
        xPerfEvent0.setTimestamp(date4);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "x-perf" + "'", str2, "x-perf");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 30 18:23:48 CDT 2023");
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        net.landzero.xlog.perf.XPerfEventBuilder xPerfEventBuilder2 = new net.landzero.xlog.perf.XPerfEventBuilder("CRID[-]", "FORM");
        xPerfEventBuilder2.commit();
        net.landzero.xlog.perf.XPerfEvent xPerfEvent4 = xPerfEventBuilder2.build();
        java.util.Date date5 = xPerfEvent4.getTimestamp();
        xPerfEvent4.setProject("ff");
        org.junit.Assert.assertNotNull(xPerfEvent4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:23:48 CDT 2023");
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        net.landzero.xlog.perf.XPerfEventBuilder xPerfEventBuilder2 = new net.landzero.xlog.perf.XPerfEventBuilder("CRID[-]", "FORM");
        xPerfEventBuilder2.commit();
        net.landzero.xlog.perf.XPerfEvent xPerfEvent4 = xPerfEventBuilder2.build();
        java.util.Date date5 = xPerfEvent4.getTimestamp();
        java.lang.String str6 = xPerfEvent4.getProject();
        java.lang.String str7 = xPerfEvent4.getMethodName();
        org.junit.Assert.assertNotNull(xPerfEvent4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:23:49 CDT 2023");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FORM" + "'", str7, "FORM");
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        net.landzero.xlog.mybatis.TrackEventBuilder trackEventBuilder0 = new net.landzero.xlog.mybatis.TrackEventBuilder();
        trackEventBuilder0.commit();
        net.landzero.xlog.mybatis.TrackEvent trackEvent2 = trackEventBuilder0.build();
        trackEvent2.setError("DIGEST");
        long long5 = trackEvent2.getDuration();
        trackEvent2.setMethod("000000000000000a");
        java.lang.String str8 = trackEvent2.getSqlDigest();
        org.junit.Assert.assertNotNull(trackEvent2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str8);
    }

    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        net.landzero.xlog.utils.CallerInfo callerInfo0 = net.landzero.xlog.utils.Reflections.getCallerInfo();
        java.lang.String str1 = callerInfo0.getClassName();
        java.lang.String str2 = callerInfo0.getClassName();
        org.junit.Assert.assertNotNull(callerInfo0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "sun.reflect.DelegatingMethodAccessorImpl" + "'", str1, "sun.reflect.DelegatingMethodAccessorImpl");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "sun.reflect.DelegatingMethodAccessorImpl" + "'", str2, "sun.reflect.DelegatingMethodAccessorImpl");
    }

    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        net.landzero.xlog.mybatis.TrackEventBuilder trackEventBuilder0 = new net.landzero.xlog.mybatis.TrackEventBuilder();
        trackEventBuilder0.commit();
        net.landzero.xlog.mybatis.TrackEvent trackEvent2 = trackEventBuilder0.build();
        trackEvent2.setError("DIGEST");
        long long5 = trackEvent2.getDuration();
        java.lang.Class<?> wildcardClass6 = trackEvent2.getClass();
        org.junit.Assert.assertNotNull(trackEvent2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        net.landzero.xlog.http.AccessEvent accessEvent0 = new net.landzero.xlog.http.AccessEvent();
        java.util.ArrayList<java.lang.String> strList1 = accessEvent0.getHeaderAppInfo();
        long long2 = accessEvent0.getDuration();
        accessEvent0.setPathDigest("0");
        net.landzero.xlog.XLog.appendEvent(accessEvent0);
        accessEvent0.setMethod("100");
        java.lang.String str8 = accessEvent0.topic();
        java.util.Date date9 = net.landzero.xlog.utils.Dates.yesterday();
        accessEvent0.setTimestamp(date9);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "x-access" + "'", str8, "x-access");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Oct 30 18:23:49 CDT 2023");
    }

    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        net.landzero.xlog.perf.XPerfEventBuilder xPerfEventBuilder2 = new net.landzero.xlog.perf.XPerfEventBuilder("cridMark", "BASIC");
        xPerfEventBuilder2.commit();
        net.landzero.xlog.perf.XPerfEvent xPerfEvent4 = xPerfEventBuilder2.build();
        net.landzero.xlog.http.AccessEvent accessEvent5 = new net.landzero.xlog.http.AccessEvent();
        java.util.ArrayList<java.lang.String> strList6 = accessEvent5.getHeaderAppInfo();
        net.landzero.xlog.perf.XPerfEvent xPerfEvent7 = new net.landzero.xlog.perf.XPerfEvent();
        java.lang.String str8 = xPerfEvent7.getPath();
        java.lang.String str9 = xPerfEvent7.getAction();
        net.landzero.xlog.http.AccessEvent accessEvent10 = new net.landzero.xlog.http.AccessEvent();
        java.lang.String str11 = accessEvent10.getHeaderUserToken();
        java.lang.String[] strArray21 = new java.lang.String[] { "[%d{yyyy/MM/dd HH:mm:ss.SSS}] %msg%n", "crid", "0", "crid", "FORM", "DIGEST", "FORM", "", "-1" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        accessEvent10.setParams(strList22);
        xPerfEvent7.setArguments((java.util.List<java.lang.String>) strList22);
        accessEvent5.setHeaderAppInfo(strList22);
        xPerfEvent4.setArguments((java.util.List<java.lang.String>) strList22);
        long long28 = xPerfEvent4.getDuration();
        org.junit.Assert.assertNotNull(xPerfEvent4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }
DiUS-java-faker, length: 171

    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test022");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        long long2 = randomService1.nextLong();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3475542030954430036L) + "'", long2 == (-3475542030954430036L));
    }

    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        java.lang.String str4 = food3.sushi();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Japanese whiting" + "'", str4, "Japanese whiting");
    }

    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        java.lang.String str7 = university6.prefix();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Southern" + "'", str7, "Southern");
    }

    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test033");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        java.lang.String str6 = basketball5.positions();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Point Guard" + "'", str6, "Point Guard");
    }

    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test034");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        java.lang.String str7 = bojackHorseman6.characters();
        java.lang.String str8 = bojackHorseman6.quotes();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ralph Stilton" + "'", str7, "Ralph Stilton");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "That's the problem with life, either you know what you want and you don't get what you want, or you get what you want and then you don't know what you want" + "'", str8, "That's the problem with life, either you know what you want and you don't get what you want, or you get what you want and then you don't know what you want");
    }

    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        java.lang.String str4 = slackEmoji3.foodAndDrink();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":poultry_leg:" + "'", str4, ":poultry_leg:");
    }

    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        java.lang.String str7 = bojackHorseman6.tongueTwisters();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Courtney Portnoy portrayed the formerly portly consort in the seaport resort" + "'", str7, "Courtney Portnoy portrayed the formerly portly consort in the seaport resort");
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        java.lang.String str5 = hacker4.ingverb();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "indexing" + "'", str5, "indexing");
    }

    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.ChuckNorris chuckNorris8 = faker1.chuckNorris();
        java.lang.String str9 = chuckNorris8.fact();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(chuckNorris8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chuck Norris doesn't use web standards as the web will conform to him." + "'", str9, "Chuck Norris doesn't use web standards as the web will conform to him.");
    }

    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.gtin8();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9781805087038" + "'", str6, "9781805087038");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "46532190" + "'", str7, "46532190");
    }

    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test046");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Hacker hacker5 = faker1.hacker();
        java.lang.String str6 = hacker5.abbreviation();
        java.lang.String str7 = hacker5.adjective();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(hacker5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AGP" + "'", str6, "AGP");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "digital" + "'", str7, "digital");
    }

    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.asin();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9781037458224" + "'", str6, "9781037458224");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B000I6QR9O" + "'", str7, "B000I6QR9O");
    }

    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        java.lang.String str8 = educator7.secondarySchool();
        java.lang.String str9 = educator7.secondarySchool();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Brookville High" + "'", str8, "Brookville High");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ironbarrow Secondary College" + "'", str9, "Ironbarrow Secondary College");
    }

    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.Dog dog7 = faker1.dog();
        java.lang.String str8 = dog7.gender();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(dog7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "female" + "'", str8, "female");
    }

    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        long long3 = randomService1.nextLong((long) 'a');
        java.lang.String str5 = randomService1.hex((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int8 = randomService1.nextInt((int) (short) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 63L + "'", long3 == 63L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B463551983" + "'", str5, "B463551983");
    }

    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        java.lang.String str4 = food3.measurement();
        java.lang.String str5 = food3.fruit();
        java.lang.String str6 = food3.dish();
        java.lang.String str7 = food3.dish();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2 pint" + "'", str4, "2 pint");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cherries" + "'", str5, "Cherries");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chicken Fajitas" + "'", str6, "Chicken Fajitas");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chicken Parm" + "'", str7, "Chicken Parm");
    }

    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Team team5 = faker1.team();
        java.lang.String str6 = team5.state();
        java.lang.String str7 = team5.sport();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(team5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Florida" + "'", str6, "Florida");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "pes\344pallo" + "'", str7, "pes\344pallo");
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Music music2 = faker1.music();
        java.lang.String str3 = music2.genre();
        org.junit.Assert.assertNotNull(music2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Folk" + "'", str3, "Folk");
    }

    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test058");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.GameOfThrones gameOfThrones7 = faker1.gameOfThrones();
        java.lang.String str8 = gameOfThrones7.dragon();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(gameOfThrones7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vhagar" + "'", str8, "Vhagar");
    }

    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        com.github.javafaker.Dog dog4 = faker1.dog();
        java.lang.String str5 = dog4.size();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(dog4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "medium" + "'", str5, "medium");
    }

    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test061");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Team team5 = faker1.team();
        com.github.javafaker.Coin coin6 = faker1.coin();
        java.lang.String str7 = coin6.flip();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(team5);
        org.junit.Assert.assertNotNull(coin6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Tails" + "'", str7, "Tails");
    }

    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Job job4 = faker1.job();
        java.lang.String str5 = job4.title();
        java.lang.String str6 = job4.field();
        java.lang.String str7 = job4.title();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(job4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Farming Administrator" + "'", str5, "Farming Administrator");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Marketing" + "'", str6, "Marketing");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Accounting Administrator" + "'", str7, "Accounting Administrator");
    }

    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
        java.util.Locale locale0 = null;
        java.util.Random random1 = null;
        com.github.javafaker.service.RandomService randomService2 = new com.github.javafaker.service.RandomService(random1);
        long long4 = randomService2.nextLong((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale0, randomService2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: locale is required");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 62L + "'", long4 == 62L);
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        com.github.javafaker.Dune dune3 = faker1.dune();
        com.github.javafaker.Dune.Saying saying4 = com.github.javafaker.Dune.Saying.MENTAT;
        java.lang.String str5 = dune3.saying(saying4);
        java.lang.String str6 = dune3.quote();
        java.lang.String str7 = dune3.planet();
        org.junit.Assert.assertNotNull(dragonBall2);
        org.junit.Assert.assertNotNull(dune3);
        org.junit.Assert.assertTrue("'" + saying4 + "' != '" + com.github.javafaker.Dune.Saying.MENTAT + "'", saying4.equals(com.github.javafaker.Dune.Saying.MENTAT));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "A process cannot be understood by stopping it. Understanding must move with the flow of the process, must join it and flow with it." + "'", str5, "A process cannot be understood by stopping it. Understanding must move with the flow of the process, must join it and flow with it.");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "A popular man arouses the jealousy of the powerful." + "'", str6, "A popular man arouses the jealousy of the powerful.");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Arrakis" + "'", str7, "Arrakis");
    }

    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.File file8 = faker1.file();
        java.lang.String str9 = file8.extension();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mp3" + "'", str9, "mp3");
    }

    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        java.lang.String str9 = ancient8.hero();
        java.lang.String str10 = ancient8.primordial();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Hermione" + "'", str9, "Hermione");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Uranus" + "'", str10, "Uranus");
    }

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        com.github.javafaker.Dog dog4 = faker1.dog();
        com.github.javafaker.Team team5 = faker1.team();
        java.lang.String str6 = team5.sport();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(dog4);
        org.junit.Assert.assertNotNull(team5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "handball" + "'", str6, "handball");
    }

    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.SlackEmoji slackEmoji2 = faker1.slackEmoji();
        java.lang.String str3 = slackEmoji2.activity();
        java.lang.String str4 = slackEmoji2.emoji();
        org.junit.Assert.assertNotNull(slackEmoji2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":dancer:" + "'", str3, ":dancer:");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":baby_bottle:" + "'", str4, ":baby_bottle:");
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        java.lang.String str3 = photography2.camera();
        java.lang.String str4 = photography2.lens();
        java.lang.String str5 = photography2.iso();
        java.lang.String str6 = photography2.term();
        org.junit.Assert.assertNotNull(photography2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZENIT-VE" + "'", str3, "ZENIT-VE");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u2013105mm/4" + "'", str4, "\u2013105mm/4");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "64" + "'", str5, "64");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "35mm" + "'", str6, "35mm");
    }

    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        java.lang.String str7 = superhero6.prefix();
        java.lang.String str8 = superhero6.name();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(superhero6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Illustrious" + "'", str7, "Illustrious");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Gamora" + "'", str8, "Gamora");
    }

    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.ean8();
        java.lang.String str8 = code5.isbnGroup();
        java.lang.String str9 = code5.isbnRegistrant();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9781512905816" + "'", str6, "9781512905816");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "87177022" + "'", str7, "87177022");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "585-71537" + "'", str9, "585-71537");
    }

    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        java.lang.String str7 = university6.name();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Northern Kansas Academy" + "'", str7, "Northern Kansas Academy");
    }

    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        java.lang.String str5 = medical4.symptoms();
        java.lang.String str6 = medical4.medicineName();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Steatorrhea (Excess fat in stool)" + "'", str5, "Steatorrhea (Excess fat in stool)");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LUMACAFTOR" + "'", str6, "LUMACAFTOR");
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str10 = internet9.ipV4Address();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "145.105.132.31" + "'", str10, "145.105.132.31");
    }

    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Job job6 = new com.github.javafaker.Job(faker1);
        com.github.javafaker.University university7 = faker1.university();
        com.github.javafaker.Educator educator8 = faker1.educator();
        java.lang.String str9 = educator8.university();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(university7);
        org.junit.Assert.assertNotNull(educator8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Icelyn College" + "'", str9, "Icelyn College");
    }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        java.lang.String str4 = food3.dish();
        java.lang.String str5 = food3.sushi();
        java.lang.String str6 = food3.sushi();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tacos" + "'", str4, "Tacos");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Trough shells" + "'", str5, "Trough shells");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Botan shrimp" + "'", str6, "Botan shrimp");
    }

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Job job4 = faker1.job();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Sip sip6 = faker1.sip();
        java.lang.String str7 = sip6.clientErrorResponsePhrase();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(job4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(sip6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Session Interval Too Small" + "'", str7, "Session Interval Too Small");
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        java.lang.String str5 = hacker4.verb();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "program" + "'", str5, "program");
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        com.github.javafaker.Relationships relationships7 = faker1.relationships();
        java.lang.String str8 = relationships7.direct();
        java.lang.String str9 = relationships7.direct();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
        org.junit.Assert.assertNotNull(relationships7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sister" + "'", str8, "Sister");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Brother" + "'", str9, "Brother");
    }

    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        com.github.javafaker.service.RandomService randomService0 = new com.github.javafaker.service.RandomService();
        long long2 = randomService0.nextLong((long) 42656);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 26999L + "'", long2 == 26999L);
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        java.lang.String str5 = medical4.symptoms();
        java.lang.String str6 = medical4.hospitalName();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Inconsolable baby" + "'", str5, "Inconsolable baby");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OUR LADY OF THE LAKE REGIONAL MEDICAL CENTER" + "'", str6, "OUR LADY OF THE LAKE REGIONAL MEDICAL CENTER");
    }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        java.lang.String str6 = pokemon5.location();
        java.lang.String str7 = pokemon5.name();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Seven Island" + "'", str6, "Seven Island");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Mewtwo" + "'", str7, "Mewtwo");
    }

    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        java.lang.String str7 = englandFootBall6.league();
        java.lang.String str8 = englandFootBall6.team();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "EFLLeagueone" + "'", str7, "EFLLeagueone");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PortValeF.C." + "'", str8, "PortValeF.C.");
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        com.github.javafaker.idnumbers.SvSEIdNumber svSEIdNumber0 = new com.github.javafaker.idnumbers.SvSEIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Photography photography3 = faker2.photography();
        com.github.javafaker.Food food4 = faker2.food();
        com.github.javafaker.Job job5 = faker2.job();
        java.lang.String str6 = svSEIdNumber0.getValidSsn(faker2);
        java.util.Random random7 = null;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random7);
        com.github.javafaker.Avatar avatar9 = faker8.avatar();
        com.github.javafaker.SlackEmoji slackEmoji10 = faker8.slackEmoji();
        com.github.javafaker.Medical medical11 = faker8.medical();
        com.github.javafaker.Code code12 = faker8.code();
        com.github.javafaker.Barcode barcode13 = faker8.barcode();
        com.github.javafaker.App app14 = faker8.app();
        com.github.javafaker.Matz matz15 = faker8.matz();
        java.lang.String str16 = svSEIdNumber0.getValidSsn(faker8);
        org.junit.Assert.assertNotNull(photography3);
        org.junit.Assert.assertNotNull(food4);
        org.junit.Assert.assertNotNull(job5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "040403-4613" + "'", str6, "040403-4613");
        org.junit.Assert.assertNotNull(avatar9);
        org.junit.Assert.assertNotNull(slackEmoji10);
        org.junit.Assert.assertNotNull(medical11);
        org.junit.Assert.assertNotNull(code12);
        org.junit.Assert.assertNotNull(barcode13);
        org.junit.Assert.assertNotNull(app14);
        org.junit.Assert.assertNotNull(matz15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "041114+0429" + "'", str16, "041114+0429");
    }

    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.ean8();
        java.lang.String str8 = code5.isbnGroup();
        java.lang.String str9 = code5.ean8();
        java.lang.String str11 = code5.isbn10(false);
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9781980523000" + "'", str6, "9781980523000");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22301994" + "'", str7, "22301994");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "20795962" + "'", str9, "20795962");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0912413336" + "'", str11, "0912413336");
    }

    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        java.lang.String str6 = pokemon5.location();
        java.lang.String str7 = pokemon5.location();
        java.lang.String str8 = pokemon5.location();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "New Bark Town" + "'", str6, "New Bark Town");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Floaroma Town" + "'", str7, "Floaroma Town");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Icirrus City" + "'", str8, "Icirrus City");
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.ean8();
        java.lang.String str8 = code5.isbnGroup();
        java.lang.String str9 = code5.gtin8();
        java.lang.String str10 = code5.isbn13();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9781973231202" + "'", str6, "9781973231202");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "80623137" + "'", str7, "80623137");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "36674633" + "'", str9, "36674633");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9791015071932" + "'", str10, "9791015071932");
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Job job4 = faker1.job();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Sip sip6 = faker1.sip();
        int int7 = sip6.messagingPort();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(job4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(sip6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6298 + "'", int7 == 6298);
    }

    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        java.lang.String str3 = photography2.camera();
        java.lang.String str4 = photography2.camera();
        org.junit.Assert.assertNotNull(photography2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZENIT-EM" + "'", str3, "ZENIT-EM");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canon EOS 700D" + "'", str4, "Canon EOS 700D");
    }

    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Job job6 = new com.github.javafaker.Job(faker1);
        com.github.javafaker.University university7 = faker1.university();
        com.github.javafaker.Educator educator8 = faker1.educator();
        java.lang.String str9 = educator8.campus();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(university7);
        org.junit.Assert.assertNotNull(educator8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ostbarrow Campus" + "'", str9, "Ostbarrow Campus");
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.Dog dog7 = faker1.dog();
        java.lang.String str8 = dog7.breed();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(dog7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chow" + "'", str8, "Chow");
    }

    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test108");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        java.lang.String str3 = photography2.lens();
        org.junit.Assert.assertNotNull(photography2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fisheye" + "'", str3, "fisheye");
    }

    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        java.lang.String str5 = aquaTeenHungerForce4.character();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Err" + "'", str5, "Err");
    }

    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str8 = code5.isbn10(true);
        java.lang.String str9 = code5.isbn10();
        java.lang.String str11 = code5.isbn13(true);
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9790890520184" + "'", str6, "9790890520184");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-555-83541-4" + "'", str8, "1-555-83541-4");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1767186134" + "'", str9, "1767186134");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "979-0-528-78751-4" + "'", str11, "979-0-528-78751-4");
    }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        java.lang.String str5 = app4.name();
        java.lang.String str6 = app4.version();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Y-Solowarm" + "'", str5, "Y-Solowarm");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3.3.8" + "'", str6, "3.3.8");
    }

    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test114");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Buffy buffy4 = faker1.buffy();
        java.lang.String str5 = buffy4.bigBads();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(buffy4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "The Anointed One" + "'", str5, "The Anointed One");
    }

    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        java.lang.String str3 = photography2.camera();
        java.lang.String str4 = photography2.shutter();
        java.lang.String str5 = photography2.brand();
        org.junit.Assert.assertNotNull(photography2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Sony Alpha 550" + "'", str3, "Sony Alpha 550");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "8000" + "'", str4, "8000");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Kodak" + "'", str5, "Kodak");
    }

    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        java.lang.String str3 = dragonBall2.character();
        java.lang.String str4 = dragonBall2.character();
        org.junit.Assert.assertNotNull(dragonBall2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Oolong" + "'", str3, "Oolong");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dende" + "'", str4, "Dende");
    }

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        java.util.List<java.lang.String> strList7 = lorem5.paragraphs(43996);
        java.lang.String str8 = lorem5.word();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "libero" + "'", str8, "libero");
    }

    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str14 = internet9.image((java.lang.Integer) 43996, (java.lang.Integer) (-1), (java.lang.Boolean) false, "RSS");
        java.lang.String str15 = internet9.domainSuffix();
        java.lang.String str16 = internet9.ipV4Address();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://lorempixel.com/43996/-1/food/RSS" + "'", str14, "http://lorempixel.com/43996/-1/food/RSS");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "biz" + "'", str15, "biz");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "239.150.62.143" + "'", str16, "239.150.62.143");
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        java.lang.String str9 = ancient8.god();
        java.lang.String str10 = ancient8.hero();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Poseidon" + "'", str9, "Poseidon");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Odysseus" + "'", str10, "Odysseus");
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.File file8 = faker1.file();
        java.lang.String str13 = file8.fileName("Brother", "That's the problem with life, either you know what you want and you don't get what you want, or you get what you want and then you don't know what you want", "Government Manager", "Videl");
        java.lang.String str14 = file8.extension();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "BrotherVidelThat's the problem with life, either you know what you want and you don't get what you want, or you get what you want and then you don't know what you want.Government Manager" + "'", str13, "BrotherVidelThat's the problem with life, either you know what you want and you don't get what you want, or you get what you want and then you don't know what you want.Government Manager");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "pages" + "'", str14, "pages");
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.DragonBall dragonBall5 = faker1.dragonBall();
        java.lang.String str6 = dragonBall5.character();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(dragonBall5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Demon King Piccolo" + "'", str6, "Demon King Piccolo");
    }

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Options options4 = faker1.options();
        java.util.Random random5 = null;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random5);
        com.github.javafaker.Avatar avatar7 = faker6.avatar();
        com.github.javafaker.SlackEmoji slackEmoji8 = faker6.slackEmoji();
        com.github.javafaker.Medical medical9 = faker6.medical();
        com.github.javafaker.Robin robin10 = faker6.robin();
        com.github.javafaker.BojackHorseman bojackHorseman11 = faker6.bojackHorseman();
        com.github.javafaker.Demographic demographic12 = faker6.demographic();
        java.util.Random random13 = null;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random13);
        com.github.javafaker.Avatar avatar15 = faker14.avatar();
        com.github.javafaker.SlackEmoji slackEmoji16 = faker14.slackEmoji();
        com.github.javafaker.Medical medical17 = faker14.medical();
        com.github.javafaker.Robin robin18 = faker14.robin();
        com.github.javafaker.BojackHorseman bojackHorseman19 = faker14.bojackHorseman();
        com.github.javafaker.Demographic demographic20 = faker14.demographic();
        java.util.Random random21 = null;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(random21);
        com.github.javafaker.Avatar avatar23 = faker22.avatar();
        com.github.javafaker.SlackEmoji slackEmoji24 = faker22.slackEmoji();
        com.github.javafaker.Medical medical25 = faker22.medical();
        com.github.javafaker.Robin robin26 = faker22.robin();
        com.github.javafaker.BojackHorseman bojackHorseman27 = faker22.bojackHorseman();
        com.github.javafaker.Demographic demographic28 = faker22.demographic();
        java.util.Random random29 = null;
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker(random29);
        com.github.javafaker.Avatar avatar31 = faker30.avatar();
        com.github.javafaker.SlackEmoji slackEmoji32 = faker30.slackEmoji();
        com.github.javafaker.Medical medical33 = faker30.medical();
        com.github.javafaker.Robin robin34 = faker30.robin();
        com.github.javafaker.BojackHorseman bojackHorseman35 = faker30.bojackHorseman();
        com.github.javafaker.Demographic demographic36 = faker30.demographic();
        java.util.Random random37 = null;
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(random37);
        com.github.javafaker.Avatar avatar39 = faker38.avatar();
        com.github.javafaker.SlackEmoji slackEmoji40 = faker38.slackEmoji();
        com.github.javafaker.Medical medical41 = faker38.medical();
        com.github.javafaker.Robin robin42 = faker38.robin();
        com.github.javafaker.BojackHorseman bojackHorseman43 = faker38.bojackHorseman();
        com.github.javafaker.Demographic demographic44 = faker38.demographic();
        com.github.javafaker.Demographic[] demographicArray45 = new com.github.javafaker.Demographic[] { demographic12, demographic20, demographic28, demographic36, demographic44 };
        com.github.javafaker.Demographic demographic46 = options4.option(demographicArray45);
        java.util.Random random47 = null;
        com.github.javafaker.Faker faker48 = new com.github.javafaker.Faker(random47);
        com.github.javafaker.Avatar avatar49 = faker48.avatar();
        com.github.javafaker.SlackEmoji slackEmoji50 = faker48.slackEmoji();
        com.github.javafaker.Medical medical51 = faker48.medical();
        com.github.javafaker.Robin robin52 = faker48.robin();
        com.github.javafaker.BojackHorseman bojackHorseman53 = faker48.bojackHorseman();
        com.github.javafaker.Demographic demographic54 = faker48.demographic();
        com.github.javafaker.Ancient ancient55 = faker48.ancient();
        com.github.javafaker.Friends friends56 = faker48.friends();
        java.util.Random random57 = null;
        com.github.javafaker.Faker faker58 = new com.github.javafaker.Faker(random57);
        com.github.javafaker.Avatar avatar59 = faker58.avatar();
        com.github.javafaker.SlackEmoji slackEmoji60 = faker58.slackEmoji();
        com.github.javafaker.Medical medical61 = faker58.medical();
        com.github.javafaker.Robin robin62 = faker58.robin();
        com.github.javafaker.BojackHorseman bojackHorseman63 = faker58.bojackHorseman();
        com.github.javafaker.Demographic demographic64 = faker58.demographic();
        com.github.javafaker.Ancient ancient65 = faker58.ancient();
        com.github.javafaker.Friends friends66 = faker58.friends();
        com.github.javafaker.Friends[] friendsArray67 = new com.github.javafaker.Friends[] { friends56, friends66 };
        com.github.javafaker.Friends friends68 = options4.nextElement(friendsArray67);
        java.lang.String str69 = friends68.location();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(avatar7);
        org.junit.Assert.assertNotNull(slackEmoji8);
        org.junit.Assert.assertNotNull(medical9);
        org.junit.Assert.assertNotNull(robin10);
        org.junit.Assert.assertNotNull(bojackHorseman11);
        org.junit.Assert.assertNotNull(demographic12);
        org.junit.Assert.assertNotNull(avatar15);
        org.junit.Assert.assertNotNull(slackEmoji16);
        org.junit.Assert.assertNotNull(medical17);
        org.junit.Assert.assertNotNull(robin18);
        org.junit.Assert.assertNotNull(bojackHorseman19);
        org.junit.Assert.assertNotNull(demographic20);
        org.junit.Assert.assertNotNull(avatar23);
        org.junit.Assert.assertNotNull(slackEmoji24);
        org.junit.Assert.assertNotNull(medical25);
        org.junit.Assert.assertNotNull(robin26);
        org.junit.Assert.assertNotNull(bojackHorseman27);
        org.junit.Assert.assertNotNull(demographic28);
        org.junit.Assert.assertNotNull(avatar31);
        org.junit.Assert.assertNotNull(slackEmoji32);
        org.junit.Assert.assertNotNull(medical33);
        org.junit.Assert.assertNotNull(robin34);
        org.junit.Assert.assertNotNull(bojackHorseman35);
        org.junit.Assert.assertNotNull(demographic36);
        org.junit.Assert.assertNotNull(avatar39);
        org.junit.Assert.assertNotNull(slackEmoji40);
        org.junit.Assert.assertNotNull(medical41);
        org.junit.Assert.assertNotNull(robin42);
        org.junit.Assert.assertNotNull(bojackHorseman43);
        org.junit.Assert.assertNotNull(demographic44);
        org.junit.Assert.assertNotNull(demographicArray45);
        org.junit.Assert.assertNotNull(demographic46);
        org.junit.Assert.assertNotNull(avatar49);
        org.junit.Assert.assertNotNull(slackEmoji50);
        org.junit.Assert.assertNotNull(medical51);
        org.junit.Assert.assertNotNull(robin52);
        org.junit.Assert.assertNotNull(bojackHorseman53);
        org.junit.Assert.assertNotNull(demographic54);
        org.junit.Assert.assertNotNull(ancient55);
        org.junit.Assert.assertNotNull(friends56);
        org.junit.Assert.assertNotNull(avatar59);
        org.junit.Assert.assertNotNull(slackEmoji60);
        org.junit.Assert.assertNotNull(medical61);
        org.junit.Assert.assertNotNull(robin62);
        org.junit.Assert.assertNotNull(bojackHorseman63);
        org.junit.Assert.assertNotNull(demographic64);
        org.junit.Assert.assertNotNull(ancient65);
        org.junit.Assert.assertNotNull(friends66);
        org.junit.Assert.assertNotNull(friendsArray67);
        org.junit.Assert.assertNotNull(friends68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Monica and Chandler's House" + "'", str69, "Monica and Chandler's House");
    }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        com.github.javafaker.Friends friends9 = faker1.friends();
        com.github.javafaker.HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy10 = faker1.hitchhikersGuideToTheGalaxy();
        java.lang.String str11 = hitchhikersGuideToTheGalaxy10.specie();
        java.lang.String str12 = hitchhikersGuideToTheGalaxy10.starship();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
        org.junit.Assert.assertNotNull(friends9);
        org.junit.Assert.assertNotNull(hitchhikersGuideToTheGalaxy10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Mice" + "'", str11, "Mice");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vogon Constructor Fleet" + "'", str12, "Vogon Constructor Fleet");
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.Cat cat4 = faker1.cat();
        java.lang.String str5 = cat4.registry();
        java.lang.String str6 = cat4.breed();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(cat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cat Fanciers' Association" + "'", str5, "Cat Fanciers' Association");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ukrainian Levkoy" + "'", str6, "Ukrainian Levkoy");
    }

    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.Cat cat4 = faker1.cat();
        com.github.javafaker.Stock stock5 = faker1.stock();
        java.lang.String str6 = stock5.nsdqSymbol();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(cat4);
        org.junit.Assert.assertNotNull(stock5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MNGA" + "'", str6, "MNGA");
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str11 = internet9.macAddress("25061420");
        java.lang.String str12 = internet9.slug();
        java.lang.String str14 = internet9.emailAddress("Cherrygrove City");
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "25061420:d5:29:0d:94:07" + "'", str11, "25061420:d5:29:0d:94:07");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "et_vero" + "'", str12, "et_vero");
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        com.github.javafaker.Beer beer8 = faker1.beer();
        java.lang.String str9 = beer8.style();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
        org.junit.Assert.assertNotNull(beer8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Light Lager" + "'", str9, "Light Lager");
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        int int5 = sip4.rtpPort();
        int int6 = sip4.rtpPort();
        int int7 = sip4.serverErrorResponseCode();
        int int8 = sip4.messagingPort();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 44112 + "'", int5 == 44112);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 47564 + "'", int6 == 47564);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 505 + "'", int7 == 505);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1246 + "'", int8 == 1246);
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Music music2 = faker1.music();
        java.lang.String str3 = music2.chord();
        java.lang.String str4 = music2.key();
        org.junit.Assert.assertNotNull(music2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Fbm" + "'", str3, "Fbm");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "B" + "'", str4, "B");
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        java.lang.String str4 = slackEmoji3.activity();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":walking:" + "'", str4, ":walking:");
    }

    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Color color3 = faker1.color();
        java.lang.String str4 = color3.hex();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(color3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#80FDAF" + "'", str4, "#80FDAF");
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        java.lang.String str4 = faker1.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda5 = faker1.zelda();
        java.lang.String str6 = zelda5.character();
        java.lang.String str7 = zelda5.game();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":crossed_flags:" + "'", str4, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Talon" + "'", str6, "Talon");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "The Legend of Zelda" + "'", str7, "The Legend of Zelda");
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        com.github.javafaker.Gender gender5 = faker1.gender();
        com.github.javafaker.ChuckNorris chuckNorris6 = faker1.chuckNorris();
        com.github.javafaker.Witcher witcher7 = faker1.witcher();
        java.lang.String str8 = witcher7.quote();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
        org.junit.Assert.assertNotNull(gender5);
        org.junit.Assert.assertNotNull(chuckNorris6);
        org.junit.Assert.assertNotNull(witcher7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u2026 Is it 1358 yet? No? Then fuck off!" + "'", str8, "\u2026 Is it 1358 yet? No? Then fuck off!");
    }

    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test141");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        java.lang.String str5 = faker1.numerify("female");
        com.github.javafaker.Company company6 = faker1.company();
        com.github.javafaker.PhoneNumber phoneNumber7 = faker1.phoneNumber();
        java.lang.String str8 = phoneNumber7.cellPhone();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "female" + "'", str5, "female");
        org.junit.Assert.assertNotNull(company6);
        org.junit.Assert.assertNotNull(phoneNumber7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "929-152-9771" + "'", str8, "929-152-9771");
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str14 = internet9.image((java.lang.Integer) 43996, (java.lang.Integer) (-1), (java.lang.Boolean) false, "RSS");
        java.lang.String str15 = internet9.domainSuffix();
        java.lang.String str18 = internet9.password((int) (byte) -1, 100);
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://lorempixel.com/43996/-1/technics/RSS" + "'", str14, "http://lorempixel.com/43996/-1/technics/RSS");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org" + "'", str15, "org");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2cpmf1jr5vm19a7q8o144wxkbes1gcf20pceguc7hv554jp0p4anhupxnstw0yx1plbzu04a6bdgafj4sev7wc" + "'", str18, "2cpmf1jr5vm19a7q8o144wxkbes1gcf20pceguc7hv554jp0p4anhupxnstw0yx1plbzu04a6bdgafj4sev7wc");
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        int int5 = sip4.rtpPort();
        java.lang.String str6 = sip4.nameAddress();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 41056 + "'", int5 == 41056);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.File file8 = faker1.file();
        java.lang.String str9 = file8.mimeType();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "application/font-woff" + "'", str9, "application/font-woff");
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        com.github.javafaker.Dune dune3 = faker1.dune();
        java.lang.String str4 = dune3.quote();
        java.lang.String str5 = dune3.planet();
        org.junit.Assert.assertNotNull(dragonBall2);
        org.junit.Assert.assertNotNull(dune3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u2014 no matter the mood! Mood's a thing for cattle or making love or playing the baliset. It's not for fighting." + "'", str4, "\u2014 no matter the mood! Mood's a thing for cattle or making love or playing the baliset. It's not for fighting.");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Richesse" + "'", str5, "Richesse");
    }

    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        java.util.List<java.lang.String> strList7 = lorem5.paragraphs(43996);
        java.lang.String str8 = lorem5.paragraph();
        java.lang.String str9 = lorem5.word();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Quisquam impedit est expedita consequuntur error voluptatem suscipit. Rerum maiores quae dolorem quibusdam. Natus in dignissimos ab. Eligendi enim repellendus sed praesentium nisi. Itaque quia voluptates." + "'", str8, "Quisquam impedit est expedita consequuntur error voluptatem suscipit. Rerum maiores quae dolorem quibusdam. Natus in dignissimos ab. Eligendi enim repellendus sed praesentium nisi. Itaque quia voluptates.");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dolore" + "'", str9, "dolore");
    }

    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test148");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        char char6 = lorem5.character();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
// flaky:         org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'c' + "'", char6 == 'c');
    }

    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Music music2 = faker1.music();
        java.lang.String str3 = music2.key();
        org.junit.Assert.assertNotNull(music2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "F#" + "'", str3, "F#");
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.App app7 = faker1.app();
        com.github.javafaker.Matz matz8 = faker1.matz();
        com.github.javafaker.HarryPotter harryPotter9 = faker1.harryPotter();
        java.lang.String str10 = harryPotter9.house();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(app7);
        org.junit.Assert.assertNotNull(matz8);
        org.junit.Assert.assertNotNull(harryPotter9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ravenclaw" + "'", str10, "Ravenclaw");
    }

    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        java.lang.String str8 = educator7.secondarySchool();
        java.lang.String str9 = educator7.campus();
        java.lang.String str10 = educator7.campus();
        java.lang.String str11 = educator7.campus();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Brookville High" + "'", str8, "Brookville High");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Falconholt Campus" + "'", str9, "Falconholt Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lakeacre Campus" + "'", str10, "Lakeacre Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Icelyn Campus" + "'", str11, "Icelyn Campus");
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.Dog dog7 = faker1.dog();
        com.github.javafaker.Company company8 = faker1.company();
        java.lang.String str9 = company8.suffix();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(dog7);
        org.junit.Assert.assertNotNull(company8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LLC" + "'", str9, "LLC");
    }

    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Job job4 = faker1.job();
        java.lang.String str5 = job4.keySkills();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(job4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Work under pressure" + "'", str5, "Work under pressure");
    }

    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        com.github.javafaker.Friends friends9 = faker1.friends();
        com.github.javafaker.HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy10 = faker1.hitchhikersGuideToTheGalaxy();
        java.lang.String str11 = hitchhikersGuideToTheGalaxy10.specie();
        java.lang.String str12 = hitchhikersGuideToTheGalaxy10.specie();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
        org.junit.Assert.assertNotNull(friends9);
        org.junit.Assert.assertNotNull(hitchhikersGuideToTheGalaxy10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Hooloovoo" + "'", str11, "Hooloovoo");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mattress" + "'", str12, "Mattress");
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Color color3 = faker1.color();
        com.github.javafaker.Lebowski lebowski4 = faker1.lebowski();
        java.lang.String str5 = lebowski4.character();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(lebowski4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Walter Sobchak" + "'", str5, "Walter Sobchak");
    }

    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test159");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Options options4 = faker1.options();
        java.util.Random random5 = null;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random5);
        com.github.javafaker.Avatar avatar7 = faker6.avatar();
        com.github.javafaker.Barcode barcode8 = new com.github.javafaker.Barcode(faker6);
        com.github.javafaker.Hobbit hobbit9 = faker6.hobbit();
        java.util.Random random10 = null;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(random10);
        com.github.javafaker.Avatar avatar12 = faker11.avatar();
        com.github.javafaker.Barcode barcode13 = new com.github.javafaker.Barcode(faker11);
        com.github.javafaker.Hobbit hobbit14 = faker11.hobbit();
        java.util.Random random15 = null;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(random15);
        com.github.javafaker.Avatar avatar17 = faker16.avatar();
        com.github.javafaker.Barcode barcode18 = new com.github.javafaker.Barcode(faker16);
        com.github.javafaker.Hobbit hobbit19 = faker16.hobbit();
        java.util.Random random20 = null;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker(random20);
        com.github.javafaker.Avatar avatar22 = faker21.avatar();
        com.github.javafaker.Barcode barcode23 = new com.github.javafaker.Barcode(faker21);
        com.github.javafaker.Hobbit hobbit24 = faker21.hobbit();
        java.util.Random random25 = null;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker(random25);
        com.github.javafaker.Avatar avatar27 = faker26.avatar();
        com.github.javafaker.Barcode barcode28 = new com.github.javafaker.Barcode(faker26);
        com.github.javafaker.Hobbit hobbit29 = faker26.hobbit();
        java.util.Random random30 = null;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker(random30);
        com.github.javafaker.Avatar avatar32 = faker31.avatar();
        com.github.javafaker.Barcode barcode33 = new com.github.javafaker.Barcode(faker31);
        com.github.javafaker.Hobbit hobbit34 = faker31.hobbit();
        com.github.javafaker.Hobbit[] hobbitArray35 = new com.github.javafaker.Hobbit[] { hobbit9, hobbit14, hobbit19, hobbit24, hobbit29, hobbit34 };
        com.github.javafaker.Hobbit hobbit36 = options4.nextElement(hobbitArray35);
        java.util.Random random37 = null;
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(random37);
        com.github.javafaker.Avatar avatar39 = faker38.avatar();
        java.lang.String str41 = faker38.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda42 = faker38.zelda();
        java.lang.String str43 = zelda42.character();
        java.util.Random random44 = null;
        com.github.javafaker.Faker faker45 = new com.github.javafaker.Faker(random44);
        com.github.javafaker.Avatar avatar46 = faker45.avatar();
        java.lang.String str48 = faker45.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda49 = faker45.zelda();
        java.util.Random random50 = null;
        com.github.javafaker.Faker faker51 = new com.github.javafaker.Faker(random50);
        com.github.javafaker.Avatar avatar52 = faker51.avatar();
        java.lang.String str54 = faker51.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda55 = faker51.zelda();
        java.util.Random random56 = null;
        com.github.javafaker.Faker faker57 = new com.github.javafaker.Faker(random56);
        com.github.javafaker.Avatar avatar58 = faker57.avatar();
        java.lang.String str60 = faker57.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda61 = faker57.zelda();
        java.lang.String str62 = zelda61.character();
        com.github.javafaker.Zelda[] zeldaArray63 = new com.github.javafaker.Zelda[] { zelda42, zelda49, zelda55, zelda61 };
        com.github.javafaker.Zelda zelda64 = options4.nextElement(zeldaArray63);
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(avatar7);
        org.junit.Assert.assertNotNull(hobbit9);
        org.junit.Assert.assertNotNull(avatar12);
        org.junit.Assert.assertNotNull(hobbit14);
        org.junit.Assert.assertNotNull(avatar17);
        org.junit.Assert.assertNotNull(hobbit19);
        org.junit.Assert.assertNotNull(avatar22);
        org.junit.Assert.assertNotNull(hobbit24);
        org.junit.Assert.assertNotNull(avatar27);
        org.junit.Assert.assertNotNull(hobbit29);
        org.junit.Assert.assertNotNull(avatar32);
        org.junit.Assert.assertNotNull(hobbit34);
        org.junit.Assert.assertNotNull(hobbitArray35);
        org.junit.Assert.assertNotNull(hobbit36);
        org.junit.Assert.assertNotNull(avatar39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + ":crossed_flags:" + "'", str41, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Rosa Sisters" + "'", str43, "Rosa Sisters");
        org.junit.Assert.assertNotNull(avatar46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + ":crossed_flags:" + "'", str48, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda49);
        org.junit.Assert.assertNotNull(avatar52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + ":crossed_flags:" + "'", str54, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda55);
        org.junit.Assert.assertNotNull(avatar58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + ":crossed_flags:" + "'", str60, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Patch" + "'", str62, "Patch");
        org.junit.Assert.assertNotNull(zeldaArray63);
        org.junit.Assert.assertNotNull(zelda64);
    }

    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        com.github.javafaker.Beer beer8 = faker1.beer();
        java.lang.String str9 = beer8.name();
        java.lang.String str10 = beer8.hop();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
        org.junit.Assert.assertNotNull(beer8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Duvel" + "'", str9, "Duvel");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Simcoe" + "'", str10, "Simcoe");
    }

    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        com.github.javafaker.Dune dune3 = faker1.dune();
        java.lang.String str4 = dune3.quote();
        java.lang.String str5 = dune3.title();
        org.junit.Assert.assertNotNull(dragonBall2);
        org.junit.Assert.assertNotNull(dune3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u2014one hundred men." + "'", str4, "\u2014one hundred men.");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Duke" + "'", str5, "Duke");
    }

    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        com.github.javafaker.Gender gender5 = faker1.gender();
        com.github.javafaker.ChuckNorris chuckNorris6 = faker1.chuckNorris();
        com.github.javafaker.Witcher witcher7 = faker1.witcher();
        java.lang.String str8 = witcher7.monster();
        java.lang.String str9 = witcher7.school();
        java.lang.String str10 = witcher7.school();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
        org.junit.Assert.assertNotNull(gender5);
        org.junit.Assert.assertNotNull(chuckNorris6);
        org.junit.Assert.assertNotNull(witcher7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Foglet" + "'", str8, "Foglet");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Griffin" + "'", str9, "Griffin");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Wolf" + "'", str10, "Wolf");
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Esports esports5 = faker1.esports();
        java.lang.String str6 = esports5.player();
        java.lang.String str7 = esports5.event();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(esports5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cArn" + "'", str6, "cArn");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MLG Meadowlands" + "'", str7, "MLG Meadowlands");
    }

    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        java.lang.String str4 = slackEmoji3.emoji();
        java.lang.String str5 = slackEmoji3.emoji();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":oncoming_automobile:" + "'", str4, ":oncoming_automobile:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":cn:" + "'", str5, ":cn:");
    }

    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.Dog dog7 = faker1.dog();
        com.github.javafaker.Country country8 = faker1.country();
        java.lang.String str9 = country8.capital();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(dog7);
        org.junit.Assert.assertNotNull(country8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Bamako" + "'", str9, "Bamako");
    }

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        com.github.javafaker.idnumbers.SvSEIdNumber svSEIdNumber0 = new com.github.javafaker.idnumbers.SvSEIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Photography photography3 = faker2.photography();
        com.github.javafaker.Food food4 = faker2.food();
        com.github.javafaker.Job job5 = faker2.job();
        java.lang.String str6 = svSEIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Business business7 = faker2.business();
        java.lang.String str8 = business7.creditCardExpiry();
        org.junit.Assert.assertNotNull(photography3);
        org.junit.Assert.assertNotNull(food4);
        org.junit.Assert.assertNotNull(job5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "380722+0292" + "'", str6, "380722+0292");
        org.junit.Assert.assertNotNull(business7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2015-11-11" + "'", str8, "2015-11-11");
    }

    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Music music2 = faker1.music();
        java.lang.String str3 = music2.instrument();
        org.junit.Assert.assertNotNull(music2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Trumpet" + "'", str3, "Trumpet");
    }

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        java.lang.String str7 = superhero6.prefix();
        java.lang.String str8 = superhero6.descriptor();
        java.lang.String str9 = superhero6.suffix();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(superhero6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "The" + "'", str7, "The");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jolt" + "'", str8, "Jolt");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Brain" + "'", str9, "Brain");
    }

    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        java.lang.String str4 = food3.dish();
        java.lang.String str5 = food3.measurement();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sushi" + "'", str4, "Sushi");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 gallon" + "'", str5, "1 gallon");
    }

    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        int int5 = sip4.provisionalResponseCode();
        byte[] byteArray6 = sip4.bodyBytes();
        java.lang.String str7 = sip4.contentType();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[118, 61, 48, 10, 111, 61, 74, 101, 114, 101, 32, 51, 56, 53, 55, 56, 99, 56, 55, 45, 101, 48, 50, 56, 45, 52, 49, 51, 50, 45, 56, 56, 52, 57, 45, 97, 102, 49, 51, 49, 53, 98, 57, 101, 48, 55, 100, 32, 73, 78, 32, 73, 80, 52, 32, 109, 117, 114, 112, 104, 121, 46, 110, 97, 109, 101, 10, 115, 61, 45, 10, 99, 61, 73, 78, 32, 73, 80, 52, 32, 56, 51, 46, 49, 55, 49, 46, 57, 51, 46, 49, 53, 54, 10, 116, 61, 48, 32, 48, 10, 109, 61, 97, 117, 100, 105, 111, 32, 52, 55, 51, 51, 48, 32, 82, 84, 80, 47, 65, 86, 80, 32, 48, 10, 97, 61, 114, 116, 112, 109, 97, 112, 58, 48, 32, 80, 67, 77, 85, 47, 56, 48, 48, 48]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/related" + "'", str7, "multipart/related");
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        java.lang.String str5 = sip4.provisionalResponsePhrase();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Call Is Being Forwarded" + "'", str5, "Call Is Being Forwarded");
    }

    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test174");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        java.util.List<java.lang.String> strList7 = lorem5.paragraphs(43996);
        java.lang.String str8 = lorem5.paragraph();
        java.lang.String str9 = lorem5.sentence();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "In quo qui omnis velit tenetur pariatur. Tenetur et et perspiciatis non voluptas ea fuga. Dignissimos assumenda iure et voluptatibus et autem et. Natus eum aut est dolor est iure. Accusamus accusantium est ipsam quos." + "'", str8, "In quo qui omnis velit tenetur pariatur. Tenetur et et perspiciatis non voluptas ea fuga. Dignissimos assumenda iure et voluptatibus et autem et. Natus eum aut est dolor est iure. Accusamus accusantium est ipsam quos.");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Debitis fugiat sint perspiciatis voluptas." + "'", str9, "Debitis fugiat sint perspiciatis voluptas.");
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        com.github.javafaker.Dune dune3 = faker1.dune();
        com.github.javafaker.Dune.Saying saying4 = com.github.javafaker.Dune.Saying.MENTAT;
        java.lang.String str5 = dune3.saying(saying4);
        java.lang.String str6 = dune3.quote();
        com.github.javafaker.Dune.Quote quote7 = com.github.javafaker.Dune.Quote.ALIA;
        java.lang.String str8 = dune3.quote(quote7);
        java.lang.String str9 = dune3.title();
        org.junit.Assert.assertNotNull(dragonBall2);
        org.junit.Assert.assertNotNull(dune3);
        org.junit.Assert.assertTrue("'" + saying4 + "' != '" + com.github.javafaker.Dune.Saying.MENTAT + "'", saying4.equals(com.github.javafaker.Dune.Saying.MENTAT));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "It is by will alone I set my mind in motion. It is by the juice of Sapho that thoughts acquire speed, the lips acquire stains. The stains become a warning." + "'", str5, "It is by will alone I set my mind in motion. It is by the juice of Sapho that thoughts acquire speed, the lips acquire stains. The stains become a warning.");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u2026\u2026 did not mean to be familiar." + "'", str6, "\u2026\u2026 did not mean to be familiar.");
        org.junit.Assert.assertTrue("'" + quote7 + "' != '" + com.github.javafaker.Dune.Quote.ALIA + "'", quote7.equals(com.github.javafaker.Dune.Quote.ALIA));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "The Guild... they're fighting me in the mental vaults. They're behind everything. They fear the one who will come, who will know more, who will see more. The Guild is behind everything. It's not finished yet. I'm not formed." + "'", str8, "The Guild... they're fighting me in the mental vaults. They're behind everything. They fear the one who will come, who will know more, who will see more. The Guild is behind everything. It's not finished yet. I'm not formed.");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Earl" + "'", str9, "Earl");
    }

    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        java.lang.String str5 = hacker4.noun();
        java.lang.String str6 = hacker4.ingverb();
        java.lang.String str7 = hacker4.adjective();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bus" + "'", str5, "bus");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bypassing" + "'", str6, "bypassing");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bluetooth" + "'", str7, "bluetooth");
    }

    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        com.github.javafaker.Relationships relationships7 = faker1.relationships();
        java.lang.String str8 = relationships7.direct();
        java.lang.String str9 = relationships7.any();
        java.lang.String str10 = relationships7.direct();
        java.lang.String str11 = relationships7.extended();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
        org.junit.Assert.assertNotNull(relationships7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Mother" + "'", str8, "Mother");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Brother-in-law" + "'", str9, "Brother-in-law");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Brother" + "'", str10, "Brother");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Grandson" + "'", str11, "Grandson");
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        java.lang.String str4 = idNumber3.valid();
        java.lang.String str5 = idNumber3.invalid();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "114-11-4788" + "'", str4, "114-11-4788");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "000-51-2720" + "'", str5, "000-51-2720");
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str10 = internet9.avatar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = internet9.password((int) (short) 1, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg" + "'", str10, "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg");
    }

    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Photography photography6 = faker1.photography();
        java.lang.String str7 = photography6.shutter();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(photography6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "15" + "'", str7, "15");
    }

    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        int int5 = sip4.rtpPort();
        int int6 = sip4.serverErrorResponseCode();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49004 + "'", int5 == 49004);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 580 + "'", int6 == 580);
    }

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        java.lang.String str8 = demographic7.maritalStatus();
        java.lang.String str9 = demographic7.maritalStatus();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(superhero6);
        org.junit.Assert.assertNotNull(demographic7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Separated" + "'", str8, "Separated");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Never married" + "'", str9, "Never married");
    }

    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Job job4 = faker1.job();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Hacker hacker6 = faker1.hacker();
        java.lang.String str7 = hacker6.adjective();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(job4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(hacker6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1080p" + "'", str7, "1080p");
    }

    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        java.lang.String str8 = faker1.expression("BoJack Horseman");
        com.github.javafaker.Barcode barcode9 = faker1.barcode();
        com.github.javafaker.Beer beer10 = faker1.beer();
        java.lang.String str11 = beer10.hop();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "BoJack Horseman" + "'", str8, "BoJack Horseman");
        org.junit.Assert.assertNotNull(barcode9);
        org.junit.Assert.assertNotNull(beer10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vanguard" + "'", str11, "Vanguard");
    }

    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        com.github.javafaker.Relationships relationships7 = faker1.relationships();
        java.lang.String str8 = relationships7.direct();
        java.lang.String str9 = relationships7.spouse();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
        org.junit.Assert.assertNotNull(relationships7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Father" + "'", str8, "Father");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Wife" + "'", str9, "Wife");
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.ean8();
        java.lang.String str8 = code5.ean13();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9780879822224" + "'", str6, "9780879822224");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "02625003" + "'", str7, "02625003");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7706802142643" + "'", str8, "7706802142643");
    }

    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        com.github.javafaker.Dog dog4 = faker1.dog();
        java.lang.String str5 = dog4.age();
        java.lang.String str6 = dog4.breed();
        java.lang.String str7 = dog4.size();
        java.lang.String str8 = dog4.gender();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(dog4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "young" + "'", str5, "young");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Borzoi" + "'", str6, "Borzoi");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "extra large" + "'", str7, "extra large");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "male" + "'", str8, "male");
    }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str14 = internet9.image((java.lang.Integer) 43996, (java.lang.Integer) (-1), (java.lang.Boolean) false, "RSS");
        com.github.javafaker.Internet.UserAgent userAgent15 = com.github.javafaker.Internet.UserAgent.OPERA;
        java.lang.String str16 = internet9.userAgent(userAgent15);
        java.lang.String str17 = userAgent15.toString();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://lorempixel.com/43996/-1/abstract/RSS" + "'", str14, "http://lorempixel.com/43996/-1/abstract/RSS");
        org.junit.Assert.assertTrue("'" + userAgent15 + "' != '" + com.github.javafaker.Internet.UserAgent.OPERA + "'", userAgent15.equals(com.github.javafaker.Internet.UserAgent.OPERA));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16" + "'", str16, "Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "opera" + "'", str17, "opera");
    }

    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Avatar avatar3 = faker2.avatar();
        com.github.javafaker.Barcode barcode4 = new com.github.javafaker.Barcode(faker2);
        java.lang.String str6 = faker2.numerify("female");
        com.github.javafaker.Mountain mountain7 = faker2.mountain();
        java.lang.String str8 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Currency currency9 = new com.github.javafaker.Currency(faker2);
        org.junit.Assert.assertNotNull(avatar3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "female" + "'", str6, "female");
        org.junit.Assert.assertNotNull(mountain7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "780-42-7950" + "'", str8, "780-42-7950");
    }

    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str11 = internet9.macAddress("25061420");
        java.lang.String str12 = internet9.domainSuffix();
        java.lang.String str13 = internet9.image();
        java.lang.String str14 = internet9.url();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "25061420:60:76:48:e3:38" + "'", str11, "25061420:60:76:48:e3:38");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org" + "'", str12, "org");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://lorempixel.com/1600/1200/people/" + "'", str13, "http://lorempixel.com/1600/1200/people/");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "www.carolina-murphy.info" + "'", str14, "www.carolina-murphy.info");
    }

    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Medical medical4 = faker1.medical();
        java.lang.String str5 = medical4.medicineName();
        java.lang.String str6 = medical4.hospitalName();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(medical4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ACETAZOLAMIDE SODIUM" + "'", str5, "ACETAZOLAMIDE SODIUM");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DOUGLAS COUNTY MEMORIAL HOSPITAL" + "'", str6, "DOUGLAS COUNTY MEMORIAL HOSPITAL");
    }

    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Stock stock6 = faker1.stock();
        com.github.javafaker.Lorem lorem7 = faker1.lorem();
        java.lang.String str9 = lorem7.sentence(0);
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(stock6);
        org.junit.Assert.assertNotNull(lorem7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Voluptatem." + "'", str9, "Voluptatem.");
    }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.HarryPotter harryPotter7 = faker1.harryPotter();
        java.lang.String str8 = harryPotter7.quote();
        java.lang.String str9 = harryPotter7.location();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(harryPotter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I solemnly swear that I am up to no good." + "'", str8, "I solemnly swear that I am up to no good.");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Eeylops Owl Emporium" + "'", str9, "Eeylops Owl Emporium");
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        java.lang.String str6 = basketball5.coaches();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Mike Budenholzer" + "'", str6, "Mike Budenholzer");
    }

    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        com.github.javafaker.Gender gender5 = faker1.gender();
        com.github.javafaker.ChuckNorris chuckNorris6 = faker1.chuckNorris();
        com.github.javafaker.Witcher witcher7 = faker1.witcher();
        java.lang.String str8 = witcher7.monster();
        java.lang.String str9 = witcher7.witcher();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
        org.junit.Assert.assertNotNull(gender5);
        org.junit.Assert.assertNotNull(chuckNorris6);
        org.junit.Assert.assertNotNull(witcher7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Rock Troll" + "'", str8, "Rock Troll");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Gerd" + "'", str9, "Gerd");
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        java.lang.String str8 = demographic7.demonym();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwanese" + "'", str8, "Taiwanese");
    }

    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        com.github.javafaker.Gender gender5 = faker1.gender();
        java.lang.String str6 = gender5.binaryTypes();
        java.lang.String str7 = gender5.types();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
        org.junit.Assert.assertNotNull(gender5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Male" + "'", str6, "Male");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Genderqueer" + "'", str7, "Genderqueer");
    }

    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test212");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        java.lang.String str3 = photography2.brand();
        java.lang.String str4 = photography2.brand();
        org.junit.Assert.assertNotNull(photography2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Sony" + "'", str3, "Sony");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Exacta" + "'", str4, "Exacta");
    }

    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        java.lang.String str4 = idNumber3.invalidSvSeSsn();
        java.lang.String str5 = idNumber3.valid();
        java.lang.String str6 = idNumber3.validSvSeSsn();
        java.lang.String str7 = idNumber3.valid();
        java.lang.String str8 = idNumber3.invalidSvSeSsn();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "415277-6717" + "'", str4, "415277-6717");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "274-11-6921" + "'", str5, "274-11-6921");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "911201-3967" + "'", str6, "911201-3967");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "624-57-5204" + "'", str7, "624-57-5204");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "846834+3145" + "'", str8, "846834+3145");
    }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        java.lang.String str8 = educator7.secondarySchool();
        java.lang.String str9 = educator7.campus();
        java.lang.String str10 = educator7.campus();
        java.lang.String str11 = educator7.secondarySchool();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Icelyn Secondary College" + "'", str8, "Icelyn Secondary College");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ostbarrow Campus" + "'", str9, "Ostbarrow Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Clearcourt Campus" + "'", str10, "Clearcourt Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vertapple Secondary College" + "'", str11, "Vertapple Secondary College");
    }

    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.HarryPotter harryPotter7 = faker1.harryPotter();
        java.lang.String str8 = harryPotter7.book();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(harryPotter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Harry Potter and the Sorcerer's Stone" + "'", str8, "Harry Potter and the Sorcerer's Stone");
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        com.github.javafaker.Friends friends9 = faker1.friends();
        java.lang.String str10 = friends9.quote();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
        org.junit.Assert.assertNotNull(friends9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u2019t have S-E-X when your taking care of the B-A-B-I-E." + "'", str10, "\u2019t have S-E-X when your taking care of the B-A-B-I-E.");
    }

    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Team team5 = faker1.team();
        com.github.javafaker.Coin coin6 = faker1.coin();
        com.github.javafaker.Name name7 = faker1.name();
        java.lang.String str8 = name7.username();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(team5);
        org.junit.Assert.assertNotNull(coin6);
        org.junit.Assert.assertNotNull(name7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "desire.parisian" + "'", str8, "desire.parisian");
    }

    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        com.github.javafaker.Barcode barcode6 = faker1.barcode();
        com.github.javafaker.App app7 = faker1.app();
        com.github.javafaker.Matz matz8 = faker1.matz();
        com.github.javafaker.HarryPotter harryPotter9 = faker1.harryPotter();
        java.lang.String str10 = harryPotter9.spell();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertNotNull(barcode6);
        org.junit.Assert.assertNotNull(app7);
        org.junit.Assert.assertNotNull(matz8);
        org.junit.Assert.assertNotNull(harryPotter9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Accio" + "'", str10, "Accio");
    }

    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str11 = internet9.macAddress("25061420");
        java.lang.String str12 = internet9.privateIpV4Address();
        java.lang.String str13 = internet9.password();
        java.lang.String str14 = internet9.uuid();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "25061420:65:43:b0:e2:40" + "'", str11, "25061420:65:43:b0:e2:40");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "192.168.39.214" + "'", str12, "192.168.39.214");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vngm58x50g6f" + "'", str13, "vngm58x50g6f");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9f9ebc07-0b0c-4e4c-b8e9-16f0abcdff87" + "'", str14, "9f9ebc07-0b0c-4e4c-b8e9-16f0abcdff87");
    }

    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        java.util.List<java.lang.String> strList7 = lorem5.paragraphs(43996);
        java.lang.String str8 = lorem5.paragraph();
        java.util.List<java.lang.String> strList10 = lorem5.words((int) (short) 100);
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Aut velit dicta illo repellendus illo est sed. Non aliquam qui qui voluptas cupiditate qui accusamus. Necessitatibus aspernatur perferendis nulla velit." + "'", str8, "Aut velit dicta illo repellendus illo est sed. Non aliquam qui qui voluptas cupiditate qui accusamus. Necessitatibus aspernatur perferendis nulla velit.");
        org.junit.Assert.assertNotNull(strList10);
    }

    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.EnglandFootBall englandFootBall6 = faker1.englandfootball();
        com.github.javafaker.Educator educator7 = faker1.educator();
        com.github.javafaker.Coin coin8 = faker1.coin();
        java.lang.String str9 = coin8.flip();
        java.lang.String str10 = coin8.flip();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(englandFootBall6);
        org.junit.Assert.assertNotNull(educator7);
        org.junit.Assert.assertNotNull(coin8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Heads" + "'", str9, "Heads");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Heads" + "'", str10, "Heads");
    }

    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.SlackEmoji slackEmoji2 = faker1.slackEmoji();
        com.github.javafaker.ElderScrolls elderScrolls3 = faker1.elderScrolls();
        java.lang.String str4 = elderScrolls3.lastName();
        org.junit.Assert.assertNotNull(slackEmoji2);
        org.junit.Assert.assertNotNull(elderScrolls3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "The Haggard" + "'", str4, "The Haggard");
    }

    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.IdNumber idNumber3 = faker1.idNumber();
        com.github.javafaker.App app4 = faker1.app();
        com.github.javafaker.Team team5 = faker1.team();
        com.github.javafaker.Coin coin6 = faker1.coin();
        com.github.javafaker.Name name7 = faker1.name();
        java.lang.String str8 = name7.fullName();
        java.lang.String str9 = name7.fullName();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(idNumber3);
        org.junit.Assert.assertNotNull(app4);
        org.junit.Assert.assertNotNull(team5);
        org.junit.Assert.assertNotNull(coin6);
        org.junit.Assert.assertNotNull(name7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Les Lynch" + "'", str8, "Les Lynch");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Miss Percy Kassulke" + "'", str9, "Miss Percy Kassulke");
    }

    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.SlackEmoji slackEmoji2 = faker1.slackEmoji();
        com.github.javafaker.ElderScrolls elderScrolls3 = faker1.elderScrolls();
        java.lang.String str4 = elderScrolls3.creature();
        org.junit.Assert.assertNotNull(slackEmoji2);
        org.junit.Assert.assertNotNull(elderScrolls3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Pit Wolf" + "'", str4, "Pit Wolf");
    }

    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test232");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.SlackEmoji slackEmoji2 = faker1.slackEmoji();
        java.lang.String str3 = slackEmoji2.celebration();
        java.lang.String str4 = slackEmoji2.emoji();
        java.lang.String str5 = slackEmoji2.custom();
        org.junit.Assert.assertNotNull(slackEmoji2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + ":sparkling_heart:" + "'", str3, ":sparkling_heart:");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":monorail:" + "'", str4, ":monorail:");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + ":cubimal_chick:" + "'", str5, ":cubimal_chick:");
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Options options4 = faker1.options();
        java.util.Random random5 = null;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random5);
        com.github.javafaker.Avatar avatar7 = faker6.avatar();
        com.github.javafaker.SlackEmoji slackEmoji8 = faker6.slackEmoji();
        com.github.javafaker.Medical medical9 = faker6.medical();
        com.github.javafaker.Robin robin10 = faker6.robin();
        com.github.javafaker.BojackHorseman bojackHorseman11 = faker6.bojackHorseman();
        com.github.javafaker.Demographic demographic12 = faker6.demographic();
        java.util.Random random13 = null;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random13);
        com.github.javafaker.Avatar avatar15 = faker14.avatar();
        com.github.javafaker.SlackEmoji slackEmoji16 = faker14.slackEmoji();
        com.github.javafaker.Medical medical17 = faker14.medical();
        com.github.javafaker.Robin robin18 = faker14.robin();
        com.github.javafaker.BojackHorseman bojackHorseman19 = faker14.bojackHorseman();
        com.github.javafaker.Demographic demographic20 = faker14.demographic();
        java.util.Random random21 = null;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(random21);
        com.github.javafaker.Avatar avatar23 = faker22.avatar();
        com.github.javafaker.SlackEmoji slackEmoji24 = faker22.slackEmoji();
        com.github.javafaker.Medical medical25 = faker22.medical();
        com.github.javafaker.Robin robin26 = faker22.robin();
        com.github.javafaker.BojackHorseman bojackHorseman27 = faker22.bojackHorseman();
        com.github.javafaker.Demographic demographic28 = faker22.demographic();
        java.util.Random random29 = null;
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker(random29);
        com.github.javafaker.Avatar avatar31 = faker30.avatar();
        com.github.javafaker.SlackEmoji slackEmoji32 = faker30.slackEmoji();
        com.github.javafaker.Medical medical33 = faker30.medical();
        com.github.javafaker.Robin robin34 = faker30.robin();
        com.github.javafaker.BojackHorseman bojackHorseman35 = faker30.bojackHorseman();
        com.github.javafaker.Demographic demographic36 = faker30.demographic();
        java.util.Random random37 = null;
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(random37);
        com.github.javafaker.Avatar avatar39 = faker38.avatar();
        com.github.javafaker.SlackEmoji slackEmoji40 = faker38.slackEmoji();
        com.github.javafaker.Medical medical41 = faker38.medical();
        com.github.javafaker.Robin robin42 = faker38.robin();
        com.github.javafaker.BojackHorseman bojackHorseman43 = faker38.bojackHorseman();
        com.github.javafaker.Demographic demographic44 = faker38.demographic();
        com.github.javafaker.Demographic[] demographicArray45 = new com.github.javafaker.Demographic[] { demographic12, demographic20, demographic28, demographic36, demographic44 };
        com.github.javafaker.Demographic demographic46 = options4.option(demographicArray45);
        java.lang.String str47 = demographic46.maritalStatus();
        java.lang.String str48 = demographic46.maritalStatus();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(avatar7);
        org.junit.Assert.assertNotNull(slackEmoji8);
        org.junit.Assert.assertNotNull(medical9);
        org.junit.Assert.assertNotNull(robin10);
        org.junit.Assert.assertNotNull(bojackHorseman11);
        org.junit.Assert.assertNotNull(demographic12);
        org.junit.Assert.assertNotNull(avatar15);
        org.junit.Assert.assertNotNull(slackEmoji16);
        org.junit.Assert.assertNotNull(medical17);
        org.junit.Assert.assertNotNull(robin18);
        org.junit.Assert.assertNotNull(bojackHorseman19);
        org.junit.Assert.assertNotNull(demographic20);
        org.junit.Assert.assertNotNull(avatar23);
        org.junit.Assert.assertNotNull(slackEmoji24);
        org.junit.Assert.assertNotNull(medical25);
        org.junit.Assert.assertNotNull(robin26);
        org.junit.Assert.assertNotNull(bojackHorseman27);
        org.junit.Assert.assertNotNull(demographic28);
        org.junit.Assert.assertNotNull(avatar31);
        org.junit.Assert.assertNotNull(slackEmoji32);
        org.junit.Assert.assertNotNull(medical33);
        org.junit.Assert.assertNotNull(robin34);
        org.junit.Assert.assertNotNull(bojackHorseman35);
        org.junit.Assert.assertNotNull(demographic36);
        org.junit.Assert.assertNotNull(avatar39);
        org.junit.Assert.assertNotNull(slackEmoji40);
        org.junit.Assert.assertNotNull(medical41);
        org.junit.Assert.assertNotNull(robin42);
        org.junit.Assert.assertNotNull(bojackHorseman43);
        org.junit.Assert.assertNotNull(demographic44);
        org.junit.Assert.assertNotNull(demographicArray45);
        org.junit.Assert.assertNotNull(demographic46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Widowed" + "'", str47, "Widowed");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Divorced" + "'", str48, "Divorced");
    }

    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test234");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        java.lang.String str9 = ancient8.god();
        java.lang.String str10 = ancient8.titan();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dionysus" + "'", str9, "Dionysus");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Iapetus" + "'", str10, "Iapetus");
    }

    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        long long3 = randomService1.nextLong((long) 'a');
        double double4 = randomService1.nextDouble();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 64L + "'", long3 == 64L);
// flaky:         org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.20114066975137201d + "'", double4 == 0.20114066975137201d);
    }

    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Bool bool3 = faker1.bool();
        boolean boolean4 = bool3.bool();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(bool3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        java.lang.String str4 = food3.measurement();
        java.lang.String str5 = food3.fruit();
        java.lang.String str6 = food3.dish();
        java.lang.String str7 = food3.ingredient();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/3 gallon" + "'", str4, "1/3 gallon");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dragonfruit" + "'", str5, "Dragonfruit");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Pork Sausage Roll" + "'", str6, "Pork Sausage Roll");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Kale" + "'", str7, "Kale");
    }

    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        java.lang.String str4 = faker1.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda5 = faker1.zelda();
        java.lang.String str6 = zelda5.character();
        java.lang.String str7 = zelda5.character();
        java.lang.String str8 = zelda5.game();
        java.lang.String str9 = zelda5.character();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":crossed_flags:" + "'", str4, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Yah Rin" + "'", str6, "Yah Rin");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Madam Aroma" + "'", str7, "Madam Aroma");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Phantom Hourglass" + "'", str8, "Phantom Hourglass");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Reagah" + "'", str9, "Reagah");
    }

    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test239");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        java.lang.String str4 = book3.publisher();
        java.lang.String str5 = book3.title();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Athabasca University Press" + "'", str4, "Athabasca University Press");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "A Handful of Dust" + "'", str5, "A Handful of Dust");
    }

    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test240");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Basketball basketball5 = faker1.basketball();
        com.github.javafaker.University university6 = faker1.university();
        com.github.javafaker.Relationships relationships7 = faker1.relationships();
        java.lang.String str8 = relationships7.direct();
        java.lang.String str9 = relationships7.any();
        java.lang.String str10 = relationships7.inLaw();
        java.lang.String str11 = relationships7.extended();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(basketball5);
        org.junit.Assert.assertNotNull(university6);
        org.junit.Assert.assertNotNull(relationships7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sister" + "'", str8, "Sister");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Husband" + "'", str9, "Husband");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Brother-in-law" + "'", str10, "Brother-in-law");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Nephew" + "'", str11, "Nephew");
    }

    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test244");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str7 = code5.ean8();
        java.lang.String str9 = code5.isbn10(false);
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9780888968111" + "'", str6, "9780888968111");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "34134696" + "'", str7, "34134696");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1076985963" + "'", str9, "1076985963");
    }

    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Sip sip4 = faker1.sip();
        int int5 = sip4.provisionalResponseCode();
        java.lang.String str6 = sip4.redirectResponsePhrase();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(sip4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 182 + "'", int5 == 182);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Moved Temporarily" + "'", str6, "Moved Temporarily");
    }

    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test246");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str6 = code5.isbn13();
        java.lang.String str8 = code5.isbn10(true);
        java.lang.String str9 = code5.isbn10();
        java.lang.String str10 = code5.isbnGroup();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(code5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9790974684146" + "'", str6, "9790974684146");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0-526-28881-7" + "'", str8, "0-526-28881-7");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0945459947" + "'", str9, "0945459947");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
    }

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        long long3 = randomService1.nextLong((long) 'a');
        java.lang.String str5 = randomService1.hex((int) (short) 10);
        long long7 = randomService1.nextLong((long) (byte) 1);
        long long8 = randomService1.nextLong();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 40L + "'", long3 == 40L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "317D909FF9" + "'", str5, "317D909FF9");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 6141741256068006859L + "'", long8 == 6141741256068006859L);
    }

    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test248");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        java.lang.String str4 = book3.publisher();
        java.lang.String str5 = book3.genre();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FabJob" + "'", str4, "FabJob");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Comic/Graphic Novel" + "'", str5, "Comic/Graphic Novel");
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        java.lang.String str9 = ancient8.god();
        java.lang.String str10 = ancient8.primordial();
        java.lang.String str11 = ancient8.hero();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Aphrodite" + "'", str9, "Aphrodite");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tartarus" + "'", str10, "Tartarus");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Niobe" + "'", str11, "Niobe");
    }

    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str11 = internet9.macAddress("25061420");
        java.lang.String str12 = internet9.slug();
        java.lang.String str13 = internet9.ipV4Address();
        java.lang.String str14 = internet9.safeEmailAddress();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "25061420:b1:4b:8f:04:7e" + "'", str11, "25061420:b1:4b:8f:04:7e");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "nam_atque" + "'", str12, "nam_atque");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "49.35.3.231" + "'", str13, "49.35.3.231");
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.DragonBall dragonBall2 = faker1.dragonBall();
        com.github.javafaker.Dune dune3 = faker1.dune();
        com.github.javafaker.Dune.Saying saying4 = com.github.javafaker.Dune.Saying.MENTAT;
        java.lang.String str5 = dune3.saying(saying4);
        java.lang.String str6 = dune3.quote();
        java.lang.String str7 = dune3.character();
        org.junit.Assert.assertNotNull(dragonBall2);
        org.junit.Assert.assertNotNull(dune3);
        org.junit.Assert.assertTrue("'" + saying4 + "' != '" + com.github.javafaker.Dune.Saying.MENTAT + "'", saying4.equals(com.github.javafaker.Dune.Saying.MENTAT));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Memory never recaptures reality. Memory reconstructs reality. Reconstructions change the original, becoming external frames of reference that inevitably fail." + "'", str5, "Memory never recaptures reality. Memory reconstructs reality. Reconstructions change the original, becoming external frames of reference that inevitably fail.");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Usul has called a big one. Again, it is the legend." + "'", str6, "Usul has called a big one. Again, it is the legend.");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Gaius Helen Mohiam" + "'", str7, "Gaius Helen Mohiam");
    }

    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test252");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        java.lang.String str5 = medical4.medicineName();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SALSOLINOL" + "'", str5, "SALSOLINOL");
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        java.lang.String str4 = faker1.numerify(":crossed_flags:");
        com.github.javafaker.Zelda zelda5 = faker1.zelda();
        java.lang.String str6 = zelda5.character();
        java.lang.String str7 = zelda5.character();
        java.lang.String str8 = zelda5.game();
        java.lang.String str9 = zelda5.game();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ":crossed_flags:" + "'", str4, ":crossed_flags:");
        org.junit.Assert.assertNotNull(zelda5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tasseren" + "'", str6, "Tasseren");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Skull Kid" + "'", str7, "Skull Kid");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ocarina of Time" + "'", str8, "Ocarina of Time");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Link's Awakening" + "'", str9, "Link's Awakening");
    }

    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test256");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.SlackEmoji slackEmoji2 = faker1.slackEmoji();
        com.github.javafaker.ElderScrolls elderScrolls3 = faker1.elderScrolls();
        java.lang.String str4 = elderScrolls3.race();
        org.junit.Assert.assertNotNull(slackEmoji2);
        org.junit.Assert.assertNotNull(elderScrolls3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Bosmer" + "'", str4, "Bosmer");
    }

    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.File file8 = faker1.file();
        com.github.javafaker.TwinPeaks twinPeaks9 = faker1.twinPeaks();
        java.lang.String str10 = twinPeaks9.character();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertNotNull(twinPeaks9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Hank Jennings" + "'", str10, "Hank Jennings");
    }

    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test258");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        com.github.javafaker.Dog dog4 = faker1.dog();
        java.lang.String str5 = dog4.age();
        java.lang.String str6 = dog4.age();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(dog4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "puppy" + "'", str5, "puppy");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "senior" + "'", str6, "senior");
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        com.github.javafaker.Friends friends9 = faker1.friends();
        com.github.javafaker.HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy10 = faker1.hitchhikersGuideToTheGalaxy();
        com.github.javafaker.Photography photography11 = faker1.photography();
        java.lang.String str12 = photography11.imageTag();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
        org.junit.Assert.assertNotNull(friends9);
        org.junit.Assert.assertNotNull(hitchhikersGuideToTheGalaxy10);
        org.junit.Assert.assertNotNull(photography11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "singer" + "'", str12, "singer");
    }

    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Medical medical4 = faker1.medical();
        java.lang.String str5 = medical4.medicineName();
        java.lang.String str6 = medical4.medicineName();
        java.lang.String str7 = medical4.diseaseName();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(medical4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BRENTUXIMAB VEDOTIN" + "'", str5, "BRENTUXIMAB VEDOTIN");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "VITIS VINIFERA FLOWERING TOP" + "'", str6, "VITIS VINIFERA FLOWERING TOP");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Hypothyroidism" + "'", str7, "Hypothyroidism");
    }

    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.Hipster hipster4 = faker1.hipster();
        java.lang.String str5 = hipster4.word();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(hipster4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "readymade" + "'", str5, "readymade");
    }

    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test263");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Food food3 = faker1.food();
        com.github.javafaker.Hacker hacker4 = faker1.hacker();
        com.github.javafaker.Gender gender5 = faker1.gender();
        com.github.javafaker.ChuckNorris chuckNorris6 = faker1.chuckNorris();
        com.github.javafaker.Witcher witcher7 = faker1.witcher();
        java.lang.String str8 = witcher7.monster();
        java.lang.String str9 = witcher7.school();
        java.lang.String str10 = witcher7.quote();
        java.lang.String str11 = witcher7.location();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(food3);
        org.junit.Assert.assertNotNull(hacker4);
        org.junit.Assert.assertNotNull(gender5);
        org.junit.Assert.assertNotNull(chuckNorris6);
        org.junit.Assert.assertNotNull(witcher7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Basilisk" + "'", str8, "Basilisk");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Cat" + "'", str9, "Cat");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u2019\u2019ll never truly leave this world." + "'", str10, "\u2019\u2019ll never truly leave this world.");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Eysenlaan" + "'", str11, "Eysenlaan");
    }

    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Photography photography2 = faker1.photography();
        com.github.javafaker.Book book3 = faker1.book();
        com.github.javafaker.AquaTeenHungerForce aquaTeenHungerForce4 = faker1.aquaTeenHungerForce();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        java.lang.String str7 = lorem5.sentence(0);
        char char8 = lorem5.character();
        org.junit.Assert.assertNotNull(photography2);
        org.junit.Assert.assertNotNull(book3);
        org.junit.Assert.assertNotNull(aquaTeenHungerForce4);
        org.junit.Assert.assertNotNull(lorem5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Reprehenderit eaque rerum." + "'", str7, "Reprehenderit eaque rerum.");
// flaky:         org.junit.Assert.assertTrue("'" + char8 + "' != '" + 'g' + "'", char8 == 'g');
    }

    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test265");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Buffy buffy4 = faker1.buffy();
        com.github.javafaker.Lebowski lebowski5 = faker1.lebowski();
        java.lang.String str6 = lebowski5.quote();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(buffy4);
        org.junit.Assert.assertNotNull(lebowski5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Oh, the usual. I bowl. Drive around. The occasional acid flashback." + "'", str6, "Oh, the usual. I bowl. Drive around. The occasional acid flashback.");
    }

    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str10 = internet9.userAgentAny();
        java.lang.String str11 = internet9.ipV6Address();
        java.lang.String str12 = internet9.domainName();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_3 like Mac OS X) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.0 Mobile/14G60 Safari/602.1" + "'", str10, "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_3 like Mac OS X) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.0 Mobile/14G60 Safari/602.1");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4501:fbdd:dc2e:deca:39fe:3041:3529:1cf3" + "'", str11, "4501:fbdd:dc2e:deca:39fe:3041:3529:1cf3");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "sporer.name" + "'", str12, "sporer.name");
    }

    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test268");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.Barcode barcode3 = new com.github.javafaker.Barcode(faker1);
        java.lang.String str5 = faker1.numerify("female");
        com.github.javafaker.Company company6 = faker1.company();
        java.lang.String str7 = company6.profession();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "female" + "'", str5, "female");
        org.junit.Assert.assertNotNull(company6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hairdresser" + "'", str7, "hairdresser");
    }

    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test272");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Pokemon pokemon5 = faker1.pokemon();
        com.github.javafaker.Robin robin6 = faker1.robin();
        java.lang.String str8 = faker1.numerify("1000");
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str14 = internet9.image((java.lang.Integer) 43996, (java.lang.Integer) (-1), (java.lang.Boolean) false, "RSS");
        java.lang.String str16 = internet9.emailAddress("Lakna Rokee");
        java.lang.String str17 = internet9.safeEmailAddress();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(pokemon5);
        org.junit.Assert.assertNotNull(robin6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1000" + "'", str8, "1000");
        org.junit.Assert.assertNotNull(internet9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://lorempixel.com/43996/-1/nature/RSS" + "'", str14, "http://lorempixel.com/43996/-1/nature/RSS");
    }

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Avatar avatar2 = faker1.avatar();
        com.github.javafaker.SlackEmoji slackEmoji3 = faker1.slackEmoji();
        com.github.javafaker.Medical medical4 = faker1.medical();
        com.github.javafaker.Robin robin5 = faker1.robin();
        com.github.javafaker.BojackHorseman bojackHorseman6 = faker1.bojackHorseman();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        com.github.javafaker.Ancient ancient8 = faker1.ancient();
        com.github.javafaker.Friends friends9 = faker1.friends();
        com.github.javafaker.HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy10 = faker1.hitchhikersGuideToTheGalaxy();
        java.lang.String str11 = hitchhikersGuideToTheGalaxy10.specie();
        java.lang.String str12 = hitchhikersGuideToTheGalaxy10.planet();
        java.lang.String str13 = hitchhikersGuideToTheGalaxy10.character();
        java.lang.String str14 = hitchhikersGuideToTheGalaxy10.character();
        org.junit.Assert.assertNotNull(avatar2);
        org.junit.Assert.assertNotNull(slackEmoji3);
        org.junit.Assert.assertNotNull(medical4);
        org.junit.Assert.assertNotNull(robin5);
        org.junit.Assert.assertNotNull(bojackHorseman6);
        org.junit.Assert.assertNotNull(demographic7);
        org.junit.Assert.assertNotNull(ancient8);
        org.junit.Assert.assertNotNull(friends9);
        org.junit.Assert.assertNotNull(hitchhikersGuideToTheGalaxy10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Arcturan MegaDonkey" + "'", str11, "Arcturan MegaDonkey");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Bartledan" + "'", str12, "Bartledan");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Fenchurch" + "'", str13, "Fenchurch");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Effrafax of Wug" + "'", str14, "Effrafax of Wug");
    }
lecogiteur-csvbang, length: 1

    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration csvBangConfiguration0 = new com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration();
        csvBangConfiguration0.maxFileSize = ' ';
        com.github.lecogiteur.csvbang.file.FileName fileName3 = csvBangConfiguration0.fileName;
        csvBangConfiguration0.isAsynchronousWrite = true;
        com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration csvBangConfiguration6 = new com.github.lecogiteur.csvbang.configuration.CsvBangConfiguration();
        com.github.lecogiteur.csvbang.file.CsvFileWrapper csvFileWrapper8 = new com.github.lecogiteur.csvbang.file.CsvFileWrapper("\205");
        java.io.FileOutputStream fileOutputStream9 = csvFileWrapper8.getOutPutStream();
        com.github.lecogiteur.csvbang.file.CsvFileContext csvFileContext10 = null;
        com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState fileToOpenForWritingCsvFileState11 = new com.github.lecogiteur.csvbang.file.FileToOpenForWritingCsvFileState(csvBangConfiguration6, csvFileWrapper8, csvFileContext10);
        com.github.lecogiteur.csvbang.configuration.CsvFieldConfiguration csvFieldConfiguration12 = new com.github.lecogiteur.csvbang.configuration.CsvFieldConfiguration();
        java.lang.String str13 = csvFieldConfiguration12.nullReplaceString;
        java.lang.String str14 = csvFieldConfiguration12.nullReplaceString;
        csvFieldConfiguration12.name = "com.github.lecogiteur.csvbang.exception.CsvBangIOException: ";
        java.lang.String str17 = csvFieldConfiguration12.nullReplaceString;
        com.github.lecogiteur.csvbang.util.EndLineType endLineType18 = com.github.lecogiteur.csvbang.util.EndLineType.PARAGRAPH_SEPARATOR;
        char[] charArray19 = endLineType18.getCharacters();
        com.github.lecogiteur.csvbang.file.CsvFileContext csvFileContext20 = new com.github.lecogiteur.csvbang.file.CsvFileContext(csvBangConfiguration0, csvFileWrapper8, (java.lang.Object) csvFieldConfiguration12, (java.lang.Object) endLineType18);
        org.junit.Assert.assertNull(fileName3);
        org.junit.Assert.assertNull(fileOutputStream9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + endLineType18 + "' != '" + com.github.lecogiteur.csvbang.util.EndLineType.PARAGRAPH_SEPARATOR + "'", endLineType18.equals(com.github.lecogiteur.csvbang.util.EndLineType.PARAGRAPH_SEPARATOR));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\u2029");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\u2029");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "\u2029]");
    }
rolfl-MicroBench, length: 2

    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test015");
        java.lang.String str1 = net.tuis.ubench.UUtils.readResource("");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "net\n" + "'", str1, "net\n");
    }

    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        long long0 = net.tuis.ubench.UUtils.getNanoTick();
// flaky:         org.junit.Assert.assertTrue("'" + long0 + "' != '" + 83L + "'", long0 == 83L);
    }
DataONEorg-d1-cn-common, length: 43

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date7, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:38 CDT 2023");
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date7, 504, 0);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:38 CDT 2023");
    }

    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getCompletedMemberNodeReplicasByDate(date7, (int) (short) 1, 101);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC  LIMIT 101 OFFSET 0; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:38 CDT 2023");
    }

    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date7, (int) (short) 0, 413);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:38 CDT 2023");
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry3 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date4 = null;
        auditLogEntry3.setDateLogged(date4);
        org.dataone.cn.log.AuditEvent auditEvent6 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str7 = auditEvent6.toString();
        auditLogEntry3.setEvent(auditEvent6);
        org.dataone.cn.log.AuditEvent auditEvent9 = auditLogEntry3.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent10 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference11 = null;
        org.dataone.service.types.v1.Identifier identifier12 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry14 = new org.dataone.cn.log.MetricLogEntry(metricEvent10, nodeReference11, identifier12, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent15 = metricLogEntry14.getEvent();
        java.util.Date date16 = metricLogEntry14.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry18 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent9, date16, "/etc/dataone/storage/hazelcast.xml");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.cn.dao.ReplicationDao.ReplicaDto> replicaDtoList19 = replicationDaoMetacatImpl0.getRequestedReplicasByDate(date16);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT        guid,                                  member_node,                           status,                                date_verified                          FROM  smreplicationstatus              WHERE date_verified <= ?               AND status = 'REQUESTED'               ORDER BY date_verified ASC;           [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + auditEvent6 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent6.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "replica not found" + "'", str7, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent10 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent10.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent15 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent15.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 31 18:28:38 CDT 2023");
    }

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str18 = auditLogEntry17.getLogText();
        auditLogEntry17.setLogText("DIGEST");
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:38 CDT 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str18, "/etc/dataone/storage/hazelcast.xml");
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        org.apache.commons.logging.Log log0 = org.dataone.cn.ldap.LDAPService.log;
// flaky:         org.junit.Assert.assertNotNull(log0);
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry1 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry1.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent4 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent4, nodeReference5, identifier6, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent9 = metricLogEntry8.getEvent();
        java.util.Date date10 = metricLogEntry8.getDateLogged();
        auditLogEntry1.setDateLogged(date10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList14 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date10, 303, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent4 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent4.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "smreplicationpolicy");
        java.lang.String str5 = metricLogEntry4.toString();
        java.lang.Long long6 = metricLogEntry4.getTimeToCompleteEventMS();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\"event\":\"log aggregation harvest retrieved\",\"message\":\"smreplicationpolicy\",\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":3646,\"dateLogged\":\"2023-10-31T23:28:39.136+00:00\"}

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry3 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date4 = null;
        auditLogEntry3.setDateLogged(date4);
        org.dataone.cn.log.AuditEvent auditEvent6 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str7 = auditEvent6.toString();
        auditLogEntry3.setEvent(auditEvent6);
        org.dataone.cn.log.AuditEvent auditEvent9 = auditLogEntry3.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent10 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference11 = null;
        org.dataone.service.types.v1.Identifier identifier12 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry14 = new org.dataone.cn.log.MetricLogEntry(metricEvent10, nodeReference11, identifier12, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent15 = metricLogEntry14.getEvent();
        java.util.Date date16 = metricLogEntry14.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry18 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent9, date16, "/etc/dataone/storage/hazelcast.xml");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList21 = replicationDaoMetacatImpl0.getCompletedMemberNodeReplicasByDate(date16, (int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC ; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + auditEvent6 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent6.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "replica not found" + "'", str7, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent10 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent10.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent15 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent15.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        org.dataone.cn.log.AuditEvent auditEvent18 = auditLogEntry17.getEvent();
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:39 CDT 2023");
        org.junit.Assert.assertTrue("'" + auditEvent18 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent18.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
    }

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getCompletedMemberNodeReplicasByDate(date7, 406, (-1));
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC ; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str18 = auditLogEntry17.getNodeId();
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:39 CDT 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "processing" + "'", str18, "processing");
    }

    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry1 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry1.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent4 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent4, nodeReference5, identifier6, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent9 = metricLogEntry8.getEvent();
        java.util.Date date10 = metricLogEntry8.getDateLogged();
        auditLogEntry1.setDateLogged(date10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList14 = replicationDaoMetacatImpl0.getCompletedMemberNodeReplicasByDate(date10, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC ; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent4 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent4.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry1 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry1.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent4 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent4, nodeReference5, identifier6, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent9 = metricLogEntry8.getEvent();
        java.util.Date date10 = metricLogEntry8.getDateLogged();
        auditLogEntry1.setDateLogged(date10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList14 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date10, (int) (short) -1, 206);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent4 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent4.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricLogClient metricLogClient1 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent2 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference3 = null;
        org.dataone.service.types.v1.Identifier identifier4 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry6 = new org.dataone.cn.log.MetricLogEntry(metricEvent2, nodeReference3, identifier4, "smreplicationpolicy");
        boolean boolean7 = metricLogClient1.logMetricEvent(metricLogEntry6);
        org.dataone.cn.log.MetricEvent metricEvent8 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference9 = null;
        org.dataone.service.types.v1.Identifier identifier10 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry12 = new org.dataone.cn.log.MetricLogEntry(metricEvent8, nodeReference9, identifier10, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent13 = metricLogEntry12.getEvent();
        java.util.Date date14 = metricLogEntry12.getDateLogged();
        metricLogEntry6.setDateLogged(date14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.cn.dao.ReplicationDao.ReplicaDto> replicaDtoList16 = replicationDaoMetacatImpl0.getRequestedReplicasByDate(date14);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT        guid,                                  member_node,                           status,                                date_verified                          FROM  smreplicationstatus              WHERE date_verified <= ?               AND status = 'REQUESTED'               ORDER BY date_verified ASC;           [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(metricLogClient1);
        org.junit.Assert.assertTrue("'" + metricEvent2 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent2.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + metricEvent8 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent8.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry1 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry1.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent4 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent4, nodeReference5, identifier6, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent9 = metricLogEntry8.getEvent();
        java.util.Date date10 = metricLogEntry8.getDateLogged();
        auditLogEntry1.setDateLogged(date10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList14 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date10, 503, 415);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC LIMIT 415 OFFSET 208330; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent4 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent4.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent6 = metricLogEntry5.getEvent();
        java.util.Date date7 = metricLogEntry5.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList10 = replicationDaoMetacatImpl0.getInvalidMemberNodeReplicasByDate(date7, (int) (short) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'INVALIDATED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC ; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent6 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent6.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:39 CDT 2023");
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        org.dataone.cn.log.AuditLogClient auditLogClient0 = org.dataone.cn.log.AuditLogClientFactory.getAuditLogClient();
        org.dataone.cn.log.AuditLogClientSplunkImpl auditLogClientSplunkImpl1 = new org.dataone.cn.log.AuditLogClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry4 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date5 = null;
        auditLogEntry4.setDateLogged(date5);
        org.dataone.cn.log.AuditEvent auditEvent7 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str8 = auditEvent7.toString();
        auditLogEntry4.setEvent(auditEvent7);
        org.dataone.cn.log.AuditEvent auditEvent10 = auditLogEntry4.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent11 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference12 = null;
        org.dataone.service.types.v1.Identifier identifier13 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry15 = new org.dataone.cn.log.MetricLogEntry(metricEvent11, nodeReference12, identifier13, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent16 = metricLogEntry15.getEvent();
        java.util.Date date17 = metricLogEntry15.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry19 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent10, date17, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str22 = auditLogClientSplunkImpl1.queryLog(auditLogEntry19, (java.lang.Integer) 504, (java.lang.Integer) 300);
        boolean boolean23 = auditLogClient0.removeReplicaAuditEvent(auditLogEntry19);
        org.junit.Assert.assertNotNull(auditLogClient0);
        org.junit.Assert.assertTrue("'" + auditEvent7 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent7.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "replica not found" + "'", str8, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent10 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent10.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent11 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent11.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent16 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent16.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent5 = metricLogEntry4.getEvent();
        java.util.Date date6 = metricLogEntry4.getDateLogged();
        metricLogEntry4.setTimeToCompleteEventMS((java.lang.Long) 100L);
        java.util.Date date9 = metricLogEntry4.getDateLogged();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent5 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent5.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:28:40 CDT 2023");
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.dataone.cn.log.AuditLogClient auditLogClient0 = org.dataone.cn.log.AuditLogClientFactory.getAuditLogClient();
        org.dataone.cn.log.AuditLogEntry auditLogEntry3 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date4 = null;
        auditLogEntry3.setDateLogged(date4);
        org.dataone.cn.log.AuditEvent auditEvent6 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str7 = auditEvent6.toString();
        auditLogEntry3.setEvent(auditEvent6);
        org.dataone.cn.log.AuditEvent auditEvent9 = auditLogEntry3.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent10 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference11 = null;
        org.dataone.service.types.v1.Identifier identifier12 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry14 = new org.dataone.cn.log.MetricLogEntry(metricEvent10, nodeReference11, identifier12, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent15 = metricLogEntry14.getEvent();
        java.util.Date date16 = metricLogEntry14.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry18 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent9, date16, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str19 = auditLogEntry18.getLogText();
        java.lang.String str22 = auditLogClient0.queryLog(auditLogEntry18, (java.lang.Integer) 202, (java.lang.Integer) 0);
        org.dataone.cn.log.AuditLogEntry auditLogEntry23 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date24 = null;
        auditLogEntry23.setDateLogged(date24);
        org.dataone.cn.log.AuditEvent auditEvent26 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str27 = auditEvent26.toString();
        auditLogEntry23.setEvent(auditEvent26);
        auditLogEntry23.setNodeId("processing");
        java.lang.String str33 = auditLogClient0.queryLog(auditLogEntry23, (java.lang.Integer) 101, (java.lang.Integer) 300);
        org.junit.Assert.assertNotNull(auditLogClient0);
        org.junit.Assert.assertTrue("'" + auditEvent6 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent6.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "replica not found" + "'", str7, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent10 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent10.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent15 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent15.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str19, "/etc/dataone/storage/hazelcast.xml");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + auditEvent26 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent26.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "replica not found" + "'", str27, "replica not found");
        org.junit.Assert.assertNull(str33);
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "smreplicationpolicy");
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference5, identifier6, "{\"event\":\"log aggregation harvest retrieved\",\"message\":\"smreplicationpolicy\",\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":3511,\"dateLogged\":\"2023-10-31T23:28:39.078+00:00\"}");
        org.dataone.cn.log.AuditLogEntry auditLogEntry11 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date12 = null;
        auditLogEntry11.setDateLogged(date12);
        org.dataone.cn.log.AuditEvent auditEvent14 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str15 = auditEvent14.toString();
        auditLogEntry11.setEvent(auditEvent14);
        org.dataone.cn.log.AuditEvent auditEvent17 = auditLogEntry11.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent18 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference19 = null;
        org.dataone.service.types.v1.Identifier identifier20 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry22 = new org.dataone.cn.log.MetricLogEntry(metricEvent18, nodeReference19, identifier20, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent23 = metricLogEntry22.getEvent();
        java.util.Date date24 = metricLogEntry22.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry26 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent17, date24, "/etc/dataone/storage/hazelcast.xml");
        metricLogEntry8.setDateLogged(date24);
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + auditEvent14 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent14.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "replica not found" + "'", str15, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent17 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent17.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent18 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent18.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent23 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent23.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Oct 31 18:28:40 CDT 2023");
    }

    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        org.dataone.cn.log.AuditLogClientSolrImpl auditLogClientSolrImpl0 = new org.dataone.cn.log.AuditLogClientSolrImpl();
        org.dataone.cn.log.AuditLogWriteClientSplunkImpl auditLogWriteClientSplunkImpl1 = new org.dataone.cn.log.AuditLogWriteClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        boolean boolean9 = auditLogWriteClientSplunkImpl1.removeReplicaAuditEvent(auditLogEntry2);
        auditLogEntry2.setId("log aggregation harvest retrieved");
        org.dataone.cn.log.MetricLogClient metricLogClient12 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent13 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference14 = null;
        org.dataone.service.types.v1.Identifier identifier15 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry17 = new org.dataone.cn.log.MetricLogEntry(metricEvent13, nodeReference14, identifier15, "smreplicationpolicy");
        boolean boolean18 = metricLogClient12.logMetricEvent(metricLogEntry17);
        org.dataone.cn.log.MetricEvent metricEvent19 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference20 = null;
        org.dataone.service.types.v1.Identifier identifier21 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry23 = new org.dataone.cn.log.MetricLogEntry(metricEvent19, nodeReference20, identifier21, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent24 = metricLogEntry23.getEvent();
        java.util.Date date25 = metricLogEntry23.getDateLogged();
        metricLogEntry17.setDateLogged(date25);
        auditLogEntry2.setDateLogged(date25);
        java.lang.String str30 = auditLogClientSolrImpl0.queryLog(auditLogEntry2, (java.lang.Integer) 409, (java.lang.Integer) 413);
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(metricLogClient12);
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + metricEvent19 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent19.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent24 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent24.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str18 = auditEvent8.toString();
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "replica not found" + "'", str18, "replica not found");
    }

    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test230");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent5 = metricLogEntry4.getEvent();
        java.util.Date date6 = metricLogEntry4.getDateLogged();
        metricLogEntry4.setTimeToCompleteEventMS((java.lang.Long) 100L);
        org.dataone.service.types.v1.Identifier identifier9 = metricLogEntry4.getPid();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent5 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent5.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:28:40 CDT 2023");
        org.junit.Assert.assertNull(identifier9);
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricLogClient metricLogClient1 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent2 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference3 = null;
        org.dataone.service.types.v1.Identifier identifier4 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry6 = new org.dataone.cn.log.MetricLogEntry(metricEvent2, nodeReference3, identifier4, "smreplicationpolicy");
        boolean boolean7 = metricLogClient1.logMetricEvent(metricLogEntry6);
        org.dataone.cn.log.MetricEvent metricEvent8 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference9 = null;
        org.dataone.service.types.v1.Identifier identifier10 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry12 = new org.dataone.cn.log.MetricLogEntry(metricEvent8, nodeReference9, identifier10, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent13 = metricLogEntry12.getEvent();
        java.util.Date date14 = metricLogEntry12.getDateLogged();
        metricLogEntry6.setDateLogged(date14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList18 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date14, 304, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC LIMIT 100 OFFSET 30300; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(metricLogClient1);
        org.junit.Assert.assertTrue("'" + metricEvent2 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent2.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + metricEvent8 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent8.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 31 18:28:40 CDT 2023");
    }

    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogWriteClientSplunkImpl auditLogWriteClientSplunkImpl1 = new org.dataone.cn.log.AuditLogWriteClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        boolean boolean9 = auditLogWriteClientSplunkImpl1.removeReplicaAuditEvent(auditLogEntry2);
        auditLogEntry2.setId("log aggregation harvest retrieved");
        org.dataone.cn.log.MetricLogClient metricLogClient12 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent13 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference14 = null;
        org.dataone.service.types.v1.Identifier identifier15 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry17 = new org.dataone.cn.log.MetricLogEntry(metricEvent13, nodeReference14, identifier15, "smreplicationpolicy");
        boolean boolean18 = metricLogClient12.logMetricEvent(metricLogEntry17);
        org.dataone.cn.log.MetricEvent metricEvent19 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference20 = null;
        org.dataone.service.types.v1.Identifier identifier21 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry23 = new org.dataone.cn.log.MetricLogEntry(metricEvent19, nodeReference20, identifier21, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent24 = metricLogEntry23.getEvent();
        java.util.Date date25 = metricLogEntry23.getDateLogged();
        metricLogEntry17.setDateLogged(date25);
        auditLogEntry2.setDateLogged(date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList30 = replicationDaoMetacatImpl0.getCompletedMemberNodeReplicasByDate(date25, 407, 206);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC  LIMIT 206 OFFSET 83636; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(metricLogClient12);
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + metricEvent19 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent19.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent24 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent24.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        org.dataone.cn.log.AuditLogEntry auditLogEntry0 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry0.setLogText("smreplicationstatus");
        java.util.Date date3 = auditLogEntry0.getDateLogged();
        java.lang.String str4 = auditLogEntry0.getNodeId();
        org.dataone.cn.log.AuditLogWriteClientSplunkImpl auditLogWriteClientSplunkImpl5 = new org.dataone.cn.log.AuditLogWriteClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry6 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date7 = null;
        auditLogEntry6.setDateLogged(date7);
        org.dataone.cn.log.AuditEvent auditEvent9 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str10 = auditEvent9.toString();
        auditLogEntry6.setEvent(auditEvent9);
        org.dataone.cn.log.AuditEvent auditEvent12 = auditLogEntry6.getEvent();
        boolean boolean13 = auditLogWriteClientSplunkImpl5.removeReplicaAuditEvent(auditLogEntry6);
        auditLogEntry6.setId("log aggregation harvest retrieved");
        org.dataone.cn.log.MetricLogClient metricLogClient16 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent17 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference18 = null;
        org.dataone.service.types.v1.Identifier identifier19 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry21 = new org.dataone.cn.log.MetricLogEntry(metricEvent17, nodeReference18, identifier19, "smreplicationpolicy");
        boolean boolean22 = metricLogClient16.logMetricEvent(metricLogEntry21);
        org.dataone.cn.log.MetricEvent metricEvent23 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference24 = null;
        org.dataone.service.types.v1.Identifier identifier25 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry27 = new org.dataone.cn.log.MetricLogEntry(metricEvent23, nodeReference24, identifier25, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent28 = metricLogEntry27.getEvent();
        java.util.Date date29 = metricLogEntry27.getDateLogged();
        metricLogEntry21.setDateLogged(date29);
        auditLogEntry6.setDateLogged(date29);
        auditLogEntry0.setDateLogged(date29);
        org.junit.Assert.assertNull(date3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "replica not found" + "'", str10, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent12 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent12.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(metricLogClient16);
        org.junit.Assert.assertTrue("'" + metricEvent17 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent17.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + metricEvent23 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent23.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent28 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent28.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        org.dataone.cn.dao.ReplicationDao replicationDao0 = org.dataone.cn.dao.DaoFactory.getReplicationDao();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3, "smreplicationpolicy");
        org.dataone.service.types.v1.NodeReference nodeReference6 = null;
        org.dataone.service.types.v1.Identifier identifier7 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry9 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference6, identifier7, "{\"event\":\"log aggregation harvest retrieved\",\"message\":\"smreplicationpolicy\",\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":3511,\"dateLogged\":\"2023-10-31T23:28:39.078+00:00\"}");
        java.util.Date date10 = metricLogEntry9.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList13 = replicationDao0.getInvalidMemberNodeReplicasByDate(date10, (int) (byte) 1, 206);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'INVALIDATED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC  LIMIT 206 OFFSET 0; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(replicationDao0);
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.REPLICA_STATUS;
        java.lang.String str1 = metricEvent0.toString();
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference2, identifier3, "DIGEST");
        org.dataone.service.types.v1.NodeReference nodeReference6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry7 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference6);
        java.util.Date date8 = metricLogEntry7.getDateLogged();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.REPLICA_STATUS + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.REPLICA_STATUS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "replication status" + "'", str1, "replication status");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test258");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str18 = auditLogEntry17.getLogText();
        org.dataone.cn.log.AuditEvent auditEvent19 = auditLogEntry17.getEvent();
        java.lang.String str20 = auditLogEntry17.getLogText();
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str18, "/etc/dataone/storage/hazelcast.xml");
        org.junit.Assert.assertTrue("'" + auditEvent19 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent19.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str20, "/etc/dataone/storage/hazelcast.xml");
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry3 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date4 = null;
        auditLogEntry3.setDateLogged(date4);
        org.dataone.cn.log.AuditEvent auditEvent6 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str7 = auditEvent6.toString();
        auditLogEntry3.setEvent(auditEvent6);
        org.dataone.cn.log.AuditEvent auditEvent9 = auditLogEntry3.getEvent();
        org.dataone.cn.log.AuditLogEntry auditLogEntry11 = new org.dataone.cn.log.AuditLogEntry("isMnAdministrator", "systemmetadata", auditEvent9, "processing");
        org.dataone.cn.log.MetricLogClient metricLogClient12 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent13 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference14 = null;
        org.dataone.service.types.v1.Identifier identifier15 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry17 = new org.dataone.cn.log.MetricLogEntry(metricEvent13, nodeReference14, identifier15, "smreplicationpolicy");
        boolean boolean18 = metricLogClient12.logMetricEvent(metricLogEntry17);
        org.dataone.cn.log.MetricEvent metricEvent19 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference20 = null;
        org.dataone.service.types.v1.Identifier identifier21 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry23 = new org.dataone.cn.log.MetricLogEntry(metricEvent19, nodeReference20, identifier21, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent24 = metricLogEntry23.getEvent();
        java.util.Date date25 = metricLogEntry23.getDateLogged();
        metricLogEntry17.setDateLogged(date25);
        auditLogEntry11.setDateLogged(date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.cn.dao.ReplicationDao.ReplicaDto> replicaDtoList28 = replicationDaoMetacatImpl0.getRequestedReplicasByDate(date25);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT        guid,                                  member_node,                           status,                                date_verified                          FROM  smreplicationstatus              WHERE date_verified <= ?               AND status = 'REQUESTED'               ORDER BY date_verified ASC;           [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + auditEvent6 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent6.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "replica not found" + "'", str7, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertNotNull(metricLogClient12);
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + metricEvent19 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent19.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent24 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent24.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test265");
        org.dataone.cn.log.AuditLogEntry auditLogEntry0 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry0.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent3 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference4 = null;
        org.dataone.service.types.v1.Identifier identifier5 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry7 = new org.dataone.cn.log.MetricLogEntry(metricEvent3, nodeReference4, identifier5, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent8 = metricLogEntry7.getEvent();
        java.util.Date date9 = metricLogEntry7.getDateLogged();
        auditLogEntry0.setDateLogged(date9);
        org.dataone.cn.log.AuditEvent auditEvent11 = auditLogEntry0.getEvent();
        java.lang.String str12 = auditLogEntry0.getId();
        org.junit.Assert.assertTrue("'" + metricEvent3 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent3.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent8 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent8.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertNull(auditEvent11);
        org.junit.Assert.assertNull(str12);
    }

    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test268");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry3 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2);
        org.dataone.service.types.v1.NodeReference nodeReference4 = null;
        metricLogEntry3.setNodeId(nodeReference4);
        org.dataone.service.types.v1.Identifier identifier6 = null;
        metricLogEntry3.setPid(identifier6);
        java.lang.String str8 = metricLogEntry3.toString();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED));
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{\"event\":\"synchronization harvest submitted\",\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":15620,\"dateLogged\":\"2023-10-31T23:28:41.311+00:00\"}

    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test272");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry3 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2);
        org.dataone.service.types.v1.Identifier identifier4 = null;
        metricLogEntry3.setPid(identifier4);
        java.util.Date date6 = metricLogEntry3.getDateLogged();
        java.lang.Long long7 = metricLogEntry3.getTimeToCompleteEventMS();
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED));
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertNull(long7);
    }

    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test274");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry5 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "xml_access", (java.lang.Long) (-1L));
        metricLogEntry5.setMessage("log aggregation harvest retrieved");
        org.dataone.cn.log.MetricEvent metricEvent8 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference9 = null;
        org.dataone.service.types.v1.Identifier identifier10 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent8, nodeReference9, identifier10, "xml_access", (java.lang.Long) (-1L));
        metricLogEntry13.setMessage("log aggregation harvest retrieved");
        java.lang.String str16 = metricLogEntry13.toString();
        org.dataone.cn.log.MetricEvent metricEvent17 = org.dataone.cn.log.MetricEvent.REPLICA_STATUS;
        java.lang.String str18 = metricEvent17.toString();
        org.dataone.service.types.v1.NodeReference nodeReference19 = null;
        org.dataone.service.types.v1.Identifier identifier20 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry22 = new org.dataone.cn.log.MetricLogEntry(metricEvent17, nodeReference19, identifier20, "DIGEST");
        metricLogEntry13.setEvent(metricEvent17);
        metricLogEntry5.setEvent(metricEvent17);
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED));
        org.junit.Assert.assertTrue("'" + metricEvent8 + "' != '" + org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED + "'", metricEvent8.equals(org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\"event\":\"synchronization harvest submitted\",\"message\":\"log aggregation harvest retrieved\",\"timeToCompleteEventMS\":-1,\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":15743,\"dateLogged\":\"2023-10-31T23:28:41.362+00:00\"}

    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test286");
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent9 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference10 = null;
        org.dataone.service.types.v1.Identifier identifier11 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry13 = new org.dataone.cn.log.MetricLogEntry(metricEvent9, nodeReference10, identifier11, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent14 = metricLogEntry13.getEvent();
        java.util.Date date15 = metricLogEntry13.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry17 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent8, date15, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str18 = auditLogEntry17.getLogText();
        java.lang.String str19 = auditLogEntry17.getLogText();
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent14 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent14.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str18, "/etc/dataone/storage/hazelcast.xml");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/etc/dataone/storage/hazelcast.xml" + "'", str19, "/etc/dataone/storage/hazelcast.xml");
    }

    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test297");
        org.dataone.cn.log.AuditLogClientSplunkImpl auditLogClientSplunkImpl0 = new org.dataone.cn.log.AuditLogClientSplunkImpl();
        java.lang.String str4 = auditLogClientSplunkImpl0.queryLog("smreplicationstatus", (java.lang.Integer) 100, (java.lang.Integer) 0);
        org.dataone.cn.log.AuditLogClientSplunkImpl auditLogClientSplunkImpl5 = new org.dataone.cn.log.AuditLogClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry8 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date9 = null;
        auditLogEntry8.setDateLogged(date9);
        org.dataone.cn.log.AuditEvent auditEvent11 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str12 = auditEvent11.toString();
        auditLogEntry8.setEvent(auditEvent11);
        org.dataone.cn.log.AuditEvent auditEvent14 = auditLogEntry8.getEvent();
        org.dataone.cn.log.MetricEvent metricEvent15 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference16 = null;
        org.dataone.service.types.v1.Identifier identifier17 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry19 = new org.dataone.cn.log.MetricLogEntry(metricEvent15, nodeReference16, identifier17, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent20 = metricLogEntry19.getEvent();
        java.util.Date date21 = metricLogEntry19.getDateLogged();
        org.dataone.cn.log.AuditLogEntry auditLogEntry23 = new org.dataone.cn.log.AuditLogEntry("Task-FORM-smreplicationpolicy", "processing", auditEvent14, date21, "/etc/dataone/storage/hazelcast.xml");
        java.lang.String str26 = auditLogClientSplunkImpl5.queryLog(auditLogEntry23, (java.lang.Integer) 504, (java.lang.Integer) 300);
        org.dataone.cn.log.AuditLogWriteClientSplunkImpl auditLogWriteClientSplunkImpl27 = new org.dataone.cn.log.AuditLogWriteClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry28 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry28.setLogText("smreplicationstatus");
        auditLogEntry28.setLogText("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        boolean boolean33 = auditLogWriteClientSplunkImpl27.removeReplicaAuditEvent(auditLogEntry28);
        auditLogEntry28.setPid("session");
        java.lang.String str38 = auditLogClientSplunkImpl5.queryLog(auditLogEntry28, (java.lang.Integer) 301, (java.lang.Integer) 402);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = auditLogClientSplunkImpl0.logAuditEvent(auditLogEntry28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + auditEvent11 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent11.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "replica not found" + "'", str12, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent14 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent14.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + metricEvent15 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent15.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent20 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent20.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str38);
    }

    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test300");
        org.dataone.cn.log.MetricEvent metricEvent0 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference1 = null;
        org.dataone.service.types.v1.Identifier identifier2 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent0, nodeReference1, identifier2, "smreplicationpolicy");
        java.lang.String str5 = metricLogEntry4.toString();
        org.dataone.cn.log.MetricEvent metricEvent6 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference7 = null;
        org.dataone.service.types.v1.Identifier identifier8 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry9 = new org.dataone.cn.log.MetricLogEntry(metricEvent6, nodeReference7, identifier8);
        org.dataone.service.types.v1.Identifier identifier10 = null;
        metricLogEntry9.setPid(identifier10);
        java.util.Date date12 = metricLogEntry9.getDateLogged();
        metricLogEntry4.setDateLogged(date12);
        org.junit.Assert.assertTrue("'" + metricEvent0 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent0.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\"event\":\"log aggregation harvest retrieved\",\"message\":\"smreplicationpolicy\",\"threadName\":\"randoop.util.RunnerThread\",\"threadId\":16770,\"dateLogged\":\"2023-10-31T23:28:41.590+00:00\"}

    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test310");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.MetricEvent metricEvent1 = org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED;
        org.dataone.service.types.v1.NodeReference nodeReference2 = null;
        org.dataone.service.types.v1.Identifier identifier3 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry4 = new org.dataone.cn.log.MetricLogEntry(metricEvent1, nodeReference2, identifier3);
        org.dataone.service.types.v1.Identifier identifier5 = null;
        metricLogEntry4.setPid(identifier5);
        java.util.Date date7 = metricLogEntry4.getDateLogged();
        java.util.Date date8 = metricLogEntry4.getDateLogged();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList11 = replicationDaoMetacatImpl0.getInvalidMemberNodeReplicasByDate(date8, (int) '4', 413);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'INVALIDATED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC  LIMIT 413 OFFSET 21063; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent1 + "' != '" + org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED + "'", metricEvent1.equals(org.dataone.cn.log.MetricEvent.SYNCHRONIZATION_HARVEST_SUBMITTED));
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Oct 31 18:28:41 CDT 2023");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test312");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry1 = new org.dataone.cn.log.AuditLogEntry();
        auditLogEntry1.setNodeId("org.dataone.cn.batch.exceptions.ExecutionDisabledException: hi!");
        org.dataone.cn.log.MetricEvent metricEvent4 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference5 = null;
        org.dataone.service.types.v1.Identifier identifier6 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry8 = new org.dataone.cn.log.MetricLogEntry(metricEvent4, nodeReference5, identifier6, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent9 = metricLogEntry8.getEvent();
        java.util.Date date10 = metricLogEntry8.getDateLogged();
        auditLogEntry1.setDateLogged(date10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList14 = replicationDaoMetacatImpl0.getInvalidMemberNodeReplicasByDate(date10, 307, 10);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'INVALIDATED'   AND member_node <> 'cnDev'  ORDER BY date_verified ASC  LIMIT 10 OFFSET 3060; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + metricEvent4 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent4.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent9 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent9.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test313");
        org.dataone.cn.dao.ReplicationDao replicationDao0 = org.dataone.cn.dao.DaoFactory.getReplicationDao();
        org.dataone.cn.log.AuditLogEntry auditLogEntry3 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date4 = null;
        auditLogEntry3.setDateLogged(date4);
        org.dataone.cn.log.AuditEvent auditEvent6 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str7 = auditEvent6.toString();
        auditLogEntry3.setEvent(auditEvent6);
        org.dataone.cn.log.AuditEvent auditEvent9 = auditLogEntry3.getEvent();
        org.dataone.cn.log.AuditLogEntry auditLogEntry11 = new org.dataone.cn.log.AuditLogEntry("isMnAdministrator", "systemmetadata", auditEvent9, "processing");
        org.dataone.cn.log.MetricLogClient metricLogClient12 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent13 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference14 = null;
        org.dataone.service.types.v1.Identifier identifier15 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry17 = new org.dataone.cn.log.MetricLogEntry(metricEvent13, nodeReference14, identifier15, "smreplicationpolicy");
        boolean boolean18 = metricLogClient12.logMetricEvent(metricLogEntry17);
        org.dataone.cn.log.MetricEvent metricEvent19 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference20 = null;
        org.dataone.service.types.v1.Identifier identifier21 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry23 = new org.dataone.cn.log.MetricLogEntry(metricEvent19, nodeReference20, identifier21, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent24 = metricLogEntry23.getEvent();
        java.util.Date date25 = metricLogEntry23.getDateLogged();
        metricLogEntry17.setDateLogged(date25);
        auditLogEntry11.setDateLogged(date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.cn.dao.ReplicationDao.ReplicaDto> replicaDtoList28 = replicationDao0.getRequestedReplicasByDate(date25);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT        guid,                                  member_node,                           status,                                date_verified                          FROM  smreplicationstatus              WHERE date_verified <= ?               AND status = 'REQUESTED'               ORDER BY date_verified ASC;           [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(replicationDao0);
        org.junit.Assert.assertTrue("'" + auditEvent6 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent6.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "replica not found" + "'", str7, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent9 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent9.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertNotNull(metricLogClient12);
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + metricEvent19 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent19.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent24 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent24.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }

    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test317");
        org.dataone.cn.dao.ReplicationDaoMetacatImpl replicationDaoMetacatImpl0 = new org.dataone.cn.dao.ReplicationDaoMetacatImpl();
        org.dataone.cn.log.AuditLogWriteClientSplunkImpl auditLogWriteClientSplunkImpl1 = new org.dataone.cn.log.AuditLogWriteClientSplunkImpl();
        org.dataone.cn.log.AuditLogEntry auditLogEntry2 = new org.dataone.cn.log.AuditLogEntry();
        java.util.Date date3 = null;
        auditLogEntry2.setDateLogged(date3);
        org.dataone.cn.log.AuditEvent auditEvent5 = org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND;
        java.lang.String str6 = auditEvent5.toString();
        auditLogEntry2.setEvent(auditEvent5);
        org.dataone.cn.log.AuditEvent auditEvent8 = auditLogEntry2.getEvent();
        boolean boolean9 = auditLogWriteClientSplunkImpl1.removeReplicaAuditEvent(auditLogEntry2);
        auditLogEntry2.setId("log aggregation harvest retrieved");
        org.dataone.cn.log.MetricLogClient metricLogClient12 = org.dataone.cn.log.MetricLogClientFactory.getMetricLogClient();
        org.dataone.cn.log.MetricEvent metricEvent13 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference14 = null;
        org.dataone.service.types.v1.Identifier identifier15 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry17 = new org.dataone.cn.log.MetricLogEntry(metricEvent13, nodeReference14, identifier15, "smreplicationpolicy");
        boolean boolean18 = metricLogClient12.logMetricEvent(metricLogEntry17);
        org.dataone.cn.log.MetricEvent metricEvent19 = org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED;
        org.dataone.service.types.v1.NodeReference nodeReference20 = null;
        org.dataone.service.types.v1.Identifier identifier21 = null;
        org.dataone.cn.log.MetricLogEntry metricLogEntry23 = new org.dataone.cn.log.MetricLogEntry(metricEvent19, nodeReference20, identifier21, "smreplicationpolicy");
        org.dataone.cn.log.MetricEvent metricEvent24 = metricLogEntry23.getEvent();
        java.util.Date date25 = metricLogEntry23.getDateLogged();
        metricLogEntry17.setDateLogged(date25);
        auditLogEntry2.setDateLogged(date25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.dataone.service.types.v1.Identifier> identifierList30 = replicationDaoMetacatImpl0.getCompletedCoordinatingNodeReplicasByDate(date25, 404, 0);
            org.junit.Assert.fail("Expected exception of type org.springframework.jdbc.BadSqlGrammarException; message: PreparedStatementCallback; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLException: Table \"SMREPLICATIONSTATUS\" not found; SQL statement:?SELECT DISTINCT guid, date_verified  FROM  smreplicationstatus  WHERE date_verified <= ?   AND status = 'COMPLETED'   AND member_node = 'cnDev'  ORDER BY date_verified ASC; [42102-163]");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + auditEvent5 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent5.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "replica not found" + "'", str6, "replica not found");
        org.junit.Assert.assertTrue("'" + auditEvent8 + "' != '" + org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND + "'", auditEvent8.equals(org.dataone.cn.log.AuditEvent.REPLICA_NOT_FOUND));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(metricLogClient12);
        org.junit.Assert.assertTrue("'" + metricEvent13 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent13.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + metricEvent19 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent19.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertTrue("'" + metricEvent24 + "' != '" + org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED + "'", metricEvent24.equals(org.dataone.cn.log.MetricEvent.LOG_AGGREGATION_HARVEST_RETRIEVED));
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Oct 31 18:28:41 CDT 2023");
    }
jembi-openhim-mediator-engine-java, length: 5

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        org.openhim.mediator.engine.CoreResponse.Request request0 = new org.openhim.mediator.engine.CoreResponse.Request();
        java.lang.String str1 = request0.getPath();
        org.openhim.mediator.engine.CoreResponse.Request request2 = new org.openhim.mediator.engine.CoreResponse.Request();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = request2.getHeaders();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = request2.getHeaders();
        java.util.Date date5 = request2.getTimestamp();
        request0.setTimestamp(date5);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 31 18:53:23 CDT 2023");
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.openhim.mediator.engine.CoreResponse coreResponse0 = new org.openhim.mediator.engine.CoreResponse();
        org.openhim.mediator.engine.CoreResponse.Response response1 = coreResponse0.getResponse();
        org.openhim.mediator.engine.CoreResponse.Response response2 = new org.openhim.mediator.engine.CoreResponse.Response();
        coreResponse0.setResponse(response2);
        java.lang.String str4 = coreResponse0.toString();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = coreResponse0.getProperties();
        org.junit.Assert.assertNull(response1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{\"response\":{\"headers\":{}

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        org.openhim.mediator.engine.CoreResponse coreResponse0 = new org.openhim.mediator.engine.CoreResponse();
        org.openhim.mediator.engine.CoreResponse.Response response1 = coreResponse0.getResponse();
        org.openhim.mediator.engine.CoreResponse.Response response2 = new org.openhim.mediator.engine.CoreResponse.Response();
        coreResponse0.setResponse(response2);
        java.lang.String str4 = coreResponse0.toString();
        java.lang.String str5 = coreResponse0.toJSON();
        org.junit.Assert.assertNull(response1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{\"response\":{\"headers\":{}

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        org.openhim.mediator.engine.CoreResponse.Response response0 = new org.openhim.mediator.engine.CoreResponse.Response();
        org.openhim.mediator.engine.CoreResponse.Request request1 = new org.openhim.mediator.engine.CoreResponse.Request();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = request1.getHeaders();
        response0.setHeaders(strMap2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = response0.getHeaders();
        java.lang.Integer int5 = response0.getStatus();
        java.util.Date date6 = response0.getTimestamp();
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 31 18:53:24 CDT 2023");
    }

    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        org.openhim.mediator.engine.CoreResponse.Request request0 = new org.openhim.mediator.engine.CoreResponse.Request();
        java.lang.String str1 = request0.getPath();
        java.lang.String str2 = request0.getQueryString();
        akka.actor.ActorRef actorRef3 = null;
        akka.actor.ActorRef actorRef4 = null;
        org.openhim.mediator.engine.CoreResponse.Request request12 = new org.openhim.mediator.engine.CoreResponse.Request();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = request12.getHeaders();
        java.util.ArrayList<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.String>> strPairList14 = new java.util.ArrayList<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.String>>();
        org.openhim.mediator.engine.messages.MediatorHTTPRequest mediatorHTTPRequest16 = new org.openhim.mediator.engine.messages.MediatorHTTPRequest(actorRef3, actorRef4, "", "https", "application/json+openhim", "", (java.lang.Integer) 10, "hi!", "hi!", strMap13, (java.util.List<org.apache.commons.lang3.tuple.Pair<java.lang.String, java.lang.String>>) strPairList14, "application/json+openhim");
        request0.setHeaders(strMap13);
        java.util.Date date18 = request0.getTimestamp();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Oct 31 18:53:26 CDT 2023");
    }
apifortress-apif-faker, length: 210

    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.cityPrefix();
        java.lang.String str3 = f0.mobile();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Russian Federation" + "'", str1, "Russian Federation");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lake" + "'", str2, "Lake");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(851) 684-2176" + "'", str3, "(851) 684-2176");
    }

    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test022");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.validSSN();
        java.lang.String str6 = f0.password((int) (short) 0, (int) (short) 1, true, false);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "080218+6478" + "'", str1, "080218+6478");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.emailAddress();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cocos (Keeling) Islands" + "'", str1, "Cocos (Keeling) Islands");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Kiev" + "'", str2, "Europe/Kiev");
    }

    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test029");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.domainName();
        java.lang.String str7 = f0.fullAddress();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Aruba" + "'", str1, "Aruba");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Pacific/Pago_Pago" + "'", str2, "Pacific/Pago_Pago");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "powlowski.io" + "'", str6, "powlowski.io");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Suite 039 431 Hermann Shore, Jeffersonmouth, WV 56001-4935" + "'", str7, "Suite 039 431 Hermann Shore, Jeffersonmouth, WV 56001-4935");
    }

    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        com.github.javafaker.CreditCardType creditCardType7 = com.github.javafaker.CreditCardType.AMERICAN_EXPRESS;
        java.lang.Object obj8 = f0.collection((int) (byte) 1, (java.lang.Object) creditCardType7);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Bhutan" + "'", str1, "Bhutan");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "U" + "'", str5, "U");
        org.junit.Assert.assertTrue("'" + creditCardType7 + "' != '" + com.github.javafaker.CreditCardType.AMERICAN_EXPRESS + "'", creditCardType7.equals(com.github.javafaker.CreditCardType.AMERICAN_EXPRESS));
        org.junit.Assert.assertNull(obj8);
    }

    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.uuid();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = f0.password(7, (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1040a13f-216c-40a3-9a5f-5d8f0bed5ee5" + "'", str1, "1040a13f-216c-40a3-9a5f-5d8f0bed5ee5");
    }

    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        com.apifortress.apiffaker.F f3 = new com.apifortress.apiffaker.F();
        java.lang.String str4 = f3.country();
        java.lang.String str8 = f3.password(1, 1, true);
        java.lang.String str9 = f3.url();
        java.lang.Object obj10 = util1.fillModel((java.lang.Object) str9);
        org.junit.Assert.assertNotNull(f2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Heard Island and McDonald Islands" + "'", str4, "Heard Island and McDonald Islands");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "B" + "'", str8, "B");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "www.gordon-grady.com" + "'", str9, "www.gordon-grady.com");
// flaky:         org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "www.gordon-grady.com" + "'", obj10, "www.gordon-grady.com");
    }

    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test033");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.Util util4 = new com.apifortress.apiffaker.Util("");
        java.lang.Object obj5 = null;
        com.apifortress.apiffaker.F f6 = new com.apifortress.apiffaker.F();
        java.lang.String str7 = f6.country();
        java.lang.String str8 = f6.timeZone();
        int int11 = f6.integer((int) (short) 10, (int) (short) 10);
        util1.manipulateNode(0, (java.lang.Object) "", obj5, (java.lang.Object) int11, (int) (short) 100);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Armenia" + "'", str7, "Armenia");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Europe/Athens" + "'", str8, "Europe/Athens");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.productName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = f0.zipCode("Armenia");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: address.postcode_by_state.Armenia resulted in null expression");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sleek Wool Clock" + "'", str1, "Sleek Wool Clock");
    }

    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.coatLength();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "wire" + "'", str3, "wire");
    }

    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.uuid();
        double double2 = f0.decimal();
        java.lang.String str4 = f0.streetAddress((java.lang.Boolean) false);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "02eb02fa-bac5-4bf3-a733-288c9e25ef8e" + "'", str1, "02eb02fa-bac5-4bf3-a733-288c9e25ef8e");
// flaky:         org.junit.Assert.assertTrue("'" + double2 + "' != '" + 29.42d + "'", double2 == 29.42d);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "99994 Geri Rapids" + "'", str4, "99994 Geri Rapids");
    }

    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test042");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.productName();
        java.lang.String str2 = f0.zipCode();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gorgeous Leather Lamp" + "'", str1, "Gorgeous Leather Lamp");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "66623-5528" + "'", str2, "66623-5528");
    }

    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        java.lang.Object obj3 = util1.newNode("Republic of Korea");
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "[citySuffix_0, ${citySuffix}

    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        java.lang.String str5 = f0.password(6, (int) (short) 10);
        java.lang.String str6 = f0.country();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Tajikistan" + "'", str1, "Tajikistan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US Dollar" + "'", str2, "US Dollar");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ymtmuoajk" + "'", str5, "ymtmuoajk");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Niger" + "'", str6, "Niger");
    }

    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.gender();
        java.lang.String str4 = dog2.size();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "male" + "'", str3, "male");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "medium" + "'", str4, "medium");
    }

    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.ipV6Cidr();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = internet2.password(197, (int) ' ', false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "erdman" + "'", str3, "erdman");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4.189.77.101/29" + "'", str4, "4.189.77.101/29");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10fc:16c6:e3df:70f5:e46b:a8e1:f181:aeac/60" + "'", str5, "10fc:16c6:e3df:70f5:e46b:a8e1:f181:aeac/60");
    }

    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("590427-1763");
        java.lang.Object obj2 = util1.newNode();
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "[country_0, ${country}

    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test052");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.zipCode();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "34838-3458" + "'", str3, "34838-3458");
    }

    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.cityName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Tonga" + "'", str1, "Tonga");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Africa/Johannesburg" + "'", str2, "Africa/Johannesburg");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "New Chong" + "'", str3, "New Chong");
    }

    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        java.lang.String str3 = f0.countryCodeSL3d();
        int int5 = f0.integer((int) (short) 100);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Malaysia" + "'", str1, "Malaysia");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "New Zealand Dollar" + "'", str2, "New Zealand Dollar");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "irl" + "'", str3, "irl");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.currencyCode();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GEL" + "'", str1, "GEL");
    }

    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test057");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str6 = internet2.macAddress("czlfomrdtndepqo");
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ohara" + "'", str3, "ohara");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "45.195.71.142/4" + "'", str4, "45.195.71.142/4");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "czlfomrdtndepqo:09:02:f9:41:b3" + "'", str6, "czlfomrdtndepqo:09:02:f9:41:b3");
    }

    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test058");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Commerce commerce5 = faker1.commerce();
        java.lang.String str6 = commerce5.department();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(commerce5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Outdoors" + "'", str6, "Outdoors");
    }

    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        java.lang.String str4 = job3.field();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Legal" + "'", str4, "Legal");
    }

    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test062");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = address2.countyByZipCode("East");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: address.county_by_postcode.East resulted in null expression");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "East" + "'", str3, "East");
    }

    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        com.github.javafaker.Matz matz3 = faker1.matz();
        java.lang.String str4 = matz3.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNotNull(matz3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Smart people underestimate the ordinarity of ordinary people." + "'", str4, "Smart people underestimate the ordinarity of ordinary people.");
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str6 = company5.url();
        java.lang.String str7 = company5.suffix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(company5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.kozeystrosinandpurdy.com" + "'", str6, "www.kozeystrosinandpurdy.com");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "and Sons" + "'", str7, "and Sons");
    }

    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.buildingNumber();
        java.lang.String str5 = address2.fullAddress();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "West" + "'", str3, "West");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "03095" + "'", str4, "03095");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Apt. 554 03198 Gislason Light, Merryberg, OR 42123-7690" + "'", str5, "Apt. 554 03198 Gislason Light, Merryberg, OR 42123-7690");
    }

    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str5 = f0.password(7, 33, false, true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "!fevxyjc^trj" + "'", str5, "!fevxyjc^trj");
    }

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        java.lang.String str3 = weather2.temperatureFahrenheit();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = weather2.temperatureFahrenheit(197, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-5\260F" + "'", str3, "-5\260F");
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        com.github.javafaker.LeagueOfLegends leagueOfLegends7 = faker2.leagueOfLegends();
        com.github.javafaker.Address address8 = faker2.address();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "134-88-7201" + "'", str5, "134-88-7201");
        org.junit.Assert.assertNotNull(beer6);
        org.junit.Assert.assertNotNull(leagueOfLegends7);
        org.junit.Assert.assertNotNull(address8);
    }

    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.streetName();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "South" + "'", str3, "South");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Bobby Points" + "'", str4, "Bobby Points");
    }

    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
// flaky:         com.apifortress.apiffaker.Main.stressTest(100, (int) '#');
    }

    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = f0.password((int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Saint Barthelemy" + "'", str1, "Saint Barthelemy");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Krasnoyarsk" + "'", str2, "Asia/Krasnoyarsk");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
    }

    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        java.lang.String str4 = howIMetYourMother3.highFive();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Self Five" + "'", str4, "Self Five");
    }

    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        java.lang.String str5 = f0.password(6, (int) (short) 10);
        boolean boolean6 = f0.bool();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Greece" + "'", str1, "Greece");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Jordanian Dinar" + "'", str2, "Jordanian Dinar");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "uyhctdnd" + "'", str5, "uyhctdnd");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
// flaky:         com.apifortress.apiffaker.Main.stressTest((int) (byte) 1, (int) (byte) 10);
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str6 = company5.url();
        java.lang.String str7 = company5.url();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(company5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.blick-hamill.net" + "'", str6, "www.blick-hamill.net");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "www.grimesinc.org" + "'", str7, "www.grimesinc.org");
    }

    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test080");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        java.util.List<java.lang.String> strList6 = lorem3.words();
        java.util.List<java.lang.String> strList8 = lorem3.sentences(910);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'k' + "'", char5 == 'k');
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList8);
    }

    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.breed();
        java.lang.String str4 = dog2.name();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Appenzeller" + "'", str3, "Appenzeller");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Angel" + "'", str4, "Angel");
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Weather weather3 = faker2.weather();
        com.github.javafaker.Number number4 = faker2.number();
        com.github.javafaker.Commerce commerce5 = faker2.commerce();
        java.lang.String str6 = enIdNumber0.getValidSsn(faker2);
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(weather3);
        org.junit.Assert.assertNotNull(number4);
        org.junit.Assert.assertNotNull(commerce5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "606-55-1563" + "'", str6, "606-55-1563");
    }

    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Commerce commerce4 = faker1.commerce();
        com.github.javafaker.University university5 = faker1.university();
        java.lang.String str6 = university5.name();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(commerce4);
        org.junit.Assert.assertNotNull(university5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Southern Konopelski University" + "'", str6, "Southern Konopelski University");
    }

    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test086");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.productName();
        java.lang.String str2 = f0.firstName();
        int int4 = f0.integer((int) (short) 100);
        java.lang.String str5 = f0.firstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gorgeous Aluminum Car" + "'", str1, "Gorgeous Aluminum Car");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Cristobal" + "'", str2, "Cristobal");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lyle" + "'", str5, "Lyle");
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        java.lang.String str5 = faker1.regexify("Asia/Ulaanbaatar");
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        java.lang.String str7 = superhero6.power();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asia/Ulaanbaatar" + "'", str5, "Asia/Ulaanbaatar");
        org.junit.Assert.assertNotNull(superhero6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Wishing" + "'", str7, "Wishing");
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str6 = company5.suffix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(company5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Group" + "'", str6, "Group");
    }

    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        java.lang.String str3 = weather2.temperatureFahrenheit();
        java.lang.String str4 = weather2.temperatureFahrenheit();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "30\260F" + "'", str3, "30\260F");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "77\260F" + "'", str4, "77\260F");
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.buildingNumber();
        java.lang.String str5 = address2.country();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "North" + "'", str3, "North");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10135" + "'", str4, "10135");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Tajikistan" + "'", str5, "Tajikistan");
    }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.uuid();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = internet2.password(10, (int) (short) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "6de0f1e6-bbcf-432a-8b83-e32cb1b34764" + "'", str3, "6de0f1e6-bbcf-432a-8b83-e32cb1b34764");
    }

    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.invalidID();
        java.lang.String str8 = f0.state();
        int int11 = f0.integer(33, (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Uzbekistan" + "'", str1, "Uzbekistan");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "d" + "'", str5, "d");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.chieko-torp.io" + "'", str6, "www.chieko-torp.io");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "666-14-0036" + "'", str7, "666-14-0036");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Arkansas" + "'", str8, "Arkansas");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        int int4 = f0.integer(2);
        double double8 = f0.decimal((long) 32, (long) 2, (int) 'g');
        java.lang.String str9 = f0.companyName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Spain" + "'", str1, "Spain");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Afghani" + "'", str2, "Afghani");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 8.046665074975902d + "'", double8 == 8.046665074975902d);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Upton, Green and Hammes" + "'", str9, "Upton, Green and Hammes");
    }

    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Hacker hacker3 = faker1.hacker();
        java.lang.String str4 = hacker3.noun();
        java.lang.String str5 = hacker3.verb();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(hacker3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "driver" + "'", str4, "driver");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "navigate" + "'", str5, "navigate");
    }

    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char4 = lorem3.character();
        java.lang.String str5 = lorem3.paragraph();
        java.lang.String str6 = lorem3.paragraph();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char4 + "' != '" + '6' + "'", char4 == '6');
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Illo cum dolores. Quis reprehenderit rem est. Amet molestiae consequatur sunt numquam maiores. Sint cumque ullam distinctio praesentium est." + "'", str5, "Illo cum dolores. Quis reprehenderit rem est. Amet molestiae consequatur sunt numquam maiores. Sint cumque ullam distinctio praesentium est.");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Enim facere architecto iste repellat a. Soluta eum nobis doloribus doloremque et asperiores. Dolores esse quo consequuntur quo. Et voluptas dolores non. Architecto vitae quo quisquam." + "'", str6, "Enim facere architecto iste repellat a. Soluta eum nobis doloribus doloremque et asperiores. Dolores esse quo consequuntur quo. Et voluptas dolores non. Architecto vitae quo quisquam.");
    }

    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Commerce commerce4 = faker1.commerce();
        java.lang.String str5 = commerce4.promotionCode();
        java.lang.String str6 = commerce4.promotionCode();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(commerce4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SpectacularBenefit347124" + "'", str5, "SpectacularBenefit347124");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IncrediblePromotion106835" + "'", str6, "IncrediblePromotion106835");
    }

    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test100");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = lorem3.characters(910, (int) (short) 100, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'u' + "'", char5 == 'u');
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        java.lang.String str7 = lorem3.characters(false);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + '5' + "'", char5 == '5');
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9osgj82t0sd33evgyqvhndjqtuvth57x3l9fhaxwqwy19z5ghw6od4f89si1364zh8vyo6cuh1l8lw64i3ghio40cem9d7peuuuir26r54e9tomwtt2c807cqaxcq3zkrcj624dkevtcjbr41piitlytqqlve4abo3cvewxvzsinrnw40nt61uhregltmnhpxtu4ug7kq6hdj6rcsfg5i8r286p2o39spkqlimrtddfr9hoz9idiu3p9prkrudp" + "'", str7, "9osgj82t0sd33evgyqvhndjqtuvth57x3l9fhaxwqwy19z5ghw6od4f89si1364zh8vyo6cuh1l8lw64i3ghio40cem9d7peuuuir26r54e9tomwtt2c807cqaxcq3zkrcj624dkevtcjbr41piitlytqqlve4abo3cvewxvzsinrnw40nt61uhregltmnhpxtu4ug7kq6hdj6rcsfg5i8r286p2o39spkqlimrtddfr9hoz9idiu3p9prkrudp");
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.invalidSSN();
        f0.setLocale("z");
        java.lang.String str4 = f0.profession();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "738188+0741" + "'", str1, "738188+0741");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bookkeeper" + "'", str4, "bookkeeper");
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.countryCode();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Port" + "'", str3, "Port");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MD" + "'", str4, "MD");
    }

    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.invalidID();
        com.apifortress.apiffaker.F f9 = new com.apifortress.apiffaker.F();
        java.lang.String str10 = f9.country();
        java.lang.Object obj11 = f0.collection(6, (java.lang.Object) f9);
        java.lang.String str12 = f9.validSSN();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ukraine" + "'", str1, "Ukraine");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "H" + "'", str5, "H");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.gerald-balistreri.info" + "'", str6, "www.gerald-balistreri.info");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "910-47-6363" + "'", str7, "910-47-6363");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Norfolk Island" + "'", str10, "Norfolk Island");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "090803-7427" + "'", str12, "090803-7427");
    }

    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = lorem3.characters(32, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + '5' + "'", char5 == '5');
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
// flaky:         com.apifortress.apiffaker.Main.stressTest((int) (byte) 0, (int) 'g');
    }

    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.timeZone();
        java.lang.String str4 = address2.streetName();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Asia/Magadan" + "'", str3, "Asia/Magadan");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deeann Fords" + "'", str4, "Deeann Fords");
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.latitude();
        java.lang.String str5 = address2.lastName();
        java.lang.String str6 = address2.streetSuffix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "South" + "'", str3, "South");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-17.471499" + "'", str4, "-17.471499");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Klein" + "'", str5, "Klein");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Course" + "'", str6, "Course");
    }

    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.uuid();
        double double2 = f0.decimal();
        java.lang.String str3 = f0.suffix();
        java.lang.String str4 = f0.countryCodeSL();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "e07c4b0c-9c7f-4733-9747-af6f1950ac13" + "'", str1, "e07c4b0c-9c7f-4733-9747-af6f1950ac13");
// flaky:         org.junit.Assert.assertTrue("'" + double2 + "' != '" + 59.87d + "'", double2 == 59.87d);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Inc" + "'", str3, "Inc");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hu" + "'", str4, "hu");
    }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        boolean boolean3 = f2.getTemplateStyle();
        f2.setTemplateStyle(true);
        java.lang.String str6 = f2.productName();
        org.junit.Assert.assertNotNull(f2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ergonomic Plastic Lamp" + "'", str6, "Ergonomic Plastic Lamp");
    }

    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.sound();
        java.lang.String str4 = dog2.coatLength();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "bow wow" + "'", str3, "bow wow");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "curly" + "'", str4, "curly");
    }

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.timeZone();
        java.lang.String str4 = address2.fullAddress();
        java.lang.String str5 = address2.citySuffix();
        java.lang.String str6 = address2.stateAbbr();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "America/Caracas" + "'", str3, "America/Caracas");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Apt. 431 750 Deshawn Lake, New Reneaberg, GA 62754" + "'", str4, "Apt. 431 750 Deshawn Lake, New Reneaberg, GA 62754");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "view" + "'", str5, "view");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UT" + "'", str6, "UT");
    }

    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.uuid();
        double double2 = f0.decimal();
        java.lang.String str3 = f0.suffix();
        java.lang.String str4 = f0.fullAddress();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "8cee9ef2-46f5-4354-90ab-78e483c79c7b" + "'", str1, "8cee9ef2-46f5-4354-90ab-78e483c79c7b");
// flaky:         org.junit.Assert.assertTrue("'" + double2 + "' != '" + 58.65d + "'", double2 == 58.65d);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLC" + "'", str3, "LLC");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "972 Hegmann Cliff, Brianfort, AL 96813-3768" + "'", str4, "972 Hegmann Cliff, Brianfort, AL 96813-3768");
    }

    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.userAgentAny();
        java.lang.String str6 = internet2.url();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "langosh" + "'", str3, "langosh");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "216.252.27.122/31" + "'", str4, "216.252.27.122/31");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36" + "'", str5, "Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.chet-rath.co" + "'", str6, "www.chet-rath.co");
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        java.lang.String str4 = number3.digit();
        double double8 = number3.randomDouble(80, 1698789516108L, 0L);
        int int9 = number3.randomDigit();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "5" + "'", str4, "5");
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.2742535675067554E12d + "'", double8 == 1.2742535675067554E12d);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.buildingNumber();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = address2.countyByZipCode("738188+0741");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: address.county_by_postcode.738188+0741 resulted in null expression");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Port" + "'", str3, "Port");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "117" + "'", str4, "117");
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.domainName();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "rowe" + "'", str3, "rowe");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kuhic.io" + "'", str4, "kuhic.io");
    }

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        java.lang.String str6 = f0.price();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Djibouti" + "'", str1, "Djibouti");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Berlin" + "'", str2, "Europe/Berlin");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "39.48" + "'", str3, "39.48");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26 + "'", int5 == 26);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "97.87" + "'", str6, "97.87");
    }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.uuid();
        java.lang.String str7 = f0.domainSuffix();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Venezuela" + "'", str1, "Venezuela");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "w" + "'", str5, "w");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7d5f3866-3e78-4f53-b2d4-1056cc7c4b25" + "'", str6, "7d5f3866-3e78-4f53-b2d4-1056cc7c4b25");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "co" + "'", str7, "co");
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        java.lang.String str4 = number3.digit();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = number3.randomNumber(26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
    }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.service.RandomService randomService6 = faker2.random();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "826-44-1955" + "'", str5, "826-44-1955");
        org.junit.Assert.assertNotNull(randomService6);
    }

    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        java.lang.String str6 = f0.password();
        double double10 = f0.decimal((long) 4, (long) (byte) 1, 75);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cameroon" + "'", str1, "Cameroon");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Pacific/Fiji" + "'", str2, "Pacific/Fiji");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "40.80" + "'", str3, "40.80");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vvgnnehvy" + "'", str6, "vvgnnehvy");
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.6741471041084708d + "'", double10 == 1.6741471041084708d);
    }

    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Options options5 = faker1.options();
        java.util.Random random6 = null;
        com.github.javafaker.Faker faker7 = com.github.javafaker.Faker.instance(random6);
        com.github.javafaker.Dog dog8 = faker7.dog();
        com.github.javafaker.Hacker hacker9 = faker7.hacker();
        java.lang.String str10 = hacker9.noun();
        java.util.Random random11 = null;
        com.github.javafaker.Faker faker12 = com.github.javafaker.Faker.instance(random11);
        com.github.javafaker.Dog dog13 = faker12.dog();
        com.github.javafaker.Hacker hacker14 = faker12.hacker();
        java.lang.String str15 = hacker14.noun();
        java.lang.String str16 = hacker14.verb();
        java.util.Random random17 = null;
        com.github.javafaker.Faker faker18 = com.github.javafaker.Faker.instance(random17);
        com.github.javafaker.Dog dog19 = faker18.dog();
        com.github.javafaker.Hacker hacker20 = faker18.hacker();
        java.util.Random random21 = null;
        com.github.javafaker.Faker faker22 = com.github.javafaker.Faker.instance(random21);
        com.github.javafaker.Dog dog23 = faker22.dog();
        com.github.javafaker.Hacker hacker24 = faker22.hacker();
        java.util.Random random25 = null;
        com.github.javafaker.Faker faker26 = com.github.javafaker.Faker.instance(random25);
        com.github.javafaker.Dog dog27 = faker26.dog();
        com.github.javafaker.Hacker hacker28 = faker26.hacker();
        java.lang.String str29 = hacker28.noun();
        java.lang.String str30 = hacker28.verb();
        java.util.Random random31 = null;
        com.github.javafaker.Faker faker32 = com.github.javafaker.Faker.instance(random31);
        com.github.javafaker.Dog dog33 = faker32.dog();
        com.github.javafaker.Hacker hacker34 = faker32.hacker();
        java.lang.String str35 = hacker34.noun();
        java.lang.String str36 = hacker34.verb();
        com.github.javafaker.Hacker[] hackerArray37 = new com.github.javafaker.Hacker[] { hacker9, hacker14, hacker20, hacker24, hacker28, hacker34 };
        com.github.javafaker.Hacker hacker38 = options5.nextElement(hackerArray37);
        java.lang.String str39 = hacker38.adjective();
        java.lang.String str40 = hacker38.abbreviation();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(faker7);
        org.junit.Assert.assertNotNull(dog8);
        org.junit.Assert.assertNotNull(hacker9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "card" + "'", str10, "card");
        org.junit.Assert.assertNotNull(faker12);
        org.junit.Assert.assertNotNull(dog13);
        org.junit.Assert.assertNotNull(hacker14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "program" + "'", str15, "program");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "parse" + "'", str16, "parse");
        org.junit.Assert.assertNotNull(faker18);
        org.junit.Assert.assertNotNull(dog19);
        org.junit.Assert.assertNotNull(hacker20);
        org.junit.Assert.assertNotNull(faker22);
        org.junit.Assert.assertNotNull(dog23);
        org.junit.Assert.assertNotNull(hacker24);
        org.junit.Assert.assertNotNull(faker26);
        org.junit.Assert.assertNotNull(dog27);
        org.junit.Assert.assertNotNull(hacker28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "matrix" + "'", str29, "matrix");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "connect" + "'", str30, "connect");
        org.junit.Assert.assertNotNull(faker32);
        org.junit.Assert.assertNotNull(dog33);
        org.junit.Assert.assertNotNull(hacker34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "capacitor" + "'", str35, "capacitor");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index" + "'", str36, "index");
        org.junit.Assert.assertNotNull(hackerArray37);
        org.junit.Assert.assertNotNull(hacker38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "online" + "'", str39, "online");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "COM" + "'", str40, "COM");
    }

    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.invalidID();
        java.lang.String str8 = f0.countryCodeSL3d();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Samoa" + "'", str1, "Samoa");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "P" + "'", str5, "P");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.dannie-ledner.com" + "'", str6, "www.dannie-ledner.com");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "903-52-5861" + "'", str7, "903-52-5861");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "stp" + "'", str8, "stp");
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.latitude();
        java.lang.String str5 = address2.lastName();
        java.lang.String str6 = address2.city();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "New" + "'", str3, "New");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-70.574630" + "'", str4, "-70.574630");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ullrich" + "'", str5, "Ullrich");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "East Dennis" + "'", str6, "East Dennis");
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.latitude();
        java.lang.String str5 = address2.countryCode();
        java.lang.String str6 = address2.timeZone();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "South" + "'", str3, "South");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-76.218129" + "'", str4, "-76.218129");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MO" + "'", str5, "MO");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Pacific/Auckland" + "'", str6, "Pacific/Auckland");
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Hacker hacker3 = faker1.hacker();
        com.github.javafaker.Avatar avatar4 = faker1.avatar();
        java.lang.String str6 = faker1.bothify("390714-7882");
        com.github.javafaker.Cat cat7 = faker1.cat();
        java.lang.String str8 = cat7.registry();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(hacker3);
        org.junit.Assert.assertNotNull(avatar4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "390714-7882" + "'", str6, "390714-7882");
        org.junit.Assert.assertNotNull(cat7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Cat Aficionado Association" + "'", str8, "Cat Aficionado Association");
    }

    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        int int3 = randomService1.nextInt((int) 'g');
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 27 + "'", int3 == 27);
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        com.github.javafaker.Beer beer7 = faker2.beer();
        com.github.javafaker.DateAndTime dateAndTime8 = faker2.date();
        java.util.concurrent.TimeUnit timeUnit10 = null;
        java.util.Date date11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = dateAndTime8.future(0, timeUnit10, date11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "642-75-6515" + "'", str5, "642-75-6515");
        org.junit.Assert.assertNotNull(beer6);
        org.junit.Assert.assertNotNull(beer7);
        org.junit.Assert.assertNotNull(dateAndTime8);
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.Friends friends3 = faker1.friends();
        com.github.javafaker.Cat cat4 = faker1.cat();
        com.github.javafaker.Superhero superhero5 = faker1.superhero();
        java.lang.String str6 = superhero5.prefix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(friends3);
        org.junit.Assert.assertNotNull(cat4);
        org.junit.Assert.assertNotNull(superhero5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Illustrious" + "'", str6, "Illustrious");
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.uuid();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mertz" + "'", str3, "mertz");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "43d9cf67-1ba4-424e-88d3-ca74177537a8" + "'", str4, "43d9cf67-1ba4-424e-88d3-ca74177537a8");
    }

    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test141");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.invalidID();
        com.apifortress.apiffaker.F f9 = new com.apifortress.apiffaker.F();
        java.lang.String str10 = f9.country();
        java.lang.Object obj11 = f0.collection(6, (java.lang.Object) f9);
        java.lang.String str13 = f9.streetAddress((java.lang.Boolean) false);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Haiti" + "'", str1, "Haiti");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "V" + "'", str5, "V");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.berry-bechtelar.com" + "'", str6, "www.berry-bechtelar.com");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "985-64-4848" + "'", str7, "985-64-4848");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Netherlands Antilles" + "'", str10, "Netherlands Antilles");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "05307 Romaguera Field" + "'", str13, "05307 Romaguera Field");
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Robin robin4 = faker1.robin();
        java.lang.String str5 = robin4.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(robin4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Holy Alter Ego" + "'", str5, "Holy Alter Ego");
    }

    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Commerce commerce5 = faker1.commerce();
        java.lang.String str7 = commerce5.promotionCode(33);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(commerce5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MarvelousBounty708598573503101587228626409443818" + "'", str7, "MarvelousBounty708598573503101587228626409443818");
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        com.github.javafaker.GameOfThrones gameOfThrones4 = faker1.gameOfThrones();
        com.github.javafaker.Lebowski lebowski5 = new com.github.javafaker.Lebowski(faker1);
        com.github.javafaker.PhoneNumber phoneNumber6 = faker1.phoneNumber();
        java.lang.String str7 = phoneNumber6.phoneNumber();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
        org.junit.Assert.assertNotNull(gameOfThrones4);
        org.junit.Assert.assertNotNull(phoneNumber6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "372.909.9186 x4018" + "'", str7, "372.909.9186 x4018");
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        com.github.javafaker.LeagueOfLegends leagueOfLegends7 = faker2.leagueOfLegends();
        com.github.javafaker.Robin robin8 = faker2.robin();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "524-77-9670" + "'", str5, "524-77-9670");
        org.junit.Assert.assertNotNull(beer6);
        org.junit.Assert.assertNotNull(leagueOfLegends7);
        org.junit.Assert.assertNotNull(robin8);
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Shakespeare shakespeare4 = faker1.shakespeare();
        java.lang.String str5 = shakespeare4.romeoAndJulietQuote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(shakespeare4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Tempt not a desperate man." + "'", str5, "Tempt not a desperate man.");
    }

    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str6 = company5.url();
        java.lang.String str7 = company5.industry();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(company5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.gislason-schowalter.biz" + "'", str6, "www.gislason-schowalter.biz");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Program Development" + "'", str7, "Program Development");
    }

    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.uuid();
        java.lang.String str4 = f0.password(28, (int) '4');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "d2f19304-d4d4-448b-ae2a-21b5ddb3bee1" + "'", str1, "d2f19304-d4d4-448b-ae2a-21b5ddb3bee1");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mfhjtbxpjxgeydxbjsxhpxjftpycnsuxdmn" + "'", str4, "mfhjtbxpjxgeydxbjsxhpxjftpycnsuxdmn");
    }

    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        int int6 = f0.streetAddressNumber();
        java.lang.String str7 = f0.streetSuffix();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Turks and Caicos Islands" + "'", str1, "Turks and Caicos Islands");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Bratislava" + "'", str2, "Europe/Bratislava");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 564 + "'", int6 == 564);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Station" + "'", str7, "Station");
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.fullName();
        java.lang.String str7 = f0.domainName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Samoa" + "'", str1, "Samoa");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Bucharest" + "'", str2, "Europe/Bucharest");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dr. Doyle Little" + "'", str6, "Dr. Doyle Little");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "schaden.org" + "'", str7, "schaden.org");
    }

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        java.lang.String str4 = ancient3.primordial();
        java.lang.String str5 = ancient3.god();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tartarus" + "'", str4, "Tartarus");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hades" + "'", str5, "Hades");
    }

    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.streetAddress();
        java.lang.String str4 = address2.countryCode();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "20104 Dooley Union" + "'", str3, "20104 Dooley Union");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GF" + "'", str4, "GF");
    }

    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.domainSuffix();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Bouvet Island (Bouvetoya)" + "'", str1, "Bouvet Island (Bouvetoya)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "America/Monterrey" + "'", str2, "America/Monterrey");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org" + "'", str6, "org");
    }

    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        java.lang.String str3 = f0.suffix();
        java.lang.String str4 = f0.invalidSSN();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Solomon Islands" + "'", str1, "Solomon Islands");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Guyana Dollar" + "'", str2, "Guyana Dollar");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "and Sons" + "'", str3, "and Sons");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "826000+2213" + "'", str4, "826000+2213");
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.ipV6Cidr();
        java.lang.String str10 = internet2.image((java.lang.Integer) 100, (java.lang.Integer) 2, (java.lang.Boolean) true, "Bhutan");
        java.lang.String str11 = internet2.ipV6Address();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jast" + "'", str3, "jast");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "191.148.24.66/11" + "'", str4, "191.148.24.66/11");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e4ec:7d93:01d5:cb8b:00ff:dca7:950a:0f5c/118" + "'", str5, "e4ec:7d93:01d5:cb8b:00ff:dca7:950a:0f5c/118");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://lorempixel.com/g/100/2/nature/Bhutan" + "'", str10, "http://lorempixel.com/g/100/2/nature/Bhutan");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "f631:75b1:3bcd:e847:9bfa:8937:d361:dc03" + "'", str11, "f631:75b1:3bcd:e847:9bfa:8937:d361:dc03");
    }

    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test159");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        java.lang.String str5 = faker1.regexify("Asia/Ulaanbaatar");
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        java.lang.String str8 = demographic7.race();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asia/Ulaanbaatar" + "'", str5, "Asia/Ulaanbaatar");
        org.junit.Assert.assertNotNull(superhero6);
        org.junit.Assert.assertNotNull(demographic7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "American Indian or Alaska Native" + "'", str8, "American Indian or Alaska Native");
    }

    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        java.lang.String str2 = code1.ean8();
        java.lang.String str3 = code1.asin();
        org.junit.Assert.assertNotNull(code1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "79987943" + "'", str2, "79987943");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B000I4W7S6" + "'", str3, "B000I4W7S6");
    }

    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.size();
        java.lang.String str4 = dog2.gender();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "small" + "'", str3, "small");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "female" + "'", str4, "female");
    }

    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        boolean boolean3 = f2.getTemplateStyle();
        int[] intArray7 = f2.integerList((int) (short) 100, (int) (byte) -1, (int) (short) 0);
        java.lang.String str8 = f2.buildingNumber();
        org.junit.Assert.assertNotNull(f2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "4896" + "'", str8, "4896");
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.invalidSSN();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = f0.password(910, 75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "870073-1654" + "'", str1, "870073-1654");
    }

    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        char char7 = lorem3.character(false);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'g' + "'", char5 == 'g');
// flaky:         org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'u' + "'", char7 == 'u');
    }

    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        int int4 = f0.integer(2);
        java.lang.String str5 = f0.suffix();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Tajikistan" + "'", str1, "Tajikistan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CFA Franc BEAC" + "'", str2, "CFA Franc BEAC");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 30 + "'", int4 == 30);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "and Sons" + "'", str5, "and Sons");
    }

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Hacker hacker3 = faker1.hacker();
        com.github.javafaker.Avatar avatar4 = faker1.avatar();
        com.github.javafaker.Matz matz5 = faker1.matz();
        java.lang.String str6 = matz5.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(hacker3);
        org.junit.Assert.assertNotNull(avatar4);
        org.junit.Assert.assertNotNull(matz5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Most of the tasks we do are for humans. For example, a tax calculation is counting numbers so the government can pull money out from my wallet, but government consists of humans." + "'", str6, "Most of the tasks we do are for humans. For example, a tax calculation is counting numbers so the government can pull money out from my wallet, but government consists of humans.");
    }

    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Commerce commerce4 = faker1.commerce();
        java.lang.String str5 = commerce4.department();
        java.lang.String str6 = commerce4.material();
        java.lang.String str7 = commerce4.price();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(commerce4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Clothing, Electronics & Kids" + "'", str5, "Clothing, Electronics & Kids");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Plastic" + "'", str6, "Plastic");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "37.43" + "'", str7, "37.43");
    }

    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = internet2.password(0, (int) (byte) 10, false, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kerluke" + "'", str3, "kerluke");
    }

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        java.util.Random random6 = null;
        com.github.javafaker.Faker faker7 = com.github.javafaker.Faker.instance(random6);
        com.github.javafaker.Dog dog8 = faker7.dog();
        com.github.javafaker.HowIMetYourMother howIMetYourMother9 = faker7.howIMetYourMother();
        java.lang.String str10 = enIdNumber0.getValidSsn(faker7);
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "345-13-0298" + "'", str5, "345-13-0298");
        org.junit.Assert.assertNotNull(faker7);
        org.junit.Assert.assertNotNull(dog8);
        org.junit.Assert.assertNotNull(howIMetYourMother9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "379-38-6705" + "'", str10, "379-38-6705");
    }

    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        int int6 = f0.streetAddressNumber();
        java.lang.String str7 = f0.domainName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "El Salvador" + "'", str1, "El Salvador");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Ljubljana" + "'", str2, "Europe/Ljubljana");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 460 + "'", int6 == 460);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "batz.name" + "'", str7, "batz.name");
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Company company5 = faker1.company();
        com.github.javafaker.Company company6 = faker1.company();
        java.lang.String str7 = company6.industry();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(company5);
        org.junit.Assert.assertNotNull(company6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Political Organization" + "'", str7, "Political Organization");
    }

    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.ipV6Cidr();
        java.lang.String str6 = internet2.domainName();
        java.lang.String str8 = internet2.macAddress("");
        java.lang.String str9 = internet2.ipV6Cidr();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "carroll" + "'", str3, "carroll");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "85.173.10.248/25" + "'", str4, "85.173.10.248/25");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "5e64:9671:5684:8467:564c:a4a0:a112:c554/95" + "'", str5, "5e64:9671:5684:8467:564c:a4a0:a112:c554/95");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mohr.io" + "'", str6, "mohr.io");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99:bb:42:2a:46:7a" + "'", str8, "99:bb:42:2a:46:7a");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2c5d:0234:5fa1:803e:8874:6031:6722:3df4/106" + "'", str9, "2c5d:0234:5fa1:803e:8874:6031:6722:3df4/106");
    }

    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test174");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Commerce commerce4 = faker1.commerce();
        java.lang.String str5 = commerce4.price();
        java.lang.String str6 = commerce4.department();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(commerce4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "27.52" + "'", str5, "27.52");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jewelry" + "'", str6, "Jewelry");
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        int int3 = f2.integer();
        org.junit.Assert.assertNotNull(f2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.Friends friends3 = faker1.friends();
        com.github.javafaker.Company company4 = faker1.company();
        java.lang.String str5 = company4.industry();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(friends3);
        org.junit.Assert.assertNotNull(company4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Political Organization" + "'", str5, "Political Organization");
    }

    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        java.lang.String str6 = f0.password();
        java.lang.String str7 = f0.domainSuffix();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Syrian Arab Republic" + "'", str1, "Syrian Arab Republic");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Tehran" + "'", str2, "Asia/Tehran");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "86.76" + "'", str3, "86.76");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hwujrrrkotvo" + "'", str6, "hwujrrrkotvo");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "biz" + "'", str7, "biz");
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        com.github.javafaker.Weather weather3 = faker1.weather();
        java.lang.String str4 = weather3.temperatureFahrenheit();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNotNull(weather3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "84\260F" + "'", str4, "84\260F");
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.safeEmailAddress();
        com.github.javafaker.Internet.UserAgent userAgent4 = com.github.javafaker.Internet.UserAgent.INTERNET_EXPLORER;
        java.lang.String str5 = internet2.userAgent(userAgent4);
        java.lang.String str6 = internet2.domainWord();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertTrue("'" + userAgent4 + "' != '" + com.github.javafaker.Internet.UserAgent.INTERNET_EXPLORER + "'", userAgent4.equals(com.github.javafaker.Internet.UserAgent.INTERNET_EXPLORER));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko" + "'", str5, "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dickens" + "'", str6, "dickens");
    }

    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.cityPrefix();
        java.lang.String str3 = f0.invalidSSN();
        java.lang.String str4 = f0.streetName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Virgin Islands, British" + "'", str1, "Virgin Islands, British");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Port" + "'", str2, "Port");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "117649-9670" + "'", str3, "117649-9670");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ortiz Glens" + "'", str4, "Ortiz Glens");
    }

    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("590427-1763");
        java.lang.Object obj3 = util1.newNode("New Zealand Dollar");
        com.apifortress.apiffaker.F f4 = util1.getFaker();
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "[country_0, ${country}

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Stock stock5 = faker1.stock();
        java.lang.String str6 = stock5.nsdqSymbol();
        java.lang.String str7 = stock5.nsdqSymbol();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(stock5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "EDUC" + "'", str6, "EDUC");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "IVFVC" + "'", str7, "IVFVC");
    }

    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Overwatch overwatch4 = faker1.overwatch();
        java.lang.String str5 = overwatch4.quote();
        java.lang.String str6 = overwatch4.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(overwatch4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "G\351ill do mo thoil!" + "'", str5, "G\351ill do mo thoil!");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Activating Self Destruct Sequence." + "'", str6, "Activating Self Destruct Sequence.");
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.uuid();
        java.lang.String str4 = internet2.url();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "d2a1dca1-accc-4b82-ae79-964096f78d4b" + "'", str3, "d2a1dca1-accc-4b82-ae79-964096f78d4b");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "www.daysi-hagenes.co" + "'", str4, "www.daysi-hagenes.co");
    }

    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = address2.zipCodeByState("379-38-6705");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: address.postcode_by_state.379-38-6705 resulted in null expression");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "North" + "'", str3, "North");
    }

    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Options options5 = faker1.options();
        java.util.Random random6 = null;
        com.github.javafaker.Faker faker7 = com.github.javafaker.Faker.instance(random6);
        com.github.javafaker.Dog dog8 = faker7.dog();
        com.github.javafaker.Hacker hacker9 = faker7.hacker();
        java.lang.String str10 = hacker9.noun();
        java.util.Random random11 = null;
        com.github.javafaker.Faker faker12 = com.github.javafaker.Faker.instance(random11);
        com.github.javafaker.Dog dog13 = faker12.dog();
        com.github.javafaker.Hacker hacker14 = faker12.hacker();
        java.lang.String str15 = hacker14.noun();
        java.lang.String str16 = hacker14.verb();
        java.util.Random random17 = null;
        com.github.javafaker.Faker faker18 = com.github.javafaker.Faker.instance(random17);
        com.github.javafaker.Dog dog19 = faker18.dog();
        com.github.javafaker.Hacker hacker20 = faker18.hacker();
        java.util.Random random21 = null;
        com.github.javafaker.Faker faker22 = com.github.javafaker.Faker.instance(random21);
        com.github.javafaker.Dog dog23 = faker22.dog();
        com.github.javafaker.Hacker hacker24 = faker22.hacker();
        java.util.Random random25 = null;
        com.github.javafaker.Faker faker26 = com.github.javafaker.Faker.instance(random25);
        com.github.javafaker.Dog dog27 = faker26.dog();
        com.github.javafaker.Hacker hacker28 = faker26.hacker();
        java.lang.String str29 = hacker28.noun();
        java.lang.String str30 = hacker28.verb();
        java.util.Random random31 = null;
        com.github.javafaker.Faker faker32 = com.github.javafaker.Faker.instance(random31);
        com.github.javafaker.Dog dog33 = faker32.dog();
        com.github.javafaker.Hacker hacker34 = faker32.hacker();
        java.lang.String str35 = hacker34.noun();
        java.lang.String str36 = hacker34.verb();
        com.github.javafaker.Hacker[] hackerArray37 = new com.github.javafaker.Hacker[] { hacker9, hacker14, hacker20, hacker24, hacker28, hacker34 };
        com.github.javafaker.Hacker hacker38 = options5.nextElement(hackerArray37);
        java.lang.String str39 = hacker38.adjective();
        java.lang.String str40 = hacker38.noun();
        java.lang.String str41 = hacker38.verb();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(faker7);
        org.junit.Assert.assertNotNull(dog8);
        org.junit.Assert.assertNotNull(hacker9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "program" + "'", str10, "program");
        org.junit.Assert.assertNotNull(faker12);
        org.junit.Assert.assertNotNull(dog13);
        org.junit.Assert.assertNotNull(hacker14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "port" + "'", str15, "port");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "parse" + "'", str16, "parse");
        org.junit.Assert.assertNotNull(faker18);
        org.junit.Assert.assertNotNull(dog19);
        org.junit.Assert.assertNotNull(hacker20);
        org.junit.Assert.assertNotNull(faker22);
        org.junit.Assert.assertNotNull(dog23);
        org.junit.Assert.assertNotNull(hacker24);
        org.junit.Assert.assertNotNull(faker26);
        org.junit.Assert.assertNotNull(dog27);
        org.junit.Assert.assertNotNull(hacker28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "driver" + "'", str29, "driver");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "parse" + "'", str30, "parse");
        org.junit.Assert.assertNotNull(faker32);
        org.junit.Assert.assertNotNull(dog33);
        org.junit.Assert.assertNotNull(hacker34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hard drive" + "'", str35, "hard drive");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "generate" + "'", str36, "generate");
        org.junit.Assert.assertNotNull(hackerArray37);
        org.junit.Assert.assertNotNull(hacker38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "neural" + "'", str39, "neural");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "application" + "'", str40, "application");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "copy" + "'", str41, "copy");
    }

    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        java.lang.String str6 = f0.domainName();
        java.lang.String str7 = f0.secondaryAddress();
        java.lang.String str8 = f0.currencyCode();
        java.lang.String str9 = f0.countryCode();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Latvia" + "'", str1, "Latvia");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/London" + "'", str2, "Europe/London");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "79.75" + "'", str3, "79.75");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 91 + "'", int5 == 91);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "rippin.io" + "'", str6, "rippin.io");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Suite 581" + "'", str7, "Suite 581");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AUD" + "'", str8, "AUD");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "SD" + "'", str9, "SD");
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.domainName();
        java.lang.String str7 = f0.url();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Congo" + "'", str1, "Congo");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Kolkata" + "'", str2, "Asia/Kolkata");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "lowe.biz" + "'", str6, "lowe.biz");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "www.maybell-hammes.info" + "'", str7, "www.maybell-hammes.info");
    }

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.stateAbbr();
        java.lang.String str5 = address2.citySuffix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Port" + "'", str3, "Port");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NV" + "'", str4, "NV");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mouth" + "'", str5, "mouth");
    }

    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test191");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Internet internet1 = faker0.internet();
        java.lang.String str2 = internet1.publicIpV4Address();
        org.junit.Assert.assertNotNull(internet1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "138.193.96.181" + "'", str2, "138.193.96.181");
    }

    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        java.lang.String str7 = beer6.malt();
        java.lang.String str8 = beer6.name();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "753-93-7800" + "'", str5, "753-93-7800");
        org.junit.Assert.assertNotNull(beer6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Pale" + "'", str7, "Pale");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sierra Nevada Celebration Ale" + "'", str8, "Sierra Nevada Celebration Ale");
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        double double7 = f0.decimal((long) 'k');
        java.lang.String str8 = f0.lastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Taiwan" + "'", str1, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Moscow" + "'", str2, "Europe/Moscow");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9.00" + "'", str3, "9.00");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 90 + "'", int5 == 90);
// flaky:         org.junit.Assert.assertTrue("'" + double7 + "' != '" + 103.12d + "'", double7 == 103.12d);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ondricka" + "'", str8, "Ondricka");
    }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        java.lang.String str4 = howIMetYourMother3.catchPhrase();
        java.lang.String str5 = howIMetYourMother3.character();
        java.lang.String str6 = howIMetYourMother3.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Legendary" + "'", str4, "Legendary");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Virginia Mosby" + "'", str5, "Virginia Mosby");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u2019re going to get older whether we like it or not, so the only question is whether we get on with our lives, or desperately cling to the past." + "'", str6, "\u2019re going to get older whether we like it or not, so the only question is whether we get on with our lives, or desperately cling to the past.");
    }

    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Shakespeare shakespeare4 = faker1.shakespeare();
        java.lang.String str5 = shakespeare4.kingRichardIIIQuote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(shakespeare4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Conscience is but a word that cowards use, devised at first to keep the strong in awe." + "'", str5, "Conscience is but a word that cowards use, devised at first to keep the strong in awe.");
    }

    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test199");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.validSSN();
        f0.setTemplateStyle(false);
        java.lang.String str4 = f0.streetAddress();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "810421-3072" + "'", str1, "810421-3072");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "8053 Baumbach Branch" + "'", str4, "8053 Baumbach Branch");
    }

    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = lorem3.characters((int) 'r', 18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'e' + "'", char5 == 'e');
    }

    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.currency();
        java.lang.String str3 = f0.countryCodeSL3d();
        int[] intArray5 = f0.integerList((int) (byte) 1);
        java.lang.String str6 = f0.password();
        java.lang.String str7 = f0.password();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Dominican Republic" + "'", str1, "Dominican Republic");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Aruban Florin" + "'", str2, "Aruban Florin");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "nam" + "'", str3, "nam");
        org.junit.Assert.assertNotNull(intArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[6, 51, 55, 51, 9, 75, 20, 18, 49, 28]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ofekxxmazsiwj" + "'", str6, "ofekxxmazsiwj");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mmmqpstn" + "'", str7, "mmmqpstn");
    }

    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Options options5 = faker1.options();
        java.util.Random random6 = null;
        com.github.javafaker.Faker faker7 = com.github.javafaker.Faker.instance(random6);
        com.github.javafaker.Dog dog8 = faker7.dog();
        com.github.javafaker.Hacker hacker9 = faker7.hacker();
        java.lang.String str10 = hacker9.noun();
        java.util.Random random11 = null;
        com.github.javafaker.Faker faker12 = com.github.javafaker.Faker.instance(random11);
        com.github.javafaker.Dog dog13 = faker12.dog();
        com.github.javafaker.Hacker hacker14 = faker12.hacker();
        java.lang.String str15 = hacker14.noun();
        java.lang.String str16 = hacker14.verb();
        java.util.Random random17 = null;
        com.github.javafaker.Faker faker18 = com.github.javafaker.Faker.instance(random17);
        com.github.javafaker.Dog dog19 = faker18.dog();
        com.github.javafaker.Hacker hacker20 = faker18.hacker();
        java.util.Random random21 = null;
        com.github.javafaker.Faker faker22 = com.github.javafaker.Faker.instance(random21);
        com.github.javafaker.Dog dog23 = faker22.dog();
        com.github.javafaker.Hacker hacker24 = faker22.hacker();
        java.util.Random random25 = null;
        com.github.javafaker.Faker faker26 = com.github.javafaker.Faker.instance(random25);
        com.github.javafaker.Dog dog27 = faker26.dog();
        com.github.javafaker.Hacker hacker28 = faker26.hacker();
        java.lang.String str29 = hacker28.noun();
        java.lang.String str30 = hacker28.verb();
        java.util.Random random31 = null;
        com.github.javafaker.Faker faker32 = com.github.javafaker.Faker.instance(random31);
        com.github.javafaker.Dog dog33 = faker32.dog();
        com.github.javafaker.Hacker hacker34 = faker32.hacker();
        java.lang.String str35 = hacker34.noun();
        java.lang.String str36 = hacker34.verb();
        com.github.javafaker.Hacker[] hackerArray37 = new com.github.javafaker.Hacker[] { hacker9, hacker14, hacker20, hacker24, hacker28, hacker34 };
        com.github.javafaker.Hacker hacker38 = options5.nextElement(hackerArray37);
        java.util.Random random39 = null;
        com.github.javafaker.Faker faker40 = com.github.javafaker.Faker.instance(random39);
        com.github.javafaker.Internet internet41 = faker40.internet();
        java.lang.String str43 = faker40.bothify("Europe/Tallinn");
        com.github.javafaker.Options options44 = faker40.options();
        java.util.List<com.github.javafaker.service.files.EnFile> enFileList45 = com.github.javafaker.service.files.EnFile.getFiles();
        com.github.javafaker.service.files.EnFile enFile46 = options44.nextElement(enFileList45);
        com.github.javafaker.service.files.EnFile[] enFileArray47 = new com.github.javafaker.service.files.EnFile[] { enFile46 };
        java.util.ArrayList<com.github.javafaker.service.files.EnFile> enFileList48 = new java.util.ArrayList<com.github.javafaker.service.files.EnFile>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.github.javafaker.service.files.EnFile>) enFileList48, enFileArray47);
        com.github.javafaker.service.files.EnFile enFile50 = options5.nextElement((java.util.List<com.github.javafaker.service.files.EnFile>) enFileList48);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(faker7);
        org.junit.Assert.assertNotNull(dog8);
        org.junit.Assert.assertNotNull(hacker9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "panel" + "'", str10, "panel");
        org.junit.Assert.assertNotNull(faker12);
        org.junit.Assert.assertNotNull(dog13);
        org.junit.Assert.assertNotNull(hacker14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "alarm" + "'", str15, "alarm");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "synthesize" + "'", str16, "synthesize");
        org.junit.Assert.assertNotNull(faker18);
        org.junit.Assert.assertNotNull(dog19);
        org.junit.Assert.assertNotNull(hacker20);
        org.junit.Assert.assertNotNull(faker22);
        org.junit.Assert.assertNotNull(dog23);
        org.junit.Assert.assertNotNull(hacker24);
        org.junit.Assert.assertNotNull(faker26);
        org.junit.Assert.assertNotNull(dog27);
        org.junit.Assert.assertNotNull(hacker28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "microchip" + "'", str29, "microchip");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "compress" + "'", str30, "compress");
        org.junit.Assert.assertNotNull(faker32);
        org.junit.Assert.assertNotNull(dog33);
        org.junit.Assert.assertNotNull(hacker34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "application" + "'", str35, "application");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "connect" + "'", str36, "connect");
        org.junit.Assert.assertNotNull(hackerArray37);
        org.junit.Assert.assertNotNull(hacker38);
        org.junit.Assert.assertNotNull(faker40);
        org.junit.Assert.assertNotNull(internet41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Europe/Tallinn" + "'", str43, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(enFileList45);
        org.junit.Assert.assertNotNull(enFile46);
        org.junit.Assert.assertNotNull(enFileArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(enFile50);
    }

    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test203");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        java.lang.String str3 = f2.currencyCode();
        java.lang.String str4 = f2.firstName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = f2.password((int) '2', 7, true, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(f2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "XCD" + "'", str3, "XCD");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Brandon" + "'", str4, "Brandon");
    }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        java.lang.String str4 = number3.digit();
        long long7 = number3.numberBetween((long) 12, (long) 'k');
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2" + "'", str4, "2");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57L + "'", long7 == 57L);
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.timeZone();
        java.lang.String str4 = address2.fullAddress();
        java.lang.String str5 = address2.citySuffix();
        java.lang.String str6 = address2.country();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Europe/London" + "'", str3, "Europe/London");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "863 Ortiz Isle, Haagfurt, NV 04901-2427" + "'", str4, "863 Ortiz Isle, Haagfurt, NV 04901-2427");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "borough" + "'", str5, "borough");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "South Georgia and the South Sandwich Islands" + "'", str6, "South Georgia and the South Sandwich Islands");
    }

    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.countryCodeSL();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Cuba" + "'", str1, "Cuba");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "America/Godthab" + "'", str2, "America/Godthab");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ke" + "'", str6, "ke");
    }

    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.safeEmailAddress();
        java.lang.String str9 = internet2.password((-1), (int) (byte) -1, false, false, true);
        java.lang.String str10 = internet2.macAddress();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "87:32:41:86:1a:a9" + "'", str10, "87:32:41:86:1a:a9");
    }

    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test210");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.citySuffix();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "West" + "'", str3, "West");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chester" + "'", str4, "chester");
    }

    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str4 = faker1.bothify("Europe/Tallinn");
        com.github.javafaker.Options options5 = faker1.options();
        com.github.javafaker.Music music6 = faker1.music();
        java.lang.String str7 = music6.genre();
        java.lang.String str8 = music6.instrument();
        java.lang.String str9 = music6.genre();
        java.lang.String str10 = music6.genre();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Europe/Tallinn" + "'", str4, "Europe/Tallinn");
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(music6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Rap" + "'", str7, "Rap");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Xylophone" + "'", str8, "Xylophone");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Electronic" + "'", str9, "Electronic");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Pop" + "'", str10, "Pop");
    }

    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test212");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.ipV6Address();
        java.lang.String str4 = internet2.ipV6Cidr();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "7a53:8c74:4390:81c7:30c1:4ee6:7397:fd33" + "'", str3, "7a53:8c74:4390:81c7:30c1:4ee6:7397:fd33");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "8621:5c09:dbf9:4d0a:9b12:661c:e9fb:c3f1/116" + "'", str4, "8621:5c09:dbf9:4d0a:9b12:661c:e9fb:c3f1/116");
    }

    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test213");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Friends friends1 = faker0.friends();
        java.lang.String str2 = friends1.character();
        org.junit.Assert.assertNotNull(friends1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Doug" + "'", str2, "Doug");
    }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.Friends friends3 = faker1.friends();
        com.github.javafaker.Cat cat4 = faker1.cat();
        com.github.javafaker.Superhero superhero5 = faker1.superhero();
        java.lang.String str6 = superhero5.name();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(friends3);
        org.junit.Assert.assertNotNull(cat4);
        org.junit.Assert.assertNotNull(superhero5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Magnificent Rocket Raccoon" + "'", str6, "Magnificent Rocket Raccoon");
    }

    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test216");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.domainName();
        java.lang.String str7 = f0.validID();
        java.lang.String str8 = f0.cityPrefix();
        double double10 = f0.decimal((long) 89);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "China" + "'", str1, "China");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Belgrade" + "'", str2, "Europe/Belgrade");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "strosin.net" + "'", str6, "strosin.net");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "596-64-8163" + "'", str7, "596-64-8163");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Port" + "'", str8, "Port");
// flaky:         org.junit.Assert.assertTrue("'" + double10 + "' != '" + 89.68d + "'", double10 == 89.68d);
    }

    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        java.lang.String str2 = randomService1.hex();
        int int4 = randomService1.nextInt((int) 'g');
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "89061D97" + "'", str2, "89061D97");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 88 + "'", int4 == 88);
    }

    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Crypto crypto3 = faker1.crypto();
        java.lang.String str4 = crypto3.md5();
        java.lang.String str5 = crypto3.sha512();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(crypto3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "8b9ddb107823b604d04e7a396652b315" + "'", str4, "8b9ddb107823b604d04e7a396652b315");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3f1017ff2d051fa751b4bf0ce50d03f904a866ba6ab76ed23fbae205b477c28fe79a14d6064db496ba00895cf93220d7bdaaf63c0b36e1dc6ed117e8198baf50" + "'", str5, "3f1017ff2d051fa751b4bf0ce50d03f904a866ba6ab76ed23fbae205b477c28fe79a14d6064db496ba00895cf93220d7bdaaf63c0b36e1dc6ed117e8198baf50");
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.privateIpV4Address();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jast" + "'", str3, "jast");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "63.31.63.186/18" + "'", str4, "63.31.63.186/18");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "192.168.113.112" + "'", str5, "192.168.113.112");
    }

    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        com.github.javafaker.Beer beer7 = faker2.beer();
        com.github.javafaker.University university8 = faker2.university();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "332-11-9207" + "'", str5, "332-11-9207");
        org.junit.Assert.assertNotNull(beer6);
        org.junit.Assert.assertNotNull(beer7);
        org.junit.Assert.assertNotNull(university8);
    }

    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test221");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        com.github.javafaker.LeagueOfLegends leagueOfLegends4 = faker1.leagueOfLegends();
        java.lang.String str5 = leagueOfLegends4.rank();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(leagueOfLegends4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Bronze IV" + "'", str5, "Bronze IV");
    }

    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Robin robin4 = faker1.robin();
        com.github.javafaker.Educator educator5 = faker1.educator();
        java.lang.String str6 = educator5.course();
        java.lang.String str7 = educator5.campus();
        java.lang.String str8 = educator5.campus();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(robin4);
        org.junit.Assert.assertNotNull(educator5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Associate Degree in Biomedical Science" + "'", str6, "Associate Degree in Biomedical Science");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Vertapple Campus" + "'", str7, "Vertapple Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Iceborough Campus" + "'", str8, "Iceborough Campus");
    }

    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char4 = lorem3.character();
        java.lang.String str6 = lorem3.characters(33);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char4 + "' != '" + 'j' + "'", char4 == 'j');
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vc6yqunhjlbpyiic85imglcnpdmpx8gp5" + "'", str6, "vc6yqunhjlbpyiic85imglcnpdmpx8gp5");
    }

    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Esports esports3 = faker1.esports();
        java.lang.String str4 = esports3.event();
        java.lang.String str5 = esports3.player();
        java.lang.String str6 = esports3.player();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(esports3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ESL Cologne" + "'", str4, "ESL Cologne");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "KennyS" + "'", str5, "KennyS");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Silvername" + "'", str6, "Silvername");
    }

    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        com.github.javafaker.idnumbers.EnIdNumber enIdNumber0 = new com.github.javafaker.idnumbers.EnIdNumber();
        java.util.Random random1 = null;
        com.github.javafaker.Faker faker2 = com.github.javafaker.Faker.instance(random1);
        com.github.javafaker.Address address3 = faker2.address();
        com.github.javafaker.Weather weather4 = faker2.weather();
        java.lang.String str5 = enIdNumber0.getValidSsn(faker2);
        com.github.javafaker.Beer beer6 = faker2.beer();
        java.lang.String str7 = beer6.malt();
        java.lang.String str8 = beer6.yeast();
        java.lang.String str9 = beer6.name();
        java.lang.String str10 = beer6.style();
        java.lang.String str11 = beer6.name();
        org.junit.Assert.assertNotNull(faker2);
        org.junit.Assert.assertNotNull(address3);
        org.junit.Assert.assertNotNull(weather4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "594-11-3868" + "'", str5, "594-11-3868");
        org.junit.Assert.assertNotNull(beer6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Munich" + "'", str7, "Munich");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2308 - Munich Lager" + "'", str8, "2308 - Munich Lager");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Old Rasputin Russian Imperial Stout" + "'", str9, "Old Rasputin Russian Imperial Stout");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Porter" + "'", str10, "Porter");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Two Hearted Ale" + "'", str11, "Two Hearted Ale");
    }

    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test227");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        java.lang.String str5 = faker1.regexify("Asia/Ulaanbaatar");
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        java.lang.String str8 = demographic7.sex();
        java.lang.String str9 = demographic7.race();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asia/Ulaanbaatar" + "'", str5, "Asia/Ulaanbaatar");
        org.junit.Assert.assertNotNull(superhero6);
        org.junit.Assert.assertNotNull(demographic7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Female" + "'", str8, "Female");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asian" + "'", str9, "Asian");
    }

    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Overwatch overwatch4 = faker1.overwatch();
        java.lang.String str5 = overwatch4.location();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(overwatch4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ch\342teau Guillard" + "'", str5, "Ch\342teau Guillard");
    }

    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test230");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        java.lang.String str4 = lorem3.paragraph();
        java.lang.String str7 = lorem3.characters((int) ' ', false);
        java.lang.String str9 = lorem3.fixedString(0);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Qui optio qui nulla eligendi sint veritatis. Molestiae pariatur tenetur. Unde eos ea et eius id rerum unde. Maxime eligendi perferendis repellendus." + "'", str4, "Qui optio qui nulla eligendi sint veritatis. Molestiae pariatur tenetur. Unde eos ea et eius id rerum unde. Maxime eligendi perferendis repellendus.");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "cxltyq2kds0zdrv5ftrvznyotsqjpg0b" + "'", str7, "cxltyq2kds0zdrv5ftrvznyotsqjpg0b");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        java.lang.String str3 = weather2.temperatureCelsius();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = weather2.temperatureFahrenheit(197, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-6\260C" + "'", str3, "-6\260C");
    }

    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test232");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.cityPrefix();
        java.lang.String str3 = f0.invalidID();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Poland" + "'", str1, "Poland");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "South" + "'", str2, "South");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "826-00-8072" + "'", str3, "826-00-8072");
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Shakespeare shakespeare4 = faker1.shakespeare();
        com.github.javafaker.DateAndTime dateAndTime5 = faker1.date();
        com.github.javafaker.DragonBall dragonBall6 = faker1.dragonBall();
        java.lang.String str7 = dragonBall6.character();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(shakespeare4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(dragonBall6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Kid Trunks" + "'", str7, "Kid Trunks");
    }

    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        com.github.javafaker.LeagueOfLegends leagueOfLegends4 = faker1.leagueOfLegends();
        java.lang.String str5 = leagueOfLegends4.quote();
        java.lang.String str6 = leagueOfLegends4.rank();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(leagueOfLegends4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I'll scout ahead!" + "'", str5, "I'll scout ahead!");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Platinum II" + "'", str6, "Platinum II");
    }

    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        java.lang.String str3 = weather2.temperatureFahrenheit();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = weather2.temperatureFahrenheit((int) ' ', 27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "36\260F" + "'", str3, "36\260F");
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.invalidID();
        java.lang.String str8 = f0.zipCode();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Moldova" + "'", str1, "Moldova");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B" + "'", str5, "B");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.rickie-witting.org" + "'", str6, "www.rickie-witting.org");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "046-43-0000" + "'", str7, "046-43-0000");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "53903" + "'", str8, "53903");
    }

    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test239");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Internet internet1 = faker0.internet();
        java.lang.String str6 = internet1.image((java.lang.Integer) 75, (java.lang.Integer) 12, (java.lang.Boolean) false, "b");
        java.lang.String str7 = internet1.uuid();
        org.junit.Assert.assertNotNull(internet1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://lorempixel.com/75/12/animals/b" + "'", str6, "http://lorempixel.com/75/12/animals/b");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bab6707c-8f41-4441-b8cf-2fd3941877f6" + "'", str7, "bab6707c-8f41-4441-b8cf-2fd3941877f6");
    }

    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test240");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Esports esports3 = faker1.esports();
        java.lang.String str4 = esports3.event();
        java.lang.String str5 = esports3.player();
        java.lang.String str6 = esports3.league();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(esports3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Worlds" + "'", str4, "Worlds");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Froggen" + "'", str5, "Froggen");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IEM" + "'", str6, "IEM");
    }

    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test241");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Hacker hacker3 = faker1.hacker();
        java.lang.String str4 = hacker3.verb();
        java.lang.String str5 = hacker3.adjective();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(hacker3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hack" + "'", str4, "hack");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "solid state" + "'", str5, "solid state");
    }

    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("hi!");
        com.apifortress.apiffaker.F f2 = util1.getFaker();
        boolean boolean3 = f2.getTemplateStyle();
        f2.setTemplateStyle(true);
        java.lang.String str6 = f2.streetSuffix();
        org.junit.Assert.assertNotNull(f2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ports" + "'", str6, "Ports");
    }

    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test243");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        java.lang.String str9 = lorem3.characters((int) (byte) 100, true, true);
        java.lang.String str14 = lorem3.characters((int) ' ', (int) (short) 100, true, false);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + 's' + "'", char5 == 's');
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kE9BaH3ePOVdnJ5piRxazTQF67opNS3Ds2hCVjMTAU6nyG4o2P7qsyX3oFAaxCZU25xs2W8P5r2E04WIiRtsiVcCTQwk34V0aX58" + "'", str9, "kE9BaH3ePOVdnJ5piRxazTQF67opNS3Ds2hCVjMTAU6nyG4o2P7qsyX3oFAaxCZU25xs2W8P5r2E04WIiRtsiVcCTQwk34V0aX58");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fRhKzbDnJflpAEXiXJNUEGPztTZEKLOsShsaLlFQCYaqOm" + "'", str14, "fRhKzbDnJflpAEXiXJNUEGPztTZEKLOsShsaLlFQCYaqOm");
    }

    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test244");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        java.lang.String str5 = faker1.regexify("Asia/Ulaanbaatar");
        com.github.javafaker.Superhero superhero6 = faker1.superhero();
        com.github.javafaker.Demographic demographic7 = faker1.demographic();
        java.lang.String str8 = demographic7.educationalAttainment();
        java.lang.String str9 = demographic7.maritalStatus();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asia/Ulaanbaatar" + "'", str5, "Asia/Ulaanbaatar");
        org.junit.Assert.assertNotNull(superhero6);
        org.junit.Assert.assertNotNull(demographic7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "No schooling completed" + "'", str8, "No schooling completed");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Never married" + "'", str9, "Never married");
    }

    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        java.lang.String str2 = code1.ean8();
        java.lang.String str3 = code1.isbn10();
        org.junit.Assert.assertNotNull(code1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "43529681" + "'", str2, "43529681");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1888734671" + "'", str3, "1888734671");
    }

    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test246");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        com.github.javafaker.GameOfThrones gameOfThrones4 = faker1.gameOfThrones();
        java.lang.String str5 = gameOfThrones4.house();
        java.lang.String str6 = gameOfThrones4.quote();
        java.lang.String str7 = gameOfThrones4.quote();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
        org.junit.Assert.assertNotNull(gameOfThrones4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Orkwood of Orkmont" + "'", str5, "Orkwood of Orkmont");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "And so he spoke, and so he spoke, that Lord of Castamere, but now the rains weep o'er his hall, with no one there to hear. Yes, now the rains weep o'er his hall, and not a soul to hear." + "'", str6, "And so he spoke, and so he spoke, that Lord of Castamere, but now the rains weep o'er his hall, with no one there to hear. Yes, now the rains weep o'er his hall, and not a soul to hear.");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "The North remembers." + "'", str7, "The North remembers.");
    }

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.ipV6Cidr();
        java.lang.String str10 = internet2.image((java.lang.Integer) 100, (java.lang.Integer) 2, (java.lang.Boolean) true, "Bhutan");
        java.lang.String str12 = internet2.password(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = internet2.password(48, (int) (byte) 1, true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "herzog" + "'", str3, "herzog");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "84.120.246.5/7" + "'", str4, "84.120.246.5/7");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9692:7651:aea0:61a2:0b95:f925:94f5:29ba/33" + "'", str5, "9692:7651:aea0:61a2:0b95:f925:94f5:29ba/33");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://lorempixel.com/g/100/2/business/Bhutan" + "'", str10, "http://lorempixel.com/g/100/2/business/Bhutan");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9zdf4ew16of" + "'", str12, "9zdf4ew16of");
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        java.lang.String str4 = job3.position();
        java.lang.String str5 = job3.position();
        java.lang.String str6 = job3.position();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Liaison" + "'", str4, "Liaison");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Director" + "'", str5, "Director");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Executive" + "'", str6, "Executive");
    }

    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.price();
        int int5 = f0.integer(0);
        double double7 = f0.decimal((long) 'k');
        java.lang.String str8 = f0.buildingNumber();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paraguay" + "'", str1, "Paraguay");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Europe/Sarajevo" + "'", str2, "Europe/Sarajevo");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "17.32" + "'", str3, "17.32");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
// flaky:         org.junit.Assert.assertTrue("'" + double7 + "' != '" + 104.12d + "'", double7 == 104.12d);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "45977" + "'", str8, "45977");
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.slug();
        java.lang.String str6 = internet2.ipV6Address();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "cole" + "'", str3, "cole");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "46.84.158.92/9" + "'", str4, "46.84.158.92/9");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "velit_velit" + "'", str5, "velit_velit");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dffd:26c8:17a7:5ee0:e531:a76f:2571:eb90" + "'", str6, "dffd:26c8:17a7:5ee0:e531:a76f:2571:eb90");
    }

    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test252");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.Friends friends3 = faker1.friends();
        com.github.javafaker.Company company4 = faker1.company();
        java.lang.String str5 = company4.logo();
        java.lang.String str6 = company4.bs();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(friends3);
        org.junit.Assert.assertNotNull(company4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "https://pigment.github.io/fake-logos/logos/medium/color/2.png" + "'", str5, "https://pigment.github.io/fake-logos/logos/medium/color/2.png");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "morph intuitive supply-chains" + "'", str6, "morph intuitive supply-chains");
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("");
        com.apifortress.apiffaker.F f2 = null;
        util1.setFaker(f2);
        java.lang.Object obj5 = util1.setLocale("hi!");
        java.lang.Object obj6 = util1.newNode();
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + true + "'", obj5, true);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "[streetAddress_0, ${streetAddress}

    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test254");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        java.lang.String str7 = lorem3.fixedString(0);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + '9' + "'", char5 == '9');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test255");
        java.util.Random random0 = null;
        com.github.javafaker.service.RandomService randomService1 = new com.github.javafaker.service.RandomService(random0);
        java.lang.Boolean boolean2 = randomService1.nextBoolean();
// flaky:         org.junit.Assert.assertEquals("'" + boolean2 + "' != '" + true + "'", boolean2, true);
    }

    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test256");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        java.lang.String str4 = howIMetYourMother3.catchPhrase();
        java.lang.String str5 = howIMetYourMother3.character();
        java.lang.String str6 = howIMetYourMother3.highFive();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Challenege Accepted" + "'", str4, "Challenege Accepted");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Claudia Grice" + "'", str5, "Claudia Grice");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Multiple High Fives" + "'", str6, "Multiple High Fives");
    }

    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test257");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.cityPrefix();
        java.lang.String str4 = address2.latitude();
        java.lang.String str5 = address2.countryCode();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = address2.zipCodeByState("240752-5688");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: address.postcode_by_state.240752-5688 resulted in null expression");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "West" + "'", str3, "West");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-33.079619" + "'", str4, "-33.079619");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BF" + "'", str5, "BF");
    }

    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test258");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Robin robin4 = faker1.robin();
        com.github.javafaker.Educator educator5 = faker1.educator();
        java.lang.String str6 = educator5.course();
        java.lang.String str7 = educator5.campus();
        java.lang.String str8 = educator5.course();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(robin4);
        org.junit.Assert.assertNotNull(educator5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Bachelor of Nursing" + "'", str6, "Bachelor of Nursing");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Bluemeadow Campus" + "'", str7, "Bluemeadow Campus");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Master of Law" + "'", str8, "Master of Law");
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        java.lang.String str6 = f0.productName();
        java.lang.String str7 = f0.currency();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = f0.password((int) '9');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Denmark" + "'", str1, "Denmark");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Bangkok" + "'", str2, "Asia/Bangkok");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lightweight Iron Keyboard" + "'", str6, "Lightweight Iron Keyboard");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Cayman Islands Dollar" + "'", str7, "Cayman Islands Dollar");
    }

    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        com.github.javafaker.HowIMetYourMother howIMetYourMother3 = faker1.howIMetYourMother();
        com.github.javafaker.GameOfThrones gameOfThrones4 = faker1.gameOfThrones();
        com.github.javafaker.Lebowski lebowski5 = new com.github.javafaker.Lebowski(faker1);
        com.github.javafaker.PhoneNumber phoneNumber6 = faker1.phoneNumber();
        java.lang.String str7 = phoneNumber6.cellPhone();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
        org.junit.Assert.assertNotNull(howIMetYourMother3);
        org.junit.Assert.assertNotNull(gameOfThrones4);
        org.junit.Assert.assertNotNull(phoneNumber6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "933-568-7319" + "'", str7, "933-568-7319");
    }

    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str5 = f0.password(1, 1, true);
        java.lang.String str6 = f0.url();
        java.lang.String str7 = f0.domainWord();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sudan" + "'", str1, "Sudan");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "c" + "'", str5, "c");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "www.rupert-wolff.com" + "'", str6, "www.rupert-wolff.com");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "harris" + "'", str7, "harris");
    }

    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test263");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        java.lang.String str2 = code1.ean8();
        java.lang.String str3 = code1.ean13();
        java.lang.String str5 = code1.isbn10(true);
        org.junit.Assert.assertNotNull(code1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "85764132" + "'", str2, "85764132");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "7065087359895" + "'", str3, "7065087359895");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1-19-120144-9" + "'", str5, "1-19-120144-9");
    }

    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.productName();
        java.lang.String str2 = f0.firstName();
        java.lang.String str3 = f0.uuid();
        java.lang.String str4 = f0.streetAddress();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Rustic Paper Keyboard" + "'", str1, "Rustic Paper Keyboard");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Eli" + "'", str2, "Eli");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "96de8a1b-7dd8-4324-966e-b9cb70891544" + "'", str3, "96de8a1b-7dd8-4324-966e-b9cb70891544");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "980 Nitzsche Knoll" + "'", str4, "980 Nitzsche Knoll");
    }

    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test265");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        java.lang.String str2 = code1.isbn10();
        org.junit.Assert.assertNotNull(code1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1895210496" + "'", str2, "1895210496");
    }

    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        int int5 = f0.integer((int) (short) 10, (int) (short) 10);
        int int6 = f0.streetAddressNumber();
        java.lang.String str7 = f0.password();
        java.lang.String str8 = f0.suffix();
        java.lang.String str9 = f0.productName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Moldova" + "'", str1, "Moldova");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Kolkata" + "'", str2, "Asia/Kolkata");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 324 + "'", int6 == 324);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "sxtqipitahdmj" + "'", str7, "sxtqipitahdmj");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "and Sons" + "'", str8, "and Sons");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Gorgeous Copper Pants" + "'", str9, "Gorgeous Copper Pants");
    }

    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test267");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        java.lang.String str2 = code1.ean8();
        java.lang.String str4 = code1.isbn13(true);
        org.junit.Assert.assertNotNull(code1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "96966013" + "'", str2, "96966013");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "979-0-15-065662-2" + "'", str4, "979-0-15-065662-2");
    }

    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test268");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        com.github.javafaker.Weather weather3 = faker1.weather();
        java.lang.String str4 = weather3.temperatureCelsius();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNotNull(weather3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-8\260C" + "'", str4, "-8\260C");
    }

    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test269");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        java.lang.String str4 = job3.position();
        java.lang.String str5 = job3.position();
        java.lang.String str6 = job3.title();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Director" + "'", str4, "Director");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Executive" + "'", str5, "Executive");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Corporate Legal Producer" + "'", str6, "Corporate Legal Producer");
    }

    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test270");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        com.github.javafaker.Lorem lorem3 = faker1.lorem();
        char char5 = lorem3.character(true);
        java.lang.String str9 = lorem3.characters((int) (byte) 100, true, true);
        java.lang.String str10 = lorem3.characters();
        char char11 = lorem3.character();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
        org.junit.Assert.assertNotNull(lorem3);
// flaky:         org.junit.Assert.assertTrue("'" + char5 + "' != '" + '9' + "'", char5 == '9');
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fO9vAyf2E6GLn0Dt1SpY6LtLa9flYr0zJAR0mYqfCeuHW5KRER847kq2vXx7YBIHsDcOinjc5zul29I93wQ62jji2j7kmAv6pib3" + "'", str9, "fO9vAyf2E6GLn0Dt1SpY6LtLa9flYr0zJAR0mYqfCeuHW5KRER847kq2vXx7YBIHsDcOinjc5zul29I93wQ62jji2j7kmAv6pib3");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "7eelzdcnwupclglw5wi4roiz4i6unzfupw176nug4vmjzda73zlkzf3hf5hb5aiucxaalskkn4pwuq4l1600e6veqwx9mmo38rkekri4s3v3mrbmhhzu6qw7yhib5o1ty40omx0bjab5q72el0xkfvn0trelobh0x6h3gltzkcyh36ncsv21rwstpioo80kjgz7fq0n6vxvn5adph2recuba5ttzwblrl6v5zds2loq0jg7lfh3tu80ap6by23m" + "'", str10, "7eelzdcnwupclglw5wi4roiz4i6unzfupw176nug4vmjzda73zlkzf3hf5hb5aiucxaalskkn4pwuq4l1600e6veqwx9mmo38rkekri4s3v3mrbmhhzu6qw7yhib5o1ty40omx0bjab5q72el0xkfvn0trelobh0x6h3gltzkcyh36ncsv21rwstpioo80kjgz7fq0n6vxvn5adph2recuba5ttzwblrl6v5zds2loq0jg7lfh3tu80ap6by23m");
// flaky:         org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'o' + "'", char11 == 'o');
    }

    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test271");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.domainWord();
        java.lang.String str4 = internet2.ipV4Cidr();
        java.lang.String str5 = internet2.ipV6Cidr();
        java.lang.String str6 = internet2.ipV6Cidr();
        java.lang.String str8 = internet2.macAddress("979-0-15-065662-2");
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "cremin" + "'", str3, "cremin");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "78.134.36.58/18" + "'", str4, "78.134.36.58/18");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "21a0:14e3:0541:6ca1:5ddf:16b5:9510:fb59/68" + "'", str5, "21a0:14e3:0541:6ca1:5ddf:16b5:9510:fb59/68");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "4179:c920:001a:138e:9be7:8e7e:6261:0ea1/125" + "'", str6, "4179:c920:001a:138e:9be7:8e7e:6261:0ea1/125");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "979-0-15-065662-2:96:b3:ec:64:bb" + "'", str8, "979-0-15-065662-2:96:b3:ec:64:bb");
    }

    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test272");
        com.apifortress.apiffaker.Util util1 = new com.apifortress.apiffaker.Util("590427-1763");
        java.lang.Object obj3 = util1.newNode("New Zealand Dollar");
        java.lang.Object obj4 = util1.newNode();
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "[countryCodeSL_0, ${countryCodeSL}

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        com.apifortress.apiffaker.F f0 = new com.apifortress.apiffaker.F();
        java.lang.String str1 = f0.country();
        java.lang.String str2 = f0.timeZone();
        java.lang.String str3 = f0.fullAddress();
        java.lang.String str4 = f0.zipCode();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Republic of Korea" + "'", str1, "Republic of Korea");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asia/Irkutsk" + "'", str2, "Asia/Irkutsk");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "692 Blaine Mews, North Terriechester, WI 83162" + "'", str3, "692 Blaine Mews, North Terriechester, WI 83162");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "91417-0249" + "'", str4, "91417-0249");
    }

    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test274");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Internet internet2 = faker1.internet();
        java.lang.String str3 = internet2.safeEmailAddress();
        java.lang.String str4 = internet2.domainSuffix();
        com.github.javafaker.Internet.UserAgent userAgent5 = com.github.javafaker.Internet.UserAgent.FIREFOX;
        java.lang.String str6 = internet2.userAgent(userAgent5);
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(internet2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "net" + "'", str4, "net");
        org.junit.Assert.assertTrue("'" + userAgent5 + "' != '" + com.github.javafaker.Internet.UserAgent.FIREFOX + "'", userAgent5.equals(com.github.javafaker.Internet.UserAgent.FIREFOX));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0" + "'", str6, "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0");
    }

    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test275");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Code code1 = faker0.code();
        com.github.javafaker.Pokemon pokemon2 = faker0.pokemon();
        java.lang.String str3 = pokemon2.name();
        org.junit.Assert.assertNotNull(code1);
        org.junit.Assert.assertNotNull(pokemon2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Flareon" + "'", str3, "Flareon");
    }

    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test276");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Crypto crypto3 = faker1.crypto();
        com.github.javafaker.Number number4 = faker1.number();
        double double8 = number4.randomDouble(1, (int) '6', 48);
        long long9 = number4.randomNumber();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(crypto3);
        org.junit.Assert.assertNotNull(number4);
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.2d + "'", double8 == 52.2d);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 26537950L + "'", long9 == 26537950L);
    }

    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test277");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Overwatch overwatch4 = faker1.overwatch();
        com.github.javafaker.Country country5 = faker1.country();
        java.lang.String str6 = country5.currency();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(overwatch4);
        org.junit.Assert.assertNotNull(country5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Loti" + "'", str6, "Loti");
    }

    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test278");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Address address2 = faker1.address();
        java.lang.String str3 = address2.timeZone();
        java.lang.String str4 = address2.stateAbbr();
        java.lang.String str5 = address2.longitude();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(address2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Europe/London" + "'", str3, "Europe/London");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MD" + "'", str4, "MD");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "76.933627" + "'", str5, "76.933627");
    }

    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test280");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Commerce commerce4 = faker1.commerce();
        java.lang.String str5 = commerce4.productName();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(commerce4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Small Wooden Table" + "'", str5, "Small Wooden Table");
    }

    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test281");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Ancient ancient3 = faker1.ancient();
        com.github.javafaker.Cat cat4 = faker1.cat();
        java.lang.String str5 = cat4.name();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(ancient3);
        org.junit.Assert.assertNotNull(cat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Coco" + "'", str5, "Coco");
    }

    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test282");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Weather weather2 = faker1.weather();
        com.github.javafaker.Job job3 = new com.github.javafaker.Job(faker1);
        com.github.javafaker.LeagueOfLegends leagueOfLegends4 = faker1.leagueOfLegends();
        java.lang.String str5 = leagueOfLegends4.masteries();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(weather2);
        org.junit.Assert.assertNotNull(leagueOfLegends4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Expose Weakness" + "'", str5, "Expose Weakness");
    }

    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test283");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = com.github.javafaker.Faker.instance(random0);
        com.github.javafaker.Dog dog2 = faker1.dog();
        java.lang.String str3 = dog2.memePhrase();
        org.junit.Assert.assertNotNull(faker1);
        org.junit.Assert.assertNotNull(dog2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "big ol' pupper" + "'", str3, "big ol' pupper");
    }
lemire-externalsortinginjava, length: 116

    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        long long0 = com.google.code.externalsorting.ExternalSort.estimateAvailableMemory();
// flaky:         org.junit.Assert.assertTrue("'" + long0 + "' != '" + 3806833608L + "'", long0 == 3806833608L);
    }

    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        long long0 = com.google.code.externalsorting.csv.CsvExternalSort.estimateAvailableMemory();
// flaky:         org.junit.Assert.assertTrue("'" + long0 + "' != '" + 211603576L + "'", long0 == 211603576L);
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.io.BufferedWriter bufferedWriter14 = null;
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator15;
        java.nio.charset.Charset charset17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, bufferedWriter14, strComparator15, charset17, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7753620494967685975flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(strComparator15);
    }

    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.io.File[] fileArray28 = new java.io.File[] { file12, file26 };
        java.util.ArrayList<java.io.File> fileList29 = new java.util.ArrayList<java.io.File>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.io.File>) fileList29, fileArray28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray31 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList32 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32, cSVRecordArray31);
        java.io.File file34 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator35, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = csvSortOptions41.getComparator();
        java.io.File file43 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList32, file34, csvSortOptions41);
        java.util.Comparator<java.lang.String> strComparator44 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.nio.charset.Charset charset45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles((java.util.List<java.io.File>) fileList29, file34, strComparator44, charset45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6563204697684354958flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7638100972389040005flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(cSVRecordArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNull(cSVRecordComparator42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2495911335267690112flatfile");
        org.junit.Assert.assertNotNull(strComparator44);
    }

    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.io.File[] fileArray14 = new java.io.File[] { file12 };
        java.util.ArrayList<java.io.File> fileList15 = new java.util.ArrayList<java.io.File>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.io.File>) fileList15, fileArray14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29);
        java.util.Comparator<java.lang.String> strComparator31 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator31;
        java.nio.charset.Charset charset33 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long34 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles((java.util.List<java.io.File>) fileList15, file29, strComparator31, charset33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8150026135799942173flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(fileArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3590384412564108962flatfile");
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(strComparator31);
    }

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.io.File[] fileArray26 = new java.io.File[] { file12, file16 };
        java.util.ArrayList<java.io.File> fileList27 = new java.util.ArrayList<java.io.File>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.io.File>) fileList27, fileArray26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        java.util.Comparator<java.lang.String> strComparator43 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator43;
        java.nio.charset.Charset charset45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles((java.util.List<java.io.File>) fileList27, file41, strComparator43, charset45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3885140689675608003flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1553431591156442722flatfile");
        org.junit.Assert.assertNotNull(fileArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4848972671994761605flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(strComparator43);
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.Comparator<java.lang.String> strComparator27 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        // The following exception was thrown during execution in test generation
        try {
            com.google.code.externalsorting.ExternalSort.sort(file12, file17, strComparator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4154682969847843161flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2903384421225748005flatfile");
        org.junit.Assert.assertNotNull(strComparator27);
    }

    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
        java.io.BufferedReader bufferedReader1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions15 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch((long) (short) 1, bufferedReader1, file14, csvSortOptions15, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6075158555118713395flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2955724073872825721flatfile");
    }

    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.Comparator<java.lang.String> strComparator35 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator35;
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray39 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList40 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList40, cSVRecordArray39);
        java.io.File file42 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions49 = builder48.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = csvSortOptions49.getComparator();
        java.io.File file51 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList40, file42, csvSortOptions49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList54 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator35, 10, charset38, file51, true, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4717145692987823294flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5836706869425702251flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5067426313544872679flatfile");
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(cSVRecordArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(csvSortOptions49);
        org.junit.Assert.assertNull(cSVRecordComparator50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file51.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4957937741309688352flatfile");
    }

    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator13;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, 1, charset16, file20, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3702785383151961835flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7266378949515240323flatfile");
    }

    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.util.Comparator<java.lang.String> strComparator14 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator14;
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray30 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList31 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31, cSVRecordArray30);
        java.io.File file33 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator34, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions40 = builder39.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = csvSortOptions40.getComparator();
        java.io.File file42 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList31, file33, csvSortOptions40);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions49 = builder48.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = csvSortOptions49.getComparator();
        java.io.File file51 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file33, csvSortOptions49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList54 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator14, charset16, file51, false, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7148065316538050795flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7458970011839020819flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(csvSortOptions40);
        org.junit.Assert.assertNull(cSVRecordComparator41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file42.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8761353408805185338flatfile");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(csvSortOptions49);
        org.junit.Assert.assertNull(cSVRecordComparator50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file51.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4045684029984168610flatfile");
    }

    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator13;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator41, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = builder44.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions47 = builder46.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = csvSortOptions47.getComparator();
        java.io.File file49 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file31, csvSortOptions47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, file49, true, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7105806586667040574flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2463973354921107707flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7363015494264833098flatfile");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(csvSortOptions47);
        org.junit.Assert.assertNull(cSVRecordComparator48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2178359111668353013flatfile");
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray26 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList27 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList27, cSVRecordArray26);
        java.io.File file29 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator30, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = builder33.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions36 = builder35.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = csvSortOptions36.getComparator();
        java.io.File file38 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList27, file29, csvSortOptions36);
        java.util.List<java.io.File> fileList39 = com.google.code.externalsorting.ExternalSort.sortInBatch(file38);
        java.util.List<java.io.File> fileList40 = com.google.code.externalsorting.ExternalSort.sortInBatch(file38);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        java.util.List<java.io.File> fileList54 = com.google.code.externalsorting.ExternalSort.sortInBatch(file53);
        java.io.File[] fileArray55 = new java.io.File[] { file12, file16, file38, file53 };
        java.util.ArrayList<java.io.File> fileList56 = new java.util.ArrayList<java.io.File>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.io.File>) fileList56, fileArray55);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray58 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList59 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList59, cSVRecordArray58);
        java.io.File file61 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator62, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = csvSortOptions68.getComparator();
        java.io.File file70 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList59, file61, csvSortOptions68);
        java.util.List<java.io.File> fileList71 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70);
        java.util.Comparator<java.lang.String> strComparator72 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.nio.charset.Charset charset73 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long75 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles((java.util.List<java.io.File>) fileList56, file70, strComparator72, charset73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3276006644165234988flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7440400459264275143flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(csvSortOptions36);
        org.junit.Assert.assertNull(cSVRecordComparator37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6623478205763214295flatfile");
        org.junit.Assert.assertNotNull(fileList39);
        org.junit.Assert.assertNotNull(fileList40);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4209563460400894694flatfile");
        org.junit.Assert.assertNotNull(fileList54);
        org.junit.Assert.assertNotNull(fileArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(cSVRecordArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNull(cSVRecordComparator69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file70.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8101804045525161457flatfile");
        org.junit.Assert.assertNotNull(fileList71);
        org.junit.Assert.assertNotNull(strComparator72);
    }

    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.Comparator<java.lang.String> strComparator4 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator4;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray7 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList8 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList8, cSVRecordArray7);
        java.io.File file10 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder14 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator11, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder16 = builder14.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions17 = builder16.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = csvSortOptions17.getComparator();
        java.io.File file19 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList8, file10, csvSortOptions17);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray20 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList21 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList21, cSVRecordArray20);
        java.io.File file23 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator24, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = builder27.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions30 = builder29.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = csvSortOptions30.getComparator();
        java.io.File file32 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList21, file23, csvSortOptions30);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList8, file23, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file46 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList2, strComparator4, charset6, file41, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(cSVRecordArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(csvSortOptions17);
        org.junit.Assert.assertNull(cSVRecordComparator18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch30485602477136533flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(csvSortOptions30);
        org.junit.Assert.assertNull(cSVRecordComparator31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file32.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4543608553325531683flatfile");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8734001586473739857flatfile");
        org.junit.Assert.assertNotNull(fileList42);
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.Comparator<java.lang.String> strComparator4 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator4;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray7 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList8 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList8, cSVRecordArray7);
        java.io.File file10 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder14 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator11, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder16 = builder14.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions17 = builder16.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = csvSortOptions17.getComparator();
        java.io.File file19 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList8, file10, csvSortOptions17);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray20 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList21 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList21, cSVRecordArray20);
        java.io.File file23 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator24, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = builder27.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions30 = builder29.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = csvSortOptions30.getComparator();
        java.io.File file32 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList21, file23, csvSortOptions30);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList8, file23, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file46 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList2, strComparator4, charset6, file41, false, false, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(cSVRecordArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(csvSortOptions17);
        org.junit.Assert.assertNull(cSVRecordComparator18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3040544632330475165flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(csvSortOptions30);
        org.junit.Assert.assertNull(cSVRecordComparator31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertEquals(file32.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file32.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7678538281435590946flatfile");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4264376943901517501flatfile");
        org.junit.Assert.assertNotNull(fileList42);
    }

    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator41, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = builder44.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions47 = builder46.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = csvSortOptions47.getComparator();
        java.io.File file49 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file31, csvSortOptions47);
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file49);
        java.util.Comparator<java.lang.String> strComparator51 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file13, file49, strComparator51);
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray54 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList55 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList55, iOStringStackArray54);
        // The following exception was thrown during execution in test generation
        try {
            long long57 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator51, false, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6273929810166362755flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4273748508595542924flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2542265237926424487flatfile");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(csvSortOptions47);
        org.junit.Assert.assertNull(cSVRecordComparator48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6068105779040445892flatfile");
        org.junit.Assert.assertNotNull(fileList50);
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(iOStringStackArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.io.BufferedWriter bufferedWriter36 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray37 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList38 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList38, cSVRecordArray37);
        java.io.File file40 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator41, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = builder44.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions47 = builder46.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = csvSortOptions47.getComparator();
        java.io.File file49 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList38, file40, csvSortOptions47);
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file49);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray51 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList52 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52, cSVRecordArray51);
        java.io.File file54 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions61 = builder60.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = csvSortOptions61.getComparator();
        java.io.File file63 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file54, csvSortOptions61);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray64 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65, cSVRecordArray64);
        java.io.File file67 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList65, file67, csvSortOptions74);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator77, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder82 = builder80.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions83 = builder82.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator84 = csvSortOptions83.getComparator();
        java.io.File file85 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file67, csvSortOptions83);
        java.util.List<java.io.File> fileList86 = com.google.code.externalsorting.ExternalSort.sortInBatch(file85);
        java.util.Comparator<java.lang.String> strComparator87 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file49, file85, strComparator87);
        java.nio.charset.Charset charset89 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long92 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, bufferedWriter36, strComparator87, charset89, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1121712948881172767flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4696692307098598466flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch430340720117858000flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(csvSortOptions47);
        org.junit.Assert.assertNull(cSVRecordComparator48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5583968652476438636flatfile");
        org.junit.Assert.assertNotNull(fileList50);
        org.junit.Assert.assertNotNull(cSVRecordArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(csvSortOptions61);
        org.junit.Assert.assertNull(cSVRecordComparator62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2730239119488216176flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7042014726530394787flatfile");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(csvSortOptions83);
        org.junit.Assert.assertNull(cSVRecordComparator84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file85.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch749014179929785689flatfile");
        org.junit.Assert.assertNotNull(fileList86);
        org.junit.Assert.assertNotNull(strComparator87);
    }

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.io.BufferedWriter bufferedWriter36 = null;
        java.util.Comparator<java.lang.String> strComparator37 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.nio.charset.Charset charset38 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long41 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, bufferedWriter36, strComparator37, charset38, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3440061845549339432flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3529815322489773556flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4244322000242893661flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(strComparator37);
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray35 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList36 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36, cSVRecordArray35);
        java.io.File file38 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = csvSortOptions45.getComparator();
        java.io.File file47 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList36, file38, csvSortOptions45);
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file47);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray62 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList63 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList63, cSVRecordArray62);
        java.io.File file65 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder69 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator66, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = builder69.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions72 = builder71.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator73 = csvSortOptions72.getComparator();
        java.io.File file74 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList63, file65, csvSortOptions72);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder78 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator75, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = builder78.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions81 = builder80.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator82 = csvSortOptions81.getComparator();
        java.io.File file83 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file65, csvSortOptions81);
        java.util.List<java.io.File> fileList84 = com.google.code.externalsorting.ExternalSort.sortInBatch(file83);
        java.util.Comparator<java.lang.String> strComparator85 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file47, file83, strComparator85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList87 = com.google.code.externalsorting.ExternalSort.sortInBatch(file16, strComparator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3201448897066196343flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7177790224040087672flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5109611585290635126flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertNull(cSVRecordComparator46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1732700849099174639flatfile");
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch44777945508687066flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(csvSortOptions72);
        org.junit.Assert.assertNull(cSVRecordComparator73);
        org.junit.Assert.assertNotNull(file74);
        org.junit.Assert.assertEquals(file74.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file74.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7481294956563071315flatfile");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(csvSortOptions81);
        org.junit.Assert.assertNull(cSVRecordComparator82);
        org.junit.Assert.assertNotNull(file83);
        org.junit.Assert.assertEquals(file83.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file83.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7470605874594190679flatfile");
        org.junit.Assert.assertNotNull(fileList84);
        org.junit.Assert.assertNotNull(strComparator85);
    }

    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray3 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList4 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList4, cSVRecordArray3);
        java.io.File file6 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator7 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator7, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = builder10.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions13 = builder12.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator14 = csvSortOptions13.getComparator();
        java.io.File file15 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList4, file6, csvSortOptions13);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file15);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file15, csvSortOptions23);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVRecordArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(csvSortOptions13);
        org.junit.Assert.assertNull(cSVRecordComparator14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4727472707893340299flatfile");
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.Comparator<java.lang.String> strComparator35 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray38 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList39 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList39, cSVRecordArray38);
        java.io.File file41 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file41, csvSortOptions48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator35, (int) (short) 100, charset37, file50, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6381970361628464230flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8777206218332631595flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2208427724696943574flatfile");
        org.junit.Assert.assertNotNull(strComparator35);
        org.junit.Assert.assertNotNull(cSVRecordArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2769022092274617116flatfile");
    }

    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.Comparator<java.lang.String> strComparator35 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file16, strComparator35, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8163207975854887941flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch60255260616067215flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6135154546659690528flatfile");
        org.junit.Assert.assertNotNull(strComparator35);
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        java.util.List<java.io.File> fileList45 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray46 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList47 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList47, cSVRecordArray46);
        java.io.File file49 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator50, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder55 = builder53.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions56 = builder55.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions56.getComparator();
        java.io.File file58 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList47, file49, csvSortOptions56);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray59 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList60 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList60, cSVRecordArray59);
        java.io.File file62 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator63, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder68 = builder66.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions69 = builder68.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator70 = csvSortOptions69.getComparator();
        java.io.File file71 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList60, file62, csvSortOptions69);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator72 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder75 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator72, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder77 = builder75.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions78 = builder77.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator79 = csvSortOptions78.getComparator();
        java.io.File file80 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList47, file62, csvSortOptions78);
        java.util.List<java.io.File> fileList81 = com.google.code.externalsorting.ExternalSort.sortInBatch(file80);
        java.util.Comparator<java.lang.String> strComparator82 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file44, file80, strComparator82);
        java.util.Comparator<java.lang.String> strComparator84 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator84;
        // The following exception was thrown during execution in test generation
        try {
            long long86 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file80, strComparator84);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8979727239754186854flatfile (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6351360947898101071flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2910847872815449668flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5715474170737742467flatfile");
        org.junit.Assert.assertNotNull(fileList45);
        org.junit.Assert.assertNotNull(cSVRecordArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(csvSortOptions56);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file58.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6038603319124020334flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(csvSortOptions69);
        org.junit.Assert.assertNull(cSVRecordComparator70);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file71.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6673404720818057357flatfile");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(csvSortOptions78);
        org.junit.Assert.assertNull(cSVRecordComparator79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file80.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4399497145114273355flatfile");
        org.junit.Assert.assertNotNull(fileList81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(strComparator84);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        java.io.File file32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.code.externalsorting.ExternalSort.sort(file26, file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9002242938695136249flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4270463504655714781flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file44);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6041495371987549912flatfile (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3702606869937346852flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3838345637074727988flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3384401468232938840flatfile");
    }

    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test100");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray35 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList36 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36, cSVRecordArray35);
        java.io.File file38 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = csvSortOptions45.getComparator();
        java.io.File file47 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList36, file38, csvSortOptions45);
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file47);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        java.util.List<java.io.File> fileList62 = com.google.code.externalsorting.ExternalSort.sortInBatch(file61);
        java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(file61);
        java.util.Comparator<java.lang.String> strComparator64 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long66 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList48, file61, strComparator64, true);
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray69 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList70 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList70, cSVRecordArray69);
        java.io.File file72 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator73 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator73, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder78 = builder76.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions79 = builder78.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator80 = csvSortOptions79.getComparator();
        java.io.File file81 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList70, file72, csvSortOptions79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator64, (int) (short) 10, charset68, file81, false, (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8406686514812129083flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1790665452634521289flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6581527453292830274flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertNull(cSVRecordComparator46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1524529190159074548flatfile");
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7953332007930462011flatfile");
        org.junit.Assert.assertNotNull(fileList62);
        org.junit.Assert.assertNotNull(fileList63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(csvSortOptions79);
        org.junit.Assert.assertNull(cSVRecordComparator80);
        org.junit.Assert.assertNotNull(file81);
        org.junit.Assert.assertEquals(file81.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file81.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2471986777658537757flatfile");
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.Comparator<java.lang.String> strComparator4 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator4;
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray7 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList8 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList8, cSVRecordArray7);
        java.io.File file10 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder14 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator11, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder16 = builder14.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions17 = builder16.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = csvSortOptions17.getComparator();
        java.io.File file19 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList8, file10, csvSortOptions17);
        java.util.List<java.io.File> fileList20 = com.google.code.externalsorting.ExternalSort.sortInBatch(file19);
        java.util.List<java.io.File> fileList21 = com.google.code.externalsorting.ExternalSort.sortInBatch(file19);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file22 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList2, strComparator4, charset6, file19);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strComparator4);
        org.junit.Assert.assertNotNull(cSVRecordArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(csvSortOptions17);
        org.junit.Assert.assertNull(cSVRecordComparator18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2511233971213637958flatfile");
        org.junit.Assert.assertNotNull(fileList20);
        org.junit.Assert.assertNotNull(fileList21);
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray27 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList28 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28, cSVRecordArray27);
        java.io.File file30 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator31, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions37 = builder36.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator38 = csvSortOptions37.getComparator();
        java.io.File file39 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList28, file30, csvSortOptions37);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file30, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        java.util.Comparator<java.lang.String> strComparator50 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file12, file48, strComparator50);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator50;
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5429677324356226657flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4182552629371328980flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(csvSortOptions37);
        org.junit.Assert.assertNull(cSVRecordComparator38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5532955436346330389flatfile");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6768642640840026718flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(strComparator50);
    }

    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.io.File file14 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray56 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList57 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList57, cSVRecordArray56);
        java.io.File file59 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator60, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions66 = builder65.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = csvSortOptions66.getComparator();
        java.io.File file68 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57, file59, csvSortOptions66);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator69, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = builder72.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions75 = builder74.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = csvSortOptions75.getComparator();
        java.io.File file77 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file59, csvSortOptions75);
        java.util.List<java.io.File> fileList78 = com.google.code.externalsorting.ExternalSort.sortInBatch(file77);
        java.util.Comparator<java.lang.String> strComparator79 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file41, file77, strComparator79);
        java.util.List<java.io.File> fileList82 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27, strComparator79, false);
        // The following exception was thrown during execution in test generation
        try {
            long long84 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file14, strComparator79, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4527181372846329196flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7883745702238130676flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8243160810113826697flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch365754146447969987flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(csvSortOptions66);
        org.junit.Assert.assertNull(cSVRecordComparator67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6181174511194184856flatfile");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(csvSortOptions75);
        org.junit.Assert.assertNull(cSVRecordComparator76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5736080628633813623flatfile");
        org.junit.Assert.assertNotNull(fileList78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(fileList82);
    }

    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.List<java.io.File> fileList36 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.io.BufferedWriter bufferedWriter37 = null;
        java.util.Comparator<java.lang.String> strComparator38 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.nio.charset.Charset charset39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long42 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList36, bufferedWriter37, strComparator38, charset39, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2993135507196329277flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4710295860752595607flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8928424952896447385flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(fileList36);
        org.junit.Assert.assertNotNull(strComparator38);
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        java.util.Comparator<java.lang.String> strComparator30 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long32 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList14, file27, strComparator30, true);
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray34 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList35 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList35, iOStringStackArray34);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator30, true, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8306358262830514711flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3449996361795117938flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iOStringStackArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.List<java.io.File> fileList26 = com.google.code.externalsorting.ExternalSort.sortInBatch(file25);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray27 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList28 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28, cSVRecordArray27);
        java.io.File file30 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator31, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions37 = builder36.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator38 = csvSortOptions37.getComparator();
        java.io.File file39 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList28, file30, csvSortOptions37);
        java.util.List<java.io.File> fileList40 = com.google.code.externalsorting.ExternalSort.sortInBatch(file39);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray54 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList55 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList55, cSVRecordArray54);
        java.io.File file57 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator58 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator58, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = builder61.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions64 = builder63.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator65 = csvSortOptions64.getComparator();
        java.io.File file66 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList55, file57, csvSortOptions64);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file57, csvSortOptions73);
        java.util.List<java.io.File> fileList76 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75);
        java.util.Comparator<java.lang.String> strComparator77 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file39, file75, strComparator77);
        java.util.List<java.io.File> fileList80 = com.google.code.externalsorting.ExternalSort.sortInBatch(file25, strComparator77, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder84 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator81, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = builder84.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions87 = builder86.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = csvSortOptions87.getComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file89 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file25, csvSortOptions87);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5528685650997598446flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8742460482604941012flatfile");
        org.junit.Assert.assertNotNull(fileList26);
        org.junit.Assert.assertNotNull(cSVRecordArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(csvSortOptions37);
        org.junit.Assert.assertNull(cSVRecordComparator38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4659786182614460827flatfile");
        org.junit.Assert.assertNotNull(fileList40);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch352689444929774281flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(csvSortOptions64);
        org.junit.Assert.assertNull(cSVRecordComparator65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file66.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4123896343926080343flatfile");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4697619277209690015flatfile");
        org.junit.Assert.assertNotNull(fileList76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertNotNull(fileList80);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(csvSortOptions87);
        org.junit.Assert.assertNull(cSVRecordComparator88);
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray4 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList5 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList5, cSVRecordArray4);
        java.io.File file7 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator8 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator8, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder13 = builder11.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions14 = builder13.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator15 = csvSortOptions14.getComparator();
        java.io.File file16 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList5, file7, csvSortOptions14);
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file16);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray18 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList19, cSVRecordArray18);
        java.io.File file21 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator22 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator22, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder25.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions28 = builder27.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = csvSortOptions28.getComparator();
        java.io.File file30 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file21, csvSortOptions28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray31 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList32 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32, cSVRecordArray31);
        java.io.File file34 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator35, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = csvSortOptions41.getComparator();
        java.io.File file43 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList32, file34, csvSortOptions41);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator44, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = builder47.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions50 = builder49.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator51 = csvSortOptions50.getComparator();
        java.io.File file52 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file34, csvSortOptions50);
        java.util.List<java.io.File> fileList53 = com.google.code.externalsorting.ExternalSort.sortInBatch(file52);
        java.util.Comparator<java.lang.String> strComparator54 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file16, file52, strComparator54);
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray57 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList58 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList58, cSVRecordArray57);
        java.io.File file60 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = csvSortOptions67.getComparator();
        java.io.File file69 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58, file60, csvSortOptions67);
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file69);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file71 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList2, strComparator54, charset56, file69);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(cSVRecordArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(csvSortOptions14);
        org.junit.Assert.assertNull(cSVRecordComparator15);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7651849590400529739flatfile");
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(cSVRecordArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(csvSortOptions28);
        org.junit.Assert.assertNull(cSVRecordComparator29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2443026979773385950flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNull(cSVRecordComparator42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch507704238793525871flatfile");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(csvSortOptions50);
        org.junit.Assert.assertNull(cSVRecordComparator51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file52.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3932935521062019752flatfile");
        org.junit.Assert.assertNotNull(fileList53);
        org.junit.Assert.assertNotNull(strComparator54);
        org.junit.Assert.assertNotNull(cSVRecordArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertNull(cSVRecordComparator68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch16320250279154378flatfile");
        org.junit.Assert.assertNotNull(fileList70);
    }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        long long32 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) long31);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8180156512311842104flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4377514484108565998flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 62L + "'", long32 == 62L);
    }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder91 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator88, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = builder91.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions94 = builder93.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray95 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList96 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList96, cSVRecordArray95);
        java.util.List<java.io.File> fileList98 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file48, csvSortOptions94, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList96);
        int int99 = csvSortOptions94.getMaxTmpFiles();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5522706985786772573flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5164974503122186323flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1076035149956940564flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1538658486553083595flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2971954182514797558flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4584483080179270264flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5889840531294040423flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(csvSortOptions94);
        org.junit.Assert.assertNotNull(cSVRecordArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(fileList98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder91 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator88, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = builder91.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions94 = builder93.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray95 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList96 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList96, cSVRecordArray95);
        java.util.List<java.io.File> fileList98 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file48, csvSortOptions94, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList96);
        boolean boolean99 = csvSortOptions94.isSkipHeader();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3061700102600842422flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8302378238758100726flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3609325808884908614flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2987015334947349773flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2453848691610785581flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8925820241575602332flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8583647260089606884flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(csvSortOptions94);
        org.junit.Assert.assertNotNull(cSVRecordArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(fileList98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder30 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator27, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = builder30.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions33 = builder32.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = csvSortOptions33.getComparator();
        java.io.File file35 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file17, csvSortOptions33);
        // The following exception was thrown during execution in test generation
        try {
            com.google.code.externalsorting.ExternalSort.sort(file0, file35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2069246520159081134flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3143033094493255909flatfile");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(csvSortOptions33);
        org.junit.Assert.assertNull(cSVRecordComparator34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7876848898315639260flatfile");
    }

    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file58, csvSortOptions74);
        boolean boolean77 = csvSortOptions74.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat78 = csvSortOptions74.getFormat();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9158109084405131595flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4078797098691056843flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3274585424934677472flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7199130192304645096flatfile");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6332259012845589033flatfile");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(cSVFormat78);
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<java.lang.String> strComparator68 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file67, strComparator68, false);
        java.util.Comparator<java.lang.String> strComparator71 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        // The following exception was thrown during execution in test generation
        try {
            long long72 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file67, strComparator71);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8787476137629436806flatfile (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8235650922199291164flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7113374486490564902flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1302120828580589486flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1420548005097311999flatfile");
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(fileList70);
        org.junit.Assert.assertNotNull(strComparator71);
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray35 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList36 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36, cSVRecordArray35);
        java.io.File file38 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = csvSortOptions45.getComparator();
        java.io.File file47 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList36, file38, csvSortOptions45);
        java.util.Comparator<java.lang.String> strComparator48 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file47, strComparator48, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator51 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator51, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = builder54.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions57 = builder56.build();
        long long58 = csvSortOptions57.getMaxMemory();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file59 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file47, csvSortOptions57);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8272800837479012889flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7635808160009456886flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4759650894011377364flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertNull(cSVRecordComparator46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1233030036429677392flatfile");
        org.junit.Assert.assertNotNull(strComparator48);
        org.junit.Assert.assertNotNull(fileList50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(csvSortOptions57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        java.io.BufferedReader bufferedReader0 = null;
        java.util.Comparator<java.lang.String> strComparator2 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        long long12 = csvSortOptions11.getMaxMemory();
        java.nio.charset.Charset charset13 = csvSortOptions11.getCharset();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 1903416804L, strComparator2, (int) (byte) 10, 1L, charset13, file26, true, (int) '4', true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strComparator2);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6683170474854938558flatfile");
    }

    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray27 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList28 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28, cSVRecordArray27);
        java.io.File file30 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator31, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions37 = builder36.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator38 = csvSortOptions37.getComparator();
        java.io.File file39 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList28, file30, csvSortOptions37);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file30, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        java.util.Comparator<java.lang.String> strComparator50 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file12, file48, strComparator50);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray52 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList53 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53, cSVRecordArray52);
        java.io.File file55 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator56, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = builder59.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions62 = builder61.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = csvSortOptions62.getComparator();
        java.io.File file64 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList53, file55, csvSortOptions62);
        java.util.Comparator<java.lang.String> strComparator65 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList67 = com.google.code.externalsorting.ExternalSort.sortInBatch(file64, strComparator65, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        long long75 = csvSortOptions74.getMaxMemory();
        java.nio.charset.Charset charset76 = csvSortOptions74.getCharset();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray77 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList78 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList78, cSVRecordArray77);
        java.io.File file80 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder84 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator81, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = builder84.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions87 = builder86.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = csvSortOptions87.getComparator();
        java.io.File file89 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList78, file80, csvSortOptions87);
        java.util.List<java.io.File> fileList90 = com.google.code.externalsorting.ExternalSort.sortInBatch(file89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList93 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48, strComparator65, charset76, file89, false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1925140540470567058flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3116326904258323453flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(csvSortOptions37);
        org.junit.Assert.assertNull(cSVRecordComparator38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch45060967415633973flatfile");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2271724793165794880flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(strComparator50);
        org.junit.Assert.assertNotNull(cSVRecordArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(csvSortOptions62);
        org.junit.Assert.assertNull(cSVRecordComparator63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8659963361872360657flatfile");
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(fileList67);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(cSVRecordArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(csvSortOptions87);
        org.junit.Assert.assertNull(cSVRecordComparator88);
        org.junit.Assert.assertNotNull(file89);
        org.junit.Assert.assertEquals(file89.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file89.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2919066519371399858flatfile");
        org.junit.Assert.assertNotNull(fileList90);
    }

    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder91 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator88, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = builder91.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions94 = builder93.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray95 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList96 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList96, cSVRecordArray95);
        java.util.List<java.io.File> fileList98 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file48, csvSortOptions94, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList96);
        long long99 = csvSortOptions94.getMaxMemory();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6319404918100264539flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7206975534141713723flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3367110101130514880flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5437487665943953162flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8213187584923202993flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8440683614693433858flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7473142469554894972flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(csvSortOptions94);
        org.junit.Assert.assertNotNull(cSVRecordArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(fileList98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file58, csvSortOptions74);
        int int77 = csvSortOptions74.getNumHeader();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch531471910664735124flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8993374234149743776flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4637122770439475467flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8092509359447856957flatfile");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2048901516178048060flatfile");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        boolean boolean55 = csvSortOptions39.isDistinct();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8731652559951139428flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7944495581608305172flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3790426855304954462flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator30, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = builder33.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions40 = builder39.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray42 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList43 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43, cSVRecordArray42);
        java.io.File file45 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator46, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = builder49.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions52 = builder51.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = csvSortOptions52.getComparator();
        java.io.File file54 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43, file45, csvSortOptions52);
        int int55 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList14, file27, csvSortOptions40, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray56 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList57 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList57, cSVRecordArray56);
        java.io.File file59 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator60, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions66 = builder65.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = csvSortOptions66.getComparator();
        java.io.File file68 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57, file59, csvSortOptions66);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator69, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = builder72.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions75 = builder74.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = csvSortOptions75.getComparator();
        java.io.File file77 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43, file59, csvSortOptions75);
        boolean boolean78 = csvSortOptions75.isSkipHeader();
        com.google.code.externalsorting.csv.CSVRecordBuffer[] cSVRecordBufferArray79 = new com.google.code.externalsorting.csv.CSVRecordBuffer[] {};
        java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer> cSVRecordBufferList80 = new java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList80, cSVRecordBufferArray79);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int83 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(bufferedWriter0, csvSortOptions75, (java.util.List<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList80, cSVRecordList82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5341409350523795170flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2785023534977662744flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(csvSortOptions40);
        org.junit.Assert.assertNotNull(cSVRecordArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(csvSortOptions52);
        org.junit.Assert.assertNull(cSVRecordComparator53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file54.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8208205232496136238flatfile");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(csvSortOptions66);
        org.junit.Assert.assertNull(cSVRecordComparator67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1797626143055659982flatfile");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(csvSortOptions75);
        org.junit.Assert.assertNull(cSVRecordComparator76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3382573520332679046flatfile");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(cSVRecordBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray30 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList31 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31, cSVRecordArray30);
        java.io.File file33 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator34, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions40 = builder39.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = csvSortOptions40.getComparator();
        java.io.File file42 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList31, file33, csvSortOptions40);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator56, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = builder59.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions62 = builder61.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = csvSortOptions62.getComparator();
        java.io.File file64 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList31, file46, csvSortOptions62);
        java.util.List<java.io.File> fileList65 = com.google.code.externalsorting.ExternalSort.sortInBatch(file64);
        java.util.Comparator<java.lang.String> strComparator66 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file28, file64, strComparator66);
        java.util.List<java.io.File> fileList69 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator66, false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList71 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, (-1L), strComparator66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3797043061152284888flatfile");
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8236634045207779821flatfile");
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(cSVRecordArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(csvSortOptions40);
        org.junit.Assert.assertNull(cSVRecordComparator41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file42.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5336660453473068134flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1480282098995850840flatfile");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(csvSortOptions62);
        org.junit.Assert.assertNull(cSVRecordComparator63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1961090912061491206flatfile");
        org.junit.Assert.assertNotNull(fileList65);
        org.junit.Assert.assertNotNull(strComparator66);
        org.junit.Assert.assertNotNull(fileList69);
    }

    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.io.BufferedWriter bufferedWriter36 = null;
        java.util.Comparator<java.lang.String> strComparator37 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator38 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator38, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = builder41.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions44 = builder43.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = csvSortOptions44.getComparator();
        java.nio.charset.Charset charset46 = csvSortOptions44.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, bufferedWriter36, strComparator37, charset46, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8845762486614442392flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3518719782747363609flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3230790993388870503flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(csvSortOptions44);
        org.junit.Assert.assertNull(cSVRecordComparator45);
        org.junit.Assert.assertNotNull(charset46);
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        java.util.List<java.io.File> fileList0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder30 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator27, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = builder30.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions33 = builder32.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = csvSortOptions33.getComparator();
        java.io.File file35 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file17, csvSortOptions33);
        java.util.List<java.io.File> fileList36 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35);
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray38 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList39 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList39, cSVRecordArray38);
        java.io.File file41 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file41, csvSortOptions48);
        java.util.Comparator<java.lang.String> strComparator51 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList53 = com.google.code.externalsorting.ExternalSort.sortInBatch(file50, strComparator51, false);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList0, file35, strComparator51, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8768472339433602649flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4829805844758481771flatfile");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(csvSortOptions33);
        org.junit.Assert.assertNull(cSVRecordComparator34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1595363915470123175flatfile");
        org.junit.Assert.assertNotNull(fileList36);
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(cSVRecordArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4709392649948656192flatfile");
        org.junit.Assert.assertNotNull(strComparator51);
        org.junit.Assert.assertNotNull(fileList53);
    }

    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray42 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList43 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43, cSVRecordArray42);
        java.io.File file45 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator46, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = builder49.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions52 = builder51.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = csvSortOptions52.getComparator();
        java.io.File file54 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43, file45, csvSortOptions52);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions61 = builder60.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = csvSortOptions61.getComparator();
        java.io.File file63 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file45, csvSortOptions61);
        java.util.List<java.io.File> fileList64 = com.google.code.externalsorting.ExternalSort.sortInBatch(file63);
        java.util.Comparator<java.lang.String> strComparator65 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file27, file63, strComparator65);
        java.util.List<java.io.File> fileList68 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13, strComparator65, false);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator65;
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray71 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList72 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList72, iOStringStackArray71);
        // The following exception was thrown during execution in test generation
        try {
            long long74 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator65, true, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3017318570639100641flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7212759971644044762flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4743365504332810713flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(csvSortOptions52);
        org.junit.Assert.assertNull(cSVRecordComparator53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file54.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6551341517223551047flatfile");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(csvSortOptions61);
        org.junit.Assert.assertNull(cSVRecordComparator62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1511678745775475698flatfile");
        org.junit.Assert.assertNotNull(fileList64);
        org.junit.Assert.assertNotNull(strComparator65);
        org.junit.Assert.assertNotNull(fileList68);
        org.junit.Assert.assertNotNull(iOStringStackArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.List<java.io.File> fileList36 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.Comparator<java.lang.String> strComparator37 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray38 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList39 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList39, cSVRecordArray38);
        java.io.File file41 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file41, csvSortOptions48);
        java.util.List<java.io.File> fileList51 = com.google.code.externalsorting.ExternalSort.sortInBatch(file50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList54 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator37, file50, false, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6263934380371381605flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4722268381486426661flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1046586894808703582flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(fileList36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(cSVRecordArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch309051560744564801flatfile");
        org.junit.Assert.assertNotNull(fileList51);
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray35 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList36 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList36, cSVRecordArray35);
        java.io.File file38 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = csvSortOptions45.getComparator();
        java.io.File file47 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList36, file38, csvSortOptions45);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray48 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList49 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList49, cSVRecordArray48);
        java.io.File file51 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder55 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator52, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = builder55.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions58 = builder57.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = csvSortOptions58.getComparator();
        java.io.File file60 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList49, file51, csvSortOptions58);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = csvSortOptions67.getComparator();
        java.io.File file69 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList36, file51, csvSortOptions67);
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file69);
        java.util.Comparator<java.lang.String> strComparator71 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList72 = com.google.code.externalsorting.ExternalSort.sortInBatch(file69, strComparator71);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator73 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator73, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder78 = builder76.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions79 = builder76.build();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file80 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file69, csvSortOptions79);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1871523457853830271flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6835784203274456149flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8368603509053211077flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertNull(cSVRecordComparator46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8438462756269654847flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(csvSortOptions58);
        org.junit.Assert.assertNull(cSVRecordComparator59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file60.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3799382860441970291flatfile");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertNull(cSVRecordComparator68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1052121115638335068flatfile");
        org.junit.Assert.assertNotNull(fileList70);
        org.junit.Assert.assertNotNull(strComparator71);
        org.junit.Assert.assertNotNull(fileList72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(csvSortOptions79);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator28, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = builder31.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions34 = builder33.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions34.getComparator();
        java.io.File file36 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file18, csvSortOptions34);
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36);
        java.util.Comparator<java.lang.String> strComparator38 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList39 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36, strComparator38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList41 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, (long) ' ', strComparator38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8156246835389722240flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5621503383676775499flatfile");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(csvSortOptions34);
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6871856197218942934flatfile");
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(strComparator38);
        org.junit.Assert.assertNotNull(fileList39);
    }

    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        java.io.BufferedReader bufferedReader1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator28, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = builder31.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions34 = builder33.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions34.getComparator();
        java.io.File file36 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file18, csvSortOptions34);
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36);
        java.util.List<java.io.File> fileList38 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        int int46 = csvSortOptions45.getNumHeader();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions45.getComparator();
        int int48 = csvSortOptions45.getMaxTmpFiles();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(100L, bufferedReader1, file36, csvSortOptions45, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1314000433844407024flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3957896756513526578flatfile");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(csvSortOptions34);
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8572917690501219298flatfile");
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(fileList38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        java.util.Comparator<java.lang.String> strComparator32 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray46 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList47 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList47, cSVRecordArray46);
        java.io.File file49 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator50, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder55 = builder53.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions56 = builder55.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions56.getComparator();
        java.io.File file58 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList47, file49, csvSortOptions56);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file49, csvSortOptions65);
        java.util.List<java.io.File> fileList68 = com.google.code.externalsorting.ExternalSort.sortInBatch(file67);
        java.util.Comparator<java.lang.String> strComparator69 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file67, strComparator69);
        java.util.List<java.io.File> fileList71 = com.google.code.externalsorting.ExternalSort.sortInBatch(file67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList74 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26, strComparator32, file67, true, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5941258868658151447flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1719501013364616714flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(strComparator32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8230251511167481298flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(csvSortOptions56);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(file58);
        org.junit.Assert.assertEquals(file58.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file58.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2760229416340437973flatfile");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6594547695505839044flatfile");
        org.junit.Assert.assertNotNull(fileList68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertNotNull(fileList70);
        org.junit.Assert.assertNotNull(fileList71);
    }

    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray3 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList4 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList4, cSVRecordArray3);
        java.io.File file6 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator7 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator7, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = builder10.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions13 = builder12.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator14 = csvSortOptions13.getComparator();
        java.io.File file15 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList4, file6, csvSortOptions13);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file15);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29);
        java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray44 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList45 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList45, cSVRecordArray44);
        java.io.File file47 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator48, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = builder51.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions54 = builder53.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = csvSortOptions54.getComparator();
        java.io.File file56 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList45, file47, csvSortOptions54);
        int int57 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList16, file29, csvSortOptions42, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList45);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray58 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList59 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList59, cSVRecordArray58);
        java.io.File file61 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator62, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = csvSortOptions68.getComparator();
        java.io.File file70 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList59, file61, csvSortOptions68);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator71 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator71, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = builder74.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions77 = builder76.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator78 = csvSortOptions77.getComparator();
        java.io.File file79 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList45, file61, csvSortOptions77);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator80 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder83 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator80, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder85 = builder83.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions86 = builder85.build();
        int int87 = csvSortOptions86.getNumHeader();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file88 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file79, csvSortOptions86);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVRecordArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(csvSortOptions13);
        org.junit.Assert.assertNull(cSVRecordComparator14);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6059251862523699273flatfile");
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch131479254492574308flatfile");
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(fileList31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNotNull(cSVRecordArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(csvSortOptions54);
        org.junit.Assert.assertNull(cSVRecordComparator55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1658605576237495592flatfile");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNull(cSVRecordComparator69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file70.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1374800913568454228flatfile");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(csvSortOptions77);
        org.junit.Assert.assertNull(cSVRecordComparator78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file79.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5865883510873440603flatfile");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(csvSortOptions86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray56 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList57 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList57, cSVRecordArray56);
        java.io.File file59 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator60, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions66 = builder65.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = csvSortOptions66.getComparator();
        java.io.File file68 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57, file59, csvSortOptions66);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator69, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = builder72.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions75 = builder74.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = csvSortOptions75.getComparator();
        java.io.File file77 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file59, csvSortOptions75);
        java.util.List<java.io.File> fileList78 = com.google.code.externalsorting.ExternalSort.sortInBatch(file77);
        java.util.Comparator<java.lang.String> strComparator79 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file41, file77, strComparator79);
        java.util.List<java.io.File> fileList82 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27, strComparator79, false);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray83 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList84 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList84, cSVRecordArray83);
        java.io.File file86 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator87 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder90 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator87, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder92 = builder90.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions93 = builder92.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator94 = csvSortOptions93.getComparator();
        java.io.File file95 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList84, file86, csvSortOptions93);
        java.util.List<java.io.File> fileList96 = com.google.code.externalsorting.ExternalSort.sortInBatch(file95);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList99 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator79, file95, false, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8541198091767584753flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6699012349933997707flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1204082107800452794flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8303822608917727039flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(csvSortOptions66);
        org.junit.Assert.assertNull(cSVRecordComparator67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1666506667089401441flatfile");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(csvSortOptions75);
        org.junit.Assert.assertNull(cSVRecordComparator76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5088533328149950051flatfile");
        org.junit.Assert.assertNotNull(fileList78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertNotNull(fileList82);
        org.junit.Assert.assertNotNull(cSVRecordArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(csvSortOptions93);
        org.junit.Assert.assertNull(cSVRecordComparator94);
        org.junit.Assert.assertNotNull(file95);
        org.junit.Assert.assertEquals(file95.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file95.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3870807972675759115flatfile");
        org.junit.Assert.assertNotNull(fileList96);
    }

    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.Comparator<java.lang.String> strComparator5 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator5;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator7 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator7, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = builder10.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions13 = builder12.build();
        boolean boolean14 = csvSortOptions13.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat15 = csvSortOptions13.getFormat();
        long long16 = csvSortOptions13.getMaxMemory();
        java.nio.charset.Charset charset17 = csvSortOptions13.getCharset();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray18 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList19, cSVRecordArray18);
        java.io.File file21 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator22 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator22, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder25.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions28 = builder27.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = csvSortOptions28.getComparator();
        java.io.File file30 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file21, csvSortOptions28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray31 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList32 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32, cSVRecordArray31);
        java.io.File file34 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator35, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = csvSortOptions41.getComparator();
        java.io.File file43 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList32, file34, csvSortOptions41);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator44, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = builder47.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions50 = builder49.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator51 = csvSortOptions50.getComparator();
        java.io.File file52 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file34, csvSortOptions50);
        java.util.List<java.io.File> fileList53 = com.google.code.externalsorting.ExternalSort.sortInBatch(file52);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray54 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList55 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList55, cSVRecordArray54);
        java.io.File file57 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator58 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator58, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = builder61.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions64 = builder63.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator65 = csvSortOptions64.getComparator();
        java.io.File file66 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList55, file57, csvSortOptions64);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray67 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList68 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList68, cSVRecordArray67);
        java.io.File file70 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator71 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator71, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = builder74.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions77 = builder76.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator78 = csvSortOptions77.getComparator();
        java.io.File file79 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList68, file70, csvSortOptions77);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator80 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder83 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator80, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder85 = builder83.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions86 = builder85.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator87 = csvSortOptions86.getComparator();
        java.io.File file88 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList55, file70, csvSortOptions86);
        com.google.code.externalsorting.ExternalSort.sort(file52, file88);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file93 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList3, strComparator5, charset17, file52, true, true, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(csvSortOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVRecordArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(csvSortOptions28);
        org.junit.Assert.assertNull(cSVRecordComparator29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch338674805360710300flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNull(cSVRecordComparator42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6207423712472287510flatfile");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(csvSortOptions50);
        org.junit.Assert.assertNull(cSVRecordComparator51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file52.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2241819442675587895flatfile");
        org.junit.Assert.assertNotNull(fileList53);
        org.junit.Assert.assertNotNull(cSVRecordArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(csvSortOptions64);
        org.junit.Assert.assertNull(cSVRecordComparator65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file66.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2226926494466667772flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(csvSortOptions77);
        org.junit.Assert.assertNull(cSVRecordComparator78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file79.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1083973507211601471flatfile");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(csvSortOptions86);
        org.junit.Assert.assertNull(cSVRecordComparator87);
        org.junit.Assert.assertNotNull(file88);
        org.junit.Assert.assertEquals(file88.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file88.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3494333148586209644flatfile");
    }

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator0 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder3 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator0, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder5 = builder3.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = builder5.skipHeader(false);
        long long8 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) builder7);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator9 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator9, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder14 = builder12.numHeader((int) (short) 0);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator15 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder18 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator15, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = builder18.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions21 = builder20.build();
        boolean boolean22 = csvSortOptions21.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat23 = csvSortOptions21.getFormat();
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder12.format(cSVFormat23);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder7.format(cSVFormat23);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder7.skipHeader(false);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = builder7.distinct(false);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder7.numHeader((int) '4');
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 192L + "'", long8 == 192L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(csvSortOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        java.util.List<java.io.File> fileList0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder30 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator27, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = builder30.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions33 = builder32.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = csvSortOptions33.getComparator();
        java.io.File file35 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file17, csvSortOptions33);
        java.util.List<java.io.File> fileList36 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35);
        java.util.Comparator<java.lang.String> strComparator37 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList38 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35, strComparator37);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray39 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList40 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList40, cSVRecordArray39);
        java.io.File file42 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions49 = builder48.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = csvSortOptions49.getComparator();
        java.io.File file51 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList40, file42, csvSortOptions49);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray52 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList53 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53, cSVRecordArray52);
        java.io.File file55 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator56, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = builder59.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions62 = builder61.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = csvSortOptions62.getComparator();
        java.io.File file64 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList53, file55, csvSortOptions62);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator65 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder68 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator65, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = builder68.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions71 = builder70.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator72 = csvSortOptions71.getComparator();
        java.io.File file73 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList40, file55, csvSortOptions71);
        java.util.List<java.io.File> fileList74 = com.google.code.externalsorting.ExternalSort.sortInBatch(file73);
        java.util.Comparator<java.lang.String> strComparator75 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList76 = com.google.code.externalsorting.ExternalSort.sortInBatch(file73, strComparator75);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList0, file35, strComparator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5770029326703207668flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2680289415862130286flatfile");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(csvSortOptions33);
        org.junit.Assert.assertNull(cSVRecordComparator34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5419029427189785976flatfile");
        org.junit.Assert.assertNotNull(fileList36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(fileList38);
        org.junit.Assert.assertNotNull(cSVRecordArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(csvSortOptions49);
        org.junit.Assert.assertNull(cSVRecordComparator50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file51.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5494295564883331341flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(csvSortOptions62);
        org.junit.Assert.assertNull(cSVRecordComparator63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6584058695049656583flatfile");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(csvSortOptions71);
        org.junit.Assert.assertNull(cSVRecordComparator72);
        org.junit.Assert.assertNotNull(file73);
        org.junit.Assert.assertEquals(file73.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file73.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8564106361946119285flatfile");
        org.junit.Assert.assertNotNull(fileList74);
        org.junit.Assert.assertNotNull(strComparator75);
        org.junit.Assert.assertNotNull(fileList76);
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder91 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator88, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = builder91.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions94 = builder93.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray95 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList96 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList96, cSVRecordArray95);
        java.util.List<java.io.File> fileList98 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file48, csvSortOptions94, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList96);
        java.lang.Class<?> wildcardClass99 = file48.getClass();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4970967492563269370flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5686110486267666906flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4905715968271741018flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3856493854867748299flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch218469606800875125flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch162127200592971839flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3185677330675827454flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(csvSortOptions94);
        org.junit.Assert.assertNotNull(cSVRecordArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(fileList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        org.apache.commons.csv.CSVFormat cSVFormat35 = csvSortOptions32.getFormat();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9017379555665557653flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch614137747603427816flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch210311775444320833flatfile");
        org.junit.Assert.assertNotNull(cSVFormat35);
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray26 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList27 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList27, cSVRecordArray26);
        java.io.File file29 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator30, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = builder33.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions36 = builder35.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = csvSortOptions36.getComparator();
        java.io.File file38 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList27, file29, csvSortOptions36);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator39, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = builder42.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions45 = builder44.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = csvSortOptions45.getComparator();
        java.io.File file47 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file29, csvSortOptions45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.code.externalsorting.ExternalSort.sort(file12, file29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5665047482147560849flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6571267251787888621flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(csvSortOptions36);
        org.junit.Assert.assertNull(cSVRecordComparator37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3855090237559028288flatfile");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(csvSortOptions45);
        org.junit.Assert.assertNull(cSVRecordComparator46);
        org.junit.Assert.assertNotNull(file47);
        org.junit.Assert.assertEquals(file47.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file47.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1573130876427834938flatfile");
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray19 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList20 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20, cSVRecordArray19);
        java.io.File file22 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator23 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator23, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder28 = builder26.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions29 = builder28.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = csvSortOptions29.getComparator();
        java.io.File file31 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList20, file22, csvSortOptions29);
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file31);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file45, strComparator46, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator49, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = builder52.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions55 = builder54.build();
        boolean boolean56 = csvSortOptions55.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions55.getComparator();
        java.nio.charset.Charset charset58 = csvSortOptions55.getCharset();
        long long60 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList18, file31, strComparator46, charset58, false);
        long long61 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) strComparator46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, (long) (byte) 100, strComparator46, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7705557175863443834flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(cSVRecordArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(csvSortOptions29);
        org.junit.Assert.assertNull(cSVRecordComparator30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9039690459650461787flatfile");
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5499600323902693669flatfile");
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(csvSortOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 168L + "'", long61 == 168L);
    }

    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.Comparator<java.lang.String> strComparator14 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13, strComparator14, false);
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray18 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList19, cSVRecordArray18);
        java.io.File file21 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator22 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator22, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder25.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions28 = builder27.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = csvSortOptions28.getComparator();
        java.io.File file30 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file21, csvSortOptions28);
        java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(file30);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        java.util.Comparator<java.lang.String> strComparator45 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList47 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44, strComparator45, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator48, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = builder51.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions54 = builder53.build();
        boolean boolean55 = csvSortOptions54.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = csvSortOptions54.getComparator();
        java.nio.charset.Charset charset57 = csvSortOptions54.getCharset();
        long long59 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList17, file30, strComparator45, charset57, false);
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray61 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList62 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList62, iOStringStackArray61);
        // The following exception was thrown during execution in test generation
        try {
            long long64 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator45, true, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2285328900666196802flatfile");
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(cSVRecordArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(csvSortOptions28);
        org.junit.Assert.assertNull(cSVRecordComparator29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8921102732552122996flatfile");
        org.junit.Assert.assertNotNull(fileList31);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4755818096496463138flatfile");
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(fileList47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(csvSortOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cSVRecordComparator56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(iOStringStackArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        java.io.BufferedReader bufferedReader1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        boolean boolean26 = csvSortOptions25.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat27 = csvSortOptions25.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat28 = csvSortOptions25.getFormat();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        java.util.List<java.io.File> fileList56 = com.google.code.externalsorting.ExternalSort.sortInBatch(file55);
        java.util.List<java.io.File> fileList57 = com.google.code.externalsorting.ExternalSort.sortInBatch(file55);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator58 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator58, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = builder61.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray70 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList71 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList71, cSVRecordArray70);
        java.io.File file73 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder77 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator74, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = builder77.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions80 = builder79.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = csvSortOptions80.getComparator();
        java.io.File file82 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71, file73, csvSortOptions80);
        int int83 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList42, file55, csvSortOptions68, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList84 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(0L, bufferedReader1, file14, csvSortOptions25, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3631599162713555478flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5508174810872802828flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9082161982953468763flatfile");
        org.junit.Assert.assertNotNull(fileList56);
        org.junit.Assert.assertNotNull(fileList57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNotNull(cSVRecordArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(csvSortOptions80);
        org.junit.Assert.assertNull(cSVRecordComparator81);
        org.junit.Assert.assertNotNull(file82);
        org.junit.Assert.assertEquals(file82.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file82.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4831814902128967823flatfile");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator62, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = csvSortOptions68.getComparator();
        java.io.File file70 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file52, csvSortOptions68);
        com.google.code.externalsorting.ExternalSort.sort(file34, file70);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray72 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList73 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList73, cSVRecordArray72);
        java.io.File file75 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList73, file75, csvSortOptions82);
        java.util.Comparator<java.lang.String> strComparator85 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList87 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84, strComparator85, false);
        java.util.List<java.io.File> fileList89 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70, strComparator85, false);
        java.util.List<java.io.File> fileList90 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70);
        java.util.List<java.io.File> fileList91 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1318504700837267999flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1966071889736274380flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch105657337644532676flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7251636575780487373flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8015226071720056452flatfile");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNull(cSVRecordComparator69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file70.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8692053483421177666flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7219910010497969928flatfile");
        org.junit.Assert.assertNotNull(strComparator85);
        org.junit.Assert.assertNotNull(fileList87);
        org.junit.Assert.assertNotNull(fileList89);
        org.junit.Assert.assertNotNull(fileList90);
        org.junit.Assert.assertNotNull(fileList91);
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator0 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder3 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator0, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder5 = builder3.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions6 = builder5.build();
        boolean boolean7 = csvSortOptions6.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator8 = csvSortOptions6.getComparator();
        long long9 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) csvSortOptions6);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(csvSortOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(cSVRecordComparator8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 176L + "'", long9 == 176L);
    }

    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        boolean boolean35 = csvSortOptions32.isSkipHeader();
        boolean boolean36 = csvSortOptions32.isDistinct();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch978001113192455274flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5157792425724396923flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7860672375992441251flatfile");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.Comparator<java.lang.String> strComparator14 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13, strComparator14, false);
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray18 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList19, cSVRecordArray18);
        java.io.File file21 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator22 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator22, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder25.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions28 = builder27.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = csvSortOptions28.getComparator();
        java.io.File file30 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file21, csvSortOptions28);
        java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(file30);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        java.util.Comparator<java.lang.String> strComparator45 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList47 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44, strComparator45, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator48, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = builder51.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions54 = builder53.build();
        boolean boolean55 = csvSortOptions54.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = csvSortOptions54.getComparator();
        java.nio.charset.Charset charset57 = csvSortOptions54.getCharset();
        long long59 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList17, file30, strComparator45, charset57, false);
        long long60 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) strComparator45);
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray62 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList63 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList63, iOStringStackArray62);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator45, false, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1219355359392017483flatfile");
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(cSVRecordArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(csvSortOptions28);
        org.junit.Assert.assertNull(cSVRecordComparator29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5877807436230470749flatfile");
        org.junit.Assert.assertNotNull(fileList31);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5253674098321003465flatfile");
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertNotNull(fileList47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(csvSortOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(cSVRecordComparator56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 168L + "'", long60 == 168L);
        org.junit.Assert.assertNotNull(iOStringStackArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, false);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        java.util.Comparator<java.lang.String> strComparator30 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29, strComparator30, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator34, 1, (long) '#');
        java.nio.charset.Charset charset38 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.charset(charset38);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        boolean boolean47 = csvSortOptions46.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat48 = csvSortOptions46.getFormat();
        java.nio.charset.Charset charset49 = csvSortOptions46.getCharset();
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder37.charset(charset49);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray51 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList52 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52, cSVRecordArray51);
        java.io.File file54 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions61 = builder60.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = csvSortOptions61.getComparator();
        java.io.File file63 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file54, csvSortOptions61);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray64 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65, cSVRecordArray64);
        java.io.File file67 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList65, file67, csvSortOptions74);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator77, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder82 = builder80.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions83 = builder82.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator84 = csvSortOptions83.getComparator();
        java.io.File file85 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file67, csvSortOptions83);
        java.util.List<java.io.File> fileList86 = com.google.code.externalsorting.ExternalSort.sortInBatch(file85);
        java.util.Comparator<java.lang.String> strComparator87 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList88 = com.google.code.externalsorting.ExternalSort.sortInBatch(file85, strComparator87);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList90 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator30, (int) '#', charset49, file85, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1291960935076707108flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4089824390357704873flatfile");
        org.junit.Assert.assertNotNull(strComparator30);
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVRecordArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(csvSortOptions61);
        org.junit.Assert.assertNull(cSVRecordComparator62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5879407405963632049flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5907568185077884827flatfile");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(csvSortOptions83);
        org.junit.Assert.assertNull(cSVRecordComparator84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file85.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5077201603713111004flatfile");
        org.junit.Assert.assertNotNull(fileList86);
        org.junit.Assert.assertNotNull(strComparator87);
        org.junit.Assert.assertNotNull(fileList88);
    }

    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.Comparator<java.lang.String> strComparator36 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator36);
        java.util.List<java.io.File> fileList38 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray39 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList40 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList40, cSVRecordArray39);
        java.io.File file42 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions49 = builder48.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = csvSortOptions49.getComparator();
        java.io.File file51 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList40, file42, csvSortOptions49);
        java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.ExternalSort.sortInBatch(file51);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray53 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList54 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList54, cSVRecordArray53);
        java.io.File file56 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator57, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = builder60.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions63 = builder62.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator64 = csvSortOptions63.getComparator();
        java.io.File file65 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList54, file56, csvSortOptions63);
        java.util.List<java.io.File> fileList66 = com.google.code.externalsorting.ExternalSort.sortInBatch(file65);
        java.util.List<java.io.File> fileList67 = com.google.code.externalsorting.ExternalSort.sortInBatch(file65);
        java.util.Comparator<java.lang.String> strComparator68 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long70 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList52, file65, strComparator68, true);
        java.util.List<java.io.File> fileList72 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator68, false);
        java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3424985263469307196flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9027106301336277750flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7434810088717703442flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(fileList38);
        org.junit.Assert.assertNotNull(cSVRecordArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(csvSortOptions49);
        org.junit.Assert.assertNull(cSVRecordComparator50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file51.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5390439154384651137flatfile");
        org.junit.Assert.assertNotNull(fileList52);
        org.junit.Assert.assertNotNull(cSVRecordArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(csvSortOptions63);
        org.junit.Assert.assertNull(cSVRecordComparator64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file65.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1722481901852831721flatfile");
        org.junit.Assert.assertNotNull(fileList66);
        org.junit.Assert.assertNotNull(fileList67);
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(fileList72);
        org.junit.Assert.assertNotNull(fileList73);
    }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray18 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList19 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList19, cSVRecordArray18);
        java.io.File file21 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator22 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator22, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder25.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions28 = builder27.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = csvSortOptions28.getComparator();
        java.io.File file30 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList19, file21, csvSortOptions28);
        java.util.List<java.io.File> fileList31 = com.google.code.externalsorting.ExternalSort.sortInBatch(file30);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        java.util.List<java.io.File> fileList45 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44);
        java.util.List<java.io.File> fileList46 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44);
        java.util.Comparator<java.lang.String> strComparator47 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long49 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList31, file44, strComparator47, true);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(file62);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray64 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList65 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList65, cSVRecordArray64);
        java.io.File file67 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList65, file67, csvSortOptions74);
        java.util.List<java.io.File> fileList77 = com.google.code.externalsorting.ExternalSort.sortInBatch(file76);
        java.util.List<java.io.File> fileList78 = com.google.code.externalsorting.ExternalSort.sortInBatch(file76);
        java.util.Comparator<java.lang.String> strComparator79 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long81 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList63, file76, strComparator79, true);
        java.util.Comparator<java.lang.String> strComparator82 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList83 = com.google.code.externalsorting.ExternalSort.sortInBatch(file76, strComparator82);
        com.google.code.externalsorting.ExternalSort.sort(file14, file44, strComparator82);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList86 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 85L, strComparator82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7998340523474009056flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(cSVRecordArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(csvSortOptions28);
        org.junit.Assert.assertNull(cSVRecordComparator29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8392341849850872705flatfile");
        org.junit.Assert.assertNotNull(fileList31);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7148410312422127690flatfile");
        org.junit.Assert.assertNotNull(fileList45);
        org.junit.Assert.assertNotNull(fileList46);
        org.junit.Assert.assertNotNull(strComparator47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4358544273241066167flatfile");
        org.junit.Assert.assertNotNull(fileList63);
        org.junit.Assert.assertNotNull(cSVRecordArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3089829126080737491flatfile");
        org.junit.Assert.assertNotNull(fileList77);
        org.junit.Assert.assertNotNull(fileList78);
        org.junit.Assert.assertNotNull(strComparator79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertNotNull(fileList83);
    }

    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        java.io.BufferedReader bufferedReader1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray19 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList20 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20, cSVRecordArray19);
        java.io.File file22 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator23 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator23, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder28 = builder26.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions29 = builder28.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = csvSortOptions29.getComparator();
        java.io.File file31 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList20, file22, csvSortOptions29);
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file31);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file45, strComparator46, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator49, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = builder52.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions55 = builder54.build();
        boolean boolean56 = csvSortOptions55.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions55.getComparator();
        java.nio.charset.Charset charset58 = csvSortOptions55.getCharset();
        long long60 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList18, file31, strComparator46, charset58, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder68 = builder64.numHeader((int) (short) 0);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions69 = builder68.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray70 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList71 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList71, cSVRecordArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(42L, bufferedReader1, file31, csvSortOptions69, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6586578196305112873flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(cSVRecordArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(csvSortOptions29);
        org.junit.Assert.assertNull(cSVRecordComparator30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1550871528389750131flatfile");
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch556679154738880799flatfile");
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(csvSortOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(csvSortOptions69);
        org.junit.Assert.assertNotNull(cSVRecordArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test210");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<java.lang.String> strComparator29 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long31 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file26, strComparator29, true);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray32 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList33 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList33, cSVRecordArray32);
        java.io.File file35 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator36 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator36, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder41 = builder39.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions42 = builder41.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = csvSortOptions42.getComparator();
        java.io.File file44 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList33, file35, csvSortOptions42);
        java.util.List<java.io.File> fileList45 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44);
        java.util.List<java.io.File> fileList46 = com.google.code.externalsorting.ExternalSort.sortInBatch(file44);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        org.apache.commons.csv.CSVFormat cSVFormat54 = csvSortOptions53.getFormat();
        java.nio.charset.Charset charset55 = csvSortOptions53.getCharset();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray57 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList58 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList58, cSVRecordArray57);
        java.io.File file60 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = csvSortOptions67.getComparator();
        java.io.File file69 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58, file60, csvSortOptions67);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray70 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList71 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList71, cSVRecordArray70);
        java.io.File file73 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder77 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator74, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = builder77.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions80 = builder79.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = csvSortOptions80.getComparator();
        java.io.File file82 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71, file73, csvSortOptions80);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator83, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder88 = builder86.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions89 = builder88.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator90 = csvSortOptions89.getComparator();
        java.io.File file91 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58, file73, csvSortOptions89);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file44, csvSortOptions53, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6550134465814419471flatfile (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2860259059034160335flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6990388993884971866flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(strComparator29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(csvSortOptions42);
        org.junit.Assert.assertNull(cSVRecordComparator43);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5030309700691410913flatfile");
        org.junit.Assert.assertNotNull(fileList45);
        org.junit.Assert.assertNotNull(fileList46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(cSVRecordArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertNull(cSVRecordComparator68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5709943244653238945flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(csvSortOptions80);
        org.junit.Assert.assertNull(cSVRecordComparator81);
        org.junit.Assert.assertNotNull(file82);
        org.junit.Assert.assertEquals(file82.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file82.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1214561422761079285flatfile");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(csvSortOptions89);
        org.junit.Assert.assertNull(cSVRecordComparator90);
        org.junit.Assert.assertNotNull(file91);
        org.junit.Assert.assertEquals(file91.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file91.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2026484973040677154flatfile");
    }

    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test214");
        java.io.BufferedWriter bufferedWriter0 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator1 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder4 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator1, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder6 = builder4.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions7 = builder6.build();
        boolean boolean8 = csvSortOptions7.isSkipHeader();
        boolean boolean9 = csvSortOptions7.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator10 = csvSortOptions7.getComparator();
        com.google.code.externalsorting.csv.CSVRecordBuffer[] cSVRecordBufferArray11 = new com.google.code.externalsorting.csv.CSVRecordBuffer[] {};
        java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer> cSVRecordBufferList12 = new java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList12, cSVRecordBufferArray11);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        java.util.List<java.io.File> fileList41 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        int int68 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList27, file40, csvSortOptions53, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(bufferedWriter0, csvSortOptions7, (java.util.List<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList12, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(csvSortOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(cSVRecordComparator10);
        org.junit.Assert.assertNotNull(cSVRecordBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1220948334550607162flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2842536739629249759flatfile");
        org.junit.Assert.assertNotNull(fileList41);
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8206132130181006887flatfile");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.Comparator<java.lang.String> strComparator5 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator5;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator7 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator7, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = builder10.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions13 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator14 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder17 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator14, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder19 = builder17.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions20 = builder19.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = csvSortOptions20.getComparator();
        java.nio.charset.Charset charset22 = csvSortOptions20.getCharset();
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder10.charset(charset22);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray24 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList25 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList25, cSVRecordArray24);
        java.io.File file27 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator28, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = builder31.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions34 = builder33.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions34.getComparator();
        java.io.File file36 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList25, file27, csvSortOptions34);
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray38 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList39 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList39, cSVRecordArray38);
        java.io.File file41 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file41, csvSortOptions48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray51 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList52 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52, cSVRecordArray51);
        java.io.File file54 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions61 = builder60.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = csvSortOptions61.getComparator();
        java.io.File file63 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file54, csvSortOptions61);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator64 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator64, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder69 = builder67.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions70 = builder69.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator71 = csvSortOptions70.getComparator();
        java.io.File file72 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file54, csvSortOptions70);
        java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.ExternalSort.sortInBatch(file72);
        java.util.Comparator<java.lang.String> strComparator74 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file36, file72, strComparator74);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file76 = com.google.code.externalsorting.ExternalSort.sortAndSave((java.util.List<java.lang.String>) strList3, strComparator5, charset22, file36);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a directory");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strComparator5);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(csvSortOptions13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(csvSortOptions20);
        org.junit.Assert.assertNull(cSVRecordComparator21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVRecordArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(csvSortOptions34);
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1018689270397015723flatfile");
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(cSVRecordArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4575934942048688810flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(csvSortOptions61);
        org.junit.Assert.assertNull(cSVRecordComparator62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2548931958343137446flatfile");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(csvSortOptions70);
        org.junit.Assert.assertNull(cSVRecordComparator71);
        org.junit.Assert.assertNotNull(file72);
        org.junit.Assert.assertEquals(file72.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file72.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3171922045420703464flatfile");
        org.junit.Assert.assertNotNull(fileList73);
        org.junit.Assert.assertNotNull(strComparator74);
    }

    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test216");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, false);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch337771178325558751flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(fileList17);
    }

    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test217");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.nio.charset.Charset charset28 = csvSortOptions26.getCharset();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        java.util.List<java.io.File> fileList56 = com.google.code.externalsorting.ExternalSort.sortInBatch(file55);
        java.util.List<java.io.File> fileList57 = com.google.code.externalsorting.ExternalSort.sortInBatch(file55);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator58 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator58, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = builder61.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray70 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList71 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList71, cSVRecordArray70);
        java.io.File file73 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder77 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator74, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = builder77.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions80 = builder79.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = csvSortOptions80.getComparator();
        java.io.File file82 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71, file73, csvSortOptions80);
        int int83 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList42, file55, csvSortOptions68, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList88 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 68L, strComparator15, (-1), 50L, charset28, file55, false, (int) ' ', false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2342021977947439321flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1635458174887050471flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8102681374062578922flatfile");
        org.junit.Assert.assertNotNull(fileList56);
        org.junit.Assert.assertNotNull(fileList57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNotNull(cSVRecordArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(csvSortOptions80);
        org.junit.Assert.assertNull(cSVRecordComparator81);
        org.junit.Assert.assertNotNull(file82);
        org.junit.Assert.assertEquals(file82.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file82.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2043376098750931405flatfile");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        java.io.File file0 = null;
        java.util.Comparator<java.lang.String> strComparator1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator28, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder33 = builder31.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions34 = builder33.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions34.getComparator();
        java.io.File file36 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file18, csvSortOptions34);
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList40 = com.google.code.externalsorting.ExternalSort.sortInBatch(file0, strComparator1, file36, true, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2184789156487398420flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch328295964408925430flatfile");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(csvSortOptions34);
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertEquals(file36.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file36.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8964259180940561181flatfile");
        org.junit.Assert.assertNotNull(fileList37);
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        java.io.BufferedWriter bufferedWriter0 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator1 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder4 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator1, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder6 = builder4.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions7 = builder6.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator8 = csvSortOptions7.getComparator();
        java.nio.charset.Charset charset9 = csvSortOptions7.getCharset();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator10 = csvSortOptions7.getComparator();
        int int11 = csvSortOptions7.getMaxTmpFiles();
        com.google.code.externalsorting.csv.CSVRecordBuffer[] cSVRecordBufferArray12 = new com.google.code.externalsorting.csv.CSVRecordBuffer[] {};
        java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer> cSVRecordBufferList13 = new java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList13, cSVRecordBufferArray12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file27);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        java.util.List<java.io.File> fileList43 = com.google.code.externalsorting.ExternalSort.sortInBatch(file41);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator44, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = builder47.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = builder49.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = builder51.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions54 = builder53.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray56 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList57 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList57, cSVRecordArray56);
        java.io.File file59 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator60, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions66 = builder65.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = csvSortOptions66.getComparator();
        java.io.File file68 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57, file59, csvSortOptions66);
        int int69 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList28, file41, csvSortOptions54, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(bufferedWriter0, csvSortOptions7, (java.util.List<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList13, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(csvSortOptions7);
        org.junit.Assert.assertNull(cSVRecordComparator8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNull(cSVRecordComparator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(cSVRecordBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch775184779630444673flatfile");
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5555811253012494567flatfile");
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(fileList43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(csvSortOptions54);
        org.junit.Assert.assertNotNull(cSVRecordArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(csvSortOptions66);
        org.junit.Assert.assertNull(cSVRecordComparator67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2511367227776454716flatfile");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        java.util.List<java.io.File> fileList62 = com.google.code.externalsorting.ExternalSort.sortInBatch(file61);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.List<java.io.File> fileList76 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75);
        java.util.List<java.io.File> fileList77 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75);
        java.util.Comparator<java.lang.String> strComparator78 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long80 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList62, file75, strComparator78, true);
        java.util.Comparator<java.lang.String> strComparator81 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList82 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75, strComparator81);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator83, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder88 = builder86.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions89 = builder88.build();
        boolean boolean90 = csvSortOptions89.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator91 = csvSortOptions89.getComparator();
        java.nio.charset.Charset charset92 = csvSortOptions89.getCharset();
        long long96 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, file48, strComparator81, charset92, true, false, false);
        java.util.Comparator<java.lang.String> strComparator97 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator97;
        java.util.List<java.io.File> fileList99 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48, strComparator97);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8144943654241739860flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6231745601191270884flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7750254421521407281flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1113216931805977012flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5980172442121463845flatfile");
        org.junit.Assert.assertNotNull(fileList62);
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2011701885020064216flatfile");
        org.junit.Assert.assertNotNull(fileList76);
        org.junit.Assert.assertNotNull(fileList77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(fileList82);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(csvSortOptions89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(cSVRecordComparator91);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(strComparator97);
        org.junit.Assert.assertNotNull(fileList99);
    }

    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.Comparator<java.lang.String> strComparator14 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13, strComparator14, false);
        java.util.List<com.google.code.externalsorting.IOStringStack> iOStringStackList18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator14, true, iOStringStackList18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8291356586882005355flatfile");
        org.junit.Assert.assertNotNull(strComparator14);
        org.junit.Assert.assertNotNull(fileList16);
    }

    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test223");
        java.io.BufferedWriter bufferedWriter0 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator1 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder4 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator1, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder6 = builder4.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions7 = builder6.build();
        long long8 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) csvSortOptions7);
        boolean boolean9 = csvSortOptions7.isDistinct();
        com.google.code.externalsorting.csv.CSVRecordBuffer[] cSVRecordBufferArray10 = new com.google.code.externalsorting.csv.CSVRecordBuffer[] {};
        java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer> cSVRecordBufferList11 = new java.util.ArrayList<com.google.code.externalsorting.csv.CSVRecordBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList11, cSVRecordBufferArray10);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(bufferedWriter0, csvSortOptions7, (java.util.List<com.google.code.externalsorting.csv.CSVRecordBuffer>) cSVRecordBufferList11, cSVRecordList13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(csvSortOptions7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 176L + "'", long8 == 176L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVRecordBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test227");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.Comparator<java.lang.String> strComparator36 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator36);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray38 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList39 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList39, cSVRecordArray38);
        java.io.File file41 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList39, file41, csvSortOptions48);
        java.util.List<java.io.File> fileList51 = com.google.code.externalsorting.ExternalSort.sortInBatch(file50);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray52 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList53 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53, cSVRecordArray52);
        java.io.File file55 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator56, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = builder59.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions62 = builder61.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = csvSortOptions62.getComparator();
        java.io.File file64 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList53, file55, csvSortOptions62);
        java.util.List<java.io.File> fileList65 = com.google.code.externalsorting.ExternalSort.sortInBatch(file64);
        java.util.List<java.io.File> fileList66 = com.google.code.externalsorting.ExternalSort.sortInBatch(file64);
        java.util.Comparator<java.lang.String> strComparator67 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long69 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList51, file64, strComparator67, true);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator67;
        java.util.List<java.io.File> fileList71 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator67);
        java.util.Comparator<java.lang.String> strComparator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1934771716109575892flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4002015716232283514flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch297905828204139261flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(cSVRecordArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7590950238039121102flatfile");
        org.junit.Assert.assertNotNull(fileList51);
        org.junit.Assert.assertNotNull(cSVRecordArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(csvSortOptions62);
        org.junit.Assert.assertNull(cSVRecordComparator63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7458614984568305431flatfile");
        org.junit.Assert.assertNotNull(fileList65);
        org.junit.Assert.assertNotNull(fileList66);
        org.junit.Assert.assertNotNull(strComparator67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(fileList71);
    }

    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        java.util.Comparator<java.lang.String> strComparator36 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34, strComparator36);
        java.util.List<java.io.File> fileList38 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray39 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList40 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList40, cSVRecordArray39);
        java.io.File file42 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator43 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator43, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = builder46.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions49 = builder48.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator50 = csvSortOptions49.getComparator();
        java.io.File file51 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList40, file42, csvSortOptions49);
        java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.ExternalSort.sortInBatch(file51);
        java.util.List<java.io.File> fileList53 = com.google.code.externalsorting.ExternalSort.sortInBatch(file51);
        java.util.List<java.io.File> fileList54 = com.google.code.externalsorting.ExternalSort.sortInBatch(file51);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, 1, (long) '#');
        java.nio.charset.Charset charset59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.charset(charset59);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        boolean boolean68 = csvSortOptions67.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat69 = csvSortOptions67.getFormat();
        java.nio.charset.Charset charset70 = csvSortOptions67.getCharset();
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = builder58.charset(charset70);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions72 = builder71.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray73 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList74 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList74, cSVRecordArray73);
        java.io.File file76 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator77, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder82 = builder80.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions83 = builder82.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator84 = csvSortOptions83.getComparator();
        java.io.File file85 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList74, file76, csvSortOptions83);
        java.util.List<java.io.File> fileList86 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file51, csvSortOptions72, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList74);
        java.util.List<java.io.File> fileList87 = com.google.code.externalsorting.ExternalSort.sortInBatch(file51);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3014565902414752657flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4578594433754392154flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9086348408235556463flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(strComparator36);
        org.junit.Assert.assertNotNull(fileList37);
        org.junit.Assert.assertNotNull(fileList38);
        org.junit.Assert.assertNotNull(cSVRecordArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(csvSortOptions49);
        org.junit.Assert.assertNull(cSVRecordComparator50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertEquals(file51.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file51.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3209271022574954357flatfile");
        org.junit.Assert.assertNotNull(fileList52);
        org.junit.Assert.assertNotNull(fileList53);
        org.junit.Assert.assertNotNull(fileList54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(csvSortOptions72);
        org.junit.Assert.assertNotNull(cSVRecordArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(csvSortOptions83);
        org.junit.Assert.assertNull(cSVRecordComparator84);
        org.junit.Assert.assertNotNull(file85);
        org.junit.Assert.assertEquals(file85.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file85.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1018854781334869891flatfile");
        org.junit.Assert.assertNotNull(fileList86);
        org.junit.Assert.assertNotNull(fileList87);
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder44 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator41, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder46 = builder44.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions47 = builder46.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = csvSortOptions47.getComparator();
        java.io.File file49 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file31, csvSortOptions47);
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file49);
        java.util.List<java.io.File> fileList51 = com.google.code.externalsorting.ExternalSort.sortInBatch(file49);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray52 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList53 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList53, cSVRecordArray52);
        java.io.File file55 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator56 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator56, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = builder59.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions62 = builder61.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator63 = csvSortOptions62.getComparator();
        java.io.File file64 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList53, file55, csvSortOptions62);
        java.util.List<java.io.File> fileList65 = com.google.code.externalsorting.ExternalSort.sortInBatch(file64);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray66 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList67 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList67, cSVRecordArray66);
        java.io.File file69 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator70 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator70, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder75 = builder73.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions76 = builder75.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = csvSortOptions76.getComparator();
        java.io.File file78 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList67, file69, csvSortOptions76);
        java.util.List<java.io.File> fileList79 = com.google.code.externalsorting.ExternalSort.sortInBatch(file78);
        java.util.List<java.io.File> fileList80 = com.google.code.externalsorting.ExternalSort.sortInBatch(file78);
        java.util.Comparator<java.lang.String> strComparator81 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long83 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList65, file78, strComparator81, true);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator84 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder87 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator84, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder89 = builder87.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions90 = builder89.build();
        long long91 = csvSortOptions90.getMaxMemory();
        java.nio.charset.Charset charset92 = csvSortOptions90.getCharset();
        long long94 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList14, file49, strComparator81, charset92, false);
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray96 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList97 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean98 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList97, iOStringStackArray96);
        // The following exception was thrown during execution in test generation
        try {
            long long99 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator81, true, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7761520666489658349flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1950192830164382551flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6742975624706893285flatfile");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(csvSortOptions47);
        org.junit.Assert.assertNull(cSVRecordComparator48);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5076575676372397726flatfile");
        org.junit.Assert.assertNotNull(fileList50);
        org.junit.Assert.assertNotNull(fileList51);
        org.junit.Assert.assertNotNull(cSVRecordArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(csvSortOptions62);
        org.junit.Assert.assertNull(cSVRecordComparator63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertEquals(file64.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7466676048470987998flatfile");
        org.junit.Assert.assertNotNull(fileList65);
        org.junit.Assert.assertNotNull(cSVRecordArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(csvSortOptions76);
        org.junit.Assert.assertNull(cSVRecordComparator77);
        org.junit.Assert.assertNotNull(file78);
        org.junit.Assert.assertEquals(file78.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file78.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3417539402287123542flatfile");
        org.junit.Assert.assertNotNull(fileList79);
        org.junit.Assert.assertNotNull(fileList80);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(csvSortOptions90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(iOStringStackArray96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test234");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray19 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList20 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20, cSVRecordArray19);
        java.io.File file22 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator23 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator23, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder28 = builder26.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions29 = builder28.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = csvSortOptions29.getComparator();
        java.io.File file31 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList20, file22, csvSortOptions29);
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file31);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file45, strComparator46, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator49, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = builder52.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions55 = builder54.build();
        boolean boolean56 = csvSortOptions55.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions55.getComparator();
        java.nio.charset.Charset charset58 = csvSortOptions55.getCharset();
        long long60 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList18, file31, strComparator46, charset58, false);
        long long61 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) strComparator46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 512L, strComparator46, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8437724439140724188flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(cSVRecordArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(csvSortOptions29);
        org.junit.Assert.assertNull(cSVRecordComparator30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2041690519105057178flatfile");
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3052940230906637403flatfile");
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(csvSortOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 168L + "'", long61 == 168L);
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        java.io.BufferedWriter bufferedWriter0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder30 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator27, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = builder30.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions33 = builder32.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = csvSortOptions33.getComparator();
        java.io.File file35 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file17, csvSortOptions33);
        java.util.List<java.io.File> fileList36 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35);
        java.util.Comparator<java.lang.String> strComparator37 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList38 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35, strComparator37);
        java.util.List<java.io.File> fileList39 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray40 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList41 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList41, cSVRecordArray40);
        java.io.File file43 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator44, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = builder47.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions50 = builder49.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator51 = csvSortOptions50.getComparator();
        java.io.File file52 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList41, file43, csvSortOptions50);
        java.util.List<java.io.File> fileList53 = com.google.code.externalsorting.ExternalSort.sortInBatch(file52);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray54 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList55 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList55, cSVRecordArray54);
        java.io.File file57 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator58 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder61 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator58, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = builder61.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions64 = builder63.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator65 = csvSortOptions64.getComparator();
        java.io.File file66 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList55, file57, csvSortOptions64);
        java.util.List<java.io.File> fileList67 = com.google.code.externalsorting.ExternalSort.sortInBatch(file66);
        java.util.List<java.io.File> fileList68 = com.google.code.externalsorting.ExternalSort.sortInBatch(file66);
        java.util.Comparator<java.lang.String> strComparator69 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long71 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList53, file66, strComparator69, true);
        java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.ExternalSort.sortInBatch(file35, strComparator69, false);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator69;
        com.google.code.externalsorting.IOStringStack[] iOStringStackArray76 = new com.google.code.externalsorting.IOStringStack[] {};
        java.util.ArrayList<com.google.code.externalsorting.IOStringStack> iOStringStackList77 = new java.util.ArrayList<com.google.code.externalsorting.IOStringStack>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.code.externalsorting.IOStringStack>) iOStringStackList77, iOStringStackArray76);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(bufferedWriter0, strComparator69, true, (java.util.List<com.google.code.externalsorting.IOStringStack>) iOStringStackList77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7046456569840309578flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4228469779310191964flatfile");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(csvSortOptions33);
        org.junit.Assert.assertNull(cSVRecordComparator34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertEquals(file35.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file35.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7874186533258492480flatfile");
        org.junit.Assert.assertNotNull(fileList36);
        org.junit.Assert.assertNotNull(strComparator37);
        org.junit.Assert.assertNotNull(fileList38);
        org.junit.Assert.assertNotNull(fileList39);
        org.junit.Assert.assertNotNull(cSVRecordArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(csvSortOptions50);
        org.junit.Assert.assertNull(cSVRecordComparator51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file52.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4361485846201312744flatfile");
        org.junit.Assert.assertNotNull(fileList53);
        org.junit.Assert.assertNotNull(cSVRecordArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(csvSortOptions64);
        org.junit.Assert.assertNull(cSVRecordComparator65);
        org.junit.Assert.assertNotNull(file66);
        org.junit.Assert.assertEquals(file66.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file66.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3736936229187593763flatfile");
        org.junit.Assert.assertNotNull(fileList67);
        org.junit.Assert.assertNotNull(fileList68);
        org.junit.Assert.assertNotNull(strComparator69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fileList73);
        org.junit.Assert.assertNotNull(iOStringStackArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray19 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList20 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20, cSVRecordArray19);
        java.io.File file22 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator23 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator23, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder28 = builder26.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions29 = builder28.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = csvSortOptions29.getComparator();
        java.io.File file31 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList20, file22, csvSortOptions29);
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file31);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file45, strComparator46, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator49, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = builder52.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions55 = builder54.build();
        boolean boolean56 = csvSortOptions55.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions55.getComparator();
        java.nio.charset.Charset charset58 = csvSortOptions55.getCharset();
        long long60 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList18, file31, strComparator46, charset58, false);
        long long61 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) strComparator46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 176L, strComparator46, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6261412093884992110flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(cSVRecordArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(csvSortOptions29);
        org.junit.Assert.assertNull(cSVRecordComparator30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6280414811011342060flatfile");
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7368733543343944159flatfile");
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(csvSortOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 168L + "'", long61 == 168L);
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        java.util.List<java.io.File> fileList62 = com.google.code.externalsorting.ExternalSort.sortInBatch(file61);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.List<java.io.File> fileList76 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75);
        java.util.List<java.io.File> fileList77 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75);
        java.util.Comparator<java.lang.String> strComparator78 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long80 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList62, file75, strComparator78, true);
        java.util.Comparator<java.lang.String> strComparator81 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList82 = com.google.code.externalsorting.ExternalSort.sortInBatch(file75, strComparator81);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator83, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder88 = builder86.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions89 = builder88.build();
        boolean boolean90 = csvSortOptions89.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator91 = csvSortOptions89.getComparator();
        java.nio.charset.Charset charset92 = csvSortOptions89.getCharset();
        long long96 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, file48, strComparator81, charset92, true, false, false);
        java.util.List<java.io.File> fileList97 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7966599319764142889flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1734672034891676821flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6677639520709667116flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2146859422874058858flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4426783095425083239flatfile");
        org.junit.Assert.assertNotNull(fileList62);
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6425923804521216682flatfile");
        org.junit.Assert.assertNotNull(fileList76);
        org.junit.Assert.assertNotNull(fileList77);
        org.junit.Assert.assertNotNull(strComparator78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(strComparator81);
        org.junit.Assert.assertNotNull(fileList82);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(csvSortOptions89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(cSVRecordComparator91);
        org.junit.Assert.assertNotNull(charset92);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(fileList97);
    }

    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test259");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<java.lang.String> strComparator68 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file67, strComparator68, false);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray71 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList72 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList72, cSVRecordArray71);
        java.io.File file74 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder78 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator75, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = builder78.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions81 = builder80.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator82 = csvSortOptions81.getComparator();
        java.io.File file83 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList72, file74, csvSortOptions81);
        java.util.Comparator<java.lang.String> strComparator84 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList86 = com.google.code.externalsorting.ExternalSort.sortInBatch(file83, strComparator84, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator87 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder90 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator87, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder92 = builder90.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions93 = builder92.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator94 = csvSortOptions93.getComparator();
        java.nio.charset.Charset charset95 = csvSortOptions93.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            long long99 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file67, strComparator84, charset95, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: /var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1741214878125385183flatfile (No such file or directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1543169428663712625flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8586739788347996561flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3029916923220061680flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8295378528496836383flatfile");
        org.junit.Assert.assertNotNull(strComparator68);
        org.junit.Assert.assertNotNull(fileList70);
        org.junit.Assert.assertNotNull(cSVRecordArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(csvSortOptions81);
        org.junit.Assert.assertNull(cSVRecordComparator82);
        org.junit.Assert.assertNotNull(file83);
        org.junit.Assert.assertEquals(file83.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file83.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch586812940570203558flatfile");
        org.junit.Assert.assertNotNull(strComparator84);
        org.junit.Assert.assertNotNull(fileList86);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(csvSortOptions93);
        org.junit.Assert.assertNull(cSVRecordComparator94);
        org.junit.Assert.assertNotNull(charset95);
    }

    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions32.getComparator();
        int int36 = csvSortOptions32.getNumHeader();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7070449862500853653flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8308126997141307005flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7880576626869929756flatfile");
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test263");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, false);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray30 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList31 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31, cSVRecordArray30);
        java.io.File file33 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator34, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions40 = builder39.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = csvSortOptions40.getComparator();
        java.io.File file42 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList31, file33, csvSortOptions40);
        java.util.List<java.io.File> fileList43 = com.google.code.externalsorting.ExternalSort.sortInBatch(file42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray44 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList45 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList45, cSVRecordArray44);
        java.io.File file47 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator48 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator48, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder53 = builder51.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions54 = builder53.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = csvSortOptions54.getComparator();
        java.io.File file56 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList45, file47, csvSortOptions54);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray57 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList58 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList58, cSVRecordArray57);
        java.io.File file60 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = csvSortOptions67.getComparator();
        java.io.File file69 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58, file60, csvSortOptions67);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator70 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator70, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder75 = builder73.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions76 = builder75.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = csvSortOptions76.getComparator();
        java.io.File file78 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList45, file60, csvSortOptions76);
        java.util.List<java.io.File> fileList79 = com.google.code.externalsorting.ExternalSort.sortInBatch(file78);
        java.util.Comparator<java.lang.String> strComparator80 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file42, file78, strComparator80);
        java.util.List<java.io.File> fileList83 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28, strComparator80, false);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator80, true);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5321803701719787827flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3174946267858746816flatfile");
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(cSVRecordArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(csvSortOptions40);
        org.junit.Assert.assertNull(cSVRecordComparator41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file42.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch231054931983744083flatfile");
        org.junit.Assert.assertNotNull(fileList43);
        org.junit.Assert.assertNotNull(cSVRecordArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(csvSortOptions54);
        org.junit.Assert.assertNull(cSVRecordComparator55);
        org.junit.Assert.assertNotNull(file56);
        org.junit.Assert.assertEquals(file56.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file56.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1649423400503449787flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertNull(cSVRecordComparator68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3047681326216864937flatfile");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(csvSortOptions76);
        org.junit.Assert.assertNull(cSVRecordComparator77);
        org.junit.Assert.assertNotNull(file78);
        org.junit.Assert.assertEquals(file78.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file78.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6468724024196903050flatfile");
        org.junit.Assert.assertNotNull(fileList79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(fileList83);
        org.junit.Assert.assertNotNull(fileList85);
    }

    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.code.externalsorting.ExternalSort.sort(file34, file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3866945100254427207flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7147332044110325540flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7363828806449585078flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1993266854547836549flatfile");
    }

    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test270");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray49 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList50 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList50, cSVRecordArray49);
        java.io.File file52 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder56 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator53, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = builder56.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions59 = builder58.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = csvSortOptions59.getComparator();
        java.io.File file61 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList50, file52, csvSortOptions59);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator62, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder67 = builder65.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions68 = builder67.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = csvSortOptions68.getComparator();
        java.io.File file70 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file52, csvSortOptions68);
        com.google.code.externalsorting.ExternalSort.sort(file34, file70);
        java.util.List<java.io.File> fileList72 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70);
        java.util.List<java.io.File> fileList73 = com.google.code.externalsorting.ExternalSort.sortInBatch(file70);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1902839729215960910flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1679588084868066976flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7289815565008744250flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4686929124310202891flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(csvSortOptions59);
        org.junit.Assert.assertNull(cSVRecordComparator60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertEquals(file61.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file61.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2031209895949021382flatfile");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(csvSortOptions68);
        org.junit.Assert.assertNull(cSVRecordComparator69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertEquals(file70.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file70.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8592776232324445533flatfile");
        org.junit.Assert.assertNotNull(fileList72);
        org.junit.Assert.assertNotNull(fileList73);
    }

    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test272");
        java.util.List<java.io.File> fileList0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray1 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList2 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList2, cSVRecordArray1);
        java.io.File file4 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator5 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder8 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator5, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder10 = builder8.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions11 = builder10.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator12 = csvSortOptions11.getComparator();
        java.io.File file13 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList2, file4, csvSortOptions11);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file13);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray31 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList32 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32, cSVRecordArray31);
        java.io.File file34 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator35, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = csvSortOptions41.getComparator();
        java.io.File file43 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList32, file34, csvSortOptions41);
        java.util.List<java.io.File> fileList44 = com.google.code.externalsorting.ExternalSort.sortInBatch(file43);
        java.util.List<java.io.File> fileList45 = com.google.code.externalsorting.ExternalSort.sortInBatch(file43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long48 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList30, file43, strComparator46, true);
        java.util.Comparator<java.lang.String> strComparator49 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file43, strComparator49);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList0, file13, strComparator49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(csvSortOptions11);
        org.junit.Assert.assertNull(cSVRecordComparator12);
        org.junit.Assert.assertNotNull(file13);
        org.junit.Assert.assertEquals(file13.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file13.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4195313131046015553flatfile");
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2490876515020981921flatfile");
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(cSVRecordArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNull(cSVRecordComparator42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4357110841528508833flatfile");
        org.junit.Assert.assertNotNull(fileList44);
        org.junit.Assert.assertNotNull(fileList45);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(strComparator49);
        org.junit.Assert.assertNotNull(fileList50);
    }

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, false);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray30 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList31 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList31, cSVRecordArray30);
        java.io.File file33 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator34 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator34, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder39 = builder37.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions40 = builder39.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator41 = csvSortOptions40.getComparator();
        java.io.File file42 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList31, file33, csvSortOptions40);
        java.util.List<java.io.File> fileList43 = com.google.code.externalsorting.ExternalSort.sortInBatch(file42);
        java.util.List<java.io.File> fileList44 = com.google.code.externalsorting.ExternalSort.sortInBatch(file42);
        java.util.Comparator<java.lang.String> strComparator45 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long47 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList29, file42, strComparator45, true);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray48 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList49 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList49, cSVRecordArray48);
        java.io.File file51 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder55 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator52, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = builder55.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions58 = builder57.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = csvSortOptions58.getComparator();
        java.io.File file60 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList49, file51, csvSortOptions58);
        java.util.List<java.io.File> fileList61 = com.google.code.externalsorting.ExternalSort.sortInBatch(file60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray62 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList63 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList63, cSVRecordArray62);
        java.io.File file65 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder69 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator66, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = builder69.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions72 = builder71.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator73 = csvSortOptions72.getComparator();
        java.io.File file74 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList63, file65, csvSortOptions72);
        java.util.List<java.io.File> fileList75 = com.google.code.externalsorting.ExternalSort.sortInBatch(file74);
        java.util.List<java.io.File> fileList76 = com.google.code.externalsorting.ExternalSort.sortInBatch(file74);
        java.util.Comparator<java.lang.String> strComparator77 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long79 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList61, file74, strComparator77, true);
        java.util.Comparator<java.lang.String> strComparator80 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList81 = com.google.code.externalsorting.ExternalSort.sortInBatch(file74, strComparator80);
        com.google.code.externalsorting.ExternalSort.sort(file12, file42, strComparator80);
        java.lang.Class<?> wildcardClass83 = strComparator80.getClass();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1564133684768588349flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3261730340860719811flatfile");
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(cSVRecordArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(csvSortOptions40);
        org.junit.Assert.assertNull(cSVRecordComparator41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertEquals(file42.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file42.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2075783410940558733flatfile");
        org.junit.Assert.assertNotNull(fileList43);
        org.junit.Assert.assertNotNull(fileList44);
        org.junit.Assert.assertNotNull(strComparator45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(csvSortOptions58);
        org.junit.Assert.assertNull(cSVRecordComparator59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertEquals(file60.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file60.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5463893311909263961flatfile");
        org.junit.Assert.assertNotNull(fileList61);
        org.junit.Assert.assertNotNull(cSVRecordArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(csvSortOptions72);
        org.junit.Assert.assertNull(cSVRecordComparator73);
        org.junit.Assert.assertNotNull(file74);
        org.junit.Assert.assertEquals(file74.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file74.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7519299601674177539flatfile");
        org.junit.Assert.assertNotNull(fileList75);
        org.junit.Assert.assertNotNull(fileList76);
        org.junit.Assert.assertNotNull(strComparator77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertNotNull(fileList81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test275");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file58, csvSortOptions74);
        boolean boolean77 = csvSortOptions74.isSkipHeader();
        boolean boolean78 = csvSortOptions74.isDistinct();
        int int79 = csvSortOptions74.getMaxTmpFiles();
        boolean boolean80 = csvSortOptions74.isDistinct();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3028365608960764396flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7905480307081023101flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5817635086219228371flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1497049221525875765flatfile");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6829719514407080628flatfile");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test277");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        java.util.Comparator<java.lang.String> strComparator31 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long33 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList15, file28, strComparator31, true);
        java.util.Comparator<java.lang.String> strComparator34 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28, strComparator34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList37 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 11L, strComparator34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5096215253584099950flatfile");
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2309192146010126640flatfile");
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(strComparator31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(strComparator34);
        org.junit.Assert.assertNotNull(fileList35);
    }

    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test282");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = csvSortOptions32.getComparator();
        int int36 = csvSortOptions32.getMaxTmpFiles();
        long long37 = csvSortOptions32.getMaxMemory();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1013912943066483310flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1433147655919762480flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1498862666956773305flatfile");
        org.junit.Assert.assertNull(cSVRecordComparator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test283");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.Comparator<java.lang.String> strComparator13 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator13, false);
        java.util.List<java.io.File> fileList16 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray17 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList18 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList18, cSVRecordArray17);
        java.io.File file20 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator21 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator21, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = builder24.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions27 = builder26.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator28 = csvSortOptions27.getComparator();
        java.io.File file29 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList18, file20, csvSortOptions27);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file29);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray31 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList32 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList32, cSVRecordArray31);
        java.io.File file34 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator35 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator35, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = csvSortOptions41.getComparator();
        java.io.File file43 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList32, file34, csvSortOptions41);
        java.util.Comparator<java.lang.String> strComparator44 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList46 = com.google.code.externalsorting.ExternalSort.sortInBatch(file43, strComparator44, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        boolean boolean54 = csvSortOptions53.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = csvSortOptions53.getComparator();
        java.nio.charset.Charset charset56 = csvSortOptions53.getCharset();
        long long58 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList16, file29, strComparator44, charset56, false);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator44;
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7634648515502732002flatfile");
        org.junit.Assert.assertNotNull(strComparator13);
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(fileList16);
        org.junit.Assert.assertNotNull(cSVRecordArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(csvSortOptions27);
        org.junit.Assert.assertNull(cSVRecordComparator28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5370307870896307869flatfile");
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(cSVRecordArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNull(cSVRecordComparator42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3831180853209920340flatfile");
        org.junit.Assert.assertNotNull(strComparator44);
        org.junit.Assert.assertNotNull(fileList46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(cSVRecordComparator55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test285");
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator0 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder3 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator0, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder5 = builder3.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = builder5.skipHeader(false);
        long long8 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) builder7);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator9 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder12 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator9, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder14 = builder12.numHeader((int) (short) 0);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator15 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder18 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator15, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = builder18.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions21 = builder20.build();
        boolean boolean22 = csvSortOptions21.isDistinct();
        org.apache.commons.csv.CSVFormat cSVFormat23 = csvSortOptions21.getFormat();
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder12.format(cSVFormat23);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder7.format(cSVFormat23);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder27 = builder7.distinct(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = builder7.skipHeader(false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 192L + "'", long8 == 192L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(csvSortOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test289");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file58, csvSortOptions74);
        boolean boolean77 = csvSortOptions74.isDistinct();
        java.nio.charset.Charset charset78 = csvSortOptions74.getCharset();
        boolean boolean79 = csvSortOptions74.isDistinct();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1231149078457872064flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5386822978425758873flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4232130729768758456flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3313580281240921243flatfile");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3592947226953873339flatfile");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test290");
        java.io.BufferedReader bufferedReader1 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        java.util.List<java.io.File> fileList29 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        java.util.List<java.io.File> fileList30 = com.google.code.externalsorting.ExternalSort.sortInBatch(file28);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator31, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = builder38.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions41 = builder40.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray43 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList44 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList44, cSVRecordArray43);
        java.io.File file46 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator47, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = builder50.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions53 = builder52.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = csvSortOptions53.getComparator();
        java.io.File file55 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file46, csvSortOptions53);
        int int56 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList15, file28, csvSortOptions41, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray57 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList58 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList58, cSVRecordArray57);
        java.io.File file60 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator61, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder66 = builder64.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions67 = builder66.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = csvSortOptions67.getComparator();
        java.io.File file69 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList58, file60, csvSortOptions67);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator70 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator70, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder75 = builder73.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions76 = builder75.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator77 = csvSortOptions76.getComparator();
        java.io.File file78 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList44, file60, csvSortOptions76);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator79 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder82 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator79, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder84 = builder82.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions85 = builder84.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray86 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList87 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList87, cSVRecordArray86);
        java.io.File file89 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator90 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator90, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder95 = builder93.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions96 = builder95.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator97 = csvSortOptions96.getComparator();
        java.io.File file98 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList87, file89, csvSortOptions96);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList99 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(176L, bufferedReader1, file60, csvSortOptions85, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6863539663898908058flatfile");
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch669154076142991125flatfile");
        org.junit.Assert.assertNotNull(fileList29);
        org.junit.Assert.assertNotNull(fileList30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(csvSortOptions41);
        org.junit.Assert.assertNotNull(cSVRecordArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(csvSortOptions53);
        org.junit.Assert.assertNull(cSVRecordComparator54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4503572510711525107flatfile");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(csvSortOptions67);
        org.junit.Assert.assertNull(cSVRecordComparator68);
        org.junit.Assert.assertNotNull(file69);
        org.junit.Assert.assertEquals(file69.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file69.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3858185061781079970flatfile");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(csvSortOptions76);
        org.junit.Assert.assertNull(cSVRecordComparator77);
        org.junit.Assert.assertNotNull(file78);
        org.junit.Assert.assertEquals(file78.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file78.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9163797971343744214flatfile");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(csvSortOptions85);
        org.junit.Assert.assertNotNull(cSVRecordArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(csvSortOptions96);
        org.junit.Assert.assertNull(cSVRecordComparator97);
        org.junit.Assert.assertNotNull(file98);
        org.junit.Assert.assertEquals(file98.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file98.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3768530882476139257flatfile");
    }

    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test291");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file44, csvSortOptions60);
        java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(file62);
        java.util.Comparator<java.lang.String> strComparator64 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file26, file62, strComparator64);
        java.util.List<java.io.File> fileList67 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator64, false);
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator64;
        com.google.code.externalsorting.ExternalSort.defaultcomparator = strComparator64;
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3775988807635916434flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3971586120907390122flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4112934874319303879flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5083450341300724534flatfile");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8694695209354043952flatfile");
        org.junit.Assert.assertNotNull(fileList63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(fileList67);
    }

    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test298");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator68 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder71 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator68, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder73 = builder71.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions74 = builder73.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator75 = csvSortOptions74.getComparator();
        java.io.File file76 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file58, csvSortOptions74);
        boolean boolean77 = csvSortOptions74.isSkipHeader();
        java.nio.charset.Charset charset78 = csvSortOptions74.getCharset();
        int int79 = csvSortOptions74.getNumHeader();
        int int80 = csvSortOptions74.getNumHeader();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2741629352905190398flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch322647489057084989flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5163869864638940674flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9098457642542710153flatfile");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(csvSortOptions74);
        org.junit.Assert.assertNull(cSVRecordComparator75);
        org.junit.Assert.assertNotNull(file76);
        org.junit.Assert.assertEquals(file76.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file76.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5487870421149775275flatfile");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test301");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        java.util.List<java.io.File> fileList41 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40);
        java.util.List<java.io.File> fileList42 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40);
        java.util.Comparator<java.lang.String> strComparator43 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long45 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList27, file40, strComparator43, true);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList47 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40, strComparator46);
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file40);
        long long49 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file40);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3869205454806167595flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2616458518420854224flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2495131282758185059flatfile");
        org.junit.Assert.assertNotNull(fileList41);
        org.junit.Assert.assertNotNull(fileList42);
        org.junit.Assert.assertNotNull(strComparator43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList47);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test302");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.util.List<java.io.File> fileList14 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray15 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList16 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList16, cSVRecordArray15);
        java.io.File file18 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator19 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator19, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder24 = builder22.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions25 = builder24.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = csvSortOptions25.getComparator();
        java.io.File file27 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList16, file18, csvSortOptions25);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray42 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList43 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43, cSVRecordArray42);
        java.io.File file45 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator46 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder49 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator46, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder51 = builder49.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions52 = builder51.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator53 = csvSortOptions52.getComparator();
        java.io.File file54 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43, file45, csvSortOptions52);
        java.util.List<java.io.File> fileList55 = com.google.code.externalsorting.ExternalSort.sortInBatch(file54);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray56 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList57 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList57, cSVRecordArray56);
        java.io.File file59 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator60 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder63 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator60, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder65 = builder63.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions66 = builder65.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = csvSortOptions66.getComparator();
        java.io.File file68 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList57, file59, csvSortOptions66);
        java.util.List<java.io.File> fileList69 = com.google.code.externalsorting.ExternalSort.sortInBatch(file68);
        java.util.List<java.io.File> fileList70 = com.google.code.externalsorting.ExternalSort.sortInBatch(file68);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator71 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator71, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = builder74.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder78 = builder76.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder80 = builder78.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions81 = builder80.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray83 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList84 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList84, cSVRecordArray83);
        java.io.File file86 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator87 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder90 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator87, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder92 = builder90.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions93 = builder92.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator94 = csvSortOptions93.getComparator();
        java.io.File file95 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList84, file86, csvSortOptions93);
        int int96 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList55, file68, csvSortOptions81, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList84);
        int int97 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList14, file27, csvSortOptions38, true, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList84);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8945932654306811061flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(fileList14);
        org.junit.Assert.assertNotNull(cSVRecordArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(csvSortOptions25);
        org.junit.Assert.assertNull(cSVRecordComparator26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4663037205439017939flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6906708290450826620flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(csvSortOptions52);
        org.junit.Assert.assertNull(cSVRecordComparator53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertEquals(file54.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file54.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6136859262414593805flatfile");
        org.junit.Assert.assertNotNull(fileList55);
        org.junit.Assert.assertNotNull(cSVRecordArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(csvSortOptions66);
        org.junit.Assert.assertNull(cSVRecordComparator67);
        org.junit.Assert.assertNotNull(file68);
        org.junit.Assert.assertEquals(file68.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file68.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5840006531140733868flatfile");
        org.junit.Assert.assertNotNull(fileList69);
        org.junit.Assert.assertNotNull(fileList70);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(csvSortOptions81);
        org.junit.Assert.assertNotNull(cSVRecordArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(csvSortOptions93);
        org.junit.Assert.assertNull(cSVRecordComparator94);
        org.junit.Assert.assertNotNull(file95);
        org.junit.Assert.assertEquals(file95.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file95.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2658379182426623542flatfile");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test305");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray28 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList29 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList29, cSVRecordArray28);
        java.io.File file31 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator32 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder35 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator32, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder37 = builder35.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions38 = builder37.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator39 = csvSortOptions38.getComparator();
        java.io.File file40 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file31, csvSortOptions38);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList29, file44, csvSortOptions60);
        java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(file62);
        java.util.Comparator<java.lang.String> strComparator64 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file26, file62, strComparator64);
        java.util.List<java.io.File> fileList67 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12, strComparator64, false);
        java.util.List<java.io.File> fileList68 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        java.util.List<java.io.File> fileList69 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7375463681370261473flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1559847609172375321flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(cSVRecordArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(csvSortOptions38);
        org.junit.Assert.assertNull(cSVRecordComparator39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertEquals(file40.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file40.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4078199140754596575flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5274725843718367623flatfile");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1935232616478346788flatfile");
        org.junit.Assert.assertNotNull(fileList63);
        org.junit.Assert.assertNotNull(strComparator64);
        org.junit.Assert.assertNotNull(fileList67);
        org.junit.Assert.assertNotNull(fileList68);
        org.junit.Assert.assertNotNull(fileList69);
    }

    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test306");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        java.util.List<java.io.File> fileList27 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.List<java.io.File> fileList28 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator29 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder32 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator29, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = builder32.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.numHeader((int) (short) 1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray41 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList42 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList42, cSVRecordArray41);
        java.io.File file44 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator45 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder48 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator45, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder50 = builder48.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions51 = builder50.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator52 = csvSortOptions51.getComparator();
        java.io.File file53 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42, file44, csvSortOptions51);
        int int54 = com.google.code.externalsorting.csv.CsvExternalSort.mergeSortedFiles(fileList13, file26, csvSortOptions39, false, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList42);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray55 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList56 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList56, cSVRecordArray55);
        java.io.File file58 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator59 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator59, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder64 = builder62.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions65 = builder64.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator66 = csvSortOptions65.getComparator();
        java.io.File file67 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file58, csvSortOptions65);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray68 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList69 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList69, cSVRecordArray68);
        java.io.File file71 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator72 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder75 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator72, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder77 = builder75.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions78 = builder77.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator79 = csvSortOptions78.getComparator();
        java.io.File file80 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList69, file71, csvSortOptions78);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator81 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder84 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator81, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = builder84.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions87 = builder86.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = csvSortOptions87.getComparator();
        java.io.File file89 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList56, file71, csvSortOptions87);
        java.util.List<java.io.File> fileList90 = com.google.code.externalsorting.ExternalSort.sortInBatch(file89);
        java.util.Comparator<java.lang.String> strComparator91 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList92 = com.google.code.externalsorting.ExternalSort.sortInBatch(file89, strComparator91);
        java.util.List<java.io.File> fileList94 = com.google.code.externalsorting.ExternalSort.sortInBatch(file26, strComparator91, true);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9122473988408869100flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8263328344806936109flatfile");
        org.junit.Assert.assertNotNull(fileList27);
        org.junit.Assert.assertNotNull(fileList28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNotNull(cSVRecordArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(csvSortOptions51);
        org.junit.Assert.assertNull(cSVRecordComparator52);
        org.junit.Assert.assertNotNull(file53);
        org.junit.Assert.assertEquals(file53.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file53.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5654527254959370427flatfile");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(cSVRecordArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(csvSortOptions65);
        org.junit.Assert.assertNull(cSVRecordComparator66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertEquals(file67.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file67.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2992497084416369277flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(csvSortOptions78);
        org.junit.Assert.assertNull(cSVRecordComparator79);
        org.junit.Assert.assertNotNull(file80);
        org.junit.Assert.assertEquals(file80.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file80.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6660685912355212695flatfile");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(csvSortOptions87);
        org.junit.Assert.assertNull(cSVRecordComparator88);
        org.junit.Assert.assertNotNull(file89);
        org.junit.Assert.assertEquals(file89.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file89.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8334178551333556966flatfile");
        org.junit.Assert.assertNotNull(fileList90);
        org.junit.Assert.assertNotNull(strComparator91);
        org.junit.Assert.assertNotNull(fileList92);
        org.junit.Assert.assertNotNull(fileList94);
    }

    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test307");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator88 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder91 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator88, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder93 = builder91.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions94 = builder93.build();
        org.apache.commons.csv.CSVRecord[] cSVRecordArray95 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList96 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList96, cSVRecordArray95);
        java.util.List<java.io.File> fileList98 = com.google.code.externalsorting.csv.CsvExternalSort.sortInBatch(file34, file48, csvSortOptions94, (java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList96);
        org.apache.commons.csv.CSVFormat cSVFormat99 = csvSortOptions94.getFormat();
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1904007968535673914flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6386718874553773615flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7217604161578481397flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1977091073203910841flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch9138421184762609425flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7135777977657681448flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7391272854960102547flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(csvSortOptions94);
        org.junit.Assert.assertNotNull(cSVRecordArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(fileList98);
        org.junit.Assert.assertNotNull(cSVFormat99);
    }

    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test313");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray13 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList14 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList14, cSVRecordArray13);
        java.io.File file16 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator17 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder20 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator17, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder22 = builder20.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions23 = builder22.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator24 = csvSortOptions23.getComparator();
        java.io.File file25 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList14, file16, csvSortOptions23);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator26 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder29 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator26, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder31 = builder29.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions32 = builder31.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = csvSortOptions32.getComparator();
        java.io.File file34 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file16, csvSortOptions32);
        java.util.List<java.io.File> fileList35 = com.google.code.externalsorting.ExternalSort.sortInBatch(file34);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray36 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList37 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList37, cSVRecordArray36);
        java.io.File file39 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList37, file39, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray50 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList51 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList51, cSVRecordArray50);
        java.io.File file53 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator54 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder57 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator54, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder59 = builder57.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions60 = builder59.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator61 = csvSortOptions60.getComparator();
        java.io.File file62 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file53, csvSortOptions60);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray63 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList64 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList64, cSVRecordArray63);
        java.io.File file66 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator67 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder70 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator67, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = builder70.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions73 = builder72.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator74 = csvSortOptions73.getComparator();
        java.io.File file75 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList64, file66, csvSortOptions73);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder79 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator76, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder81 = builder79.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions82 = builder81.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = csvSortOptions82.getComparator();
        java.io.File file84 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList51, file66, csvSortOptions82);
        java.util.List<java.io.File> fileList85 = com.google.code.externalsorting.ExternalSort.sortInBatch(file84);
        java.util.Comparator<java.lang.String> strComparator86 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        com.google.code.externalsorting.ExternalSort.sort(file48, file84, strComparator86);
        java.util.Comparator<java.lang.String> strComparator88 = null;
        long long89 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList35, file48, strComparator88);
        java.util.List<java.io.File> fileList90 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        java.util.List<java.io.File> fileList91 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch8432544883378419847flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(csvSortOptions23);
        org.junit.Assert.assertNull(cSVRecordComparator24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3644277273690883483flatfile");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(csvSortOptions32);
        org.junit.Assert.assertNull(cSVRecordComparator33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6744180625512518910flatfile");
        org.junit.Assert.assertNotNull(fileList35);
        org.junit.Assert.assertNotNull(cSVRecordArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6216108579530121418flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(cSVRecordArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(csvSortOptions60);
        org.junit.Assert.assertNull(cSVRecordComparator61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertEquals(file62.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file62.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch444676165765965141flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(csvSortOptions73);
        org.junit.Assert.assertNull(cSVRecordComparator74);
        org.junit.Assert.assertNotNull(file75);
        org.junit.Assert.assertEquals(file75.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file75.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4588420631164889250flatfile");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(csvSortOptions82);
        org.junit.Assert.assertNull(cSVRecordComparator83);
        org.junit.Assert.assertNotNull(file84);
        org.junit.Assert.assertEquals(file84.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file84.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch448598710579794657flatfile");
        org.junit.Assert.assertNotNull(fileList85);
        org.junit.Assert.assertNotNull(strComparator86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(fileList90);
        org.junit.Assert.assertNotNull(fileList91);
    }

    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test325");
        org.apache.commons.csv.CSVRecord[] cSVRecordArray0 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList1 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList1, cSVRecordArray0);
        java.io.File file3 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator4 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder7 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator4, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = builder7.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions10 = builder9.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator11 = csvSortOptions10.getComparator();
        java.io.File file12 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList1, file3, csvSortOptions10);
        java.util.List<java.io.File> fileList13 = com.google.code.externalsorting.ExternalSort.sortInBatch(file12);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray14 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList15 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList15, cSVRecordArray14);
        java.io.File file17 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator18 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder21 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator18, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = builder21.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions24 = builder23.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator25 = csvSortOptions24.getComparator();
        java.io.File file26 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file17, csvSortOptions24);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray27 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList28 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList28, cSVRecordArray27);
        java.io.File file30 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator31 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder34 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator31, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = builder34.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions37 = builder36.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator38 = csvSortOptions37.getComparator();
        java.io.File file39 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList28, file30, csvSortOptions37);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder43 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator40, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = builder43.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions46 = builder45.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator47 = csvSortOptions46.getComparator();
        java.io.File file48 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList15, file30, csvSortOptions46);
        java.util.List<java.io.File> fileList49 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        java.util.List<java.io.File> fileList50 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray51 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList52 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList52, cSVRecordArray51);
        java.io.File file54 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator55 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder58 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator55, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = builder58.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions61 = builder60.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator62 = csvSortOptions61.getComparator();
        java.io.File file63 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList52, file54, csvSortOptions61);
        java.util.List<java.io.File> fileList64 = com.google.code.externalsorting.ExternalSort.sortInBatch(file63);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray65 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList66 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList66, cSVRecordArray65);
        java.io.File file68 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator69 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder72 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator69, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = builder72.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions75 = builder74.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator76 = csvSortOptions75.getComparator();
        java.io.File file77 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList66, file68, csvSortOptions75);
        java.util.List<java.io.File> fileList78 = com.google.code.externalsorting.ExternalSort.sortInBatch(file77);
        java.util.List<java.io.File> fileList79 = com.google.code.externalsorting.ExternalSort.sortInBatch(file77);
        java.util.Comparator<java.lang.String> strComparator80 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long82 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList64, file77, strComparator80, true);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator83 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder86 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator83, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder88 = builder86.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions89 = builder88.build();
        long long90 = csvSortOptions89.getMaxMemory();
        java.nio.charset.Charset charset91 = csvSortOptions89.getCharset();
        long long93 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList13, file48, strComparator80, charset91, false);
        java.util.List<java.io.File> fileList94 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        java.util.List<java.io.File> fileList95 = com.google.code.externalsorting.ExternalSort.sortInBatch(file48);
        org.junit.Assert.assertNotNull(cSVRecordArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(csvSortOptions10);
        org.junit.Assert.assertNull(cSVRecordComparator11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4250566379891531168flatfile");
        org.junit.Assert.assertNotNull(fileList13);
        org.junit.Assert.assertNotNull(cSVRecordArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(csvSortOptions24);
        org.junit.Assert.assertNull(cSVRecordComparator25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch7599967393243236189flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(csvSortOptions37);
        org.junit.Assert.assertNull(cSVRecordComparator38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertEquals(file39.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file39.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6487007596881245332flatfile");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(csvSortOptions46);
        org.junit.Assert.assertNull(cSVRecordComparator47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2353386549928033755flatfile");
        org.junit.Assert.assertNotNull(fileList49);
        org.junit.Assert.assertNotNull(fileList50);
        org.junit.Assert.assertNotNull(cSVRecordArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(csvSortOptions61);
        org.junit.Assert.assertNull(cSVRecordComparator62);
        org.junit.Assert.assertNotNull(file63);
        org.junit.Assert.assertEquals(file63.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file63.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6957714523618742238flatfile");
        org.junit.Assert.assertNotNull(fileList64);
        org.junit.Assert.assertNotNull(cSVRecordArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(csvSortOptions75);
        org.junit.Assert.assertNull(cSVRecordComparator76);
        org.junit.Assert.assertNotNull(file77);
        org.junit.Assert.assertEquals(file77.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file77.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch5083577269795514745flatfile");
        org.junit.Assert.assertNotNull(fileList78);
        org.junit.Assert.assertNotNull(fileList79);
        org.junit.Assert.assertNotNull(strComparator80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(csvSortOptions89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(charset91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(fileList94);
        org.junit.Assert.assertNotNull(fileList95);
    }

    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test326");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.Comparator<java.lang.String> strComparator15 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList17 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14, strComparator15, false);
        java.util.List<java.io.File> fileList18 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray19 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList20 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList20, cSVRecordArray19);
        java.io.File file22 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator23 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder26 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator23, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder28 = builder26.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions29 = builder28.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator30 = csvSortOptions29.getComparator();
        java.io.File file31 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList20, file22, csvSortOptions29);
        java.util.List<java.io.File> fileList32 = com.google.code.externalsorting.ExternalSort.sortInBatch(file31);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray33 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList34 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList34, cSVRecordArray33);
        java.io.File file36 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator37 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder40 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator37, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder42 = builder40.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions43 = builder42.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator44 = csvSortOptions43.getComparator();
        java.io.File file45 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList34, file36, csvSortOptions43);
        java.util.Comparator<java.lang.String> strComparator46 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        java.util.List<java.io.File> fileList48 = com.google.code.externalsorting.ExternalSort.sortInBatch(file45, strComparator46, false);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder52 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator49, (int) (byte) 0, (long) 0);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder54 = builder52.numHeader((int) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions55 = builder54.build();
        boolean boolean56 = csvSortOptions55.isDistinct();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = csvSortOptions55.getComparator();
        java.nio.charset.Charset charset58 = csvSortOptions55.getCharset();
        long long60 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList18, file31, strComparator46, charset58, false);
        long long61 = com.google.code.externalsorting.csv.SizeEstimator.estimatedSizeOf((java.lang.Object) strComparator46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList63 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, (long) (short) 100, strComparator46, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6069469251421462134flatfile");
        org.junit.Assert.assertNotNull(strComparator15);
        org.junit.Assert.assertNotNull(fileList17);
        org.junit.Assert.assertNotNull(fileList18);
        org.junit.Assert.assertNotNull(cSVRecordArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(csvSortOptions29);
        org.junit.Assert.assertNull(cSVRecordComparator30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertEquals(file31.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file31.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch2582869440404385445flatfile");
        org.junit.Assert.assertNotNull(fileList32);
        org.junit.Assert.assertNotNull(cSVRecordArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(csvSortOptions43);
        org.junit.Assert.assertNull(cSVRecordComparator44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch6616568887620337484flatfile");
        org.junit.Assert.assertNotNull(strComparator46);
        org.junit.Assert.assertNotNull(fileList48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(csvSortOptions55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(cSVRecordComparator57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 168L + "'", long61 == 168L);
    }

    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test329");
        java.io.BufferedReader bufferedReader0 = null;
        org.apache.commons.csv.CSVRecord[] cSVRecordArray2 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList3 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList3, cSVRecordArray2);
        java.io.File file5 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator6 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder9 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator6, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder11 = builder9.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions12 = builder11.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator13 = csvSortOptions12.getComparator();
        java.io.File file14 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList3, file5, csvSortOptions12);
        java.util.List<java.io.File> fileList15 = com.google.code.externalsorting.ExternalSort.sortInBatch(file14);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray16 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList17 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList17, cSVRecordArray16);
        java.io.File file19 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator20 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder23 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator20, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder25 = builder23.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions26 = builder25.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator27 = csvSortOptions26.getComparator();
        java.io.File file28 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file19, csvSortOptions26);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray29 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList30 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList30, cSVRecordArray29);
        java.io.File file32 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator33 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder36 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator33, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder38 = builder36.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions39 = builder38.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator40 = csvSortOptions39.getComparator();
        java.io.File file41 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList30, file32, csvSortOptions39);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator42 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder45 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator42, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder47 = builder45.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions48 = builder47.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator49 = csvSortOptions48.getComparator();
        java.io.File file50 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList17, file32, csvSortOptions48);
        java.util.List<java.io.File> fileList51 = com.google.code.externalsorting.ExternalSort.sortInBatch(file50);
        java.util.List<java.io.File> fileList52 = com.google.code.externalsorting.ExternalSort.sortInBatch(file50);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray53 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList54 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList54, cSVRecordArray53);
        java.io.File file56 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator57 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder60 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator57, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder62 = builder60.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions63 = builder62.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator64 = csvSortOptions63.getComparator();
        java.io.File file65 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList54, file56, csvSortOptions63);
        java.util.List<java.io.File> fileList66 = com.google.code.externalsorting.ExternalSort.sortInBatch(file65);
        org.apache.commons.csv.CSVRecord[] cSVRecordArray67 = new org.apache.commons.csv.CSVRecord[] {};
        java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList68 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList68, cSVRecordArray67);
        java.io.File file70 = null;
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator71 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder74 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator71, (int) (short) 1, 0L);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder76 = builder74.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions77 = builder76.build();
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator78 = csvSortOptions77.getComparator();
        java.io.File file79 = com.google.code.externalsorting.csv.CsvExternalSort.sortAndSave((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList68, file70, csvSortOptions77);
        java.util.List<java.io.File> fileList80 = com.google.code.externalsorting.ExternalSort.sortInBatch(file79);
        java.util.List<java.io.File> fileList81 = com.google.code.externalsorting.ExternalSort.sortInBatch(file79);
        java.util.Comparator<java.lang.String> strComparator82 = com.google.code.externalsorting.ExternalSort.defaultcomparator;
        long long84 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList66, file79, strComparator82, true);
        java.util.Comparator<org.apache.commons.csv.CSVRecord> cSVRecordComparator85 = null;
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder88 = new com.google.code.externalsorting.csv.CsvSortOptions.Builder(cSVRecordComparator85, (int) (byte) 1, (long) (byte) -1);
        com.google.code.externalsorting.csv.CsvSortOptions.Builder builder90 = builder88.skipHeader(true);
        com.google.code.externalsorting.csv.CsvSortOptions csvSortOptions91 = builder90.build();
        long long92 = csvSortOptions91.getMaxMemory();
        java.nio.charset.Charset charset93 = csvSortOptions91.getCharset();
        long long95 = com.google.code.externalsorting.ExternalSort.mergeSortedFiles(fileList15, file50, strComparator82, charset93, false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.File> fileList97 = com.google.code.externalsorting.ExternalSort.sortInBatch(bufferedReader0, 66L, strComparator82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVRecordArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(csvSortOptions12);
        org.junit.Assert.assertNull(cSVRecordComparator13);
        org.junit.Assert.assertNotNull(file14);
        org.junit.Assert.assertEquals(file14.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch1296609240852895737flatfile");
        org.junit.Assert.assertNotNull(fileList15);
        org.junit.Assert.assertNotNull(cSVRecordArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(csvSortOptions26);
        org.junit.Assert.assertNull(cSVRecordComparator27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertEquals(file28.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file28.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3958667164869686527flatfile");
        org.junit.Assert.assertNotNull(cSVRecordArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(csvSortOptions39);
        org.junit.Assert.assertNull(cSVRecordComparator40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertEquals(file41.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file41.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch4118981211510092631flatfile");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(csvSortOptions48);
        org.junit.Assert.assertNull(cSVRecordComparator49);
        org.junit.Assert.assertNotNull(file50);
        org.junit.Assert.assertEquals(file50.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file50.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3992562516625699073flatfile");
        org.junit.Assert.assertNotNull(fileList51);
        org.junit.Assert.assertNotNull(fileList52);
        org.junit.Assert.assertNotNull(cSVRecordArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(csvSortOptions63);
        org.junit.Assert.assertNull(cSVRecordComparator64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertEquals(file65.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file65.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch3978645256723015147flatfile");
        org.junit.Assert.assertNotNull(fileList66);
        org.junit.Assert.assertNotNull(cSVRecordArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(csvSortOptions77);
        org.junit.Assert.assertNull(cSVRecordComparator78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertEquals(file79.getParent(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T");
// flaky:         org.junit.Assert.assertEquals(file79.toString(), "/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/sortInBatch729156047445640188flatfile");
        org.junit.Assert.assertNotNull(fileList80);
        org.junit.Assert.assertNotNull(fileList81);
        org.junit.Assert.assertNotNull(strComparator82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(csvSortOptions91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertNotNull(charset93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }
WesleyOne-qy-weixin-robot-spring-boot-starter, length: 7

    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test008");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey1 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey2 = qyWeixinRobotKey1.decrement();
        long long3 = selectKey2.getTimestamp();
        org.junit.Assert.assertNotNull(selectKey2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 28313287L + "'", long3 == 28313287L);
    }

    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent defaultQyWeixinRobotKeyManagerComponent0 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient5 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList3);
        defaultQyWeixinRobotKeyManagerComponent0.init(qyWeixinRobotGroupClient5);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList8 = defaultQyWeixinRobotKeyManagerComponent0.selectKeys((int) (byte) 0);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotHttpClientComponent qyWeixinRobotHttpClientComponent14 = null;
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotQueueManagerComponent defaultQyWeixinRobotQueueManagerComponent16 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotQueueManagerComponent((int) (byte) 10);
        io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotKeyManagerComponent qyWeixinRobotKeyManagerComponent17 = null;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        java.util.concurrent.ScheduledExecutorService scheduledExecutorService22 = null;
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotScheduledManagerComponent defaultQyWeixinRobotScheduledManagerComponent23 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotScheduledManagerComponent((long) 100, (long) (-1), timeUnit20, false, scheduledExecutorService22);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient24 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList12, qyWeixinRobotHttpClientComponent14, (io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotQueueManagerComponent) defaultQyWeixinRobotQueueManagerComponent16, qyWeixinRobotKeyManagerComponent17, (io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotScheduledManagerComponent) defaultQyWeixinRobotScheduledManagerComponent23);
        io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotTextMessage qyWeixinRobotTextMessage26 = new io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotTextMessage("QyWeixinRobotResponse[errcode=0, errmsg='ok', type='null', media_id='null', created_at='null']");
        java.util.List<java.lang.String> strList27 = qyWeixinRobotTextMessage26.getMentionedMobileList();
        io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotResponse qyWeixinRobotResponse28 = qyWeixinRobotGroupClient24.send((io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotBaseMessage) qyWeixinRobotTextMessage26);
        defaultQyWeixinRobotKeyManagerComponent0.init(qyWeixinRobotGroupClient24);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList31 = defaultQyWeixinRobotKeyManagerComponent0.selectKeys(0);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList33 = defaultQyWeixinRobotKeyManagerComponent0.selectKeys((int) 'a');
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent defaultQyWeixinRobotKeyManagerComponent34 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient39 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList37);
        defaultQyWeixinRobotKeyManagerComponent34.init(qyWeixinRobotGroupClient39);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList42 = defaultQyWeixinRobotKeyManagerComponent34.selectKeys((int) (byte) 0);
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey44 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey45 = qyWeixinRobotKey44.decrement();
        java.lang.String str46 = selectKey45.getKey();
        defaultQyWeixinRobotKeyManagerComponent34.recover(selectKey45);
        defaultQyWeixinRobotKeyManagerComponent0.recover(selectKey45);
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent defaultQyWeixinRobotKeyManagerComponent49 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient54 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList52);
        defaultQyWeixinRobotKeyManagerComponent49.init(qyWeixinRobotGroupClient54);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList57 = defaultQyWeixinRobotKeyManagerComponent49.selectKeys((int) (byte) 0);
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey59 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey60 = qyWeixinRobotKey59.decrement();
        java.lang.String str61 = selectKey60.getKey();
        defaultQyWeixinRobotKeyManagerComponent49.recover(selectKey60);
        java.lang.String str63 = selectKey60.toString();
        defaultQyWeixinRobotKeyManagerComponent0.recover(selectKey60);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(selectKeyList8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(qyWeixinRobotResponse28);
        org.junit.Assert.assertNotNull(selectKeyList31);
        org.junit.Assert.assertNotNull(selectKeyList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(selectKeyList42);
        org.junit.Assert.assertNotNull(selectKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(selectKeyList57);
        org.junit.Assert.assertNotNull(selectKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "SelectKey[key='hi!', timestamp=28313287]" + "'", str63, "SelectKey[key='hi!', timestamp=28313287]");
    }

    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey1 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey2 = qyWeixinRobotKey1.decrement();
        java.lang.String str3 = selectKey2.getKey();
        java.lang.String str4 = selectKey2.toString();
        org.junit.Assert.assertNotNull(selectKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "SelectKey[key='hi!', timestamp=28313287]" + "'", str4, "SelectKey[key='hi!', timestamp=28313287]");
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotHttpClientComponent qyWeixinRobotHttpClientComponent5 = null;
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotQueueManagerComponent defaultQyWeixinRobotQueueManagerComponent7 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotQueueManagerComponent((int) (byte) 10);
        io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotKeyManagerComponent qyWeixinRobotKeyManagerComponent8 = null;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        java.util.concurrent.ScheduledExecutorService scheduledExecutorService13 = null;
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotScheduledManagerComponent defaultQyWeixinRobotScheduledManagerComponent14 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotScheduledManagerComponent((long) 100, (long) (-1), timeUnit11, false, scheduledExecutorService13);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient15 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList3, qyWeixinRobotHttpClientComponent5, (io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotQueueManagerComponent) defaultQyWeixinRobotQueueManagerComponent7, qyWeixinRobotKeyManagerComponent8, (io.github.wesleyone.qy.weixin.robot.component.QyWeixinRobotScheduledManagerComponent) defaultQyWeixinRobotScheduledManagerComponent14);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient16 = null;
        defaultQyWeixinRobotScheduledManagerComponent14.init(qyWeixinRobotGroupClient16);
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotThreadFactory qyWeixinRobotThreadFactory19 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotThreadFactory("\u72b6\u6001\u5df2\u5173\u95ed");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotThreadFactory qyWeixinRobotThreadFactory21 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotThreadFactory("QyWeixinRobotResponse[errcode=99999, errmsg='', type='null', media_id='null', created_at='null']");
        java.lang.Runnable runnable22 = null;
        java.lang.Thread thread23 = qyWeixinRobotThreadFactory21.newThread(runnable22);
        java.lang.Thread thread24 = qyWeixinRobotThreadFactory19.newThread((java.lang.Runnable) thread23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.concurrent.ScheduledFuture<?> wildcardScheduledFuture25 = defaultQyWeixinRobotScheduledManagerComponent14.scheduled((java.lang.Runnable) thread23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(thread23);
        org.junit.Assert.assertEquals(thread23.toString(), "Thread[QyWeixinRobotResponse[errcode=99999, errmsg='', type='null', media_id='null', created_at='null']1,5,main]");
        org.junit.Assert.assertNotNull(thread24);
// flaky:         org.junit.Assert.assertEquals(thread24.toString(), "\u72b6\u6001\u5df2\u5173\u95ed1,5,main]");
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent defaultQyWeixinRobotKeyManagerComponent0 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient5 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList3);
        defaultQyWeixinRobotKeyManagerComponent0.init(qyWeixinRobotGroupClient5);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList8 = defaultQyWeixinRobotKeyManagerComponent0.selectKeys((int) (byte) 0);
        io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent defaultQyWeixinRobotKeyManagerComponent9 = new io.github.wesleyone.qy.weixin.robot.component.impl.DefaultQyWeixinRobotKeyManagerComponent();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient14 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList12);
        defaultQyWeixinRobotKeyManagerComponent9.init(qyWeixinRobotGroupClient14);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList17 = defaultQyWeixinRobotKeyManagerComponent9.selectKeys((int) (byte) 0);
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey19 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey20 = qyWeixinRobotKey19.decrement();
        java.lang.String str21 = selectKey20.getKey();
        defaultQyWeixinRobotKeyManagerComponent9.recover(selectKey20);
        long long23 = selectKey20.getTimestamp();
        defaultQyWeixinRobotKeyManagerComponent0.recover(selectKey20);
        java.util.List<io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey> selectKeyList26 = defaultQyWeixinRobotKeyManagerComponent0.selectKeys((int) '#');
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(selectKeyList8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(selectKeyList17);
        org.junit.Assert.assertNotNull(selectKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 28313287L + "'", long23 == 28313287L);
        org.junit.Assert.assertNotNull(selectKeyList26);
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey qyWeixinRobotKey1 = new io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey("hi!");
        java.lang.String str2 = qyWeixinRobotKey1.getKey();
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey3 = qyWeixinRobotKey1.decrement();
        io.github.wesleyone.qy.weixin.robot.common.QyWeixinRobotKey.SelectKey selectKey4 = qyWeixinRobotKey1.decrement();
        java.lang.String str5 = selectKey4.toString();
        java.lang.String str6 = selectKey4.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(selectKey3);
        org.junit.Assert.assertNotNull(selectKey4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SelectKey[key='hi!', timestamp=28313287]" + "'", str5, "SelectKey[key='hi!', timestamp=28313287]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SelectKey[key='hi!', timestamp=28313287]" + "'", str6, "SelectKey[key='hi!', timestamp=28313287]");
    }

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient qyWeixinRobotGroupClient4 = new io.github.wesleyone.qy.weixin.robot.client.QyWeixinRobotGroupClient((java.util.List<java.lang.String>) strList2);
        io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotImageMessage qyWeixinRobotImageMessage7 = new io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotImageMessage("{markdown={content=hi!}, msgtype=markdown}", "QyWeixinRobotResponse[errcode=0, errmsg='ok', type='null', media_id='null', created_at='null']");
        io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotResponse qyWeixinRobotResponse8 = qyWeixinRobotGroupClient4.send((io.github.wesleyone.qy.weixin.robot.entity.QyWeixinRobotBaseMessage) qyWeixinRobotImageMessage7);
        java.lang.String str9 = qyWeixinRobotResponse8.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(qyWeixinRobotResponse8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u72b6\u6001\u5df2\u5173\u95ed', type='null', media_id='null', created_at='null']" + "'", str9, "\u72b6\u6001\u5df2\u5173\u95ed', type='null', media_id='null', created_at='null']");
    }
projectodd-sockjs-servlet, length: 39

    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test038");
        java.lang.String str0 = org.projectodd.sockjs.Utils.uuid();
// flaky:         org.junit.Assert.assertEquals("'" + str0 + "' != '" + "0265a1ec-9de6-420c-91f3-dee4c9b56288" + "'", str0, "0265a1ec-9de6-420c-91f3-dee4c9b56288");
    }

    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = sockJsConnection1.write("0265a1ec-9de6-420c-91f3-dee4c9b56288");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "156e8689-bb38-498a-a2ab-2e6e12657ee7" + "'", str6, "156e8689-bb38-498a-a2ab-2e6e12657ee7");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "156e8689-bb38-498a-a2ab-2e6e12657ee7" + "'", str8, "156e8689-bb38-498a-a2ab-2e6e12657ee7");
    }

    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        // The following exception was thrown during execution in test generation
        try {
            sockJsConnection1.end("cc90bf66-5961-4693-b141-fc94fdea3cdb");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7d5c31f0-b88a-42b2-9323-1ea458de9b35" + "'", str6, "7d5c31f0-b88a-42b2-9323-1ea458de9b35");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7d5c31f0-b88a-42b2-9323-1ea458de9b35" + "'", str8, "7d5c31f0-b88a-42b2-9323-1ea458de9b35");
    }

    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        javax.servlet.http.HttpServletRequest httpServletRequest10 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest11 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest10);
        org.projectodd.sockjs.SockJsRequest sockJsRequest12 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse13 = null;
        javax.servlet.AsyncContext asyncContext14 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse15 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse13, asyncContext14);
        org.projectodd.sockjs.SockJsServer.Options options16 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.XhrPollingReceiver xhrPollingReceiver17 = new org.projectodd.sockjs.XhrPollingReceiver(sockJsRequest12, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse15, options16);
        int int18 = sockJsServletResponse15.statusCode();
        sockJsServletResponse15.cacheFor((java.lang.Integer) 1);
        // The following exception was thrown during execution in test generation
        try {
            sockJsServer0.dispatch((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest11, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "04a2c8e4-6cc0-4927-be4a-688619279c44" + "'", str7, "04a2c8e4-6cc0-4927-be4a-688619279c44");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 200 + "'", int18 == 200);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        javax.servlet.http.HttpServletRequest httpServletRequest0 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest1 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest0);
        java.lang.String str2 = sockJsServletRequest1.session();
        org.projectodd.sockjs.DispatchFunction dispatchFunction3 = sockJsServletRequest1.lastFunction;
        org.projectodd.sockjs.SockJsServer sockJsServer4 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session5 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection6 = new org.projectodd.sockjs.SockJsConnection(session5);
        sockJsConnection6.prefix = "\"\"";
        sockJsConnection6.url = "\"\\\"\\\"\"";
        java.lang.String str11 = sockJsConnection6.id;
        java.lang.String str12 = sockJsConnection6.remoteAddress;
        sockJsServer4.emitConnection(sockJsConnection6);
        org.projectodd.sockjs.SockJsRequest sockJsRequest14 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse15 = null;
        javax.servlet.AsyncContext asyncContext16 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse17 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse15, asyncContext16);
        org.projectodd.sockjs.SockJsServer.Options options18 = new org.projectodd.sockjs.SockJsServer.Options();
        int int19 = options18.heartbeatDelay;
        org.projectodd.sockjs.EventSourceReceiver eventSourceReceiver20 = new org.projectodd.sockjs.EventSourceReceiver(sockJsRequest14, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse17, options18);
        boolean boolean22 = eventSourceReceiver20.doSendFrame("2df7967b-c163-40e4-9df1-d5dcf52a6339");
        // The following exception was thrown during execution in test generation
        try {
            org.projectodd.sockjs.Session session23 = org.projectodd.sockjs.Transport.register((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest1, sockJsServer4, (org.projectodd.sockjs.GenericReceiver) eventSourceReceiver20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(dispatchFunction3);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "66a164aa-f045-4f22-8d98-d12fadec67d2" + "'", str11, "66a164aa-f045-4f22-8d98-d12fadec67d2");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25000 + "'", int19 == 25000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.toString();
        java.lang.String str8 = sockJsConnection1.id;
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dc9978fd-25e8-4379-9ca9-e5909baefee9" + "'", str6, "dc9978fd-25e8-4379-9ca9-e5909baefee9");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<SockJSConnection dc9978fd-25e8-4379-9ca9-e5909baefee9>" + "'", str7, "<SockJSConnection dc9978fd-25e8-4379-9ca9-e5909baefee9>");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dc9978fd-25e8-4379-9ca9-e5909baefee9" + "'", str8, "dc9978fd-25e8-4379-9ca9-e5909baefee9");
    }

    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        java.util.concurrent.ScheduledFuture scheduledFuture16 = null;
        // The following exception was thrown during execution in test generation
        try {
            sockJsServer0.clearTimeout(scheduledFuture16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "b75c8de0-71cd-432f-8f45-4de164f08d98" + "'", str7, "b75c8de0-71cd-432f-8f45-4de164f08d98");
        org.junit.Assert.assertNull(str8);
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        sockJsConnection1.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        org.projectodd.sockjs.SockJsConnection.OnCloseHandler onCloseHandler9 = null;
        sockJsConnection1.onClose(onCloseHandler9);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f6091292-7c6e-4d5b-9828-40d53b360c32" + "'", str6, "f6091292-7c6e-4d5b-9828-40d53b360c32");
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        javax.servlet.http.HttpServletRequest httpServletRequest0 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest1 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest0);
        java.lang.String str2 = sockJsServletRequest1.session();
        org.projectodd.sockjs.SockJsRequest sockJsRequest3 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse4 = null;
        javax.servlet.AsyncContext asyncContext5 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse6 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse4, asyncContext5);
        org.projectodd.sockjs.SockJsServer.Options options7 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.XhrPollingReceiver xhrPollingReceiver8 = new org.projectodd.sockjs.XhrPollingReceiver(sockJsRequest3, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse6, options7);
        org.projectodd.sockjs.SockJsRequest sockJsRequest9 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse10 = null;
        javax.servlet.AsyncContext asyncContext11 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse12 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse10, asyncContext11);
        org.projectodd.sockjs.SockJsServer.Options options13 = new org.projectodd.sockjs.SockJsServer.Options();
        int int14 = options13.heartbeatDelay;
        org.projectodd.sockjs.EventSourceReceiver eventSourceReceiver15 = new org.projectodd.sockjs.EventSourceReceiver(sockJsRequest9, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse12, options13);
        org.projectodd.sockjs.ResponseReceiver responseReceiver16 = new org.projectodd.sockjs.ResponseReceiver((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest1, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse6, options13);
        org.projectodd.sockjs.SockJsServer sockJsServer17 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.HtmlfileHandler htmlfileHandler18 = new org.projectodd.sockjs.HtmlfileHandler(sockJsServer17);
        org.projectodd.sockjs.servlet.SockJsEndpoint sockJsEndpoint21 = new org.projectodd.sockjs.servlet.SockJsEndpoint(sockJsServer17, "\"hi!\"", "42393e10-600d-4023-8e90-2e0df2e16503");
        javax.websocket.Session session22 = null;
        org.projectodd.sockjs.SockJsException sockJsException24 = new org.projectodd.sockjs.SockJsException("hi!");
        org.projectodd.sockjs.SockJsException sockJsException25 = new org.projectodd.sockjs.SockJsException((java.lang.Throwable) sockJsException24);
        sockJsEndpoint21.onError(session22, (java.lang.Throwable) sockJsException25);
        sockJsServletRequest1.onError((java.lang.Throwable) sockJsException25);
        org.projectodd.sockjs.SockJsServer sockJsServer28 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session29 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection30 = new org.projectodd.sockjs.SockJsConnection(session29);
        sockJsConnection30.prefix = "\"\"";
        sockJsConnection30.url = "\"\\\"\\\"\"";
        java.lang.String str35 = sockJsConnection30.id;
        java.lang.String str36 = sockJsConnection30.remoteAddress;
        sockJsServer28.emitConnection(sockJsConnection30);
        org.projectodd.sockjs.WebsocketHandler websocketHandler38 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer28);
        javax.servlet.http.HttpServletRequest httpServletRequest39 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest40 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest39);
        java.lang.String str41 = sockJsServletRequest40.session();
        org.projectodd.sockjs.SockJsException sockJsException44 = new org.projectodd.sockjs.SockJsException("hi!");
        org.projectodd.sockjs.SockJsException sockJsException45 = new org.projectodd.sockjs.SockJsException("", (java.lang.Throwable) sockJsException44);
        sockJsServletRequest40.onError((java.lang.Throwable) sockJsException44);
        sockJsServletRequest40.onAllDataRead();
        org.projectodd.sockjs.SockJsRequest sockJsRequest48 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse49 = null;
        javax.servlet.AsyncContext asyncContext50 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse51 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse49, asyncContext50);
        org.projectodd.sockjs.SockJsServer.Options options52 = new org.projectodd.sockjs.SockJsServer.Options();
        int int53 = options52.heartbeatDelay;
        org.projectodd.sockjs.EventSourceReceiver eventSourceReceiver54 = new org.projectodd.sockjs.EventSourceReceiver(sockJsRequest48, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse51, options52);
        org.projectodd.sockjs.SockJsServer.Options options55 = new org.projectodd.sockjs.SockJsServer.Options();
        int int56 = options55.heartbeatDelay;
        boolean boolean57 = options55.jsessionid;
        java.lang.String str58 = options55.sockjsUrl;
        options55.jsessionid = false;
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver61 = new org.projectodd.sockjs.HtmlFileReceiver((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest40, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse51, options55);
        // The following exception was thrown during execution in test generation
        try {
            org.projectodd.sockjs.Session session62 = org.projectodd.sockjs.Transport.register((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest1, sockJsServer28, (org.projectodd.sockjs.GenericReceiver) htmlFileReceiver61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25000 + "'", int14 == 25000);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "d71bb72c-d7c7-4960-8ae5-c9a2f6758d03" + "'", str35, "d71bb72c-d7c7-4960-8ae5-c9a2f6758d03");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 25000 + "'", int53 == 25000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 25000 + "'", int56 == 25000);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str58, "http://cdn.sockjs.org/sockjs-0.3.min.js");
    }

    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        javax.servlet.http.HttpServletRequest httpServletRequest10 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest11 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest10);
        java.lang.String str12 = sockJsServletRequest11.session();
        org.projectodd.sockjs.DispatchFunction dispatchFunction13 = sockJsServletRequest11.lastFunction;
        org.projectodd.sockjs.SockJsRequest.OnEndHandler onEndHandler14 = null;
        sockJsServletRequest11.onEnd(onEndHandler14);
        javax.servlet.http.HttpServletRequest httpServletRequest16 = null;
        org.projectodd.sockjs.servlet.SockJsServletRequest sockJsServletRequest17 = new org.projectodd.sockjs.servlet.SockJsServletRequest(httpServletRequest16);
        java.lang.String str18 = sockJsServletRequest17.session();
        org.projectodd.sockjs.DispatchFunction dispatchFunction19 = sockJsServletRequest17.lastFunction;
        org.projectodd.sockjs.SockJsRequest sockJsRequest20 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse21 = null;
        javax.servlet.AsyncContext asyncContext22 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse23 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse21, asyncContext22);
        org.projectodd.sockjs.SockJsServer.Options options24 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.XhrPollingReceiver xhrPollingReceiver25 = new org.projectodd.sockjs.XhrPollingReceiver(sockJsRequest20, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse23, options24);
        int int26 = sockJsServletResponse23.statusCode();
        org.projectodd.sockjs.SockJsRequest sockJsRequest27 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse28 = null;
        org.projectodd.sockjs.SockJsRequest sockJsRequest29 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse30 = null;
        org.projectodd.sockjs.SockJsServer.Options options31 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver32 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest29, sockJsResponse30, options31);
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver33 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest27, sockJsResponse28, options31);
        options31.responseLimit = (byte) -1;
        org.projectodd.sockjs.EventSourceReceiver eventSourceReceiver36 = new org.projectodd.sockjs.EventSourceReceiver((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest17, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse23, options31);
        sockJsServletResponse23.statusCode((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            sockJsServer0.dispatch((org.projectodd.sockjs.SockJsRequest) sockJsServletRequest11, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "42bf3332-f6d0-494a-aaf3-4db4e4ba355e" + "'", str7, "42bf3332-f6d0-494a-aaf3-4db4e4ba355e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(dispatchFunction13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(dispatchFunction19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 200 + "'", int26 == 200);
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        sockJsConnection1.emitClose();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = sockJsConnection1.headers;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = sockJsConnection1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "93e0457b-336a-43e3-9320-2b902f01d485" + "'", str6, "93e0457b-336a-43e3-9320-2b902f01d485");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "93e0457b-336a-43e3-9320-2b902f01d485" + "'", str8, "93e0457b-336a-43e3-9320-2b902f01d485");
        org.junit.Assert.assertNotNull(strMap10);
    }

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler16 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c780d6ce-cb5b-433b-9a0c-69eb41f555dd" + "'", str7, "c780d6ce-cb5b-433b-9a0c-69eb41f555dd");
        org.junit.Assert.assertNull(str8);
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = sockJsConnection1.write("c780d6ce-cb5b-433b-9a0c-69eb41f555dd");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "4e47451f-ae74-4816-ab2d-dcaf258ab277" + "'", str6, "4e47451f-ae74-4816-ab2d-dcaf258ab277");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "4e47451f-ae74-4816-ab2d-dcaf258ab277" + "'", str8, "4e47451f-ae74-4816-ab2d-dcaf258ab277");
    }

    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        sockJsConnection2.remotePort = (short) 10;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eb3aba54-425c-4866-9648-b27c1de06974" + "'", str7, "eb3aba54-425c-4866-9648-b27c1de06974");
    }

    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        java.lang.String str10 = sockJsConnection2.remoteAddress;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fd484e31-0854-4cd0-9a14-f7e9c04236f1" + "'", str7, "fd484e31-0854-4cd0-9a14-f7e9c04236f1");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
    }

    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        javax.websocket.Session session0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        org.projectodd.sockjs.servlet.SockJsWebsocketRequest sockJsWebsocketRequest4 = new org.projectodd.sockjs.servlet.SockJsWebsocketRequest(session0, "cc90bf66-5961-4693-b141-fc94fdea3cdb", "dc9978fd-25e8-4379-9ca9-e5909baefee9", strMap3);
        org.projectodd.sockjs.SockJsServer sockJsServer5 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session6 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection7 = new org.projectodd.sockjs.SockJsConnection(session6);
        sockJsConnection7.prefix = "\"\"";
        sockJsConnection7.url = "\"\\\"\\\"\"";
        java.lang.String str12 = sockJsConnection7.id;
        java.lang.String str13 = sockJsConnection7.remoteAddress;
        sockJsServer5.emitConnection(sockJsConnection7);
        org.projectodd.sockjs.WebsocketHandler websocketHandler15 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer5);
        org.projectodd.sockjs.Session session16 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection17 = new org.projectodd.sockjs.SockJsConnection(session16);
        sockJsConnection17.prefix = "\"\"";
        sockJsServer5.emitConnection(sockJsConnection17);
        org.projectodd.sockjs.EventsourceHandler eventsourceHandler21 = new org.projectodd.sockjs.EventsourceHandler(sockJsServer5);
        javax.websocket.Session session22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.projectodd.sockjs.servlet.RawWebsocketSessionReceiver rawWebsocketSessionReceiver23 = new org.projectodd.sockjs.servlet.RawWebsocketSessionReceiver((org.projectodd.sockjs.SockJsRequest) sockJsWebsocketRequest4, sockJsServer5, session22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "c0b67cb2-5b41-4eb0-a642-0be186babb22" + "'", str12, "c0b67cb2-5b41-4eb0-a642-0be186babb22");
        org.junit.Assert.assertNull(str13);
    }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        org.projectodd.sockjs.servlet.SockJsServlet sockJsServlet0 = new org.projectodd.sockjs.servlet.SockJsServlet();
        org.projectodd.sockjs.SockJsServer sockJsServer1 = new org.projectodd.sockjs.SockJsServer();
        sockJsServer1.init();
        org.projectodd.sockjs.servlet.SockJsEndpoint sockJsEndpoint5 = new org.projectodd.sockjs.servlet.SockJsEndpoint(sockJsServer1, "1f2d0367-affd-4bc4-9047-35ed487203f3", "2df7967b-c163-40e4-9df1-d5dcf52a6339");
        sockJsServlet0.setServer(sockJsServer1);
        org.projectodd.sockjs.SockJsServer sockJsServer7 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session8 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection9 = new org.projectodd.sockjs.SockJsConnection(session8);
        sockJsConnection9.prefix = "\"\"";
        sockJsConnection9.url = "\"\\\"\\\"\"";
        java.lang.String str14 = sockJsConnection9.id;
        java.lang.String str15 = sockJsConnection9.remoteAddress;
        sockJsServer7.emitConnection(sockJsConnection9);
        sockJsServlet0.setServer(sockJsServer7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<java.lang.String> strEnumeration18 = sockJsServlet0.getInitParameterNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: ServletConfig has not been initialized");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "c7c8063c-0a1c-4886-bdb9-3cc3e216bafb" + "'", str14, "c7c8063c-0a1c-4886-bdb9-3cc3e216bafb");
        org.junit.Assert.assertNull(str15);
    }

    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        sockJsServer0.init();
        org.projectodd.sockjs.servlet.SockJsEndpoint sockJsEndpoint4 = new org.projectodd.sockjs.servlet.SockJsEndpoint(sockJsServer0, "1f2d0367-affd-4bc4-9047-35ed487203f3", "2df7967b-c163-40e4-9df1-d5dcf52a6339");
        org.projectodd.sockjs.servlet.RawWebsocketEndpoint rawWebsocketEndpoint7 = new org.projectodd.sockjs.servlet.RawWebsocketEndpoint(sockJsServer0, "c[1,\"\"]", "1f2d0367-affd-4bc4-9047-35ed487203f3");
        org.projectodd.sockjs.SockJsRequest sockJsRequest8 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse9 = null;
        org.projectodd.sockjs.SockJsRequest sockJsRequest10 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse11 = null;
        org.projectodd.sockjs.SockJsServer.Options options12 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver13 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest10, sockJsResponse11, options12);
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver14 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest8, sockJsResponse9, options12);
        options12.responseLimit = (byte) -1;
        java.lang.String str17 = options12.sockjsUrl;
        int int18 = options12.responseLimit;
        java.lang.String str19 = options12.sockjsUrl;
        options12.sockjsUrl = "1f2d0367-affd-4bc4-9047-35ed487203f3";
        sockJsServer0.options = options12;
        org.projectodd.sockjs.SockJsServer sockJsServer23 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session24 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection25 = new org.projectodd.sockjs.SockJsConnection(session24);
        sockJsConnection25.prefix = "\"\"";
        sockJsConnection25.url = "\"\\\"\\\"\"";
        java.lang.String str30 = sockJsConnection25.id;
        java.lang.String str31 = sockJsConnection25.remoteAddress;
        sockJsServer23.emitConnection(sockJsConnection25);
        org.projectodd.sockjs.WebsocketHandler websocketHandler33 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer23);
        org.projectodd.sockjs.Session session34 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection35 = new org.projectodd.sockjs.SockJsConnection(session34);
        sockJsConnection35.prefix = "\"\"";
        sockJsServer23.emitConnection(sockJsConnection35);
        java.lang.String str39 = sockJsConnection35.pathname;
        sockJsServer0.emitConnection(sockJsConnection35);
        sockJsConnection35.remotePort = (-1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str17, "http://cdn.sockjs.org/sockjs-0.3.min.js");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str19, "http://cdn.sockjs.org/sockjs-0.3.min.js");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "e9cbdfff-25c5-4384-9b52-64cfa602c655" + "'", str30, "e9cbdfff-25c5-4384-9b52-64cfa602c655");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str39);
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        org.projectodd.sockjs.EventsourceHandler eventsourceHandler16 = new org.projectodd.sockjs.EventsourceHandler(sockJsServer0);
        org.projectodd.sockjs.DispatchFunction dispatchFunction17 = eventsourceHandler16.eventsource;
        org.projectodd.sockjs.DispatchFunction dispatchFunction18 = eventsourceHandler16.eventsource;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4df1bf63-6d12-4300-b19f-35389611d1da" + "'", str7, "4df1bf63-6d12-4300-b19f-35389611d1da");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dispatchFunction17);
        org.junit.Assert.assertNotNull(dispatchFunction18);
    }

    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test220");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        sockJsConnection2.emitData("de9a8da6-580d-432b-bbe5-42d5a97c653f");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "96c4603c-3098-4810-bbe2-2f8d3d821aca" + "'", str7, "96c4603c-3098-4810-bbe2-2f8d3d821aca");
    }

    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        java.lang.String str4 = sockJsConnection1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<SockJSConnection 2581f79a-8ce7-4075-aede-791f8359e2ae>" + "'", str4, "<SockJSConnection 2581f79a-8ce7-4075-aede-791f8359e2ae>");
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler11 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
        org.projectodd.sockjs.SockJsServer.Options options12 = sockJsServer0.options;
        options12.responseLimit = 100;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c843a36f-67a3-4198-9024-291640dd99b7" + "'", str7, "c843a36f-67a3-4198-9024-291640dd99b7");
        org.junit.Assert.assertNotNull(options12);
    }

    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        // The following exception was thrown during execution in test generation
        try {
            sockJsServer0.destroy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0199325e-1796-4db3-9302-2930e18bea9d" + "'", str7, "0199325e-1796-4db3-9302-2930e18bea9d");
        org.junit.Assert.assertNull(str8);
    }

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        sockJsServer0.init();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9447fbf5-abee-45cd-ae27-de993b58c47b" + "'", str7, "9447fbf5-abee-45cd-ae27-de993b58c47b");
        org.junit.Assert.assertNull(str8);
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.HtmlfileHandler htmlfileHandler1 = new org.projectodd.sockjs.HtmlfileHandler(sockJsServer0);
        org.projectodd.sockjs.SockJsServer sockJsServer2 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session3 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection4 = new org.projectodd.sockjs.SockJsConnection(session3);
        sockJsConnection4.prefix = "\"\"";
        sockJsConnection4.url = "\"\\\"\\\"\"";
        java.lang.String str9 = sockJsConnection4.id;
        java.lang.String str10 = sockJsConnection4.remoteAddress;
        sockJsServer2.emitConnection(sockJsConnection4);
        org.projectodd.sockjs.WebsocketHandler websocketHandler12 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer2);
        org.projectodd.sockjs.Session session13 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection14 = new org.projectodd.sockjs.SockJsConnection(session13);
        sockJsConnection14.prefix = "\"\"";
        sockJsServer2.emitConnection(sockJsConnection14);
        java.lang.String str18 = sockJsConnection14.pathname;
        java.lang.String str19 = sockJsConnection14.toString();
        sockJsServer0.emitConnection(sockJsConnection14);
        sockJsConnection14.url = "<SockJSConnection 42393e10-600d-4023-8e90-2e0df2e16503>";
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "df0498b0-c170-472f-8b59-6f3ca4705612" + "'", str9, "df0498b0-c170-472f-8b59-6f3ca4705612");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<SockJSConnection 6ca30529-291d-475e-a09b-78d6ff14a8a9>" + "'", str19, "<SockJSConnection 6ca30529-291d-475e-a09b-78d6ff14a8a9>");
    }

    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.pathname = "hi!";
        sockJsConnection1.emitClose();
        sockJsConnection1.remotePort = 0;
        sockJsConnection1.emitClose();
        org.projectodd.sockjs.Session session8 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection9 = new org.projectodd.sockjs.SockJsConnection(session8);
        sockJsConnection9.prefix = "\"\"";
        sockJsConnection9.url = "\"\\\"\\\"\"";
        java.lang.String str14 = sockJsConnection9.id;
        java.lang.String str15 = sockJsConnection9.remoteAddress;
        java.lang.String str16 = sockJsConnection9.id;
        sockJsConnection9.emitClose();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = sockJsConnection9.headers;
        sockJsConnection1.headers = strMap18;
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cf9e4030-02de-4018-8679-b18bb23bcabc" + "'", str14, "cf9e4030-02de-4018-8679-b18bb23bcabc");
        org.junit.Assert.assertNull(str15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "cf9e4030-02de-4018-8679-b18bb23bcabc" + "'", str16, "cf9e4030-02de-4018-8679-b18bb23bcabc");
        org.junit.Assert.assertNotNull(strMap18);
    }

    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test265");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler11 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
        org.projectodd.sockjs.DispatchFunction dispatchFunction12 = chunkingHandler11.infoOptions;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2c1f18bc-eb67-4e1d-8ff2-de2f99870128" + "'", str7, "2c1f18bc-eb67-4e1d-8ff2-de2f99870128");
        org.junit.Assert.assertNotNull(dispatchFunction12);
    }

    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler11 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
        org.projectodd.sockjs.SockJsServer.Options options12 = sockJsServer0.options;
        org.projectodd.sockjs.XhrHandler xhrHandler13 = new org.projectodd.sockjs.XhrHandler(sockJsServer0);
        org.projectodd.sockjs.servlet.RawWebsocketEndpoint rawWebsocketEndpoint16 = new org.projectodd.sockjs.servlet.RawWebsocketEndpoint(sockJsServer0, "", "<SockJSConnection 6ca30529-291d-475e-a09b-78d6ff14a8a9>");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c985b2e3-92ea-4a8a-8c7a-51c45a743bec" + "'", str7, "c985b2e3-92ea-4a8a-8c7a-51c45a743bec");
        org.junit.Assert.assertNotNull(options12);
    }

    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test271");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = sockJsConnection12.close((int) (short) 10, "3724d827-52f3-42c3-b48e-fb3c2b6c47aa");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6cb217ac-494e-4c4a-b588-1c04055903ae" + "'", str7, "6cb217ac-494e-4c4a-b588-1c04055903ae");
        org.junit.Assert.assertNull(str8);
    }

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        javax.websocket.Session session0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        org.projectodd.sockjs.servlet.SockJsWebsocketRequest sockJsWebsocketRequest4 = new org.projectodd.sockjs.servlet.SockJsWebsocketRequest(session0, "\"hi!\"", "c[1,\"\"]", strMap3);
        javax.servlet.http.HttpServletResponse httpServletResponse5 = null;
        javax.servlet.AsyncContext asyncContext6 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse7 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse5, asyncContext6);
        boolean boolean8 = sockJsServletResponse7.finished();
        int int9 = sockJsServletResponse7.statusCode();
        boolean boolean10 = sockJsServletResponse7.finished();
        org.projectodd.sockjs.SockJsServer sockJsServer11 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.HtmlfileHandler htmlfileHandler12 = new org.projectodd.sockjs.HtmlfileHandler(sockJsServer11);
        org.projectodd.sockjs.SockJsRequest sockJsRequest13 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse14 = null;
        javax.servlet.AsyncContext asyncContext15 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse16 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse14, asyncContext15);
        org.projectodd.sockjs.SockJsServer.Options options17 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.XhrPollingReceiver xhrPollingReceiver18 = new org.projectodd.sockjs.XhrPollingReceiver(sockJsRequest13, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse16, options17);
        sockJsServer11.options = options17;
        java.lang.String str20 = options17.sockjsUrl;
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver21 = new org.projectodd.sockjs.HtmlFileReceiver((org.projectodd.sockjs.SockJsRequest) sockJsWebsocketRequest4, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse7, options17);
        int int22 = sockJsWebsocketRequest4.getRemotePort();
        javax.websocket.Session session23 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        org.projectodd.sockjs.servlet.SockJsWebsocketRequest sockJsWebsocketRequest27 = new org.projectodd.sockjs.servlet.SockJsWebsocketRequest(session23, "\"hi!\"", "c[1,\"\"]", strMap26);
        javax.servlet.http.HttpServletResponse httpServletResponse28 = null;
        javax.servlet.AsyncContext asyncContext29 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse30 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse28, asyncContext29);
        boolean boolean31 = sockJsServletResponse30.finished();
        int int32 = sockJsServletResponse30.statusCode();
        boolean boolean33 = sockJsServletResponse30.finished();
        org.projectodd.sockjs.SockJsServer sockJsServer34 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.HtmlfileHandler htmlfileHandler35 = new org.projectodd.sockjs.HtmlfileHandler(sockJsServer34);
        org.projectodd.sockjs.SockJsRequest sockJsRequest36 = null;
        javax.servlet.http.HttpServletResponse httpServletResponse37 = null;
        javax.servlet.AsyncContext asyncContext38 = null;
        org.projectodd.sockjs.servlet.SockJsServletResponse sockJsServletResponse39 = new org.projectodd.sockjs.servlet.SockJsServletResponse(httpServletResponse37, asyncContext38);
        org.projectodd.sockjs.SockJsServer.Options options40 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.XhrPollingReceiver xhrPollingReceiver41 = new org.projectodd.sockjs.XhrPollingReceiver(sockJsRequest36, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse39, options40);
        sockJsServer34.options = options40;
        java.lang.String str43 = options40.sockjsUrl;
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver44 = new org.projectodd.sockjs.HtmlFileReceiver((org.projectodd.sockjs.SockJsRequest) sockJsWebsocketRequest27, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse30, options40);
        org.projectodd.sockjs.SockJsServer sockJsServer45 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session46 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection47 = new org.projectodd.sockjs.SockJsConnection(session46);
        sockJsConnection47.prefix = "\"\"";
        sockJsConnection47.url = "\"\\\"\\\"\"";
        java.lang.String str52 = sockJsConnection47.id;
        sockJsConnection47.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer45.emitConnection(sockJsConnection47);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler56 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer45);
        org.projectodd.sockjs.SockJsServer.Options options57 = sockJsServer45.options;
        org.projectodd.sockjs.JsonpReceiver jsonpReceiver59 = new org.projectodd.sockjs.JsonpReceiver((org.projectodd.sockjs.SockJsRequest) sockJsWebsocketRequest4, (org.projectodd.sockjs.SockJsResponse) sockJsServletResponse30, options57, "\"0464b5a2-eb61-4f8e-9f54-8ee3f17275f1\"");
        int int60 = sockJsServletResponse30.statusCode();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 200 + "'", int9 == 200);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str20, "http://cdn.sockjs.org/sockjs-0.3.min.js");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 200 + "'", int32 == 200);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str43, "http://cdn.sockjs.org/sockjs-0.3.min.js");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "714b1f9d-4865-45b6-8fae-8dedc0faf59c" + "'", str52, "714b1f9d-4865-45b6-8fae-8dedc0faf59c");
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 200 + "'", int60 == 200);
    }

    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test277");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        sockJsConnection1.pathname = "\"hi!\"";
        java.lang.String str11 = sockJsConnection1.url;
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f5a2f1e7-4785-43a9-874e-ef06f55748eb" + "'", str6, "f5a2f1e7-4785-43a9-874e-ef06f55748eb");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "f5a2f1e7-4785-43a9-874e-ef06f55748eb" + "'", str8, "f5a2f1e7-4785-43a9-874e-ef06f55748eb");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"\\\"\\\"\"" + "'", str11, "\"\\\"\\\"\"");
    }

    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test278");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        java.lang.String str8 = sockJsConnection2.remoteAddress;
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.WebsocketHandler websocketHandler10 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.Session session11 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection12 = new org.projectodd.sockjs.SockJsConnection(session11);
        sockJsConnection12.prefix = "\"\"";
        sockJsServer0.emitConnection(sockJsConnection12);
        org.projectodd.sockjs.EventsourceHandler eventsourceHandler16 = new org.projectodd.sockjs.EventsourceHandler(sockJsServer0);
        org.projectodd.sockjs.WebsocketHandler websocketHandler17 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "92fdbffc-5023-4faf-8cd5-d1e3723de8db" + "'", str7, "92fdbffc-5023-4faf-8cd5-d1e3723de8db");
        org.junit.Assert.assertNull(str8);
    }

    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test280");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = null;
        org.projectodd.sockjs.WebsocketHandler websocketHandler1 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer0);
        org.projectodd.sockjs.DispatchFunction dispatchFunction2 = websocketHandler1.rawWebsocket;
        org.projectodd.sockjs.SockJsServer sockJsServer3 = null;
        org.projectodd.sockjs.WebsocketHandler websocketHandler4 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer3);
        org.projectodd.sockjs.DispatchFunction dispatchFunction5 = websocketHandler4.rawWebsocket;
        websocketHandler1.rawWebsocket = dispatchFunction5;
        org.projectodd.sockjs.SockJsServer sockJsServer7 = null;
        org.projectodd.sockjs.IframeHandler iframeHandler8 = new org.projectodd.sockjs.IframeHandler(sockJsServer7);
        org.projectodd.sockjs.DispatchFunction dispatchFunction9 = iframeHandler8.iframe;
        websocketHandler1.sockjsWebsocket = dispatchFunction9;
        org.projectodd.sockjs.SockJsServer sockJsServer11 = new org.projectodd.sockjs.SockJsServer();
        sockJsServer11.init();
        org.projectodd.sockjs.servlet.SockJsEndpoint sockJsEndpoint15 = new org.projectodd.sockjs.servlet.SockJsEndpoint(sockJsServer11, "1f2d0367-affd-4bc4-9047-35ed487203f3", "2df7967b-c163-40e4-9df1-d5dcf52a6339");
        org.projectodd.sockjs.servlet.RawWebsocketEndpoint rawWebsocketEndpoint18 = new org.projectodd.sockjs.servlet.RawWebsocketEndpoint(sockJsServer11, "c[1,\"\"]", "1f2d0367-affd-4bc4-9047-35ed487203f3");
        org.projectodd.sockjs.SockJsRequest sockJsRequest19 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse20 = null;
        org.projectodd.sockjs.SockJsRequest sockJsRequest21 = null;
        org.projectodd.sockjs.SockJsResponse sockJsResponse22 = null;
        org.projectodd.sockjs.SockJsServer.Options options23 = new org.projectodd.sockjs.SockJsServer.Options();
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver24 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest21, sockJsResponse22, options23);
        org.projectodd.sockjs.HtmlFileReceiver htmlFileReceiver25 = new org.projectodd.sockjs.HtmlFileReceiver(sockJsRequest19, sockJsResponse20, options23);
        options23.responseLimit = (byte) -1;
        java.lang.String str28 = options23.sockjsUrl;
        int int29 = options23.responseLimit;
        java.lang.String str30 = options23.sockjsUrl;
        options23.sockjsUrl = "1f2d0367-affd-4bc4-9047-35ed487203f3";
        sockJsServer11.options = options23;
        org.projectodd.sockjs.SockJsServer sockJsServer34 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session35 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection36 = new org.projectodd.sockjs.SockJsConnection(session35);
        sockJsConnection36.prefix = "\"\"";
        sockJsConnection36.url = "\"\\\"\\\"\"";
        java.lang.String str41 = sockJsConnection36.id;
        java.lang.String str42 = sockJsConnection36.remoteAddress;
        sockJsServer34.emitConnection(sockJsConnection36);
        org.projectodd.sockjs.WebsocketHandler websocketHandler44 = new org.projectodd.sockjs.WebsocketHandler(sockJsServer34);
        org.projectodd.sockjs.Session session45 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection46 = new org.projectodd.sockjs.SockJsConnection(session45);
        sockJsConnection46.prefix = "\"\"";
        sockJsServer34.emitConnection(sockJsConnection46);
        java.lang.String str50 = sockJsConnection46.pathname;
        sockJsServer11.emitConnection(sockJsConnection46);
        org.projectodd.sockjs.JsonpHandler jsonpHandler52 = new org.projectodd.sockjs.JsonpHandler(sockJsServer11);
        org.projectodd.sockjs.DispatchFunction dispatchFunction53 = jsonpHandler52.jsonp;
        websocketHandler1.rawWebsocket = dispatchFunction53;
        org.junit.Assert.assertNotNull(dispatchFunction2);
        org.junit.Assert.assertNotNull(dispatchFunction5);
        org.junit.Assert.assertNotNull(dispatchFunction9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str28, "http://cdn.sockjs.org/sockjs-0.3.min.js");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://cdn.sockjs.org/sockjs-0.3.min.js" + "'", str30, "http://cdn.sockjs.org/sockjs-0.3.min.js");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "b88cbd8d-43d4-43ad-9f4d-db4193cd0069" + "'", str41, "b88cbd8d-43d4-43ad-9f4d-db4193cd0069");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dispatchFunction53);
    }

    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test283");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.servlet.SockJsServlet sockJsServlet11 = new org.projectodd.sockjs.servlet.SockJsServlet(sockJsServer0);
        javax.servlet.ServletRequest servletRequest12 = null;
        javax.servlet.ServletResponse servletResponse13 = null;
        // The following exception was thrown during execution in test generation
        try {
            sockJsServlet11.service(servletRequest12, servletResponse13);
            org.junit.Assert.fail("Expected exception of type javax.servlet.ServletException; message: non-HTTP request or response");
        } catch (javax.servlet.ServletException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "33f77f7c-12d3-4eb0-8be5-91ad41e52fc8" + "'", str7, "33f77f7c-12d3-4eb0-8be5-91ad41e52fc8");
    }

    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test284");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.prefix = "\"\"";
        sockJsConnection1.url = "\"\\\"\\\"\"";
        java.lang.String str6 = sockJsConnection1.id;
        java.lang.String str7 = sockJsConnection1.remoteAddress;
        java.lang.String str8 = sockJsConnection1.id;
        sockJsConnection1.emitClose();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = sockJsConnection1.headers;
        sockJsConnection1.remotePort = 1;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = sockJsConnection1.write("\"hi!\"");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2fbd983b-8cc5-45fe-9b85-463c12e4f520" + "'", str6, "2fbd983b-8cc5-45fe-9b85-463c12e4f520");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2fbd983b-8cc5-45fe-9b85-463c12e4f520" + "'", str8, "2fbd983b-8cc5-45fe-9b85-463c12e4f520");
        org.junit.Assert.assertNotNull(strMap10);
    }

    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test288");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler11 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
        org.projectodd.sockjs.Session session12 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection13 = new org.projectodd.sockjs.SockJsConnection(session12);
        sockJsConnection13.pathname = "hi!";
        java.lang.String str16 = sockJsConnection13.remoteAddress;
        sockJsConnection13.id = "\"\"";
        java.lang.String str19 = sockJsConnection13.id;
        sockJsConnection13.emitClose();
        sockJsServer0.emitConnection(sockJsConnection13);
        org.projectodd.sockjs.XhrHandler xhrHandler22 = new org.projectodd.sockjs.XhrHandler(sockJsServer0);
        org.projectodd.sockjs.SockJsServer sockJsServer23 = null;
        org.projectodd.sockjs.IframeHandler iframeHandler24 = new org.projectodd.sockjs.IframeHandler(sockJsServer23);
        org.projectodd.sockjs.DispatchFunction dispatchFunction25 = iframeHandler24.iframe;
        xhrHandler22.xhrPoll = dispatchFunction25;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99a9e8ed-27b0-4262-8d1a-f24044825acc" + "'", str7, "99a9e8ed-27b0-4262-8d1a-f24044825acc");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\"\"" + "'", str19, "\"\"");
        org.junit.Assert.assertNotNull(dispatchFunction25);
    }

    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test293");
        org.projectodd.sockjs.Session session0 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection1 = new org.projectodd.sockjs.SockJsConnection(session0);
        sockJsConnection1.pathname = "hi!";
        java.lang.String str4 = sockJsConnection1.remoteAddress;
        sockJsConnection1.id = "\"\"";
        java.lang.String str7 = sockJsConnection1.id;
        org.projectodd.sockjs.Session session8 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection9 = new org.projectodd.sockjs.SockJsConnection(session8);
        sockJsConnection9.prefix = "\"\"";
        sockJsConnection9.url = "\"\\\"\\\"\"";
        java.lang.String str14 = sockJsConnection9.id;
        java.lang.String str15 = sockJsConnection9.remoteAddress;
        java.lang.String str16 = sockJsConnection9.id;
        sockJsConnection9.emitClose();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = sockJsConnection9.headers;
        sockJsConnection1.headers = strMap18;
        org.projectodd.sockjs.SockJsConnection.OnCloseHandler onCloseHandler20 = null;
        sockJsConnection1.onClose(onCloseHandler20);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\"\"" + "'", str7, "\"\"");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "16afa01d-c1b2-4656-a80e-2a15a4b27d84" + "'", str14, "16afa01d-c1b2-4656-a80e-2a15a4b27d84");
        org.junit.Assert.assertNull(str15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "16afa01d-c1b2-4656-a80e-2a15a4b27d84" + "'", str16, "16afa01d-c1b2-4656-a80e-2a15a4b27d84");
        org.junit.Assert.assertNotNull(strMap18);
    }

    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test294");
        org.projectodd.sockjs.SockJsServer sockJsServer0 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session1 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection2 = new org.projectodd.sockjs.SockJsConnection(session1);
        sockJsConnection2.prefix = "\"\"";
        sockJsConnection2.url = "\"\\\"\\\"\"";
        java.lang.String str7 = sockJsConnection2.id;
        sockJsConnection2.pathname = "1d0d2f8b-f3b3-4b9b-b058-7275f6f659fe";
        sockJsServer0.emitConnection(sockJsConnection2);
        org.projectodd.sockjs.ChunkingHandler chunkingHandler11 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer0);
        org.projectodd.sockjs.SockJsServer sockJsServer12 = null;
        org.projectodd.sockjs.ChunkingHandler chunkingHandler13 = new org.projectodd.sockjs.ChunkingHandler(sockJsServer12);
        org.projectodd.sockjs.DispatchFunction dispatchFunction14 = chunkingHandler13.info;
        chunkingHandler11.info = dispatchFunction14;
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a23a9e5d-1704-421f-a2f0-be895e0aa814" + "'", str7, "a23a9e5d-1704-421f-a2f0-be895e0aa814");
        org.junit.Assert.assertNotNull(dispatchFunction14);
    }

    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test299");
        org.projectodd.sockjs.servlet.SockJsServlet sockJsServlet0 = new org.projectodd.sockjs.servlet.SockJsServlet();
        org.projectodd.sockjs.SockJsServer sockJsServer1 = new org.projectodd.sockjs.SockJsServer();
        sockJsServer1.init();
        org.projectodd.sockjs.servlet.SockJsEndpoint sockJsEndpoint5 = new org.projectodd.sockjs.servlet.SockJsEndpoint(sockJsServer1, "1f2d0367-affd-4bc4-9047-35ed487203f3", "2df7967b-c163-40e4-9df1-d5dcf52a6339");
        sockJsServlet0.setServer(sockJsServer1);
        org.projectodd.sockjs.SockJsServer sockJsServer7 = new org.projectodd.sockjs.SockJsServer();
        org.projectodd.sockjs.Session session8 = null;
        org.projectodd.sockjs.SockJsConnection sockJsConnection9 = new org.projectodd.sockjs.SockJsConnection(session8);
        sockJsConnection9.prefix = "\"\"";
        sockJsConnection9.url = "\"\\\"\\\"\"";
        java.lang.String str14 = sockJsConnection9.id;
        java.lang.String str15 = sockJsConnection9.remoteAddress;
        sockJsServer7.emitConnection(sockJsConnection9);
        sockJsServlet0.setServer(sockJsServer7);
        org.projectodd.sockjs.SockJsServer sockJsServer18 = sockJsServlet0.getServer();
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bcfe847e-f34a-4f13-a0c4-b7b3adb6a7ac" + "'", str14, "bcfe847e-f34a-4f13-a0c4-b7b3adb6a7ac");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(sockJsServer18);
    }
graphaware-reco, length: 2

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendations0 = new com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>>();
        int int1 = participationPolicyParetoScoreTransformerRecommendations0.size();
        com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy> participationPolicyParetoScoreTransformer5 = new com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>((float) (short) 1, 0.0f, (float) 'a');
        com.graphaware.reco.generic.result.Recommendation<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendation6 = participationPolicyParetoScoreTransformerRecommendations0.getOrCreate(participationPolicyParetoScoreTransformer5);
        com.graphaware.reco.generic.result.Score score7 = participationPolicyParetoScoreTransformerRecommendation6.getScore();
        java.lang.String str8 = participationPolicyParetoScoreTransformerRecommendation6.getUuid();
        com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy> participationPolicyParetoScoreTransformer9 = participationPolicyParetoScoreTransformerRecommendation6.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(participationPolicyParetoScoreTransformerRecommendation6);
        org.junit.Assert.assertNotNull(score7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "e5c2912d-b85c-4f94-b2f2-d1e30a3a8bb7" + "'", str8, "e5c2912d-b85c-4f94-b2f2-d1e30a3a8bb7");
        org.junit.Assert.assertNotNull(participationPolicyParetoScoreTransformer9);
    }

    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test273");
        com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendations0 = new com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>>();
        int int1 = participationPolicyParetoScoreTransformerRecommendations0.size();
        com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy> participationPolicyParetoScoreTransformer5 = new com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>((float) (short) 1, 0.0f, (float) 'a');
        com.graphaware.reco.generic.result.Recommendation<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendation6 = participationPolicyParetoScoreTransformerRecommendations0.getOrCreate(participationPolicyParetoScoreTransformer5);
        com.graphaware.reco.generic.result.Score score7 = participationPolicyParetoScoreTransformerRecommendation6.getScore();
        participationPolicyParetoScoreTransformerRecommendation6.add("total time", (float) 9);
        com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendations11 = new com.graphaware.reco.generic.result.Recommendations<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>>();
        int int12 = participationPolicyParetoScoreTransformerRecommendations11.size();
        com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy> participationPolicyParetoScoreTransformer16 = new com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>((float) (short) 1, 0.0f, (float) 'a');
        com.graphaware.reco.generic.result.Recommendation<com.graphaware.reco.generic.transform.ParetoScoreTransformer<com.graphaware.reco.generic.policy.ParticipationPolicy>> participationPolicyParetoScoreTransformerRecommendation17 = participationPolicyParetoScoreTransformerRecommendations11.getOrCreate(participationPolicyParetoScoreTransformer16);
        com.graphaware.reco.generic.result.Score score18 = participationPolicyParetoScoreTransformerRecommendation17.getScore();
        java.lang.String str19 = participationPolicyParetoScoreTransformerRecommendation17.getUuid();
        int int20 = participationPolicyParetoScoreTransformerRecommendation6.compareTo(participationPolicyParetoScoreTransformerRecommendation17);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(participationPolicyParetoScoreTransformerRecommendation6);
        org.junit.Assert.assertNotNull(score7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(participationPolicyParetoScoreTransformerRecommendation17);
        org.junit.Assert.assertNotNull(score18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "f2f7c714-724c-4121-8f57-851dd10449e4" + "'", str19, "f2f7c714-724c-4121-8f57-851dd10449e4");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }
819548945-tool-encryptionAndDecryption-core, length: 3

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        java.security.PrivateKey privateKey0 = lich.tool.encryptionAndDecryption.core.Base.getRootGMPrivateKey();
// flaky:         org.junit.Assert.assertNull(privateKey0);
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        java.security.cert.X509Certificate x509Certificate0 = lich.tool.encryptionAndDecryption.core.Base.getRootGMX509Certificate();
// flaky:         org.junit.Assert.assertNull(x509Certificate0);
    }

    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        java.security.cert.Certificate certificate0 = null;
        java.security.PrivateKey privateKey1 = null;
        java.security.cert.Certificate[] certificateArray2 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data3 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate0, privateKey1, certificateArray2);
        java.security.cert.Certificate[] certificateArray4 = p12Data3.getCertificateChain();
        java.security.cert.Certificate[] certificateArray5 = p12Data3.getCertificateChain();
        java.security.cert.Certificate certificate6 = p12Data3.getCert();
        java.security.PrivateKey privateKey7 = p12Data3.getPrivateKey();
        java.security.PrivateKey privateKey8 = p12Data3.getPrivateKey();
        lich.tool.encryptionAndDecryption.core.SymmetricTool symmetricTool9 = new lich.tool.encryptionAndDecryption.core.SymmetricTool();
        java.security.PrivateKey privateKey10 = lich.tool.encryptionAndDecryption.core.Base.getRootRSAPrivateKey();
        java.security.cert.Certificate certificate11 = null;
        java.security.PrivateKey privateKey12 = null;
        java.security.cert.Certificate[] certificateArray13 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data14 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate11, privateKey12, certificateArray13);
        java.security.cert.Certificate[] certificateArray15 = p12Data14.getCertificateChain();
        java.security.cert.Certificate[] certificateArray16 = p12Data14.getCertificateChain();
        java.security.cert.X509Certificate x509Certificate17 = lich.tool.encryptionAndDecryption.core.Base.getRootRSAX509Certificate();
        java.security.PrivateKey privateKey18 = null;
        java.security.cert.Certificate certificate19 = null;
        java.security.PrivateKey privateKey20 = null;
        java.security.cert.Certificate[] certificateArray21 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data22 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate19, privateKey20, certificateArray21);
        java.security.cert.Certificate[] certificateArray23 = p12Data22.getCertificateChain();
        java.security.cert.Certificate[] certificateArray24 = p12Data22.getCertificateChain();
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data25 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data((java.security.cert.Certificate) x509Certificate17, privateKey18, certificateArray24);
        p12Data14.setCert((java.security.cert.Certificate) x509Certificate17);
        java.security.PrivateKey privateKey27 = lich.tool.encryptionAndDecryption.core.Base.getRootRSAPrivateKey();
        java.security.cert.Certificate certificate28 = null;
        java.security.PrivateKey privateKey29 = null;
        java.security.cert.Certificate[] certificateArray30 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data31 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate28, privateKey29, certificateArray30);
        java.security.cert.Certificate[] certificateArray32 = p12Data31.getCertificateChain();
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data33 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data((java.security.cert.Certificate) x509Certificate17, privateKey27, certificateArray32);
        symmetricTool9.setRSAroot(privateKey10, x509Certificate17);
        p12Data3.setCert((java.security.cert.Certificate) x509Certificate17);
        java.security.cert.Certificate certificate36 = null;
        java.security.PrivateKey privateKey37 = null;
        java.security.cert.Certificate[] certificateArray38 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data39 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate36, privateKey37, certificateArray38);
        java.security.cert.Certificate[] certificateArray40 = p12Data39.getCertificateChain();
        java.security.cert.Certificate[] certificateArray41 = p12Data39.getCertificateChain();
        java.security.cert.X509Certificate x509Certificate42 = lich.tool.encryptionAndDecryption.core.Base.getRootRSAX509Certificate();
        java.security.PrivateKey privateKey43 = null;
        java.security.cert.Certificate certificate44 = null;
        java.security.PrivateKey privateKey45 = null;
        java.security.cert.Certificate[] certificateArray46 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data47 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate44, privateKey45, certificateArray46);
        java.security.cert.Certificate[] certificateArray48 = p12Data47.getCertificateChain();
        java.security.cert.Certificate[] certificateArray49 = p12Data47.getCertificateChain();
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data50 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data((java.security.cert.Certificate) x509Certificate42, privateKey43, certificateArray49);
        p12Data39.setCert((java.security.cert.Certificate) x509Certificate42);
        java.security.PrivateKey privateKey52 = lich.tool.encryptionAndDecryption.core.Base.getRootRSAPrivateKey();
        java.security.cert.Certificate certificate53 = null;
        java.security.PrivateKey privateKey54 = null;
        java.security.cert.Certificate[] certificateArray55 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data56 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate53, privateKey54, certificateArray55);
        java.security.cert.Certificate[] certificateArray57 = p12Data56.getCertificateChain();
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data58 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data((java.security.cert.Certificate) x509Certificate42, privateKey52, certificateArray57);
        java.security.cert.Certificate certificate59 = null;
        java.security.PrivateKey privateKey60 = null;
        java.security.cert.Certificate[] certificateArray61 = new java.security.cert.Certificate[] {};
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data62 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data(certificate59, privateKey60, certificateArray61);
        java.security.cert.Certificate[] certificateArray63 = p12Data62.getCertificateChain();
        java.security.cert.Certificate[] certificateArray64 = p12Data62.getCertificateChain();
        lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data p12Data65 = new lich.tool.encryptionAndDecryption.asymmetric.OtherObj.P12Data((java.security.cert.Certificate) x509Certificate17, privateKey52, certificateArray64);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray66 = null; // flaky: lich.tool.encryptionAndDecryption.core.asymmetric.PrivateKeyTool.toEnvelopedKeyBlobByGMPrivateKey(privateKey52);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        }
daniel-frak-dummy4j, length: 9

    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test314");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        java.lang.String str2 = nationDummy1.languageCodeTwoLetter();
        java.lang.String str3 = nationDummy1.languageCommon();
        org.junit.Assert.assertNotNull(nationDummy1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "mg" + "'", str2, "mg");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Portuguese" + "'", str3, "Portuguese");
    }

    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test316");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        java.lang.String str2 = nationDummy1.languageCodeTwoLetter();
        java.lang.String str3 = nationDummy1.languageCodeThreeLetterCommon();
        org.junit.Assert.assertNotNull(nationDummy1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kl" + "'", str2, "kl");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "rus" + "'", str3, "rus");
    }

    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test319");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NameDummy nameDummy1 = dummy4j0.name();
        java.lang.String str2 = nameDummy1.lastName();
        org.junit.Assert.assertNotNull(nameDummy1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Stanton" + "'", str2, "Stanton");
    }

    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test327");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        java.lang.String str2 = nationDummy1.countryCode();
        org.junit.Assert.assertNotNull(nationDummy1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HK" + "'", str2, "HK");
    }

    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test334");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NameDummy nameDummy1 = dummy4j0.name();
        dev.codesoapbox.dummy4j.dummies.identifier.IdentifierDummy identifierDummy2 = dummy4j0.identifier();
        java.lang.String str3 = identifierDummy2.ean13();
        org.junit.Assert.assertNotNull(nameDummy1);
        org.junit.Assert.assertNotNull(identifierDummy2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9386383790778" + "'", str3, "9386383790778");
    }

    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test349");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NameDummy nameDummy1 = dummy4j0.name();
        dev.codesoapbox.dummy4j.dummies.identifier.IdentifierDummy identifierDummy2 = dummy4j0.identifier();
        java.lang.String str3 = identifierDummy2.tac();
        java.lang.String str4 = identifierDummy2.orcid();
        org.junit.Assert.assertNotNull(nameDummy1);
        org.junit.Assert.assertNotNull(identifierDummy2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "44-803834" + "'", str3, "44-803834");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4823-8816-7469-3136" + "'", str4, "4823-8816-7469-3136");
    }

    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test358");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy natoPhoneticAlphabetDummy2 = new dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy(dummy4j0);
        dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy natoPhoneticAlphabetDummy3 = new dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy(dummy4j0);
        java.lang.String str4 = natoPhoneticAlphabetDummy3.word();
        org.junit.Assert.assertNotNull(nationDummy1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tango" + "'", str4, "Tango");
    }

    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test361");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy natoPhoneticAlphabetDummy2 = new dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy(dummy4j0);
        dev.codesoapbox.dummy4j.dummies.address.AddressDummy addressDummy3 = dummy4j0.address();
        dev.codesoapbox.dummy4j.Dummy4jBuilder dummy4jBuilder4 = new dev.codesoapbox.dummy4j.Dummy4jBuilder();
        dev.codesoapbox.dummy4j.Dummy4j dummy4j5 = null;
        dev.codesoapbox.dummy4j.dummies.shared.checkdigitformulas.ModTenFormula modTenFormula6 = null;
        dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.musicnumber.IsmnValidator ismnValidator7 = null;
        dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.musicnumber.IsmnBuilder ismnBuilder8 = new dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.musicnumber.IsmnBuilder(dummy4j5, modTenFormula6, ismnValidator7);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "-1" };
        dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.musicnumber.IsmnBuilder ismnBuilder12 = ismnBuilder8.withRandomSeparator(strArray11);
        dev.codesoapbox.dummy4j.Dummy4jBuilder dummy4jBuilder13 = dummy4jBuilder4.paths(strArray11);
        java.lang.CharSequence charSequence14 = dummy4j0.oneOf((java.lang.CharSequence[]) strArray11);
        org.junit.Assert.assertNotNull(nationDummy1);
        org.junit.Assert.assertNotNull(addressDummy3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(ismnBuilder12);
        org.junit.Assert.assertNotNull(dummy4jBuilder13);
// flaky:         org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
    }

    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test364");
        dev.codesoapbox.dummy4j.Dummy4j dummy4j0 = new dev.codesoapbox.dummy4j.Dummy4j();
        dev.codesoapbox.dummy4j.dummies.NationDummy nationDummy1 = dummy4j0.nation();
        dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy natoPhoneticAlphabetDummy2 = new dev.codesoapbox.dummy4j.dummies.NatoPhoneticAlphabetDummy(dummy4j0);
        dev.codesoapbox.dummy4j.dummies.address.AddressDummy addressDummy3 = dummy4j0.address();
        java.lang.String str4 = addressDummy3.postCode();
        org.junit.Assert.assertNotNull(nationDummy1);
        org.junit.Assert.assertNotNull(addressDummy3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "12211" + "'", str4, "12211");
    }
krka-mockachino, length: 72

    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.util.MockachinoMethod mockachinoMethod2 = null;
        java.lang.Object[] objArray3 = new java.lang.Object[] {}

    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.util.MockachinoMethod mockachinoMethod3 = null;
        // The following exception was thrown during execution in test generation
        try {
            verifyRangeStart1.onMethodWithAnyArgument((java.lang.Object) 10.0d, mockachinoMethod3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        }

    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart2 = null; // flaky: se.mockachino.Mockachino.verifyRange((int) (short) 10, 0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart4 = null; // flaky: verifyRangeStart2.withTimeout(10L);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart2);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart4);
    }

    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.MethodMatcher methodMatcher5 = null;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             verifyRangeStart1.onMethod((java.lang.Object) 10.0d, methodMatcher5);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument 10.0 is not a mock object");
        }

    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.MockSettings mockSettings5 = se.mockachino.Settings.name("");
        se.mockachino.CallHandler callHandler6 = mockSettings5.getFallback();
        se.mockachino.MockSettings mockSettings7 = mockSettings5.notQuick();
        se.mockachino.CallHandler callHandler8 = mockSettings5.getFallback();
        se.mockachino.util.MockachinoMethod mockachinoMethod9 = se.mockachino.util.MockachinoMethod.NULL;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             verifyRangeStart1.onMethodWithAnyArgument((java.lang.Object) callHandler8, mockachinoMethod9);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.invocationhandler.CollectionsHandler@6a71e941 is not a mock object");
        }

    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test046");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
        se.mockachino.MockUtil mockUtil3 = new se.mockachino.MockUtil();
        se.mockachino.util.MockachinoMethod mockachinoMethod4 = se.mockachino.util.MockachinoMethod.NULL;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             stubber2.onMethodWithAnyArgument((java.lang.Object) mockUtil3, mockachinoMethod4);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.MockUtil@49dbd8fb is not a mock object");
        }

    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        se.mockachino.MockData<se.mockachino.proxy.CglibAsmUtil> cglibAsmUtilMockData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.mock.MockHandler<se.mockachino.proxy.CglibAsmUtil> cglibAsmUtilMockHandler9 = new se.mockachino.mock.MockHandler<se.mockachino.proxy.CglibAsmUtil>((se.mockachino.CallHandler) returnAnswer5, cglibAsmUtilMockData6, true, "0");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        }

    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable4 = null;
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext7 = new se.mockachino.order.OrderingContext(mockPoint5, mockPoint6);
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.MockPointIterable mockPointIterable11 = new se.mockachino.order.MockPointIterable(invocationIterable4, mockPoint6, mockPoint8);
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.verifier.VerifyHandler verifyHandler15 = new se.mockachino.verifier.VerifyHandler((java.lang.Object) mockPoint0, (java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable11, (int) ' ', (int) (byte) 1, (long) (-1));
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument MockPoint[0] is not a mock object");
        }

    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
// flaky:         se.mockachino.matchers.MatcherThreadHandler.assertEmpty();
    }

    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        se.mockachino.exceptions.UsageError usageError2 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError3 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError2);
        se.mockachino.stub.Stubber stubber4 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError3);
        se.mockachino.alias.SimpleAlias simpleAlias5 = se.mockachino.Mockachino.newAlias();
        se.mockachino.util.MockachinoMethod mockachinoMethod6 = se.mockachino.util.MockachinoMethod.NULL;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             stubber4.onMethodWithAnyArgument((java.lang.Object) simpleAlias5, mockachinoMethod6);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.alias.SimpleAlias@61c6b108 is not a mock object");
        }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        java.util.Iterator<se.mockachino.Invocation> invocationItor2 = null;
        se.mockachino.order.MockPoint mockPoint3 = null;
        se.mockachino.order.MockPoint mockPoint4 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext6 = new se.mockachino.order.OrderingContext(mockPoint4, mockPoint5);
        se.mockachino.order.MockPointIterator mockPointIterator7 = new se.mockachino.order.MockPointIterator(invocationItor2, mockPoint3, mockPoint5);
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.order.MockPointIterator mockPointIterator8 = null; // flaky: verifyRangeStart1.on(mockPointIterator7);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.order.MockPointIterator@103bea23 is not a mock object");
        }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyExactly((-1));
        se.mockachino.MockUtil mockUtil2 = new se.mockachino.MockUtil();
        java.lang.Object obj3 = se.mockachino.util.PrimitiveList.toList((java.lang.Object) mockUtil2);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             verifyRangeStart1.onAnyMethod((java.lang.Object) mockUtil2);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.MockUtil@6be99309 is not a mock object");
        }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtMost((int) 'a');
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart1);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyExactly((int) (byte) -1);
        se.mockachino.MockSettings mockSettings3 = se.mockachino.Settings.name("");
        se.mockachino.CallHandler callHandler4 = mockSettings3.getFallback();
        se.mockachino.MockSettings mockSettings5 = mockSettings3.notQuick();
        se.mockachino.util.MockachinoMethod mockachinoMethod6 = se.mockachino.util.MockachinoMethod.NULL;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             verifyRangeStart1.onMethodWithAnyArgument((java.lang.Object) mockSettings5, mockachinoMethod6);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.MockSettings@121144d4 is not a mock object");
        }

    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext5 = null; // flaky: se.mockachino.Mockachino.before(mockPoint2);
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint7 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext8 = new se.mockachino.order.OrderingContext(mockPoint6, mockPoint7);
        se.mockachino.order.MockPoint mockPoint9 = null; // flaky: orderingContext8.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart10 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint2, mockPoint9);
        se.mockachino.exceptions.UsageError usageError13 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError14 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError13);
        se.mockachino.stub.Stubber stubber15 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError14);
        // The following exception was thrown during execution in test generation
        try {
            verifyRangeStart10.onAnyMethod((java.lang.Object) verificationError14);
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.exceptions.VerificationError:  is not a mock object");
        }

    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) 1);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart1);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart3);
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyAtMost((int) '#');
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (short) 100);
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext3);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart5);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart7);
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        se.mockachino.exceptions.UsageError usageError2 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError3 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError2);
        se.mockachino.stub.Stubber stubber4 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError3);
        java.lang.Class<se.mockachino.Invocation> invocationClass5 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray7 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray8 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray7;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher9 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray8);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass10 = methodCallMatcherAndMatcher9.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData12 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass5, (java.lang.reflect.Type) methodCallMatcherClass10, "se.mockachino.exceptions.UsageError: ");
        invocationMockData12.resetStubs();
        java.lang.String str14 = invocationMockData12.getName();
        se.mockachino.util.MockachinoMethod mockachinoMethod15 = se.mockachino.util.MockachinoMethod.NULL;
        se.mockachino.matchers.MethodMatcher methodMatcher16 = null;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             stubber4.onMethod((java.lang.Object) invocationMockData12, mockachinoMethod15, methodMatcher16);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.MockData@2e68b591 is not a mock object");
        }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = null; // flaky: stubber2.on("hi!");
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument hi! is not a mock object");
        }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        se.mockachino.order.OrderingContext orderingContext0 = null; // flaky: se.mockachino.Mockachino.newOrdering();
// flaky:         org.junit.Assert.assertNotNull(orderingContext0);
    }

    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.order.MockPoint mockPoint5 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.MockPoint mockPoint6 = null; // flaky: orderingContext2.beforeLastCall();
        int int7 = 0; // flaky: mockPoint6.getCallNumber();
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(inOrderVerify4);
// flaky:         org.junit.Assert.assertNotNull(mockPoint5);
// flaky:         org.junit.Assert.assertNotNull(mockPoint6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-2) + "'", int7 == (-2));
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart0 = null; // flaky: se.mockachino.Mockachino.verifyOnce();
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart0);
    }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        se.mockachino.order.OrderingContext orderingContext0 = null;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext3 = new se.mockachino.order.OrderingContext(mockPoint1, mockPoint2);
        se.mockachino.order.MockPoint mockPoint4 = null; // flaky: orderingContext3.beforeLastCall();
        se.mockachino.order.MockPoint mockPoint5 = null; // flaky: orderingContext3.beforeLastCall();
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable6 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable7 = null;
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext13 = new se.mockachino.order.OrderingContext(mockPoint11, mockPoint12);
        se.mockachino.order.MockPointIterable mockPointIterable14 = new se.mockachino.order.MockPointIterable(invocationIterable7, mockPoint9, mockPoint11);
        java.util.Iterator<se.mockachino.Invocation> invocationItor15 = null;
        se.mockachino.order.MockPoint mockPoint16 = null;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint18 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext19 = new se.mockachino.order.OrderingContext(mockPoint17, mockPoint18);
        se.mockachino.order.MockPointIterator mockPointIterator20 = new se.mockachino.order.MockPointIterator(invocationItor15, mockPoint16, mockPoint18);
        se.mockachino.order.MockPointIterable mockPointIterable21 = new se.mockachino.order.MockPointIterable(invocationIterable6, mockPoint11, mockPoint16);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable22 = null;
        se.mockachino.order.MockPoint mockPoint23 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint24 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext25 = new se.mockachino.order.OrderingContext(mockPoint23, mockPoint24);
        se.mockachino.order.MockPoint mockPoint26 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint27 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext28 = new se.mockachino.order.OrderingContext(mockPoint26, mockPoint27);
        se.mockachino.order.MockPointIterable mockPointIterable29 = new se.mockachino.order.MockPointIterable(invocationIterable22, mockPoint24, mockPoint26);
        se.mockachino.order.MockPoint mockPoint30 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext32 = new se.mockachino.order.OrderingContext(mockPoint30, mockPoint31);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext33 = null; // flaky: se.mockachino.Mockachino.before(mockPoint30);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext34 = new se.mockachino.order.BetweenVerifyContext(mockPoint26, mockPoint30);
        se.mockachino.order.MockPoint mockPoint37 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint38 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext39 = new se.mockachino.order.OrderingContext(mockPoint37, mockPoint38);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext40 = null; // flaky: se.mockachino.Mockachino.before(mockPoint37);
        se.mockachino.order.MockPoint mockPoint41 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint42 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext43 = new se.mockachino.order.OrderingContext(mockPoint41, mockPoint42);
        se.mockachino.order.MockPoint mockPoint44 = null; // flaky: orderingContext43.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart45 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint37, mockPoint44);
        se.mockachino.order.MockPointIterable mockPointIterable46 = new se.mockachino.order.MockPointIterable((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable21, mockPoint26, mockPoint37);
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.order.InOrderVerifyHandler inOrderVerifyHandler48 = new se.mockachino.order.InOrderVerifyHandler(orderingContext0, (java.lang.Object) mockPoint5, (java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable46, (int) '#');
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument MockPoint[-2] is not a mock object");
        }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyExactly((int) (byte) -1);
        java.lang.Object obj2 = se.mockachino.util.PrimitiveList.toList((java.lang.Object) (byte) -1);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart1);
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable0 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable1 = null;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext7 = new se.mockachino.order.OrderingContext(mockPoint5, mockPoint6);
        se.mockachino.order.MockPointIterable mockPointIterable8 = new se.mockachino.order.MockPointIterable(invocationIterable1, mockPoint3, mockPoint5);
        java.util.Iterator<se.mockachino.Invocation> invocationItor9 = null;
        se.mockachino.order.MockPoint mockPoint10 = null;
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext13 = new se.mockachino.order.OrderingContext(mockPoint11, mockPoint12);
        se.mockachino.order.MockPointIterator mockPointIterator14 = new se.mockachino.order.MockPointIterator(invocationItor9, mockPoint10, mockPoint12);
        se.mockachino.order.MockPointIterable mockPointIterable15 = new se.mockachino.order.MockPointIterable(invocationIterable0, mockPoint5, mockPoint10);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable16 = null;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint18 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext19 = new se.mockachino.order.OrderingContext(mockPoint17, mockPoint18);
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint21 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext22 = new se.mockachino.order.OrderingContext(mockPoint20, mockPoint21);
        se.mockachino.order.MockPointIterable mockPointIterable23 = new se.mockachino.order.MockPointIterable(invocationIterable16, mockPoint18, mockPoint20);
        se.mockachino.order.MockPoint mockPoint24 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint25 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext26 = new se.mockachino.order.OrderingContext(mockPoint24, mockPoint25);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext27 = null; // flaky: se.mockachino.Mockachino.before(mockPoint24);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext28 = new se.mockachino.order.BetweenVerifyContext(mockPoint20, mockPoint24);
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint32 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext33 = new se.mockachino.order.OrderingContext(mockPoint31, mockPoint32);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext34 = null; // flaky: se.mockachino.Mockachino.before(mockPoint31);
        se.mockachino.order.MockPoint mockPoint35 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint36 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext37 = new se.mockachino.order.OrderingContext(mockPoint35, mockPoint36);
        se.mockachino.order.MockPoint mockPoint38 = null; // flaky: orderingContext37.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart39 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint31, mockPoint38);
        se.mockachino.order.MockPointIterable mockPointIterable40 = new se.mockachino.order.MockPointIterable((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable15, mockPoint20, mockPoint31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<se.mockachino.Invocation> invocationItor41 = mockPointIterable15.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
        se.mockachino.MockSettings mockSettings3 = null; // flaky: se.mockachino.Settings.spyOn((java.lang.Object) stubber2);
// flaky:         org.junit.Assert.assertNotNull(stubber2);
// flaky:         org.junit.Assert.assertNotNull(mockSettings3);
    }

    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart2 = null; // flaky: se.mockachino.Mockachino.verifyRange((int) (short) 1, (int) ' ');
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart2);
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable0 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable1 = null;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext7 = new se.mockachino.order.OrderingContext(mockPoint5, mockPoint6);
        se.mockachino.order.MockPointIterable mockPointIterable8 = new se.mockachino.order.MockPointIterable(invocationIterable1, mockPoint3, mockPoint5);
        java.util.Iterator<se.mockachino.Invocation> invocationItor9 = null;
        se.mockachino.order.MockPoint mockPoint10 = null;
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext13 = new se.mockachino.order.OrderingContext(mockPoint11, mockPoint12);
        se.mockachino.order.MockPointIterator mockPointIterator14 = new se.mockachino.order.MockPointIterator(invocationItor9, mockPoint10, mockPoint12);
        se.mockachino.order.MockPointIterable mockPointIterable15 = new se.mockachino.order.MockPointIterable(invocationIterable0, mockPoint5, mockPoint10);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext16 = null; // flaky: se.mockachino.Mockachino.after(mockPoint5);
        org.junit.Assert.assertNotNull(mockPoint2);
        org.junit.Assert.assertNotNull(mockPoint3);
        org.junit.Assert.assertNotNull(mockPoint5);
        org.junit.Assert.assertNotNull(mockPoint6);
        org.junit.Assert.assertNotNull(mockPoint11);
        org.junit.Assert.assertNotNull(mockPoint12);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext16);
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
        java.lang.Throwable throwable3 = se.mockachino.cleaner.StacktraceCleaner.cleanError((java.lang.Throwable) usageError1);
// flaky:         org.junit.Assert.assertNotNull(stubber2);
        org.junit.Assert.assertNotNull(throwable3);
        org.junit.Assert.assertEquals(throwable3.getLocalizedMessage(), "hi!");
        org.junit.Assert.assertEquals(throwable3.getMessage(), "hi!");
        org.junit.Assert.assertEquals(throwable3.toString(), "se.mockachino.exceptions.UsageError: hi!");
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (byte) 1);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (short) -1);
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext3);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart5);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart7);
    }

    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        se.mockachino.verifier.BadUsageHandler badUsageHandler0 = se.mockachino.order.InOrderVerifyHandler.BAD_USAGE_HANDLER;
        se.mockachino.verifier.BadUsageHandler badUsageHandler1 = se.mockachino.order.InOrderVerifyHandler.BAD_USAGE_HANDLER;
        se.mockachino.verifier.BadUsageHandler[] badUsageHandlerArray2 = new se.mockachino.verifier.BadUsageHandler[] { badUsageHandler1 };
        se.mockachino.stub.Stubber stubber3 = null; // flaky: se.mockachino.Mockachino.stubReturn(badUsageHandler0, badUsageHandlerArray2);
        org.junit.Assert.assertNotNull(badUsageHandler0);
        org.junit.Assert.assertNotNull(badUsageHandler1);
        org.junit.Assert.assertNotNull(badUsageHandlerArray2);
// flaky:         org.junit.Assert.assertNotNull(stubber3);
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyAtMost((int) '#');
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyAtMost((int) (byte) -1);
        se.mockachino.verifier.Reporter reporter11 = new se.mockachino.verifier.Reporter((int) (byte) 100, (int) (short) 0, (int) '4');
        se.mockachino.util.MockachinoMethod mockachinoMethod12 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] {}

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify3 = null; // flaky: orderingContext2.verify();
        se.mockachino.alias.SimpleAlias simpleAlias4 = se.mockachino.Mockachino.newAlias();
        se.mockachino.alias.SimpleAlias simpleAlias5 = se.mockachino.Mockachino.newAlias();
        se.mockachino.alias.SimpleAlias simpleAlias6 = se.mockachino.Mockachino.newAlias();
        se.mockachino.alias.Alias[] aliasArray7 = new se.mockachino.alias.Alias[] { simpleAlias4, simpleAlias5, simpleAlias6 }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        boolean boolean0 = se.mockachino.matchers.MatcherThreadHandler.isClean();
// flaky:         org.junit.Assert.assertTrue("'" + boolean0 + "' != '" + true + "'", boolean0 == true);
    }

    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (byte) 1);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart6 = null; // flaky: betweenVerifyContext3.verifyOnce();
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext3);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart5);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart6);
    }

    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.verifier.BadUsageThrower badUsageThrower6 = new se.mockachino.verifier.BadUsageThrower("35 calls");
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.order.InOrderVerify inOrderVerify7 = se.mockachino.proxy.ProxyUtil.createProxy(inOrderVerify4, (java.lang.reflect.InvocationHandler) badUsageThrower6);
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.order.InOrderVerify@6b933bd4 is not a mock object");
        }

    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.order.MockPoint mockPoint5 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.MockPoint mockPoint6 = null; // flaky: orderingContext2.beforeLastCall();
        se.mockachino.order.MockPoint mockPoint7 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.InOrderVerify inOrderVerify9 = null; // flaky: orderingContext2.verifyAtLeast((int) 'a');
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(inOrderVerify4);
// flaky:         org.junit.Assert.assertNotNull(mockPoint5);
// flaky:         org.junit.Assert.assertNotNull(mockPoint6);
// flaky:         org.junit.Assert.assertNotNull(mockPoint7);
// flaky:         org.junit.Assert.assertNotNull(inOrderVerify9);
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        se.mockachino.matchers.matcher.Matcher[] matcherArray1 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray2 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher3 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1);
        se.mockachino.alias.Alias[] aliasArray4 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray1);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher5 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray1);
        se.mockachino.exceptions.UsageError usageError8 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError9 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError8);
        se.mockachino.stub.Stubber stubber10 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError9);
        boolean boolean11 = stubberOrMatcher5.matches(stubber10);
        se.mockachino.exceptions.UsageError usageError13 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber14 = null; // flaky: stubber10.thenThrow((java.lang.Throwable) usageError13);
        java.lang.Object obj15 = null;
        // The following exception was thrown during execution in test generation
        try {
// flaky:             stubber14.onAnyMethod(obj15);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: mock can not be null");
        }

    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        se.mockachino.matchers.matcher.Matcher[] matcherArray1 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray2 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher3 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1);
        se.mockachino.alias.Alias[] aliasArray4 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray1);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher5 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray1);
        se.mockachino.exceptions.UsageError usageError8 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError9 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError8);
        se.mockachino.stub.Stubber stubber10 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError9);
        boolean boolean11 = stubberOrMatcher5.matches(stubber10);
        se.mockachino.exceptions.UsageError usageError13 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber14 = null; // flaky: stubber10.thenThrow((java.lang.Throwable) usageError13);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart16 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart18 = null; // flaky: verifyRangeStart16.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher19 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart18);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer20 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher19);
        java.lang.Object obj21 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod22 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] {}

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        java.lang.Class<se.mockachino.Invocation> invocationClass0 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray2 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray3 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray2;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher4 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray3);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass5 = methodCallMatcherAndMatcher4.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData7 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass0, (java.lang.reflect.Type) methodCallMatcherClass5, "se.mockachino.exceptions.UsageError: ");
        invocationMockData7.resetStubs();
        java.lang.reflect.Type type9 = invocationMockData7.getTypeLiteral();
        java.util.Set<se.mockachino.util.MockachinoMethod> mockachinoMethodSet10 = invocationMockData7.getMethods();
        invocationMockData7.resetObservers();
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable12 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable13 = null;
        se.mockachino.order.MockPoint mockPoint14 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint15 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext16 = new se.mockachino.order.OrderingContext(mockPoint14, mockPoint15);
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint18 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext19 = new se.mockachino.order.OrderingContext(mockPoint17, mockPoint18);
        se.mockachino.order.MockPointIterable mockPointIterable20 = new se.mockachino.order.MockPointIterable(invocationIterable13, mockPoint15, mockPoint17);
        java.util.Iterator<se.mockachino.Invocation> invocationItor21 = null;
        se.mockachino.order.MockPoint mockPoint22 = null;
        se.mockachino.order.MockPoint mockPoint23 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint24 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext25 = new se.mockachino.order.OrderingContext(mockPoint23, mockPoint24);
        se.mockachino.order.MockPointIterator mockPointIterator26 = new se.mockachino.order.MockPointIterator(invocationItor21, mockPoint22, mockPoint24);
        se.mockachino.order.MockPointIterable mockPointIterable27 = new se.mockachino.order.MockPointIterable(invocationIterable12, mockPoint17, mockPoint22);
        se.mockachino.order.MockPoint mockPoint28 = se.mockachino.Mockachino.BIG_BANG;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable29 = invocationMockData7.getCalls(mockPoint22, mockPoint28);
        se.mockachino.order.MockPoint mockPoint30 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext32 = new se.mockachino.order.OrderingContext(mockPoint30, mockPoint31);
        se.mockachino.order.MockPoint mockPoint33 = null; // flaky: orderingContext32.beforeLastCall();
        se.mockachino.order.MockPoint mockPoint34 = null; // flaky: orderingContext32.beforeLastCall();
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable37 = null;
        se.mockachino.order.MockPoint mockPoint38 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint39 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext40 = new se.mockachino.order.OrderingContext(mockPoint38, mockPoint39);
        se.mockachino.order.MockPoint mockPoint41 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint42 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext43 = new se.mockachino.order.OrderingContext(mockPoint41, mockPoint42);
        se.mockachino.order.MockPointIterable mockPointIterable44 = new se.mockachino.order.MockPointIterable(invocationIterable37, mockPoint39, mockPoint41);
        se.mockachino.order.MockPoint mockPoint45 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint46 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext47 = new se.mockachino.order.OrderingContext(mockPoint45, mockPoint46);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext48 = null; // flaky: se.mockachino.Mockachino.before(mockPoint45);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext49 = new se.mockachino.order.BetweenVerifyContext(mockPoint41, mockPoint45);
        se.mockachino.order.MockPoint mockPoint50 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint51 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext52 = new se.mockachino.order.OrderingContext(mockPoint50, mockPoint51);
        se.mockachino.order.MockPoint mockPoint53 = null; // flaky: orderingContext52.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart54 = new se.mockachino.verifier.VerifyRangeStart((int) (byte) 1, (int) (short) 1, mockPoint41, mockPoint53);
        se.mockachino.order.MockPointIterable mockPointIterable55 = new se.mockachino.order.MockPointIterable(invocationIterable29, mockPoint34, mockPoint53);
        org.junit.Assert.assertNotNull(matcherArray2);
        org.junit.Assert.assertNotNull(methodCallMatcherMatcherArray3);
        org.junit.Assert.assertNotNull(methodCallMatcherClass5);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(mockachinoMethodSet10);
        org.junit.Assert.assertNotNull(mockPoint14);
        org.junit.Assert.assertNotNull(mockPoint15);
        org.junit.Assert.assertNotNull(mockPoint17);
        org.junit.Assert.assertNotNull(mockPoint18);
        org.junit.Assert.assertNotNull(mockPoint23);
        org.junit.Assert.assertNotNull(mockPoint24);
        org.junit.Assert.assertNotNull(mockPoint28);
        org.junit.Assert.assertNotNull(invocationIterable29);
        org.junit.Assert.assertNotNull(mockPoint30);
        org.junit.Assert.assertNotNull(mockPoint31);
// flaky:         org.junit.Assert.assertNotNull(mockPoint33);
// flaky:         org.junit.Assert.assertNotNull(mockPoint34);
        org.junit.Assert.assertNotNull(mockPoint38);
        org.junit.Assert.assertNotNull(mockPoint39);
        org.junit.Assert.assertNotNull(mockPoint41);
        org.junit.Assert.assertNotNull(mockPoint42);
        org.junit.Assert.assertNotNull(mockPoint45);
        org.junit.Assert.assertNotNull(mockPoint46);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext48);
        org.junit.Assert.assertNotNull(mockPoint50);
        org.junit.Assert.assertNotNull(mockPoint51);
// flaky:         org.junit.Assert.assertNotNull(mockPoint53);
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
// flaky:         se.mockachino.Mockachino.setupMocks((java.lang.Object) stubber2);
// flaky:         org.junit.Assert.assertNotNull(stubber2);
    }

    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable2 = null;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint4 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext5 = new se.mockachino.order.OrderingContext(mockPoint3, mockPoint4);
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint7 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext8 = new se.mockachino.order.OrderingContext(mockPoint6, mockPoint7);
        se.mockachino.order.MockPointIterable mockPointIterable9 = new se.mockachino.order.MockPointIterable(invocationIterable2, mockPoint4, mockPoint6);
        se.mockachino.order.MockPoint mockPoint10 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext12 = new se.mockachino.order.OrderingContext(mockPoint10, mockPoint11);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext13 = null; // flaky: se.mockachino.Mockachino.before(mockPoint10);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext14 = new se.mockachino.order.BetweenVerifyContext(mockPoint6, mockPoint10);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable15 = null;
        se.mockachino.order.MockPoint mockPoint16 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext18 = new se.mockachino.order.OrderingContext(mockPoint16, mockPoint17);
        se.mockachino.order.MockPoint mockPoint19 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext21 = new se.mockachino.order.OrderingContext(mockPoint19, mockPoint20);
        se.mockachino.order.MockPointIterable mockPointIterable22 = new se.mockachino.order.MockPointIterable(invocationIterable15, mockPoint17, mockPoint19);
        se.mockachino.order.MockPoint mockPoint23 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint24 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext25 = new se.mockachino.order.OrderingContext(mockPoint23, mockPoint24);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext26 = null; // flaky: se.mockachino.Mockachino.before(mockPoint23);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext27 = new se.mockachino.order.BetweenVerifyContext(mockPoint19, mockPoint23);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart28 = new se.mockachino.verifier.VerifyRangeStart((-2), (-2), mockPoint10, mockPoint23);
        org.junit.Assert.assertNotNull(mockPoint3);
        org.junit.Assert.assertNotNull(mockPoint4);
        org.junit.Assert.assertNotNull(mockPoint6);
        org.junit.Assert.assertNotNull(mockPoint7);
        org.junit.Assert.assertNotNull(mockPoint10);
        org.junit.Assert.assertNotNull(mockPoint11);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext13);
        org.junit.Assert.assertNotNull(mockPoint16);
        org.junit.Assert.assertNotNull(mockPoint17);
        org.junit.Assert.assertNotNull(mockPoint19);
        org.junit.Assert.assertNotNull(mockPoint20);
        org.junit.Assert.assertNotNull(mockPoint23);
        org.junit.Assert.assertNotNull(mockPoint24);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext26);
    }

    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.order.MockPoint mockPoint5 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.MockPoint mockPoint6 = null; // flaky: orderingContext2.beforeLastCall();
        se.mockachino.MockUtil mockUtil7 = new se.mockachino.MockUtil();
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable8 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable9 = null;
        se.mockachino.order.MockPoint mockPoint10 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext12 = new se.mockachino.order.OrderingContext(mockPoint10, mockPoint11);
        se.mockachino.order.MockPoint mockPoint13 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint14 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext15 = new se.mockachino.order.OrderingContext(mockPoint13, mockPoint14);
        se.mockachino.order.MockPointIterable mockPointIterable16 = new se.mockachino.order.MockPointIterable(invocationIterable9, mockPoint11, mockPoint13);
        java.util.Iterator<se.mockachino.Invocation> invocationItor17 = null;
        se.mockachino.order.MockPoint mockPoint18 = null;
        se.mockachino.order.MockPoint mockPoint19 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext21 = new se.mockachino.order.OrderingContext(mockPoint19, mockPoint20);
        se.mockachino.order.MockPointIterator mockPointIterator22 = new se.mockachino.order.MockPointIterator(invocationItor17, mockPoint18, mockPoint20);
        se.mockachino.order.MockPointIterable mockPointIterable23 = new se.mockachino.order.MockPointIterable(invocationIterable8, mockPoint13, mockPoint18);
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.order.InOrderVerifyHandler inOrderVerifyHandler25 = new se.mockachino.order.InOrderVerifyHandler(orderingContext2, (java.lang.Object) mockUtil7, invocationIterable8, (-1));
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument se.mockachino.MockUtil@53e1308 is not a mock object");
        }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        se.mockachino.exceptions.UsageError usageError2 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError3 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError2);
        se.mockachino.stub.Stubber stubber4 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError3);
        se.mockachino.exceptions.UsageError usageError7 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError8 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError7);
        se.mockachino.stub.Stubber stubber9 = null; // flaky: stubber4.thenThrow((java.lang.Throwable) usageError7);
        se.mockachino.stub.Stubber stubber10 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError7);
        java.lang.Throwable throwable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            usageError7.addSuppressed(throwable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.order.MockPoint mockPoint5 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.MockPoint mockPoint6 = null; // flaky: orderingContext2.beforeLastCall();
        se.mockachino.order.MockPoint mockPoint7 = null; // flaky: orderingContext2.atLastCall();
        se.mockachino.order.MockPoint mockPoint8 = null; // flaky: orderingContext2.beforeLastCall();
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(inOrderVerify4);
// flaky:         org.junit.Assert.assertNotNull(mockPoint5);
// flaky:         org.junit.Assert.assertNotNull(mockPoint6);
// flaky:         org.junit.Assert.assertNotNull(mockPoint7);
// flaky:         org.junit.Assert.assertNotNull(mockPoint8);
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        se.mockachino.matchers.matcher.Matcher[] matcherArray1 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray2 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher3 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1);
        se.mockachino.alias.Alias[] aliasArray4 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray1);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher5 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray1);
        se.mockachino.exceptions.UsageError usageError8 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError9 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError8);
        se.mockachino.stub.Stubber stubber10 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError9);
        boolean boolean11 = stubberOrMatcher5.matches(stubber10);
        se.mockachino.exceptions.UsageError usageError13 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber14 = null; // flaky: stubber10.thenThrow((java.lang.Throwable) usageError13);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart16 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart18 = null; // flaky: verifyRangeStart16.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher19 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart18);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer20 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher19);
        java.lang.Object obj21 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod22 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] {}

    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        se.mockachino.MockSettings mockSettings1 = se.mockachino.Settings.name("");
        se.mockachino.CallHandler callHandler2 = mockSettings1.getFallback();
        se.mockachino.observer.ObserverAdder observerAdder3 = new se.mockachino.observer.ObserverAdder(callHandler2);
        se.mockachino.observer.ObserverAdder observerAdder4 = null; // flaky: se.mockachino.Mockachino.observeWith(callHandler2);
        se.mockachino.matchers.matcher.Matcher[] matcherArray6 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray7 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray6;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher8 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray6);
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher9 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>((se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[] objArray10 = null; // flaky: observerAdder4.on((java.lang.Object[]) matcherArray6);
// flaky:             org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument [Lse.mockachino.matchers.matcher.Matcher;@5edaa3d1 is not a mock object");
        }

    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test215");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart0 = null; // flaky: se.mockachino.Mockachino.verifyNever();
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart0);
    }

    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test219");
        java.util.Iterator<se.mockachino.Invocation> invocationItor0 = null;
        se.mockachino.order.MockPoint mockPoint1 = null;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.MockPointIterator mockPointIterator5 = new se.mockachino.order.MockPointIterator(invocationItor0, mockPoint1, mockPoint3);
        java.util.Iterator<se.mockachino.Invocation> invocationItor6 = null;
        se.mockachino.order.MockPoint mockPoint7 = null;
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.MockPointIterator mockPointIterator11 = new se.mockachino.order.MockPointIterator(invocationItor6, mockPoint7, mockPoint9);
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext13 = null; // flaky: se.mockachino.Mockachino.between(mockPoint9, mockPoint12);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable14 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable15 = null;
        se.mockachino.order.MockPoint mockPoint16 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext18 = new se.mockachino.order.OrderingContext(mockPoint16, mockPoint17);
        se.mockachino.order.MockPoint mockPoint19 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext21 = new se.mockachino.order.OrderingContext(mockPoint19, mockPoint20);
        se.mockachino.order.MockPointIterable mockPointIterable22 = new se.mockachino.order.MockPointIterable(invocationIterable15, mockPoint17, mockPoint19);
        java.util.Iterator<se.mockachino.Invocation> invocationItor23 = null;
        se.mockachino.order.MockPoint mockPoint24 = null;
        se.mockachino.order.MockPoint mockPoint25 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint26 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext27 = new se.mockachino.order.OrderingContext(mockPoint25, mockPoint26);
        se.mockachino.order.MockPointIterator mockPointIterator28 = new se.mockachino.order.MockPointIterator(invocationItor23, mockPoint24, mockPoint26);
        se.mockachino.order.MockPointIterable mockPointIterable29 = new se.mockachino.order.MockPointIterable(invocationIterable14, mockPoint19, mockPoint24);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable30 = null;
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint32 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext33 = new se.mockachino.order.OrderingContext(mockPoint31, mockPoint32);
        se.mockachino.order.MockPoint mockPoint34 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint35 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext36 = new se.mockachino.order.OrderingContext(mockPoint34, mockPoint35);
        se.mockachino.order.MockPointIterable mockPointIterable37 = new se.mockachino.order.MockPointIterable(invocationIterable30, mockPoint32, mockPoint34);
        se.mockachino.order.MockPoint mockPoint38 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint39 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext40 = new se.mockachino.order.OrderingContext(mockPoint38, mockPoint39);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext41 = null; // flaky: se.mockachino.Mockachino.before(mockPoint38);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext42 = new se.mockachino.order.BetweenVerifyContext(mockPoint34, mockPoint38);
        se.mockachino.order.MockPoint mockPoint45 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint46 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext47 = new se.mockachino.order.OrderingContext(mockPoint45, mockPoint46);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext48 = null; // flaky: se.mockachino.Mockachino.before(mockPoint45);
        se.mockachino.order.MockPoint mockPoint49 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint50 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext51 = new se.mockachino.order.OrderingContext(mockPoint49, mockPoint50);
        se.mockachino.order.MockPoint mockPoint52 = null; // flaky: orderingContext51.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart53 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint45, mockPoint52);
        se.mockachino.order.MockPointIterable mockPointIterable54 = new se.mockachino.order.MockPointIterable((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable29, mockPoint34, mockPoint45);
        se.mockachino.order.MockPointIterator mockPointIterator55 = new se.mockachino.order.MockPointIterator((java.util.Iterator<se.mockachino.Invocation>) mockPointIterator5, mockPoint12, mockPoint34);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext56 = null; // flaky: se.mockachino.Mockachino.after(mockPoint34);
        org.junit.Assert.assertNotNull(mockPoint2);
        org.junit.Assert.assertNotNull(mockPoint3);
        org.junit.Assert.assertNotNull(mockPoint8);
        org.junit.Assert.assertNotNull(mockPoint9);
        org.junit.Assert.assertNotNull(mockPoint12);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext13);
        org.junit.Assert.assertNotNull(mockPoint16);
        org.junit.Assert.assertNotNull(mockPoint17);
        org.junit.Assert.assertNotNull(mockPoint19);
        org.junit.Assert.assertNotNull(mockPoint20);
        org.junit.Assert.assertNotNull(mockPoint25);
        org.junit.Assert.assertNotNull(mockPoint26);
        org.junit.Assert.assertNotNull(mockPoint31);
        org.junit.Assert.assertNotNull(mockPoint32);
        org.junit.Assert.assertNotNull(mockPoint34);
        org.junit.Assert.assertNotNull(mockPoint35);
        org.junit.Assert.assertNotNull(mockPoint38);
        org.junit.Assert.assertNotNull(mockPoint39);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext41);
        org.junit.Assert.assertNotNull(mockPoint45);
        org.junit.Assert.assertNotNull(mockPoint46);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext48);
        org.junit.Assert.assertNotNull(mockPoint49);
        org.junit.Assert.assertNotNull(mockPoint50);
// flaky:         org.junit.Assert.assertNotNull(mockPoint52);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext56);
    }

    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test222");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart9 = null; // flaky: verifyRangeStart7.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher10 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart9);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer11 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher10);
        se.mockachino.matchers.matcher.Matcher[] matcherArray13 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray14 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray13;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher15 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray13);
        se.mockachino.alias.Alias[] aliasArray16 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray13);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher17 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray13);
        se.mockachino.exceptions.UsageError usageError20 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError21 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError20);
        se.mockachino.stub.Stubber stubber22 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError21);
        boolean boolean23 = stubberOrMatcher17.matches(stubber22);
        se.mockachino.exceptions.UsageError usageError25 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber26 = null; // flaky: stubber22.thenThrow((java.lang.Throwable) usageError25);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart28 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart30 = null; // flaky: verifyRangeStart28.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher31 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart30);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer32 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher31);
        java.lang.Object obj33 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod34 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] {}

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyAtMost((int) '#');
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyAtMost((int) (byte) -1);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart10 = null; // flaky: betweenVerifyContext3.verifyRange(0, (int) (byte) 100);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart13 = null; // flaky: betweenVerifyContext3.verifyRange(0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext3);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart5);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart7);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart10);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart13);
    }

    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test241");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Class<java.lang.String> strClass6 = null;
        java.lang.Class[] classArray7 = new java.lang.Class[] {}

    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test244");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        java.lang.Object obj6 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod7 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {}

    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test245");
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable0 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable1 = null;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext7 = new se.mockachino.order.OrderingContext(mockPoint5, mockPoint6);
        se.mockachino.order.MockPointIterable mockPointIterable8 = new se.mockachino.order.MockPointIterable(invocationIterable1, mockPoint3, mockPoint5);
        java.util.Iterator<se.mockachino.Invocation> invocationItor9 = null;
        se.mockachino.order.MockPoint mockPoint10 = null;
        se.mockachino.order.MockPoint mockPoint11 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext13 = new se.mockachino.order.OrderingContext(mockPoint11, mockPoint12);
        se.mockachino.order.MockPointIterator mockPointIterator14 = new se.mockachino.order.MockPointIterator(invocationItor9, mockPoint10, mockPoint12);
        se.mockachino.order.MockPointIterable mockPointIterable15 = new se.mockachino.order.MockPointIterable(invocationIterable0, mockPoint5, mockPoint10);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable16 = null;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint18 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext19 = new se.mockachino.order.OrderingContext(mockPoint17, mockPoint18);
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint21 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext22 = new se.mockachino.order.OrderingContext(mockPoint20, mockPoint21);
        se.mockachino.order.MockPointIterable mockPointIterable23 = new se.mockachino.order.MockPointIterable(invocationIterable16, mockPoint18, mockPoint20);
        se.mockachino.order.MockPoint mockPoint24 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint25 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext26 = new se.mockachino.order.OrderingContext(mockPoint24, mockPoint25);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext27 = null; // flaky: se.mockachino.Mockachino.before(mockPoint24);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext28 = new se.mockachino.order.BetweenVerifyContext(mockPoint20, mockPoint24);
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint32 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext33 = new se.mockachino.order.OrderingContext(mockPoint31, mockPoint32);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext34 = null; // flaky: se.mockachino.Mockachino.before(mockPoint31);
        se.mockachino.order.MockPoint mockPoint35 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint36 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext37 = new se.mockachino.order.OrderingContext(mockPoint35, mockPoint36);
        se.mockachino.order.MockPoint mockPoint38 = null; // flaky: orderingContext37.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart39 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint31, mockPoint38);
        se.mockachino.order.MockPointIterable mockPointIterable40 = new se.mockachino.order.MockPointIterable((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable15, mockPoint20, mockPoint31);
        java.lang.Class<se.mockachino.Invocation> invocationClass41 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray43 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray44 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray43;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher45 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray44);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass46 = methodCallMatcherAndMatcher45.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData48 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass41, (java.lang.reflect.Type) methodCallMatcherClass46, "se.mockachino.exceptions.UsageError: ");
        invocationMockData48.resetStubs();
        java.lang.reflect.Type type50 = invocationMockData48.getTypeLiteral();
        java.util.Set<se.mockachino.util.MockachinoMethod> mockachinoMethodSet51 = invocationMockData48.getMethods();
        invocationMockData48.resetObservers();
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable53 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable54 = null;
        se.mockachino.order.MockPoint mockPoint55 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint56 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext57 = new se.mockachino.order.OrderingContext(mockPoint55, mockPoint56);
        se.mockachino.order.MockPoint mockPoint58 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint59 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext60 = new se.mockachino.order.OrderingContext(mockPoint58, mockPoint59);
        se.mockachino.order.MockPointIterable mockPointIterable61 = new se.mockachino.order.MockPointIterable(invocationIterable54, mockPoint56, mockPoint58);
        java.util.Iterator<se.mockachino.Invocation> invocationItor62 = null;
        se.mockachino.order.MockPoint mockPoint63 = null;
        se.mockachino.order.MockPoint mockPoint64 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint65 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext66 = new se.mockachino.order.OrderingContext(mockPoint64, mockPoint65);
        se.mockachino.order.MockPointIterator mockPointIterator67 = new se.mockachino.order.MockPointIterator(invocationItor62, mockPoint63, mockPoint65);
        se.mockachino.order.MockPointIterable mockPointIterable68 = new se.mockachino.order.MockPointIterable(invocationIterable53, mockPoint58, mockPoint63);
        se.mockachino.order.MockPoint mockPoint69 = se.mockachino.Mockachino.BIG_BANG;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable70 = invocationMockData48.getCalls(mockPoint63, mockPoint69);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext71 = new se.mockachino.order.BetweenVerifyContext(mockPoint20, mockPoint69);
        org.junit.Assert.assertNotNull(mockPoint2);
        org.junit.Assert.assertNotNull(mockPoint3);
        org.junit.Assert.assertNotNull(mockPoint5);
        org.junit.Assert.assertNotNull(mockPoint6);
        org.junit.Assert.assertNotNull(mockPoint11);
        org.junit.Assert.assertNotNull(mockPoint12);
        org.junit.Assert.assertNotNull(mockPoint17);
        org.junit.Assert.assertNotNull(mockPoint18);
        org.junit.Assert.assertNotNull(mockPoint20);
        org.junit.Assert.assertNotNull(mockPoint21);
        org.junit.Assert.assertNotNull(mockPoint24);
        org.junit.Assert.assertNotNull(mockPoint25);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext27);
        org.junit.Assert.assertNotNull(mockPoint31);
        org.junit.Assert.assertNotNull(mockPoint32);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext34);
        org.junit.Assert.assertNotNull(mockPoint35);
        org.junit.Assert.assertNotNull(mockPoint36);
// flaky:         org.junit.Assert.assertNotNull(mockPoint38);
        org.junit.Assert.assertNotNull(matcherArray43);
        org.junit.Assert.assertNotNull(methodCallMatcherMatcherArray44);
        org.junit.Assert.assertNotNull(methodCallMatcherClass46);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(mockachinoMethodSet51);
        org.junit.Assert.assertNotNull(mockPoint55);
        org.junit.Assert.assertNotNull(mockPoint56);
        org.junit.Assert.assertNotNull(mockPoint58);
        org.junit.Assert.assertNotNull(mockPoint59);
        org.junit.Assert.assertNotNull(mockPoint64);
        org.junit.Assert.assertNotNull(mockPoint65);
        org.junit.Assert.assertNotNull(mockPoint69);
        org.junit.Assert.assertNotNull(invocationIterable70);
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext5 = null; // flaky: se.mockachino.Mockachino.before(mockPoint2);
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext11 = null; // flaky: se.mockachino.Mockachino.before(mockPoint8);
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint13 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext14 = new se.mockachino.order.OrderingContext(mockPoint12, mockPoint13);
        se.mockachino.order.MockPoint mockPoint15 = null; // flaky: orderingContext14.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart16 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint8, mockPoint15);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart17 = new se.mockachino.verifier.VerifyRangeStart((int) (short) -1, (int) '4', mockPoint2, mockPoint15);
        org.junit.Assert.assertNotNull(mockPoint2);
        org.junit.Assert.assertNotNull(mockPoint3);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext5);
        org.junit.Assert.assertNotNull(mockPoint8);
        org.junit.Assert.assertNotNull(mockPoint9);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext11);
        org.junit.Assert.assertNotNull(mockPoint12);
        org.junit.Assert.assertNotNull(mockPoint13);
// flaky:         org.junit.Assert.assertNotNull(mockPoint15);
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        java.util.Iterator<se.mockachino.Invocation> invocationItor0 = null;
        se.mockachino.order.MockPoint mockPoint1 = null;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext4 = new se.mockachino.order.OrderingContext(mockPoint2, mockPoint3);
        se.mockachino.order.MockPointIterator mockPointIterator5 = new se.mockachino.order.MockPointIterator(invocationItor0, mockPoint1, mockPoint3);
        java.util.Iterator<se.mockachino.Invocation> invocationItor6 = null;
        se.mockachino.order.MockPoint mockPoint7 = null;
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.MockPointIterator mockPointIterator11 = new se.mockachino.order.MockPointIterator(invocationItor6, mockPoint7, mockPoint9);
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext13 = null; // flaky: se.mockachino.Mockachino.between(mockPoint9, mockPoint12);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable14 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable15 = null;
        se.mockachino.order.MockPoint mockPoint16 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint17 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext18 = new se.mockachino.order.OrderingContext(mockPoint16, mockPoint17);
        se.mockachino.order.MockPoint mockPoint19 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint20 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext21 = new se.mockachino.order.OrderingContext(mockPoint19, mockPoint20);
        se.mockachino.order.MockPointIterable mockPointIterable22 = new se.mockachino.order.MockPointIterable(invocationIterable15, mockPoint17, mockPoint19);
        java.util.Iterator<se.mockachino.Invocation> invocationItor23 = null;
        se.mockachino.order.MockPoint mockPoint24 = null;
        se.mockachino.order.MockPoint mockPoint25 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint26 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext27 = new se.mockachino.order.OrderingContext(mockPoint25, mockPoint26);
        se.mockachino.order.MockPointIterator mockPointIterator28 = new se.mockachino.order.MockPointIterator(invocationItor23, mockPoint24, mockPoint26);
        se.mockachino.order.MockPointIterable mockPointIterable29 = new se.mockachino.order.MockPointIterable(invocationIterable14, mockPoint19, mockPoint24);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable30 = null;
        se.mockachino.order.MockPoint mockPoint31 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint32 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext33 = new se.mockachino.order.OrderingContext(mockPoint31, mockPoint32);
        se.mockachino.order.MockPoint mockPoint34 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint35 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext36 = new se.mockachino.order.OrderingContext(mockPoint34, mockPoint35);
        se.mockachino.order.MockPointIterable mockPointIterable37 = new se.mockachino.order.MockPointIterable(invocationIterable30, mockPoint32, mockPoint34);
        se.mockachino.order.MockPoint mockPoint38 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint39 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext40 = new se.mockachino.order.OrderingContext(mockPoint38, mockPoint39);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext41 = null; // flaky: se.mockachino.Mockachino.before(mockPoint38);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext42 = new se.mockachino.order.BetweenVerifyContext(mockPoint34, mockPoint38);
        se.mockachino.order.MockPoint mockPoint45 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint46 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext47 = new se.mockachino.order.OrderingContext(mockPoint45, mockPoint46);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext48 = null; // flaky: se.mockachino.Mockachino.before(mockPoint45);
        se.mockachino.order.MockPoint mockPoint49 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint50 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext51 = new se.mockachino.order.OrderingContext(mockPoint49, mockPoint50);
        se.mockachino.order.MockPoint mockPoint52 = null; // flaky: orderingContext51.beforeLastCall();
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart53 = new se.mockachino.verifier.VerifyRangeStart((-1), 0, mockPoint45, mockPoint52);
        se.mockachino.order.MockPointIterable mockPointIterable54 = new se.mockachino.order.MockPointIterable((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable29, mockPoint34, mockPoint45);
        se.mockachino.order.MockPointIterator mockPointIterator55 = new se.mockachino.order.MockPointIterator((java.util.Iterator<se.mockachino.Invocation>) mockPointIterator5, mockPoint12, mockPoint34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = mockPointIterator55.hasNext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (byte) 1);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyExactly((int) '4');
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart10 = null; // flaky: betweenVerifyContext3.verifyRange((int) (byte) 100, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            se.mockachino.alias.Alias alias11 = se.mockachino.alias.AllAlias.fromMock((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type se.mockachino.exceptions.UsageError; message: argument 100 is not a mock object");
        }

    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test260");
        se.mockachino.MockSettings mockSettings1 = se.mockachino.Settings.name("");
        se.mockachino.CallHandler callHandler2 = mockSettings1.getFallback();
        se.mockachino.VerifyableCallHandlerWrapper verifyableCallHandlerWrapper3 = new se.mockachino.VerifyableCallHandlerWrapper(callHandler2);
        java.lang.Class<se.mockachino.Invocation> invocationClass4 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray6 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray7 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray6;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher8 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray7);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass9 = methodCallMatcherAndMatcher8.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData11 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass4, (java.lang.reflect.Type) methodCallMatcherClass9, "se.mockachino.exceptions.UsageError: ");
        invocationMockData11.resetStubs();
        java.lang.reflect.Type type13 = invocationMockData11.getTypeLiteral();
        se.mockachino.util.MockachinoMethod mockachinoMethod14 = se.mockachino.util.MockachinoMethod.NULL;
        java.lang.reflect.Method method15 = mockachinoMethod14.getMethod();
        boolean boolean16 = mockachinoMethod14.isToStringCall();
        se.mockachino.matchers.matcher.Matcher[] matcherArray18 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray19 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray18;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher20 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray18);
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher21 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>((se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray18);
        se.mockachino.matchers.matcher.Matcher[] matcherArray23 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray24 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray23;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher25 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray24);
        se.mockachino.util.MockachinoMethod mockachinoMethod26 = null;
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        se.mockachino.MethodCall methodCall28 = new se.mockachino.MethodCall(mockachinoMethod26, objArray27);
        se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall> methodCallMatcher29 = se.mockachino.matchers.MatchersBase.mEq(methodCall28);
        se.mockachino.MethodCall methodCall30 = se.mockachino.matchers.Matchers.not(methodCallMatcher29);
        boolean boolean31 = methodCallMatcherAndMatcher25.matches(methodCallMatcher29);
        se.mockachino.matchers.matcher.Matcher[] matcherArray33 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray34 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray33;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher35 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray33);
        se.mockachino.matchers.matcher.Matcher[] matcherArray36 = new se.mockachino.matchers.matcher.Matcher[] { methodCallMatcherAndMatcher21, methodCallMatcherAndMatcher25, aliasMatcher35 };
        java.util.ArrayList<se.mockachino.matchers.matcher.Matcher> matcherList37 = new java.util.ArrayList<se.mockachino.matchers.matcher.Matcher>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<se.mockachino.matchers.matcher.Matcher>) matcherList37, matcherArray36);
        se.mockachino.matchers.MethodMatcherImpl methodMatcherImpl39 = new se.mockachino.matchers.MethodMatcherImpl(mockachinoMethod14, (java.util.List<se.mockachino.matchers.matcher.Matcher>) matcherList37);
        se.mockachino.stub.MethodStubs methodStubs40 = invocationMockData11.getStubs(mockachinoMethod14);
        verifyableCallHandlerWrapper3.verify(mockachinoMethod14);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable42 = null;
        se.mockachino.order.MockPoint mockPoint43 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint44 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext45 = new se.mockachino.order.OrderingContext(mockPoint43, mockPoint44);
        se.mockachino.order.MockPoint mockPoint46 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint47 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext48 = new se.mockachino.order.OrderingContext(mockPoint46, mockPoint47);
        se.mockachino.order.MockPointIterable mockPointIterable49 = new se.mockachino.order.MockPointIterable(invocationIterable42, mockPoint44, mockPoint46);
        se.mockachino.order.MockPoint mockPoint50 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint51 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext52 = new se.mockachino.order.OrderingContext(mockPoint50, mockPoint51);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext53 = null; // flaky: se.mockachino.Mockachino.before(mockPoint50);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext54 = new se.mockachino.order.BetweenVerifyContext(mockPoint46, mockPoint50);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart57 = null; // flaky: betweenVerifyContext54.verifyRange(1, (int) (short) 100);
        se.mockachino.util.MockachinoMethod mockachinoMethod58 = null;
        java.lang.Object[] objArray59 = new java.lang.Object[] {}

    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test261");
        se.mockachino.MockSettings mockSettings1 = se.mockachino.Settings.name("");
        se.mockachino.CallHandler callHandler2 = mockSettings1.getFallback();
        se.mockachino.MockSettings mockSettings3 = mockSettings1.notQuick();
        se.mockachino.MockSettings mockSettings4 = mockSettings1.quick();
        se.mockachino.MockSettings mockSettings5 = mockSettings4.quick();
        java.lang.String str6 = mockSettings5.getName();
        se.mockachino.CallHandler callHandler7 = mockSettings5.getFallback();
        se.mockachino.observer.ObserverAdder observerAdder8 = null; // flaky: se.mockachino.Mockachino.observeWith(callHandler7);
        org.junit.Assert.assertNotNull(mockSettings1);
        org.junit.Assert.assertNotNull(callHandler2);
        org.junit.Assert.assertNotNull(mockSettings3);
        org.junit.Assert.assertNotNull(mockSettings4);
        org.junit.Assert.assertNotNull(mockSettings5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(callHandler7);
// flaky:         org.junit.Assert.assertNotNull(observerAdder8);
    }

    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test266");
        se.mockachino.matchers.matcher.Matcher[] matcherArray1 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray2 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher3 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray1);
        se.mockachino.alias.Alias[] aliasArray4 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray1);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher5 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray1);
        se.mockachino.exceptions.UsageError usageError8 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError9 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError8);
        se.mockachino.stub.Stubber stubber10 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError9);
        boolean boolean11 = stubberOrMatcher5.matches(stubber10);
        se.mockachino.exceptions.UsageError usageError13 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber14 = null; // flaky: stubber10.thenThrow((java.lang.Throwable) usageError13);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart16 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart18 = null; // flaky: verifyRangeStart16.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher19 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart18);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer20 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher19);
        java.lang.Object obj21 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod22 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] {}

    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test270");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext3 = null; // flaky: se.mockachino.Mockachino.before(mockPoint0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart5 = null; // flaky: betweenVerifyContext3.verifyExactly((int) (byte) 1);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: betweenVerifyContext3.verifyExactly((int) '4');
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart9 = null; // flaky: betweenVerifyContext3.verifyAtMost(0);
        se.mockachino.order.OrderingContext orderingContext10 = null; // flaky: betweenVerifyContext3.newOrdering();
        org.junit.Assert.assertNotNull(mockPoint0);
        org.junit.Assert.assertNotNull(mockPoint1);
// flaky:         org.junit.Assert.assertNotNull(betweenVerifyContext3);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart5);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart7);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart9);
// flaky:         org.junit.Assert.assertNotNull(orderingContext10);
    }

    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test274");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart3 = null; // flaky: verifyRangeStart1.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher4 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart3);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer5 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher4);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart7 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart9 = null; // flaky: verifyRangeStart7.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher10 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart9);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer11 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher10);
        se.mockachino.matchers.matcher.Matcher[] matcherArray13 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray14 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray13;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher15 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray13);
        se.mockachino.alias.Alias[] aliasArray16 = se.mockachino.matchers.Matchers.and((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias[]>[]) matcherArray13);
        se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber> stubberOrMatcher17 = new se.mockachino.matchers.matcher.OrMatcher<se.mockachino.stub.Stubber>((se.mockachino.matchers.matcher.Matcher<se.mockachino.stub.Stubber>[]) matcherArray13);
        se.mockachino.exceptions.UsageError usageError20 = new se.mockachino.exceptions.UsageError("");
        se.mockachino.exceptions.VerificationError verificationError21 = new se.mockachino.exceptions.VerificationError("", (java.lang.Exception) usageError20);
        se.mockachino.stub.Stubber stubber22 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) verificationError21);
        boolean boolean23 = stubberOrMatcher17.matches(stubber22);
        se.mockachino.exceptions.UsageError usageError25 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber26 = null; // flaky: stubber22.thenThrow((java.lang.Throwable) usageError25);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart28 = null; // flaky: se.mockachino.Mockachino.verifyAtLeast(0);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart30 = null; // flaky: verifyRangeStart28.withTimeout((long) ' ');
        se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>> strClassMatcherEqualityMatcher31 = new se.mockachino.matchers.matcher.EqualityMatcher<se.mockachino.matchers.matcher.ClassMatcher<java.lang.String>>((java.lang.Object) verifyRangeStart30);
        se.mockachino.stub.returnvalue.ReturnAnswer returnAnswer32 = new se.mockachino.stub.returnvalue.ReturnAnswer((java.lang.Object) strClassMatcherEqualityMatcher31);
        java.lang.Object obj33 = null;
        se.mockachino.util.MockachinoMethod mockachinoMethod34 = null;
        java.lang.Object[] objArray35 = new java.lang.Object[] {}

    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test281");
        se.mockachino.matchers.MethodMatcher methodMatcher0 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable1 = null;
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable2 = null;
        se.mockachino.order.MockPoint mockPoint3 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint4 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext5 = new se.mockachino.order.OrderingContext(mockPoint3, mockPoint4);
        se.mockachino.order.MockPoint mockPoint6 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint7 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext8 = new se.mockachino.order.OrderingContext(mockPoint6, mockPoint7);
        se.mockachino.order.MockPointIterable mockPointIterable9 = new se.mockachino.order.MockPointIterable(invocationIterable2, mockPoint4, mockPoint6);
        java.util.Iterator<se.mockachino.Invocation> invocationItor10 = null;
        se.mockachino.order.MockPoint mockPoint11 = null;
        se.mockachino.order.MockPoint mockPoint12 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint13 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext14 = new se.mockachino.order.OrderingContext(mockPoint12, mockPoint13);
        se.mockachino.order.MockPointIterator mockPointIterator15 = new se.mockachino.order.MockPointIterator(invocationItor10, mockPoint11, mockPoint13);
        se.mockachino.order.MockPointIterable mockPointIterable16 = new se.mockachino.order.MockPointIterable(invocationIterable1, mockPoint6, mockPoint11);
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable17 = se.mockachino.matchers.Matchers.same((java.lang.Iterable<se.mockachino.Invocation>) mockPointIterable16);
        se.mockachino.order.MockPoint mockPoint18 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint19 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext20 = new se.mockachino.order.OrderingContext(mockPoint18, mockPoint19);
        se.mockachino.order.InOrderVerify inOrderVerify22 = null; // flaky: orderingContext20.verifyAtLeast(0);
        se.mockachino.order.MockPoint mockPoint23 = null; // flaky: orderingContext20.atLastCall();
        se.mockachino.order.MockPoint mockPoint24 = null; // flaky: orderingContext20.beforeLastCall();
        java.util.Iterator<se.mockachino.Invocation> invocationItor25 = null;
        se.mockachino.order.MockPoint mockPoint26 = null;
        se.mockachino.order.MockPoint mockPoint27 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint28 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext29 = new se.mockachino.order.OrderingContext(mockPoint27, mockPoint28);
        se.mockachino.order.MockPointIterator mockPointIterator30 = new se.mockachino.order.MockPointIterator(invocationItor25, mockPoint26, mockPoint28);
        se.mockachino.order.MockPointIterable mockPointIterable31 = new se.mockachino.order.MockPointIterable(invocationIterable17, mockPoint24, mockPoint26);
        se.mockachino.verifier.MethodCallGrouper methodCallGrouper32 = new se.mockachino.verifier.MethodCallGrouper(methodMatcher0, invocationIterable17);
        org.junit.Assert.assertNotNull(mockPoint3);
        org.junit.Assert.assertNotNull(mockPoint4);
        org.junit.Assert.assertNotNull(mockPoint6);
        org.junit.Assert.assertNotNull(mockPoint7);
        org.junit.Assert.assertNotNull(mockPoint12);
        org.junit.Assert.assertNotNull(mockPoint13);
        org.junit.Assert.assertNull(invocationIterable17);
        org.junit.Assert.assertNotNull(mockPoint18);
        org.junit.Assert.assertNotNull(mockPoint19);
// flaky:         org.junit.Assert.assertNotNull(inOrderVerify22);
// flaky:         org.junit.Assert.assertNotNull(mockPoint23);
// flaky:         org.junit.Assert.assertNotNull(mockPoint24);
        org.junit.Assert.assertNotNull(mockPoint27);
        org.junit.Assert.assertNotNull(mockPoint28);
    }

    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test286");
        se.mockachino.exceptions.UsageError usageError1 = new se.mockachino.exceptions.UsageError("hi!");
        se.mockachino.stub.Stubber stubber2 = null; // flaky: se.mockachino.Mockachino.stubThrow((java.lang.Throwable) usageError1);
        java.lang.Class<se.mockachino.Invocation> invocationClass3 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray5 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray6 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray5;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher7 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray6);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass8 = methodCallMatcherAndMatcher7.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData10 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass3, (java.lang.reflect.Type) methodCallMatcherClass8, "se.mockachino.exceptions.UsageError: ");
        invocationMockData10.resetStubs();
        java.lang.reflect.Type type12 = invocationMockData10.getTypeLiteral();
        java.util.Set<se.mockachino.util.MockachinoMethod> mockachinoMethodSet13 = invocationMockData10.getMethods();
        java.lang.Class<se.mockachino.Invocation> invocationClass14 = null;
        se.mockachino.matchers.matcher.Matcher[] matcherArray16 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray17 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray16;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher18 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray17);
        java.lang.Class<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherClass19 = methodCallMatcherAndMatcher18.getType();
        se.mockachino.MockData<se.mockachino.Invocation> invocationMockData21 = new se.mockachino.MockData<se.mockachino.Invocation>(invocationClass14, (java.lang.reflect.Type) methodCallMatcherClass19, "se.mockachino.exceptions.UsageError: ");
        invocationMockData21.resetStubs();
        java.lang.reflect.Type type23 = invocationMockData21.getTypeLiteral();
        se.mockachino.util.MockachinoMethod mockachinoMethod24 = se.mockachino.util.MockachinoMethod.NULL;
        java.lang.reflect.Method method25 = mockachinoMethod24.getMethod();
        boolean boolean26 = mockachinoMethod24.isToStringCall();
        se.mockachino.matchers.matcher.Matcher[] matcherArray28 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[] aliasMatcherArray29 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray28;
        se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias> aliasMatcher30 = se.mockachino.matchers.MatchersBase.mAnd((se.mockachino.matchers.matcher.Matcher<se.mockachino.alias.Alias>[]) matcherArray28);
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher31 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>((se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray28);
        se.mockachino.matchers.matcher.Matcher[] matcherArray33 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray34 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray33;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher35 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray34);
        se.mockachino.util.MockachinoMethod mockachinoMethod36 = null;
        java.lang.Object[] objArray37 = new java.lang.Object[] {}

    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test287");
        se.mockachino.order.MockPoint mockPoint0 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext2 = new se.mockachino.order.OrderingContext(mockPoint0, mockPoint1);
        se.mockachino.order.InOrderVerify inOrderVerify4 = null; // flaky: orderingContext2.verifyAtLeast(0);
        se.mockachino.matchers.matcher.Matcher[] matcherArray6 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray7 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray6;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher8 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray7);
        se.mockachino.util.MockachinoMethod mockachinoMethod9 = null;
        java.lang.Object[] objArray10 = new java.lang.Object[] {}

    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test292");
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart1 = null; // flaky: se.mockachino.Mockachino.verifyAtMost((int) (byte) 1);
// flaky:         org.junit.Assert.assertNotNull(verifyRangeStart1);
    }

    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test298");
        java.lang.Iterable<se.mockachino.Invocation> invocationIterable0 = null;
        se.mockachino.order.MockPoint mockPoint1 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint2 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext3 = new se.mockachino.order.OrderingContext(mockPoint1, mockPoint2);
        se.mockachino.order.MockPoint mockPoint4 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint5 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext6 = new se.mockachino.order.OrderingContext(mockPoint4, mockPoint5);
        se.mockachino.order.MockPointIterable mockPointIterable7 = new se.mockachino.order.MockPointIterable(invocationIterable0, mockPoint2, mockPoint4);
        se.mockachino.order.MockPoint mockPoint8 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.MockPoint mockPoint9 = se.mockachino.Mockachino.BIG_BANG;
        se.mockachino.order.OrderingContext orderingContext10 = new se.mockachino.order.OrderingContext(mockPoint8, mockPoint9);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext11 = null; // flaky: se.mockachino.Mockachino.before(mockPoint8);
        se.mockachino.order.BetweenVerifyContext betweenVerifyContext12 = new se.mockachino.order.BetweenVerifyContext(mockPoint4, mockPoint8);
        se.mockachino.verifier.VerifyRangeStart verifyRangeStart15 = null; // flaky: betweenVerifyContext12.verifyRange(1, (int) (short) 100);
        se.mockachino.matchers.matcher.Matcher[] matcherArray17 = new se.mockachino.matchers.matcher.Matcher[0];
        @SuppressWarnings("unchecked")
        se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[] methodCallMatcherMatcherArray18 = (se.mockachino.matchers.matcher.Matcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>[]) matcherArray17;
        se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>> methodCallMatcherAndMatcher19 = new se.mockachino.matchers.matcher.AndMatcher<se.mockachino.matchers.matcher.Matcher<se.mockachino.MethodCall>>(methodCallMatcherMatcherArray18);
        se.mockachino.util.MockachinoMethod mockachinoMethod20 = null;
        java.lang.Object[] objArray21 = new java.lang.Object[] {}
maxonrow-mxw-sdk-java, length: 7

    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        java.io.File file1 = null;
        java.lang.String str2 = com.mxw.crypto.SecretStorageUtils.generateFullNewWalletFile("cin", file1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC--2023-10-31T23-40-02.652000000Z--mxw12dkqkafxypp928waa826279r2ucl9tw9dzmmrs.json" + "'", str2, "UTC--2023-10-31T23-40-02.652000000Z--mxw12dkqkafxypp928waa826279r2ucl9tw9dzmmrs.json");
    }

    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        com.mxw.Wallet wallet0 = com.mxw.Wallet.createNewWallet();
        com.mxw.providers.Provider provider1 = wallet0.getProvider();
        java.lang.String str2 = wallet0.getPrivateKey();
        org.junit.Assert.assertNotNull(wallet0);
        org.junit.Assert.assertNull(provider1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0xde71dd2df6ffd45bf46e40b6c1b214e2bae9e204381b37d9c0953228cc97a80d" + "'", str2, "0xde71dd2df6ffd45bf46e40b6c1b214e2bae9e204381b37d9c0953228cc97a80d");
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        com.mxw.Wallet wallet0 = com.mxw.Wallet.createNewWallet();
        com.mxw.providers.Provider provider1 = wallet0.getProvider();
        java.lang.String str3 = wallet0.encryptWalletJson("cin");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger4 = wallet0.getAccountNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: missing provider");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wallet0);
        org.junit.Assert.assertNull(provider1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{\"address\":\"mxw1hkvwyeemhn8qmwrsaycp2qrggqu9utdygc290d\",\"id\":\"6afe199a-a9c0-47bd-9638-d47aa85414dc\",\"version\":3,\"crypto\":{\"cipher\":\"aes-256-ctr\",\"ciphertext\":\"8f60bf6217ecc1b673f563917a6d4073f842859c66ef395551dbe52b24425da1\",\"cipherparams\":{\"iv\":\"aa5f4d0862987ade7b1f36b55355e276\"}

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        com.mxw.Wallet wallet0 = com.mxw.Wallet.createNewWallet();
        java.lang.String str1 = wallet0.getPublicKey();
        org.junit.Assert.assertNotNull(wallet0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x034848d4770612501e13ce0e8f4f354ea0289394c9c249f837760ccdd53ec05a3d" + "'", str1, "0x034848d4770612501e13ce0e8f4f354ea0289394c9c249f837760ccdd53ec05a3d");
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        java.io.File file1 = null;
        java.lang.String str2 = com.mxw.crypto.SecretStorageUtils.generateFullNewWalletFile("/Users/yhcrown/Library/mxw", file1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC--2023-10-31T23-40-05.740000000Z--mxw1jld58vjsqa4m73jm4u7du9mszcygqrwpalhhxk.json" + "'", str2, "UTC--2023-10-31T23-40-05.740000000Z--mxw1jld58vjsqa4m73jm4u7du9mszcygqrwpalhhxk.json");
    }

    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        java.io.File file1 = null;
        java.lang.String str2 = com.mxw.crypto.SecretStorageUtils.generateNewWalletFile("UTC--2023-10-31T23-40-05.740000000Z--mxw1jld58vjsqa4m73jm4u7du9mszcygqrwpalhhxk.json", file1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC--2023-10-31T23-40-06.591000000Z--mxw12ldyka6g70u22zlk4p0vrdu4ph8udyw0g7kx56.json" + "'", str2, "UTC--2023-10-31T23-40-06.591000000Z--mxw12ldyka6g70u22zlk4p0vrdu4ph8udyw0g7kx56.json");
    }

    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test340");
        java.io.File file1 = null;
        java.lang.String str2 = com.mxw.crypto.SecretStorageUtils.generateNewWalletFile("latest", file1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC--2023-10-31T23-40-10.922000000Z--mxw1puhd288we4g0d6g3u2aeetj3acyszny7lx9x54.json" + "'", str2, "UTC--2023-10-31T23-40-10.922000000Z--mxw1puhd288we4g0d6g3u2aeetj3acyszny7lx9x54.json");
    }
resourcepool-little-bob, length: 32

    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        java.lang.String str23 = surnamesDictionary0.pick();
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Firehi!" + "'", str11, "Firehi!");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!9" + "'", str15, "hi!9");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Shaull" + "'", str23, "Shaull");
    }

    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test020");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        io.resourcepool.generator.Query.Builder builder23 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary24 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary25 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] {};
        int int27 = surnamesDictionary25.size(languageArray26);
        int int28 = givenNamesDictionary24.size(languageArray26);
        io.resourcepool.generator.Query.Builder builder29 = builder23.languages(languageArray26);
        int int30 = surnamesDictionary0.size(languageArray26);
        io.resourcepool.model.Language language31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = surnamesDictionary0.pick(language31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!40" + "'", str11, "hi!40");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!48" + "'", str15, "hi!48");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        io.resourcepool.generator.Query.Builder builder23 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary24 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary25 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] {};
        int int27 = surnamesDictionary25.size(languageArray26);
        int int28 = givenNamesDictionary24.size(languageArray26);
        io.resourcepool.generator.Query.Builder builder29 = builder23.languages(languageArray26);
        int int30 = surnamesDictionary0.size(languageArray26);
        io.resourcepool.generator.Query query31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList32 = surnamesDictionary0.pick(query31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!54" + "'", str11, "hi!54");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!12" + "'", str15, "hi!12");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        io.resourcepool.generator.Query.Builder builder23 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary24 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary25 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] {};
        int int27 = surnamesDictionary25.size(languageArray26);
        int int28 = givenNamesDictionary24.size(languageArray26);
        io.resourcepool.generator.Query.Builder builder29 = builder23.languages(languageArray26);
        int int30 = surnamesDictionary0.size(languageArray26);
        java.lang.String str31 = surnamesDictionary0.pick();
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!87" + "'", str11, "hi!87");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!18" + "'", str15, "hi!18");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Shaull" + "'", str31, "Shaull");
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList2 = surnamesDictionary0.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary4 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray5 = new io.resourcepool.model.Language[] {};
        int int6 = surnamesDictionary4.size(languageArray5);
        io.resourcepool.model.Language language7 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language8 = io.resourcepool.model.Language.random();
        java.lang.String str9 = language8.getLocaleCode();
        io.resourcepool.model.Language[] languageArray10 = new io.resourcepool.model.Language[] { language7, language8 };
        int int11 = surnamesDictionary4.size(languageArray10);
        io.resourcepool.generator.Query query12 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray10);
        java.util.List<java.lang.String> strList13 = surnamesDictionary0.pick(query12);
        io.resourcepool.model.Language language15 = io.resourcepool.model.Language.random();
        java.lang.String str16 = language15.getLocaleCode();
        java.lang.String str17 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language15);
        java.lang.String str18 = surnamesDictionary0.pick(language15);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(languageArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + language7 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language7.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language8 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language8.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertNotNull(languageArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + language15 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language15.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en" + "'", str16, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!40" + "'", str17, "hi!40");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Shaull" + "'", str18, "Shaull");
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        io.resourcepool.generator.Query.Builder builder23 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary24 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary25 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] {};
        int int27 = surnamesDictionary25.size(languageArray26);
        int int28 = givenNamesDictionary24.size(languageArray26);
        io.resourcepool.generator.Query.Builder builder29 = builder23.languages(languageArray26);
        int int30 = surnamesDictionary0.size(languageArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList32 = surnamesDictionary0.pick(50000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot pick more than 20000 elements in Surnames Dictionary");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!61" + "'", str11, "hi!61");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!60" + "'", str15, "hi!60");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList2 = surnamesDictionary0.pick((int) 'a');
        int int3 = surnamesDictionary0.size();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary4 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray5 = new io.resourcepool.model.Language[] {};
        int int6 = surnamesDictionary4.size(languageArray5);
        io.resourcepool.model.Language language7 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language8 = io.resourcepool.model.Language.random();
        java.lang.String str9 = language8.getLocaleCode();
        io.resourcepool.model.Language[] languageArray10 = new io.resourcepool.model.Language[] { language7, language8 };
        int int11 = surnamesDictionary4.size(languageArray10);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language17 = io.resourcepool.model.Language.random();
        java.lang.String str18 = language17.getLocaleCode();
        java.lang.String str19 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language17);
        io.resourcepool.model.Language language20 = io.resourcepool.model.Language.random();
        java.lang.String str21 = language20.getLocaleCode();
        io.resourcepool.model.Language language22 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language23 = io.resourcepool.model.Language.random();
        java.lang.String str24 = language23.getLocaleCode();
        io.resourcepool.model.Language[] languageArray25 = new io.resourcepool.model.Language[] { language13, language17, language20, language22, language23 };
        int int26 = surnamesDictionary4.size(languageArray25);
        int int27 = surnamesDictionary0.size(languageArray25);
        int int28 = surnamesDictionary0.size();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary29 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        int int30 = givenNamesDictionary29.size();
        io.resourcepool.model.Language language31 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language[] languageArray32 = new io.resourcepool.model.Language[] { language31 };
        int int33 = givenNamesDictionary29.size(languageArray32);
        int int34 = surnamesDictionary0.size(languageArray32);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20000 + "'", int3 == 20000);
        org.junit.Assert.assertNotNull(languageArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + language7 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language7.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language8 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language8.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
        org.junit.Assert.assertNotNull(languageArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!76" + "'", str15, "hi!76");
        org.junit.Assert.assertTrue("'" + language17 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language17.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!37" + "'", str19, "hi!37");
        org.junit.Assert.assertTrue("'" + language20 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language20.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en" + "'", str21, "en");
        org.junit.Assert.assertTrue("'" + language22 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language22.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language23 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language23.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertNotNull(languageArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50000 + "'", int26 == 50000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50000 + "'", int27 == 50000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4305 + "'", int30 == 4305);
        org.junit.Assert.assertTrue("'" + language31 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language31.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertNotNull(languageArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList2 = surnamesDictionary0.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary3 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray4 = new io.resourcepool.model.Language[] {};
        int int5 = surnamesDictionary3.size(languageArray4);
        int int6 = surnamesDictionary0.size(languageArray4);
        java.lang.String str7 = surnamesDictionary0.pick();
        java.lang.String str8 = surnamesDictionary0.pick();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary9 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary10 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray11 = new io.resourcepool.model.Language[] {};
        int int12 = surnamesDictionary10.size(languageArray11);
        int int13 = givenNamesDictionary9.size(languageArray11);
        java.util.List<io.resourcepool.model.GivenName> givenNameList15 = givenNamesDictionary9.pick(1);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary16 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray17 = new io.resourcepool.model.Language[] {};
        int int18 = surnamesDictionary16.size(languageArray17);
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language20 = io.resourcepool.model.Language.random();
        java.lang.String str21 = language20.getLocaleCode();
        io.resourcepool.model.Language[] languageArray22 = new io.resourcepool.model.Language[] { language19, language20 };
        int int23 = surnamesDictionary16.size(languageArray22);
        io.resourcepool.model.Language language25 = io.resourcepool.model.Language.random();
        java.lang.String str26 = language25.getLocaleCode();
        java.lang.String str27 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language25);
        io.resourcepool.model.Language language29 = io.resourcepool.model.Language.random();
        java.lang.String str30 = language29.getLocaleCode();
        java.lang.String str31 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language29);
        io.resourcepool.model.Language language32 = io.resourcepool.model.Language.random();
        java.lang.String str33 = language32.getLocaleCode();
        io.resourcepool.model.Language language34 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language35 = io.resourcepool.model.Language.random();
        java.lang.String str36 = language35.getLocaleCode();
        io.resourcepool.model.Language[] languageArray37 = new io.resourcepool.model.Language[] { language25, language29, language32, language34, language35 };
        int int38 = surnamesDictionary16.size(languageArray37);
        io.resourcepool.generator.Query.Builder builder39 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary40 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary41 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray42 = new io.resourcepool.model.Language[] {};
        int int43 = surnamesDictionary41.size(languageArray42);
        int int44 = givenNamesDictionary40.size(languageArray42);
        io.resourcepool.generator.Query.Builder builder45 = builder39.languages(languageArray42);
        int int46 = surnamesDictionary16.size(languageArray42);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary48 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray49 = new io.resourcepool.model.Language[] {};
        int int50 = surnamesDictionary48.size(languageArray49);
        io.resourcepool.model.Language language51 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        java.lang.String str53 = language52.getLocaleCode();
        io.resourcepool.model.Language[] languageArray54 = new io.resourcepool.model.Language[] { language51, language52 };
        int int55 = surnamesDictionary48.size(languageArray54);
        io.resourcepool.generator.Query query56 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray54);
        java.util.List<java.lang.String> strList57 = surnamesDictionary16.pick(query56);
        io.resourcepool.model.Language[] languageArray58 = query56.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList59 = givenNamesDictionary9.pick(query56);
        java.util.List<java.lang.String> strList60 = surnamesDictionary0.pick(query56);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(languageArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shaull" + "'", str7, "Shaull");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shaull" + "'", str8, "Shaull");
        org.junit.Assert.assertNotNull(languageArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(givenNameList15);
        org.junit.Assert.assertNotNull(languageArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language20 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language20.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en" + "'", str21, "en");
        org.junit.Assert.assertNotNull(languageArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + language25 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language25.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!93" + "'", str27, "hi!93");
        org.junit.Assert.assertTrue("'" + language29 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language29.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!31" + "'", str31, "hi!31");
        org.junit.Assert.assertTrue("'" + language32 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language32.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertTrue("'" + language34 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language34.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language35 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language35.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "en" + "'", str36, "en");
        org.junit.Assert.assertNotNull(languageArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50000 + "'", int38 == 50000);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(languageArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(languageArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + language51 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language51.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertNotNull(languageArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20000 + "'", int55 == 20000);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageArray58);
        org.junit.Assert.assertNotNull(givenNameList59);
        org.junit.Assert.assertNotNull(strList60);
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        io.resourcepool.generator.impl.SimpleNameGenerator simpleNameGenerator0 = new io.resourcepool.generator.impl.SimpleNameGenerator();
        java.util.List<java.lang.String> strList2 = simpleNameGenerator0.nextSurnames(1);
        java.util.List<io.resourcepool.model.GivenName> givenNameList4 = simpleNameGenerator0.nextGivenNames(100);
        java.util.List<java.lang.String> strList6 = simpleNameGenerator0.nextSurnames((int) (byte) 0);
        io.resourcepool.model.GivenName givenName7 = simpleNameGenerator0.nextGivenName();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary8 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary9 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray10 = new io.resourcepool.model.Language[] {};
        int int11 = surnamesDictionary9.size(languageArray10);
        int int12 = givenNamesDictionary8.size(languageArray10);
        java.util.List<io.resourcepool.model.GivenName> givenNameList14 = givenNamesDictionary8.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary15 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray16 = new io.resourcepool.model.Language[] {};
        int int17 = surnamesDictionary15.size(languageArray16);
        int int18 = givenNamesDictionary8.size(languageArray16);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary19 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList21 = surnamesDictionary19.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary22 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray23 = new io.resourcepool.model.Language[] {};
        int int24 = surnamesDictionary22.size(languageArray23);
        int int25 = surnamesDictionary19.size(languageArray23);
        int int26 = givenNamesDictionary8.size(languageArray23);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary27 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary28 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray29 = new io.resourcepool.model.Language[] {};
        int int30 = surnamesDictionary28.size(languageArray29);
        int int31 = givenNamesDictionary27.size(languageArray29);
        java.util.List<io.resourcepool.model.GivenName> givenNameList33 = givenNamesDictionary27.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList35 = givenNamesDictionary27.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary36 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray37 = new io.resourcepool.model.Language[] {};
        int int38 = surnamesDictionary36.size(languageArray37);
        io.resourcepool.model.Language language39 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language40 = io.resourcepool.model.Language.random();
        java.lang.String str41 = language40.getLocaleCode();
        io.resourcepool.model.Language[] languageArray42 = new io.resourcepool.model.Language[] { language39, language40 };
        int int43 = surnamesDictionary36.size(languageArray42);
        io.resourcepool.model.Language language45 = io.resourcepool.model.Language.random();
        java.lang.String str46 = language45.getLocaleCode();
        java.lang.String str47 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language45);
        io.resourcepool.model.Language language49 = io.resourcepool.model.Language.random();
        java.lang.String str50 = language49.getLocaleCode();
        java.lang.String str51 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language49);
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        java.lang.String str53 = language52.getLocaleCode();
        io.resourcepool.model.Language language54 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language55 = io.resourcepool.model.Language.random();
        java.lang.String str56 = language55.getLocaleCode();
        io.resourcepool.model.Language[] languageArray57 = new io.resourcepool.model.Language[] { language45, language49, language52, language54, language55 };
        int int58 = surnamesDictionary36.size(languageArray57);
        io.resourcepool.generator.Query.Builder builder59 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary60 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary61 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray62 = new io.resourcepool.model.Language[] {};
        int int63 = surnamesDictionary61.size(languageArray62);
        int int64 = givenNamesDictionary60.size(languageArray62);
        io.resourcepool.generator.Query.Builder builder65 = builder59.languages(languageArray62);
        int int66 = surnamesDictionary36.size(languageArray62);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary68 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray69 = new io.resourcepool.model.Language[] {};
        int int70 = surnamesDictionary68.size(languageArray69);
        io.resourcepool.model.Language language71 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language72 = io.resourcepool.model.Language.random();
        java.lang.String str73 = language72.getLocaleCode();
        io.resourcepool.model.Language[] languageArray74 = new io.resourcepool.model.Language[] { language71, language72 };
        int int75 = surnamesDictionary68.size(languageArray74);
        io.resourcepool.generator.Query query76 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray74);
        java.util.List<java.lang.String> strList77 = surnamesDictionary36.pick(query76);
        io.resourcepool.model.Language[] languageArray78 = query76.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList79 = givenNamesDictionary27.pick(query76);
        java.util.List<io.resourcepool.model.GivenName> givenNameList80 = givenNamesDictionary8.pick(query76);
        java.util.List<io.resourcepool.model.FullName> fullNameList81 = simpleNameGenerator0.nextNames(query76);
        int int82 = query76.count;
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(givenNameList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(givenName7);
        org.junit.Assert.assertNotNull(languageArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(givenNameList14);
        org.junit.Assert.assertNotNull(languageArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(givenNameList33);
        org.junit.Assert.assertNotNull(givenNameList35);
        org.junit.Assert.assertNotNull(languageArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + language39 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language39.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language40 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language40.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertNotNull(languageArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + language45 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language45.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!45" + "'", str47, "hi!45");
        org.junit.Assert.assertTrue("'" + language49 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language49.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en" + "'", str50, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Soberhi!" + "'", str51, "Soberhi!");
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertTrue("'" + language54 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language54.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language55 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language55.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertNotNull(languageArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50000 + "'", int58 == 50000);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(languageArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(languageArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + language71 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language71.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language72 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language72.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en" + "'", str73, "en");
        org.junit.Assert.assertNotNull(languageArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageArray78);
        org.junit.Assert.assertNotNull(givenNameList79);
        org.junit.Assert.assertNotNull(givenNameList80);
        org.junit.Assert.assertNotNull(fullNameList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        java.lang.String str3 = surnamesDictionary0.pick();
        io.resourcepool.model.Language language5 = io.resourcepool.model.Language.random();
        java.lang.String str6 = language5.getLocaleCode();
        java.lang.String str7 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language5);
        java.lang.String str8 = surnamesDictionary0.pick(language5);
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Shaull" + "'", str3, "Shaull");
        org.junit.Assert.assertTrue("'" + language5 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language5.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!8" + "'", str7, "hi!8");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shaull" + "'", str8, "Shaull");
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        io.resourcepool.generator.impl.SimpleNameGenerator simpleNameGenerator0 = new io.resourcepool.generator.impl.SimpleNameGenerator();
        java.util.List<java.lang.String> strList2 = simpleNameGenerator0.nextSurnames(1);
        java.util.List<io.resourcepool.model.GivenName> givenNameList4 = simpleNameGenerator0.nextGivenNames(100);
        java.util.List<java.lang.String> strList6 = simpleNameGenerator0.nextSurnames((int) (byte) 1);
        java.lang.String str7 = simpleNameGenerator0.nextSurname();
        java.util.List<java.lang.String> strList9 = simpleNameGenerator0.nextSurnames(1);
        java.util.List<java.lang.String> strList11 = simpleNameGenerator0.nextSurnames(0);
        java.lang.String str12 = simpleNameGenerator0.nextNickname();
        java.util.List<io.resourcepool.model.FullName> fullNameList14 = simpleNameGenerator0.nextNames(0);
        java.lang.String str15 = simpleNameGenerator0.nextSurname();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary16 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary17 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray18 = new io.resourcepool.model.Language[] {};
        int int19 = surnamesDictionary17.size(languageArray18);
        int int20 = givenNamesDictionary16.size(languageArray18);
        java.util.List<io.resourcepool.model.GivenName> givenNameList22 = givenNamesDictionary16.pick(10);
        java.util.List<io.resourcepool.model.GivenName> givenNameList24 = givenNamesDictionary16.pick(0);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary25 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary26 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray27 = new io.resourcepool.model.Language[] {};
        int int28 = surnamesDictionary26.size(languageArray27);
        int int29 = givenNamesDictionary25.size(languageArray27);
        java.util.List<io.resourcepool.model.GivenName> givenNameList31 = givenNamesDictionary25.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList33 = givenNamesDictionary25.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary34 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray35 = new io.resourcepool.model.Language[] {};
        int int36 = surnamesDictionary34.size(languageArray35);
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language38 = io.resourcepool.model.Language.random();
        java.lang.String str39 = language38.getLocaleCode();
        io.resourcepool.model.Language[] languageArray40 = new io.resourcepool.model.Language[] { language37, language38 };
        int int41 = surnamesDictionary34.size(languageArray40);
        io.resourcepool.model.Language language43 = io.resourcepool.model.Language.random();
        java.lang.String str44 = language43.getLocaleCode();
        java.lang.String str45 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language43);
        io.resourcepool.model.Language language47 = io.resourcepool.model.Language.random();
        java.lang.String str48 = language47.getLocaleCode();
        java.lang.String str49 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language47);
        io.resourcepool.model.Language language50 = io.resourcepool.model.Language.random();
        java.lang.String str51 = language50.getLocaleCode();
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language53 = io.resourcepool.model.Language.random();
        java.lang.String str54 = language53.getLocaleCode();
        io.resourcepool.model.Language[] languageArray55 = new io.resourcepool.model.Language[] { language43, language47, language50, language52, language53 };
        int int56 = surnamesDictionary34.size(languageArray55);
        io.resourcepool.generator.Query.Builder builder57 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary58 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary59 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray60 = new io.resourcepool.model.Language[] {};
        int int61 = surnamesDictionary59.size(languageArray60);
        int int62 = givenNamesDictionary58.size(languageArray60);
        io.resourcepool.generator.Query.Builder builder63 = builder57.languages(languageArray60);
        int int64 = surnamesDictionary34.size(languageArray60);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary66 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray67 = new io.resourcepool.model.Language[] {};
        int int68 = surnamesDictionary66.size(languageArray67);
        io.resourcepool.model.Language language69 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language70 = io.resourcepool.model.Language.random();
        java.lang.String str71 = language70.getLocaleCode();
        io.resourcepool.model.Language[] languageArray72 = new io.resourcepool.model.Language[] { language69, language70 };
        int int73 = surnamesDictionary66.size(languageArray72);
        io.resourcepool.generator.Query query74 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray72);
        java.util.List<java.lang.String> strList75 = surnamesDictionary34.pick(query74);
        io.resourcepool.model.Language[] languageArray76 = query74.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList77 = givenNamesDictionary25.pick(query74);
        java.util.List<io.resourcepool.model.GivenName> givenNameList78 = givenNamesDictionary16.pick(query74);
        java.util.List<io.resourcepool.model.FullName> fullNameList79 = simpleNameGenerator0.nextNames(query74);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(givenNameList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shaull" + "'", str7, "Shaull");
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mamie23" + "'", str12, "Mamie23");
        org.junit.Assert.assertNotNull(fullNameList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Shaull" + "'", str15, "Shaull");
        org.junit.Assert.assertNotNull(languageArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(givenNameList22);
        org.junit.Assert.assertNotNull(givenNameList24);
        org.junit.Assert.assertNotNull(languageArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(givenNameList31);
        org.junit.Assert.assertNotNull(givenNameList33);
        org.junit.Assert.assertNotNull(languageArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language38 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language38.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertNotNull(languageArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + language43 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language43.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!29" + "'", str45, "hi!29");
        org.junit.Assert.assertTrue("'" + language47 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language47.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!85" + "'", str49, "hi!85");
        org.junit.Assert.assertTrue("'" + language50 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language50.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language53 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language53.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
        org.junit.Assert.assertNotNull(languageArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50000 + "'", int56 == 50000);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(languageArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(languageArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + language69 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language69.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language70 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language70.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "en" + "'", str71, "en");
        org.junit.Assert.assertNotNull(languageArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20000 + "'", int73 == 20000);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(languageArray76);
        org.junit.Assert.assertNotNull(givenNameList77);
        org.junit.Assert.assertNotNull(givenNameList78);
        org.junit.Assert.assertNotNull(fullNameList79);
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        io.resourcepool.model.Language language9 = io.resourcepool.model.Language.random();
        java.lang.String str10 = language9.getLocaleCode();
        java.lang.String str11 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language9);
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        java.lang.String str15 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language13);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.random();
        java.lang.String str17 = language16.getLocaleCode();
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] { language9, language13, language16, language18, language19 };
        int int22 = surnamesDictionary0.size(languageArray21);
        java.lang.String str23 = surnamesDictionary0.pick();
        io.resourcepool.model.Language language24 = io.resourcepool.model.Language.random();
        java.lang.String str25 = language24.getLocaleCode();
        java.util.List<java.lang.String> strList26 = io.resourcepool.dictionary.loader.NameLoader.loadSurnames(language24);
        java.lang.String str27 = surnamesDictionary0.pick(language24);
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + language9 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language9.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!20" + "'", str11, "hi!20");
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Cutiehi!" + "'", str15, "Cutiehi!");
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50000 + "'", int22 == 50000);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Shaull" + "'", str23, "Shaull");
        org.junit.Assert.assertTrue("'" + language24 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language24.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Shaull" + "'", str27, "Shaull");
    }

    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary0 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        int int1 = givenNamesDictionary0.size();
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.random();
        java.lang.String str4 = language3.getLocaleCode();
        java.lang.String str5 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language3);
        java.lang.String str6 = language3.getLocaleCode();
        java.util.List<io.resourcepool.model.Fortune> fortuneList7 = io.resourcepool.dictionary.loader.FortuneLoader.load(language3);
        io.resourcepool.model.GivenName givenName8 = givenNamesDictionary0.pick(language3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4305 + "'", int1 == 4305);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!36" + "'", str5, "hi!36");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(fortuneList7);
        org.junit.Assert.assertNotNull(givenName8);
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        io.resourcepool.model.Fortune fortune1 = simpleFortuneGenerator0.nextFortune();
        io.resourcepool.model.Fortune fortune2 = simpleFortuneGenerator0.nextFortune();
        java.util.List<io.resourcepool.model.Fortune> fortuneList4 = simpleFortuneGenerator0.nextFortunes(11812);
        io.resourcepool.model.Language language5 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Fortune fortune6 = simpleFortuneGenerator0.nextFortune(language5);
        io.resourcepool.generator.impl.SimpleNameGenerator simpleNameGenerator7 = new io.resourcepool.generator.impl.SimpleNameGenerator();
        java.lang.String str8 = simpleNameGenerator7.nextSurname();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary9 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary10 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray11 = new io.resourcepool.model.Language[] {};
        int int12 = surnamesDictionary10.size(languageArray11);
        int int13 = givenNamesDictionary9.size(languageArray11);
        java.util.List<io.resourcepool.model.GivenName> givenNameList15 = givenNamesDictionary9.pick(10);
        java.util.List<io.resourcepool.model.GivenName> givenNameList17 = givenNamesDictionary9.pick(0);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary18 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary19 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray20 = new io.resourcepool.model.Language[] {};
        int int21 = surnamesDictionary19.size(languageArray20);
        int int22 = givenNamesDictionary18.size(languageArray20);
        java.util.List<io.resourcepool.model.GivenName> givenNameList24 = givenNamesDictionary18.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList26 = givenNamesDictionary18.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary27 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray28 = new io.resourcepool.model.Language[] {};
        int int29 = surnamesDictionary27.size(languageArray28);
        io.resourcepool.model.Language language30 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language31 = io.resourcepool.model.Language.random();
        java.lang.String str32 = language31.getLocaleCode();
        io.resourcepool.model.Language[] languageArray33 = new io.resourcepool.model.Language[] { language30, language31 };
        int int34 = surnamesDictionary27.size(languageArray33);
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.random();
        java.lang.String str37 = language36.getLocaleCode();
        java.lang.String str38 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language36);
        io.resourcepool.model.Language language40 = io.resourcepool.model.Language.random();
        java.lang.String str41 = language40.getLocaleCode();
        java.lang.String str42 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language40);
        io.resourcepool.model.Language language43 = io.resourcepool.model.Language.random();
        java.lang.String str44 = language43.getLocaleCode();
        io.resourcepool.model.Language language45 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language46 = io.resourcepool.model.Language.random();
        java.lang.String str47 = language46.getLocaleCode();
        io.resourcepool.model.Language[] languageArray48 = new io.resourcepool.model.Language[] { language36, language40, language43, language45, language46 };
        int int49 = surnamesDictionary27.size(languageArray48);
        io.resourcepool.generator.Query.Builder builder50 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary51 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary52 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray53 = new io.resourcepool.model.Language[] {};
        int int54 = surnamesDictionary52.size(languageArray53);
        int int55 = givenNamesDictionary51.size(languageArray53);
        io.resourcepool.generator.Query.Builder builder56 = builder50.languages(languageArray53);
        int int57 = surnamesDictionary27.size(languageArray53);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary59 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray60 = new io.resourcepool.model.Language[] {};
        int int61 = surnamesDictionary59.size(languageArray60);
        io.resourcepool.model.Language language62 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language63 = io.resourcepool.model.Language.random();
        java.lang.String str64 = language63.getLocaleCode();
        io.resourcepool.model.Language[] languageArray65 = new io.resourcepool.model.Language[] { language62, language63 };
        int int66 = surnamesDictionary59.size(languageArray65);
        io.resourcepool.generator.Query query67 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray65);
        java.util.List<java.lang.String> strList68 = surnamesDictionary27.pick(query67);
        io.resourcepool.model.Language[] languageArray69 = query67.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList70 = givenNamesDictionary18.pick(query67);
        java.util.List<io.resourcepool.model.GivenName> givenNameList71 = givenNamesDictionary9.pick(query67);
        java.util.List<io.resourcepool.model.FullName> fullNameList72 = simpleNameGenerator7.nextNames(query67);
        java.util.List<io.resourcepool.model.Fortune> fortuneList73 = simpleFortuneGenerator0.nextFortunes(query67);
        org.junit.Assert.assertNotNull(fortune1);
        org.junit.Assert.assertNotNull(fortune2);
        org.junit.Assert.assertNotNull(fortuneList4);
        org.junit.Assert.assertTrue("'" + language5 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language5.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertNotNull(fortune6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shaull" + "'", str8, "Shaull");
        org.junit.Assert.assertNotNull(languageArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(givenNameList15);
        org.junit.Assert.assertNotNull(givenNameList17);
        org.junit.Assert.assertNotNull(languageArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(givenNameList24);
        org.junit.Assert.assertNotNull(givenNameList26);
        org.junit.Assert.assertNotNull(languageArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + language30 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language30.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language31 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language31.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en" + "'", str32, "en");
        org.junit.Assert.assertNotNull(languageArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!13" + "'", str38, "hi!13");
        org.junit.Assert.assertTrue("'" + language40 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language40.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!18" + "'", str42, "hi!18");
        org.junit.Assert.assertTrue("'" + language43 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language43.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertTrue("'" + language45 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language45.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language46 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language46.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertNotNull(languageArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50000 + "'", int49 == 50000);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(languageArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(languageArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + language62 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language62.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language63 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language63.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "en" + "'", str64, "en");
        org.junit.Assert.assertNotNull(languageArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20000 + "'", int66 == 20000);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(languageArray69);
        org.junit.Assert.assertNotNull(givenNameList70);
        org.junit.Assert.assertNotNull(givenNameList71);
        org.junit.Assert.assertNotNull(fullNameList72);
        org.junit.Assert.assertNotNull(fortuneList73);
    }

    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        io.resourcepool.generator.Query.Builder builder0 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary1 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary2 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray3 = new io.resourcepool.model.Language[] {};
        int int4 = surnamesDictionary2.size(languageArray3);
        int int5 = givenNamesDictionary1.size(languageArray3);
        io.resourcepool.generator.Query.Builder builder6 = builder0.languages(languageArray3);
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary7 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int8 = fortunesDictionary7.size();
        io.resourcepool.generator.Query.Builder builder9 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary10 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary11 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray12 = new io.resourcepool.model.Language[] {};
        int int13 = surnamesDictionary11.size(languageArray12);
        int int14 = givenNamesDictionary10.size(languageArray12);
        io.resourcepool.generator.Query.Builder builder15 = builder9.languages(languageArray12);
        int int16 = fortunesDictionary7.size(languageArray12);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary17 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray18 = new io.resourcepool.model.Language[] {};
        int int19 = surnamesDictionary17.size(languageArray18);
        io.resourcepool.model.Language language20 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language21 = io.resourcepool.model.Language.random();
        java.lang.String str22 = language21.getLocaleCode();
        io.resourcepool.model.Language[] languageArray23 = new io.resourcepool.model.Language[] { language20, language21 };
        int int24 = surnamesDictionary17.size(languageArray23);
        io.resourcepool.model.Language language26 = io.resourcepool.model.Language.random();
        java.lang.String str27 = language26.getLocaleCode();
        java.lang.String str28 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language26);
        io.resourcepool.model.Language language30 = io.resourcepool.model.Language.random();
        java.lang.String str31 = language30.getLocaleCode();
        java.lang.String str32 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language30);
        io.resourcepool.model.Language language33 = io.resourcepool.model.Language.random();
        java.lang.String str34 = language33.getLocaleCode();
        io.resourcepool.model.Language language35 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.random();
        java.lang.String str37 = language36.getLocaleCode();
        io.resourcepool.model.Language[] languageArray38 = new io.resourcepool.model.Language[] { language26, language30, language33, language35, language36 };
        int int39 = surnamesDictionary17.size(languageArray38);
        int int40 = fortunesDictionary7.size(languageArray38);
        io.resourcepool.generator.Query.Builder builder41 = builder0.languages(languageArray38);
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary42 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int43 = fortunesDictionary42.size();
        io.resourcepool.generator.Query.Builder builder44 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary45 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary46 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray47 = new io.resourcepool.model.Language[] {};
        int int48 = surnamesDictionary46.size(languageArray47);
        int int49 = givenNamesDictionary45.size(languageArray47);
        io.resourcepool.generator.Query.Builder builder50 = builder44.languages(languageArray47);
        int int51 = fortunesDictionary42.size(languageArray47);
        io.resourcepool.generator.Query.Builder builder52 = builder41.languages(languageArray47);
        io.resourcepool.generator.Query query53 = builder52.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(languageArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11812 + "'", int8 == 11812);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(languageArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(languageArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + language20 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language20.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language21 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language21.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(languageArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertTrue("'" + language26 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language26.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!28" + "'", str28, "hi!28");
        org.junit.Assert.assertTrue("'" + language30 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language30.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!84" + "'", str32, "hi!84");
        org.junit.Assert.assertTrue("'" + language33 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language33.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
        org.junit.Assert.assertTrue("'" + language35 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language35.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(languageArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50000 + "'", int39 == 50000);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50000 + "'", int40 == 50000);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11812 + "'", int43 == 11812);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(languageArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(query53);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        io.resourcepool.model.Fortune fortune1 = simpleFortuneGenerator0.nextFortune();
        java.util.List<io.resourcepool.model.Fortune> fortuneList3 = simpleFortuneGenerator0.nextFortunes(10);
        io.resourcepool.model.Fortune fortune4 = simpleFortuneGenerator0.nextFortune();
        java.util.List<io.resourcepool.model.Fortune> fortuneList6 = simpleFortuneGenerator0.nextFortunes((int) (short) 10);
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator7 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        java.util.List<io.resourcepool.model.Fortune> fortuneList9 = simpleFortuneGenerator7.nextFortunes(1);
        io.resourcepool.model.Language language10 = io.resourcepool.model.Language.random();
        java.lang.String str11 = language10.getLocaleCode();
        io.resourcepool.model.Fortune fortune12 = simpleFortuneGenerator7.nextFortune(language10);
        java.util.List<io.resourcepool.model.Fortune> fortuneList14 = simpleFortuneGenerator7.nextFortunes((int) (short) 0);
        java.util.List<io.resourcepool.model.Fortune> fortuneList16 = simpleFortuneGenerator7.nextFortunes((int) '4');
        io.resourcepool.model.Fortune fortune17 = simpleFortuneGenerator7.nextFortune();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        java.lang.String str20 = language19.getLocaleCode();
        java.lang.String str21 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language19);
        java.lang.String str22 = language19.getLocaleCode();
        java.util.List<io.resourcepool.model.Fortune> fortuneList23 = io.resourcepool.dictionary.loader.FortuneLoader.load(language19);
        io.resourcepool.model.Fortune fortune24 = simpleFortuneGenerator7.nextFortune(language19);
        io.resourcepool.model.Fortune fortune25 = simpleFortuneGenerator0.nextFortune(language19);
        org.junit.Assert.assertNotNull(fortune1);
        org.junit.Assert.assertNotNull(fortuneList3);
        org.junit.Assert.assertNotNull(fortune4);
        org.junit.Assert.assertNotNull(fortuneList6);
        org.junit.Assert.assertNotNull(fortuneList9);
        org.junit.Assert.assertTrue("'" + language10 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language10.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertNotNull(fortune12);
        org.junit.Assert.assertNotNull(fortuneList14);
        org.junit.Assert.assertNotNull(fortuneList16);
        org.junit.Assert.assertNotNull(fortune17);
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!61" + "'", str21, "hi!61");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(fortuneList23);
        org.junit.Assert.assertNotNull(fortune24);
        org.junit.Assert.assertNotNull(fortune25);
    }

    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary0 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary1 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray2 = new io.resourcepool.model.Language[] {};
        int int3 = surnamesDictionary1.size(languageArray2);
        int int4 = givenNamesDictionary0.size(languageArray2);
        java.util.List<io.resourcepool.model.GivenName> givenNameList6 = givenNamesDictionary0.pick(10);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary7 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary8 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray9 = new io.resourcepool.model.Language[] {};
        int int10 = surnamesDictionary8.size(languageArray9);
        int int11 = givenNamesDictionary7.size(languageArray9);
        java.util.List<io.resourcepool.model.GivenName> givenNameList13 = givenNamesDictionary7.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary14 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray15 = new io.resourcepool.model.Language[] {};
        int int16 = surnamesDictionary14.size(languageArray15);
        int int17 = givenNamesDictionary7.size(languageArray15);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary18 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList20 = surnamesDictionary18.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary21 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray22 = new io.resourcepool.model.Language[] {};
        int int23 = surnamesDictionary21.size(languageArray22);
        int int24 = surnamesDictionary18.size(languageArray22);
        int int25 = givenNamesDictionary7.size(languageArray22);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary26 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary27 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray28 = new io.resourcepool.model.Language[] {};
        int int29 = surnamesDictionary27.size(languageArray28);
        int int30 = givenNamesDictionary26.size(languageArray28);
        java.util.List<io.resourcepool.model.GivenName> givenNameList32 = givenNamesDictionary26.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList34 = givenNamesDictionary26.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary35 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray36 = new io.resourcepool.model.Language[] {};
        int int37 = surnamesDictionary35.size(languageArray36);
        io.resourcepool.model.Language language38 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language39 = io.resourcepool.model.Language.random();
        java.lang.String str40 = language39.getLocaleCode();
        io.resourcepool.model.Language[] languageArray41 = new io.resourcepool.model.Language[] { language38, language39 };
        int int42 = surnamesDictionary35.size(languageArray41);
        io.resourcepool.model.Language language44 = io.resourcepool.model.Language.random();
        java.lang.String str45 = language44.getLocaleCode();
        java.lang.String str46 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language44);
        io.resourcepool.model.Language language48 = io.resourcepool.model.Language.random();
        java.lang.String str49 = language48.getLocaleCode();
        java.lang.String str50 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language48);
        io.resourcepool.model.Language language51 = io.resourcepool.model.Language.random();
        java.lang.String str52 = language51.getLocaleCode();
        io.resourcepool.model.Language language53 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language54 = io.resourcepool.model.Language.random();
        java.lang.String str55 = language54.getLocaleCode();
        io.resourcepool.model.Language[] languageArray56 = new io.resourcepool.model.Language[] { language44, language48, language51, language53, language54 };
        int int57 = surnamesDictionary35.size(languageArray56);
        io.resourcepool.generator.Query.Builder builder58 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary59 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary60 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray61 = new io.resourcepool.model.Language[] {};
        int int62 = surnamesDictionary60.size(languageArray61);
        int int63 = givenNamesDictionary59.size(languageArray61);
        io.resourcepool.generator.Query.Builder builder64 = builder58.languages(languageArray61);
        int int65 = surnamesDictionary35.size(languageArray61);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary67 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray68 = new io.resourcepool.model.Language[] {};
        int int69 = surnamesDictionary67.size(languageArray68);
        io.resourcepool.model.Language language70 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language71 = io.resourcepool.model.Language.random();
        java.lang.String str72 = language71.getLocaleCode();
        io.resourcepool.model.Language[] languageArray73 = new io.resourcepool.model.Language[] { language70, language71 };
        int int74 = surnamesDictionary67.size(languageArray73);
        io.resourcepool.generator.Query query75 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray73);
        java.util.List<java.lang.String> strList76 = surnamesDictionary35.pick(query75);
        io.resourcepool.model.Language[] languageArray77 = query75.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList78 = givenNamesDictionary26.pick(query75);
        java.util.List<io.resourcepool.model.GivenName> givenNameList79 = givenNamesDictionary7.pick(query75);
        java.util.List<io.resourcepool.model.GivenName> givenNameList80 = givenNamesDictionary0.pick(query75);
        org.junit.Assert.assertNotNull(languageArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(givenNameList6);
        org.junit.Assert.assertNotNull(languageArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(givenNameList13);
        org.junit.Assert.assertNotNull(languageArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(languageArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(languageArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(givenNameList32);
        org.junit.Assert.assertNotNull(givenNameList34);
        org.junit.Assert.assertNotNull(languageArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + language38 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language38.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language39 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language39.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "en" + "'", str40, "en");
        org.junit.Assert.assertNotNull(languageArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + language44 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language44.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en" + "'", str45, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!43" + "'", str46, "hi!43");
        org.junit.Assert.assertTrue("'" + language48 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language48.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!53" + "'", str50, "hi!53");
        org.junit.Assert.assertTrue("'" + language51 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language51.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertTrue("'" + language53 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language53.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language54 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language54.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en" + "'", str55, "en");
        org.junit.Assert.assertNotNull(languageArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50000 + "'", int57 == 50000);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(languageArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(languageArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + language70 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language70.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language71 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language71.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en" + "'", str72, "en");
        org.junit.Assert.assertNotNull(languageArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(languageArray77);
        org.junit.Assert.assertNotNull(givenNameList78);
        org.junit.Assert.assertNotNull(givenNameList79);
        org.junit.Assert.assertNotNull(givenNameList80);
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary0 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary1 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray2 = new io.resourcepool.model.Language[] {};
        int int3 = surnamesDictionary1.size(languageArray2);
        int int4 = givenNamesDictionary0.size(languageArray2);
        java.util.List<io.resourcepool.model.GivenName> givenNameList6 = givenNamesDictionary0.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList8 = givenNamesDictionary0.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary9 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray10 = new io.resourcepool.model.Language[] {};
        int int11 = surnamesDictionary9.size(languageArray10);
        io.resourcepool.model.Language language12 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language13 = io.resourcepool.model.Language.random();
        java.lang.String str14 = language13.getLocaleCode();
        io.resourcepool.model.Language[] languageArray15 = new io.resourcepool.model.Language[] { language12, language13 };
        int int16 = surnamesDictionary9.size(languageArray15);
        io.resourcepool.model.Language language18 = io.resourcepool.model.Language.random();
        java.lang.String str19 = language18.getLocaleCode();
        java.lang.String str20 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language18);
        io.resourcepool.model.Language language22 = io.resourcepool.model.Language.random();
        java.lang.String str23 = language22.getLocaleCode();
        java.lang.String str24 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language22);
        io.resourcepool.model.Language language25 = io.resourcepool.model.Language.random();
        java.lang.String str26 = language25.getLocaleCode();
        io.resourcepool.model.Language language27 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language28 = io.resourcepool.model.Language.random();
        java.lang.String str29 = language28.getLocaleCode();
        io.resourcepool.model.Language[] languageArray30 = new io.resourcepool.model.Language[] { language18, language22, language25, language27, language28 };
        int int31 = surnamesDictionary9.size(languageArray30);
        io.resourcepool.generator.Query.Builder builder32 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary33 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary34 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray35 = new io.resourcepool.model.Language[] {};
        int int36 = surnamesDictionary34.size(languageArray35);
        int int37 = givenNamesDictionary33.size(languageArray35);
        io.resourcepool.generator.Query.Builder builder38 = builder32.languages(languageArray35);
        int int39 = surnamesDictionary9.size(languageArray35);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary41 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray42 = new io.resourcepool.model.Language[] {};
        int int43 = surnamesDictionary41.size(languageArray42);
        io.resourcepool.model.Language language44 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language45 = io.resourcepool.model.Language.random();
        java.lang.String str46 = language45.getLocaleCode();
        io.resourcepool.model.Language[] languageArray47 = new io.resourcepool.model.Language[] { language44, language45 };
        int int48 = surnamesDictionary41.size(languageArray47);
        io.resourcepool.generator.Query query49 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray47);
        java.util.List<java.lang.String> strList50 = surnamesDictionary9.pick(query49);
        io.resourcepool.model.Language[] languageArray51 = query49.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList52 = givenNamesDictionary0.pick(query49);
        int int53 = query49.count;
        org.junit.Assert.assertNotNull(languageArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(givenNameList6);
        org.junit.Assert.assertNotNull(givenNameList8);
        org.junit.Assert.assertNotNull(languageArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + language12 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language12.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language13 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language13.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en" + "'", str14, "en");
        org.junit.Assert.assertNotNull(languageArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertTrue("'" + language18 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language18.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!99" + "'", str20, "hi!99");
        org.junit.Assert.assertTrue("'" + language22 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language22.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!21" + "'", str24, "hi!21");
        org.junit.Assert.assertTrue("'" + language25 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language25.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertTrue("'" + language27 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language27.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language28 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language28.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "en" + "'", str29, "en");
        org.junit.Assert.assertNotNull(languageArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50000 + "'", int31 == 50000);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(languageArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(languageArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + language44 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language44.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language45 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language45.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
        org.junit.Assert.assertNotNull(languageArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20000 + "'", int48 == 20000);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageArray51);
        org.junit.Assert.assertNotNull(givenNameList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        io.resourcepool.model.Language language1 = io.resourcepool.model.Language.FRENCH;
        java.util.List<io.resourcepool.model.Fortune> fortuneList2 = io.resourcepool.dictionary.loader.FortuneLoader.load(language1);
        java.lang.String str3 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!37", language1);
        org.junit.Assert.assertTrue("'" + language1 + "' != '" + io.resourcepool.model.Language.FRENCH + "'", language1.equals(io.resourcepool.model.Language.FRENCH));
        org.junit.Assert.assertNotNull(fortuneList2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!3715" + "'", str3, "hi!3715");
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary2 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray3 = new io.resourcepool.model.Language[] {};
        int int4 = surnamesDictionary2.size(languageArray3);
        io.resourcepool.model.Language language5 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language6 = io.resourcepool.model.Language.random();
        java.lang.String str7 = language6.getLocaleCode();
        io.resourcepool.model.Language[] languageArray8 = new io.resourcepool.model.Language[] { language5, language6 };
        int int9 = surnamesDictionary2.size(languageArray8);
        io.resourcepool.generator.Query query10 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray8);
        java.util.List<java.lang.String> strList11 = surnamesDictionary0.pick(query10);
        java.lang.String str12 = surnamesDictionary0.pick();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary13 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray14 = new io.resourcepool.model.Language[] {};
        int int15 = surnamesDictionary13.size(languageArray14);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language17 = io.resourcepool.model.Language.random();
        java.lang.String str18 = language17.getLocaleCode();
        io.resourcepool.model.Language[] languageArray19 = new io.resourcepool.model.Language[] { language16, language17 };
        int int20 = surnamesDictionary13.size(languageArray19);
        io.resourcepool.model.Language language22 = io.resourcepool.model.Language.random();
        java.lang.String str23 = language22.getLocaleCode();
        java.lang.String str24 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language22);
        io.resourcepool.model.Language language26 = io.resourcepool.model.Language.random();
        java.lang.String str27 = language26.getLocaleCode();
        java.lang.String str28 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language26);
        io.resourcepool.model.Language language29 = io.resourcepool.model.Language.random();
        java.lang.String str30 = language29.getLocaleCode();
        io.resourcepool.model.Language language31 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language32 = io.resourcepool.model.Language.random();
        java.lang.String str33 = language32.getLocaleCode();
        io.resourcepool.model.Language[] languageArray34 = new io.resourcepool.model.Language[] { language22, language26, language29, language31, language32 };
        int int35 = surnamesDictionary13.size(languageArray34);
        io.resourcepool.generator.Query.Builder builder36 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary37 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary38 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray39 = new io.resourcepool.model.Language[] {};
        int int40 = surnamesDictionary38.size(languageArray39);
        int int41 = givenNamesDictionary37.size(languageArray39);
        io.resourcepool.generator.Query.Builder builder42 = builder36.languages(languageArray39);
        int int43 = surnamesDictionary13.size(languageArray39);
        int int44 = surnamesDictionary0.size(languageArray39);
        org.junit.Assert.assertNotNull(languageArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + language5 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language5.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language6 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language6.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en" + "'", str7, "en");
        org.junit.Assert.assertNotNull(languageArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Shaull" + "'", str12, "Shaull");
        org.junit.Assert.assertNotNull(languageArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language17 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language17.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(languageArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + language22 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language22.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Stupidhi!" + "'", str24, "Stupidhi!");
        org.junit.Assert.assertTrue("'" + language26 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language26.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!88" + "'", str28, "hi!88");
        org.junit.Assert.assertTrue("'" + language29 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language29.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
        org.junit.Assert.assertTrue("'" + language31 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language31.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language32 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language32.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(languageArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50000 + "'", int35 == 50000);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(languageArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        java.util.List<io.resourcepool.model.Fortune> fortuneList2 = simpleFortuneGenerator0.nextFortunes((int) (short) -1);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary3 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.generator.Query.Builder builder4 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary5 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary6 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray7 = new io.resourcepool.model.Language[] {};
        int int8 = surnamesDictionary6.size(languageArray7);
        int int9 = givenNamesDictionary5.size(languageArray7);
        io.resourcepool.generator.Query.Builder builder10 = builder4.languages(languageArray7);
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary11 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int12 = fortunesDictionary11.size();
        io.resourcepool.generator.Query.Builder builder13 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary14 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary15 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray16 = new io.resourcepool.model.Language[] {};
        int int17 = surnamesDictionary15.size(languageArray16);
        int int18 = givenNamesDictionary14.size(languageArray16);
        io.resourcepool.generator.Query.Builder builder19 = builder13.languages(languageArray16);
        int int20 = fortunesDictionary11.size(languageArray16);
        io.resourcepool.generator.Query.Builder builder21 = builder4.languages(languageArray16);
        int int22 = givenNamesDictionary3.size(languageArray16);
        int int23 = givenNamesDictionary3.size();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary24 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary25 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] {};
        int int27 = surnamesDictionary25.size(languageArray26);
        int int28 = givenNamesDictionary24.size(languageArray26);
        java.util.List<io.resourcepool.model.GivenName> givenNameList30 = givenNamesDictionary24.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList32 = givenNamesDictionary24.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary33 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray34 = new io.resourcepool.model.Language[] {};
        int int35 = surnamesDictionary33.size(languageArray34);
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.random();
        java.lang.String str38 = language37.getLocaleCode();
        io.resourcepool.model.Language[] languageArray39 = new io.resourcepool.model.Language[] { language36, language37 };
        int int40 = surnamesDictionary33.size(languageArray39);
        io.resourcepool.model.Language language42 = io.resourcepool.model.Language.random();
        java.lang.String str43 = language42.getLocaleCode();
        java.lang.String str44 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language42);
        io.resourcepool.model.Language language46 = io.resourcepool.model.Language.random();
        java.lang.String str47 = language46.getLocaleCode();
        java.lang.String str48 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language46);
        io.resourcepool.model.Language language49 = io.resourcepool.model.Language.random();
        java.lang.String str50 = language49.getLocaleCode();
        io.resourcepool.model.Language language51 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        java.lang.String str53 = language52.getLocaleCode();
        io.resourcepool.model.Language[] languageArray54 = new io.resourcepool.model.Language[] { language42, language46, language49, language51, language52 };
        int int55 = surnamesDictionary33.size(languageArray54);
        io.resourcepool.generator.Query.Builder builder56 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary57 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary58 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray59 = new io.resourcepool.model.Language[] {};
        int int60 = surnamesDictionary58.size(languageArray59);
        int int61 = givenNamesDictionary57.size(languageArray59);
        io.resourcepool.generator.Query.Builder builder62 = builder56.languages(languageArray59);
        int int63 = surnamesDictionary33.size(languageArray59);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary65 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray66 = new io.resourcepool.model.Language[] {};
        int int67 = surnamesDictionary65.size(languageArray66);
        io.resourcepool.model.Language language68 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language69 = io.resourcepool.model.Language.random();
        java.lang.String str70 = language69.getLocaleCode();
        io.resourcepool.model.Language[] languageArray71 = new io.resourcepool.model.Language[] { language68, language69 };
        int int72 = surnamesDictionary65.size(languageArray71);
        io.resourcepool.generator.Query query73 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray71);
        java.util.List<java.lang.String> strList74 = surnamesDictionary33.pick(query73);
        io.resourcepool.model.Language[] languageArray75 = query73.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList76 = givenNamesDictionary24.pick(query73);
        java.util.List<io.resourcepool.model.GivenName> givenNameList77 = givenNamesDictionary3.pick(query73);
        java.util.List<io.resourcepool.model.Fortune> fortuneList78 = simpleFortuneGenerator0.nextFortunes(query73);
        org.junit.Assert.assertNotNull(fortuneList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(languageArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11812 + "'", int12 == 11812);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(languageArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4305 + "'", int23 == 4305);
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(givenNameList30);
        org.junit.Assert.assertNotNull(givenNameList32);
        org.junit.Assert.assertNotNull(languageArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertNotNull(languageArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + language42 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language42.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en" + "'", str43, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!5" + "'", str44, "hi!5");
        org.junit.Assert.assertTrue("'" + language46 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language46.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lighthi!" + "'", str48, "Lighthi!");
        org.junit.Assert.assertTrue("'" + language49 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language49.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en" + "'", str50, "en");
        org.junit.Assert.assertTrue("'" + language51 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language51.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertNotNull(languageArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50000 + "'", int55 == 50000);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(languageArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(languageArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + language68 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language68.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language69 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language69.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en" + "'", str70, "en");
        org.junit.Assert.assertNotNull(languageArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 20000 + "'", int72 == 20000);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(languageArray75);
        org.junit.Assert.assertNotNull(givenNameList76);
        org.junit.Assert.assertNotNull(givenNameList77);
        org.junit.Assert.assertNotNull(fortuneList78);
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray1 = new io.resourcepool.model.Language[] {};
        int int2 = surnamesDictionary0.size(languageArray1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.random();
        java.lang.String str5 = language4.getLocaleCode();
        io.resourcepool.model.Language[] languageArray6 = new io.resourcepool.model.Language[] { language3, language4 };
        int int7 = surnamesDictionary0.size(languageArray6);
        int int8 = surnamesDictionary0.size();
        java.lang.String str9 = surnamesDictionary0.pick();
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary10 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int11 = fortunesDictionary10.size();
        io.resourcepool.generator.Query.Builder builder12 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary13 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary14 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray15 = new io.resourcepool.model.Language[] {};
        int int16 = surnamesDictionary14.size(languageArray15);
        int int17 = givenNamesDictionary13.size(languageArray15);
        io.resourcepool.generator.Query.Builder builder18 = builder12.languages(languageArray15);
        int int19 = fortunesDictionary10.size(languageArray15);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary20 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] {};
        int int22 = surnamesDictionary20.size(languageArray21);
        io.resourcepool.model.Language language23 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language24 = io.resourcepool.model.Language.random();
        java.lang.String str25 = language24.getLocaleCode();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] { language23, language24 };
        int int27 = surnamesDictionary20.size(languageArray26);
        io.resourcepool.model.Language language29 = io.resourcepool.model.Language.random();
        java.lang.String str30 = language29.getLocaleCode();
        java.lang.String str31 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language29);
        io.resourcepool.model.Language language33 = io.resourcepool.model.Language.random();
        java.lang.String str34 = language33.getLocaleCode();
        java.lang.String str35 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language33);
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.random();
        java.lang.String str37 = language36.getLocaleCode();
        io.resourcepool.model.Language language38 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language39 = io.resourcepool.model.Language.random();
        java.lang.String str40 = language39.getLocaleCode();
        io.resourcepool.model.Language[] languageArray41 = new io.resourcepool.model.Language[] { language29, language33, language36, language38, language39 };
        int int42 = surnamesDictionary20.size(languageArray41);
        int int43 = fortunesDictionary10.size(languageArray41);
        int int44 = surnamesDictionary0.size(languageArray41);
        org.junit.Assert.assertNotNull(languageArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(languageArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20000 + "'", int7 == 20000);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Shaull" + "'", str9, "Shaull");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11812 + "'", int11 == 11812);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(languageArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + language23 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language23.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language24 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language24.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + language29 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language29.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!33" + "'", str31, "hi!33");
        org.junit.Assert.assertTrue("'" + language33 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language33.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!22" + "'", str35, "hi!22");
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertTrue("'" + language38 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language38.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language39 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language39.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "en" + "'", str40, "en");
        org.junit.Assert.assertNotNull(languageArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50000 + "'", int42 == 50000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50000 + "'", int43 == 50000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50000 + "'", int44 == 50000);
    }

    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary0 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int1 = fortunesDictionary0.size();
        io.resourcepool.generator.Query.Builder builder2 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary3 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary4 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray5 = new io.resourcepool.model.Language[] {};
        int int6 = surnamesDictionary4.size(languageArray5);
        int int7 = givenNamesDictionary3.size(languageArray5);
        io.resourcepool.generator.Query.Builder builder8 = builder2.languages(languageArray5);
        int int9 = fortunesDictionary0.size(languageArray5);
        java.util.List<io.resourcepool.model.Fortune> fortuneList11 = fortunesDictionary0.pick(2000);
        io.resourcepool.model.Fortune fortune12 = fortunesDictionary0.pick();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary13 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray14 = new io.resourcepool.model.Language[] {};
        int int15 = surnamesDictionary13.size(languageArray14);
        io.resourcepool.model.Language language16 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language17 = io.resourcepool.model.Language.random();
        java.lang.String str18 = language17.getLocaleCode();
        io.resourcepool.model.Language[] languageArray19 = new io.resourcepool.model.Language[] { language16, language17 };
        int int20 = surnamesDictionary13.size(languageArray19);
        int int21 = fortunesDictionary0.size(languageArray19);
        io.resourcepool.model.Fortune fortune22 = fortunesDictionary0.pick();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary24 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray25 = new io.resourcepool.model.Language[] {};
        int int26 = surnamesDictionary24.size(languageArray25);
        io.resourcepool.model.Language language27 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language28 = io.resourcepool.model.Language.random();
        java.lang.String str29 = language28.getLocaleCode();
        io.resourcepool.model.Language[] languageArray30 = new io.resourcepool.model.Language[] { language27, language28 };
        int int31 = surnamesDictionary24.size(languageArray30);
        io.resourcepool.model.Language language33 = io.resourcepool.model.Language.random();
        java.lang.String str34 = language33.getLocaleCode();
        java.lang.String str35 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language33);
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.random();
        java.lang.String str38 = language37.getLocaleCode();
        java.lang.String str39 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language37);
        io.resourcepool.model.Language language40 = io.resourcepool.model.Language.random();
        java.lang.String str41 = language40.getLocaleCode();
        io.resourcepool.model.Language language42 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language43 = io.resourcepool.model.Language.random();
        java.lang.String str44 = language43.getLocaleCode();
        io.resourcepool.model.Language[] languageArray45 = new io.resourcepool.model.Language[] { language33, language37, language40, language42, language43 };
        int int46 = surnamesDictionary24.size(languageArray45);
        io.resourcepool.generator.Query.Builder builder47 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary48 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary49 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray50 = new io.resourcepool.model.Language[] {};
        int int51 = surnamesDictionary49.size(languageArray50);
        int int52 = givenNamesDictionary48.size(languageArray50);
        io.resourcepool.generator.Query.Builder builder53 = builder47.languages(languageArray50);
        int int54 = surnamesDictionary24.size(languageArray50);
        io.resourcepool.generator.Query query55 = new io.resourcepool.generator.Query((int) '4', languageArray50);
        int int56 = fortunesDictionary0.size(languageArray50);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary57 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary58 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray59 = new io.resourcepool.model.Language[] {};
        int int60 = surnamesDictionary58.size(languageArray59);
        int int61 = givenNamesDictionary57.size(languageArray59);
        java.util.List<io.resourcepool.model.GivenName> givenNameList63 = givenNamesDictionary57.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary64 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray65 = new io.resourcepool.model.Language[] {};
        int int66 = surnamesDictionary64.size(languageArray65);
        int int67 = givenNamesDictionary57.size(languageArray65);
        int int68 = givenNamesDictionary57.size();
        java.util.List<io.resourcepool.model.GivenName> givenNameList70 = givenNamesDictionary57.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary71 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList73 = surnamesDictionary71.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary75 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray76 = new io.resourcepool.model.Language[] {};
        int int77 = surnamesDictionary75.size(languageArray76);
        io.resourcepool.model.Language language78 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language79 = io.resourcepool.model.Language.random();
        java.lang.String str80 = language79.getLocaleCode();
        io.resourcepool.model.Language[] languageArray81 = new io.resourcepool.model.Language[] { language78, language79 };
        int int82 = surnamesDictionary75.size(languageArray81);
        io.resourcepool.generator.Query query83 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray81);
        java.util.List<java.lang.String> strList84 = surnamesDictionary71.pick(query83);
        java.util.List<io.resourcepool.model.GivenName> givenNameList85 = givenNamesDictionary57.pick(query83);
        java.util.List<io.resourcepool.model.Fortune> fortuneList86 = fortunesDictionary0.pick(query83);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11812 + "'", int1 == 11812);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(languageArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(fortuneList11);
        org.junit.Assert.assertNotNull(fortune12);
        org.junit.Assert.assertNotNull(languageArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + language16 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language16.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language17 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language17.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(languageArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(fortune22);
        org.junit.Assert.assertNotNull(languageArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + language27 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language27.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language28 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language28.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "en" + "'", str29, "en");
        org.junit.Assert.assertNotNull(languageArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + language33 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language33.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!46" + "'", str35, "hi!46");
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!66" + "'", str39, "hi!66");
        org.junit.Assert.assertTrue("'" + language40 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language40.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertTrue("'" + language42 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language42.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language43 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language43.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertNotNull(languageArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50000 + "'", int46 == 50000);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(languageArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(languageArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(givenNameList63);
        org.junit.Assert.assertNotNull(languageArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4305 + "'", int68 == 4305);
        org.junit.Assert.assertNotNull(givenNameList70);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(languageArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + language78 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language78.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language79 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language79.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "en" + "'", str80, "en");
        org.junit.Assert.assertNotNull(languageArray81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20000 + "'", int82 == 20000);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(givenNameList85);
        org.junit.Assert.assertNotNull(fortuneList86);
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary0 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary1 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray2 = new io.resourcepool.model.Language[] {};
        int int3 = surnamesDictionary1.size(languageArray2);
        int int4 = givenNamesDictionary0.size(languageArray2);
        java.util.List<io.resourcepool.model.GivenName> givenNameList6 = givenNamesDictionary0.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary7 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray8 = new io.resourcepool.model.Language[] {};
        int int9 = surnamesDictionary7.size(languageArray8);
        int int10 = givenNamesDictionary0.size(languageArray8);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary11 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList13 = surnamesDictionary11.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary14 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray15 = new io.resourcepool.model.Language[] {};
        int int16 = surnamesDictionary14.size(languageArray15);
        int int17 = surnamesDictionary11.size(languageArray15);
        int int18 = givenNamesDictionary0.size(languageArray15);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary19 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary20 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] {};
        int int22 = surnamesDictionary20.size(languageArray21);
        int int23 = givenNamesDictionary19.size(languageArray21);
        java.util.List<io.resourcepool.model.GivenName> givenNameList25 = givenNamesDictionary19.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList27 = givenNamesDictionary19.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary28 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray29 = new io.resourcepool.model.Language[] {};
        int int30 = surnamesDictionary28.size(languageArray29);
        io.resourcepool.model.Language language31 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language32 = io.resourcepool.model.Language.random();
        java.lang.String str33 = language32.getLocaleCode();
        io.resourcepool.model.Language[] languageArray34 = new io.resourcepool.model.Language[] { language31, language32 };
        int int35 = surnamesDictionary28.size(languageArray34);
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.random();
        java.lang.String str38 = language37.getLocaleCode();
        java.lang.String str39 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language37);
        io.resourcepool.model.Language language41 = io.resourcepool.model.Language.random();
        java.lang.String str42 = language41.getLocaleCode();
        java.lang.String str43 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language41);
        io.resourcepool.model.Language language44 = io.resourcepool.model.Language.random();
        java.lang.String str45 = language44.getLocaleCode();
        io.resourcepool.model.Language language46 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language47 = io.resourcepool.model.Language.random();
        java.lang.String str48 = language47.getLocaleCode();
        io.resourcepool.model.Language[] languageArray49 = new io.resourcepool.model.Language[] { language37, language41, language44, language46, language47 };
        int int50 = surnamesDictionary28.size(languageArray49);
        io.resourcepool.generator.Query.Builder builder51 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary52 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary53 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray54 = new io.resourcepool.model.Language[] {};
        int int55 = surnamesDictionary53.size(languageArray54);
        int int56 = givenNamesDictionary52.size(languageArray54);
        io.resourcepool.generator.Query.Builder builder57 = builder51.languages(languageArray54);
        int int58 = surnamesDictionary28.size(languageArray54);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary60 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray61 = new io.resourcepool.model.Language[] {};
        int int62 = surnamesDictionary60.size(languageArray61);
        io.resourcepool.model.Language language63 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language64 = io.resourcepool.model.Language.random();
        java.lang.String str65 = language64.getLocaleCode();
        io.resourcepool.model.Language[] languageArray66 = new io.resourcepool.model.Language[] { language63, language64 };
        int int67 = surnamesDictionary60.size(languageArray66);
        io.resourcepool.generator.Query query68 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray66);
        java.util.List<java.lang.String> strList69 = surnamesDictionary28.pick(query68);
        io.resourcepool.model.Language[] languageArray70 = query68.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList71 = givenNamesDictionary19.pick(query68);
        java.util.List<io.resourcepool.model.GivenName> givenNameList72 = givenNamesDictionary0.pick(query68);
        io.resourcepool.model.GivenName givenName73 = givenNamesDictionary0.pick();
        io.resourcepool.model.Gender gender74 = givenName73.gender;
        org.junit.Assert.assertNotNull(languageArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(givenNameList6);
        org.junit.Assert.assertNotNull(languageArray8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(givenNameList25);
        org.junit.Assert.assertNotNull(givenNameList27);
        org.junit.Assert.assertNotNull(languageArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + language31 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language31.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language32 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language32.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(languageArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!77" + "'", str39, "hi!77");
        org.junit.Assert.assertTrue("'" + language41 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language41.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en" + "'", str42, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!79" + "'", str43, "hi!79");
        org.junit.Assert.assertTrue("'" + language44 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language44.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en" + "'", str45, "en");
        org.junit.Assert.assertTrue("'" + language46 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language46.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language47 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language47.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertNotNull(languageArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50000 + "'", int50 == 50000);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(languageArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(languageArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + language63 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language63.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language64 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language64.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNotNull(languageArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20000 + "'", int67 == 20000);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(languageArray70);
        org.junit.Assert.assertNotNull(givenNameList71);
        org.junit.Assert.assertNotNull(givenNameList72);
        org.junit.Assert.assertNotNull(givenName73);
        org.junit.Assert.assertTrue("'" + gender74 + "' != '" + io.resourcepool.model.Gender.FEMALE + "'", gender74.equals(io.resourcepool.model.Gender.FEMALE));
    }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        java.util.List<io.resourcepool.model.Fortune> fortuneList2 = simpleFortuneGenerator0.nextFortunes((int) (short) -1);
        java.util.List<io.resourcepool.model.Fortune> fortuneList4 = simpleFortuneGenerator0.nextFortunes((int) (short) 100);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary5 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary6 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray7 = new io.resourcepool.model.Language[] {};
        int int8 = surnamesDictionary6.size(languageArray7);
        int int9 = givenNamesDictionary5.size(languageArray7);
        java.util.List<io.resourcepool.model.GivenName> givenNameList11 = givenNamesDictionary5.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary12 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray13 = new io.resourcepool.model.Language[] {};
        int int14 = surnamesDictionary12.size(languageArray13);
        int int15 = givenNamesDictionary5.size(languageArray13);
        int int16 = givenNamesDictionary5.size();
        java.util.List<io.resourcepool.model.GivenName> givenNameList18 = givenNamesDictionary5.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary20 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray21 = new io.resourcepool.model.Language[] {};
        int int22 = surnamesDictionary20.size(languageArray21);
        io.resourcepool.model.Language language23 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language24 = io.resourcepool.model.Language.random();
        java.lang.String str25 = language24.getLocaleCode();
        io.resourcepool.model.Language[] languageArray26 = new io.resourcepool.model.Language[] { language23, language24 };
        int int27 = surnamesDictionary20.size(languageArray26);
        io.resourcepool.model.Language language29 = io.resourcepool.model.Language.random();
        java.lang.String str30 = language29.getLocaleCode();
        java.lang.String str31 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language29);
        io.resourcepool.model.Language language33 = io.resourcepool.model.Language.random();
        java.lang.String str34 = language33.getLocaleCode();
        java.lang.String str35 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language33);
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.random();
        java.lang.String str37 = language36.getLocaleCode();
        io.resourcepool.model.Language language38 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language39 = io.resourcepool.model.Language.random();
        java.lang.String str40 = language39.getLocaleCode();
        io.resourcepool.model.Language[] languageArray41 = new io.resourcepool.model.Language[] { language29, language33, language36, language38, language39 };
        int int42 = surnamesDictionary20.size(languageArray41);
        io.resourcepool.generator.Query.Builder builder43 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary44 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary45 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray46 = new io.resourcepool.model.Language[] {};
        int int47 = surnamesDictionary45.size(languageArray46);
        int int48 = givenNamesDictionary44.size(languageArray46);
        io.resourcepool.generator.Query.Builder builder49 = builder43.languages(languageArray46);
        int int50 = surnamesDictionary20.size(languageArray46);
        io.resourcepool.generator.Query query51 = new io.resourcepool.generator.Query((int) '4', languageArray46);
        java.util.List<io.resourcepool.model.GivenName> givenNameList52 = givenNamesDictionary5.pick(query51);
        java.util.List<io.resourcepool.model.Fortune> fortuneList53 = simpleFortuneGenerator0.nextFortunes(query51);
        int int54 = query51.count;
        org.junit.Assert.assertNotNull(fortuneList2);
        org.junit.Assert.assertNotNull(fortuneList4);
        org.junit.Assert.assertNotNull(languageArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(givenNameList11);
        org.junit.Assert.assertNotNull(languageArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4305 + "'", int16 == 4305);
        org.junit.Assert.assertNotNull(givenNameList18);
        org.junit.Assert.assertNotNull(languageArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + language23 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language23.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language24 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language24.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(languageArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertTrue("'" + language29 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language29.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!89" + "'", str31, "hi!89");
        org.junit.Assert.assertTrue("'" + language33 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language33.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!33" + "'", str35, "hi!33");
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertTrue("'" + language38 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language38.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language39 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language39.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "en" + "'", str40, "en");
        org.junit.Assert.assertNotNull(languageArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50000 + "'", int42 == 50000);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(languageArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(givenNameList52);
        org.junit.Assert.assertNotNull(fortuneList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
    }

    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary1 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray2 = new io.resourcepool.model.Language[] {};
        int int3 = surnamesDictionary1.size(languageArray2);
        io.resourcepool.model.Language language4 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language5 = io.resourcepool.model.Language.random();
        java.lang.String str6 = language5.getLocaleCode();
        io.resourcepool.model.Language[] languageArray7 = new io.resourcepool.model.Language[] { language4, language5 };
        int int8 = surnamesDictionary1.size(languageArray7);
        io.resourcepool.model.Language language10 = io.resourcepool.model.Language.random();
        java.lang.String str11 = language10.getLocaleCode();
        java.lang.String str12 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language10);
        io.resourcepool.model.Language language14 = io.resourcepool.model.Language.random();
        java.lang.String str15 = language14.getLocaleCode();
        java.lang.String str16 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language14);
        io.resourcepool.model.Language language17 = io.resourcepool.model.Language.random();
        java.lang.String str18 = language17.getLocaleCode();
        io.resourcepool.model.Language language19 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language20 = io.resourcepool.model.Language.random();
        java.lang.String str21 = language20.getLocaleCode();
        io.resourcepool.model.Language[] languageArray22 = new io.resourcepool.model.Language[] { language10, language14, language17, language19, language20 };
        int int23 = surnamesDictionary1.size(languageArray22);
        io.resourcepool.generator.Query.Builder builder24 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary25 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary26 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray27 = new io.resourcepool.model.Language[] {};
        int int28 = surnamesDictionary26.size(languageArray27);
        int int29 = givenNamesDictionary25.size(languageArray27);
        io.resourcepool.generator.Query.Builder builder30 = builder24.languages(languageArray27);
        int int31 = surnamesDictionary1.size(languageArray27);
        io.resourcepool.generator.Query query32 = new io.resourcepool.generator.Query((int) '4', languageArray27);
        int int33 = query32.count;
        org.junit.Assert.assertNotNull(languageArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + language4 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language4.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language5 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language5.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(languageArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + language10 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language10.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!61" + "'", str12, "hi!61");
        org.junit.Assert.assertTrue("'" + language14 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language14.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lighthi!" + "'", str16, "Lighthi!");
        org.junit.Assert.assertTrue("'" + language17 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language17.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertTrue("'" + language19 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language19.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language20 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language20.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en" + "'", str21, "en");
        org.junit.Assert.assertNotNull(languageArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50000 + "'", int23 == 50000);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(languageArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
    }

    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test209");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        java.util.List<io.resourcepool.model.Fortune> fortuneList2 = simpleFortuneGenerator0.nextFortunes(1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.random();
        java.lang.String str4 = language3.getLocaleCode();
        io.resourcepool.model.Fortune fortune5 = simpleFortuneGenerator0.nextFortune(language3);
        java.util.List<io.resourcepool.model.Fortune> fortuneList7 = simpleFortuneGenerator0.nextFortunes((int) (short) 0);
        java.util.List<io.resourcepool.model.Fortune> fortuneList9 = simpleFortuneGenerator0.nextFortunes((int) '4');
        io.resourcepool.model.Fortune fortune10 = simpleFortuneGenerator0.nextFortune();
        io.resourcepool.model.Language language12 = io.resourcepool.model.Language.random();
        java.lang.String str13 = language12.getLocaleCode();
        java.lang.String str14 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language12);
        java.lang.String str15 = language12.getLocaleCode();
        java.util.List<io.resourcepool.model.Fortune> fortuneList16 = io.resourcepool.dictionary.loader.FortuneLoader.load(language12);
        io.resourcepool.model.Fortune fortune17 = simpleFortuneGenerator0.nextFortune(language12);
        io.resourcepool.generator.impl.SimpleNameGenerator simpleNameGenerator18 = new io.resourcepool.generator.impl.SimpleNameGenerator();
        java.util.List<java.lang.String> strList20 = simpleNameGenerator18.nextSurnames(1);
        java.util.List<io.resourcepool.model.GivenName> givenNameList22 = simpleNameGenerator18.nextGivenNames(100);
        java.util.List<java.lang.String> strList24 = simpleNameGenerator18.nextSurnames((int) (byte) 1);
        java.lang.String str25 = simpleNameGenerator18.nextSurname();
        java.util.List<java.lang.String> strList27 = simpleNameGenerator18.nextSurnames(1);
        java.util.List<java.lang.String> strList29 = simpleNameGenerator18.nextSurnames(0);
        java.lang.String str30 = simpleNameGenerator18.nextNickname();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary31 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary33 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray34 = new io.resourcepool.model.Language[] {};
        int int35 = surnamesDictionary33.size(languageArray34);
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.random();
        java.lang.String str38 = language37.getLocaleCode();
        io.resourcepool.model.Language[] languageArray39 = new io.resourcepool.model.Language[] { language36, language37 };
        int int40 = surnamesDictionary33.size(languageArray39);
        io.resourcepool.generator.Query query41 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray39);
        java.util.List<java.lang.String> strList42 = surnamesDictionary31.pick(query41);
        java.util.List<io.resourcepool.model.FullName> fullNameList43 = simpleNameGenerator18.nextNames(query41);
        java.util.List<io.resourcepool.model.Fortune> fortuneList44 = simpleFortuneGenerator0.nextFortunes(query41);
        org.junit.Assert.assertNotNull(fortuneList2);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(fortune5);
        org.junit.Assert.assertNotNull(fortuneList7);
        org.junit.Assert.assertNotNull(fortuneList9);
        org.junit.Assert.assertNotNull(fortune10);
        org.junit.Assert.assertTrue("'" + language12 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language12.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!83" + "'", str14, "hi!83");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(fortuneList16);
        org.junit.Assert.assertNotNull(fortune17);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(givenNameList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Shaull" + "'", str25, "Shaull");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Mamie23" + "'", str30, "Mamie23");
        org.junit.Assert.assertNotNull(languageArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertNotNull(languageArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(fullNameList43);
        org.junit.Assert.assertNotNull(fortuneList44);
    }

    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test218");
        io.resourcepool.model.Language language1 = io.resourcepool.model.Language.random();
        java.lang.String str2 = language1.getLocaleCode();
        java.lang.String str3 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language1);
        java.lang.String str4 = language1.getLocaleCode();
        java.util.List<io.resourcepool.model.Fortune> fortuneList5 = io.resourcepool.dictionary.loader.FortuneLoader.load(language1);
        java.util.List<io.resourcepool.model.Fortune> fortuneList6 = io.resourcepool.dictionary.loader.FortuneLoader.load(language1);
        org.junit.Assert.assertTrue("'" + language1 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language1.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!43" + "'", str3, "hi!43");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(fortuneList5);
        org.junit.Assert.assertNotNull(fortuneList6);
    }

    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test225");
        io.resourcepool.generator.impl.SimpleFortuneGenerator simpleFortuneGenerator0 = new io.resourcepool.generator.impl.SimpleFortuneGenerator();
        java.util.List<io.resourcepool.model.Fortune> fortuneList2 = simpleFortuneGenerator0.nextFortunes(1);
        io.resourcepool.model.Language language3 = io.resourcepool.model.Language.random();
        java.lang.String str4 = language3.getLocaleCode();
        io.resourcepool.model.Fortune fortune5 = simpleFortuneGenerator0.nextFortune(language3);
        java.util.List<io.resourcepool.model.Fortune> fortuneList7 = simpleFortuneGenerator0.nextFortunes((int) (short) 0);
        java.util.List<io.resourcepool.model.Fortune> fortuneList9 = simpleFortuneGenerator0.nextFortunes((int) '4');
        io.resourcepool.model.Fortune fortune10 = simpleFortuneGenerator0.nextFortune();
        io.resourcepool.model.Language language12 = io.resourcepool.model.Language.random();
        java.lang.String str13 = language12.getLocaleCode();
        java.lang.String str14 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language12);
        java.lang.String str15 = language12.getLocaleCode();
        java.util.List<io.resourcepool.model.Fortune> fortuneList16 = io.resourcepool.dictionary.loader.FortuneLoader.load(language12);
        io.resourcepool.model.Fortune fortune17 = simpleFortuneGenerator0.nextFortune(language12);
        io.resourcepool.model.Fortune fortune18 = simpleFortuneGenerator0.nextFortune();
        org.junit.Assert.assertNotNull(fortuneList2);
        org.junit.Assert.assertTrue("'" + language3 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language3.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(fortune5);
        org.junit.Assert.assertNotNull(fortuneList7);
        org.junit.Assert.assertNotNull(fortuneList9);
        org.junit.Assert.assertNotNull(fortune10);
        org.junit.Assert.assertTrue("'" + language12 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language12.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!19" + "'", str14, "hi!19");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(fortuneList16);
        org.junit.Assert.assertNotNull(fortune17);
        org.junit.Assert.assertNotNull(fortune18);
    }

    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test232");
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary0 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList2 = surnamesDictionary0.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary3 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray4 = new io.resourcepool.model.Language[] {};
        int int5 = surnamesDictionary3.size(languageArray4);
        int int6 = surnamesDictionary0.size(languageArray4);
        java.lang.String str7 = surnamesDictionary0.pick();
        java.lang.String str8 = surnamesDictionary0.pick();
        int int9 = surnamesDictionary0.size();
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary10 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int11 = fortunesDictionary10.size();
        io.resourcepool.generator.Query.Builder builder12 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary13 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary14 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray15 = new io.resourcepool.model.Language[] {};
        int int16 = surnamesDictionary14.size(languageArray15);
        int int17 = givenNamesDictionary13.size(languageArray15);
        io.resourcepool.generator.Query.Builder builder18 = builder12.languages(languageArray15);
        int int19 = fortunesDictionary10.size(languageArray15);
        java.util.List<io.resourcepool.model.Fortune> fortuneList21 = fortunesDictionary10.pick(2000);
        io.resourcepool.model.Fortune fortune22 = fortunesDictionary10.pick();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary23 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray24 = new io.resourcepool.model.Language[] {};
        int int25 = surnamesDictionary23.size(languageArray24);
        io.resourcepool.model.Language language26 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language27 = io.resourcepool.model.Language.random();
        java.lang.String str28 = language27.getLocaleCode();
        io.resourcepool.model.Language[] languageArray29 = new io.resourcepool.model.Language[] { language26, language27 };
        int int30 = surnamesDictionary23.size(languageArray29);
        int int31 = fortunesDictionary10.size(languageArray29);
        io.resourcepool.model.Fortune fortune32 = fortunesDictionary10.pick();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary34 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray35 = new io.resourcepool.model.Language[] {};
        int int36 = surnamesDictionary34.size(languageArray35);
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language38 = io.resourcepool.model.Language.random();
        java.lang.String str39 = language38.getLocaleCode();
        io.resourcepool.model.Language[] languageArray40 = new io.resourcepool.model.Language[] { language37, language38 };
        int int41 = surnamesDictionary34.size(languageArray40);
        io.resourcepool.model.Language language43 = io.resourcepool.model.Language.random();
        java.lang.String str44 = language43.getLocaleCode();
        java.lang.String str45 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language43);
        io.resourcepool.model.Language language47 = io.resourcepool.model.Language.random();
        java.lang.String str48 = language47.getLocaleCode();
        java.lang.String str49 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language47);
        io.resourcepool.model.Language language50 = io.resourcepool.model.Language.random();
        java.lang.String str51 = language50.getLocaleCode();
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language53 = io.resourcepool.model.Language.random();
        java.lang.String str54 = language53.getLocaleCode();
        io.resourcepool.model.Language[] languageArray55 = new io.resourcepool.model.Language[] { language43, language47, language50, language52, language53 };
        int int56 = surnamesDictionary34.size(languageArray55);
        io.resourcepool.generator.Query.Builder builder57 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary58 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary59 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray60 = new io.resourcepool.model.Language[] {};
        int int61 = surnamesDictionary59.size(languageArray60);
        int int62 = givenNamesDictionary58.size(languageArray60);
        io.resourcepool.generator.Query.Builder builder63 = builder57.languages(languageArray60);
        int int64 = surnamesDictionary34.size(languageArray60);
        io.resourcepool.generator.Query query65 = new io.resourcepool.generator.Query((int) '4', languageArray60);
        int int66 = fortunesDictionary10.size(languageArray60);
        int int67 = surnamesDictionary0.size(languageArray60);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(languageArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shaull" + "'", str7, "Shaull");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shaull" + "'", str8, "Shaull");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20000 + "'", int9 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11812 + "'", int11 == 11812);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(languageArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(fortuneList21);
        org.junit.Assert.assertNotNull(fortune22);
        org.junit.Assert.assertNotNull(languageArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + language26 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language26.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language27 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language27.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertNotNull(languageArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertNotNull(fortune32);
        org.junit.Assert.assertNotNull(languageArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language38 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language38.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertNotNull(languageArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20000 + "'", int41 == 20000);
        org.junit.Assert.assertTrue("'" + language43 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language43.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!78" + "'", str45, "hi!78");
        org.junit.Assert.assertTrue("'" + language47 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language47.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!32" + "'", str49, "hi!32");
        org.junit.Assert.assertTrue("'" + language50 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language50.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language53 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language53.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
        org.junit.Assert.assertNotNull(languageArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50000 + "'", int56 == 50000);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(languageArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        io.resourcepool.generator.impl.SimpleNameGenerator simpleNameGenerator0 = new io.resourcepool.generator.impl.SimpleNameGenerator();
        java.util.List<java.lang.String> strList2 = simpleNameGenerator0.nextSurnames(1);
        java.util.List<io.resourcepool.model.GivenName> givenNameList4 = simpleNameGenerator0.nextGivenNames(100);
        java.util.List<java.lang.String> strList6 = simpleNameGenerator0.nextSurnames((int) (byte) 0);
        io.resourcepool.model.GivenName givenName7 = simpleNameGenerator0.nextGivenName();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary8 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary9 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray10 = new io.resourcepool.model.Language[] {};
        int int11 = surnamesDictionary9.size(languageArray10);
        int int12 = givenNamesDictionary8.size(languageArray10);
        java.util.List<io.resourcepool.model.GivenName> givenNameList14 = givenNamesDictionary8.pick((int) ' ');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary15 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray16 = new io.resourcepool.model.Language[] {};
        int int17 = surnamesDictionary15.size(languageArray16);
        int int18 = givenNamesDictionary8.size(languageArray16);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary19 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        java.util.List<java.lang.String> strList21 = surnamesDictionary19.pick((int) 'a');
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary22 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray23 = new io.resourcepool.model.Language[] {};
        int int24 = surnamesDictionary22.size(languageArray23);
        int int25 = surnamesDictionary19.size(languageArray23);
        int int26 = givenNamesDictionary8.size(languageArray23);
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary27 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary28 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray29 = new io.resourcepool.model.Language[] {};
        int int30 = surnamesDictionary28.size(languageArray29);
        int int31 = givenNamesDictionary27.size(languageArray29);
        java.util.List<io.resourcepool.model.GivenName> givenNameList33 = givenNamesDictionary27.pick((int) ' ');
        java.util.List<io.resourcepool.model.GivenName> givenNameList35 = givenNamesDictionary27.pick((int) (short) 100);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary36 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray37 = new io.resourcepool.model.Language[] {};
        int int38 = surnamesDictionary36.size(languageArray37);
        io.resourcepool.model.Language language39 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language40 = io.resourcepool.model.Language.random();
        java.lang.String str41 = language40.getLocaleCode();
        io.resourcepool.model.Language[] languageArray42 = new io.resourcepool.model.Language[] { language39, language40 };
        int int43 = surnamesDictionary36.size(languageArray42);
        io.resourcepool.model.Language language45 = io.resourcepool.model.Language.random();
        java.lang.String str46 = language45.getLocaleCode();
        java.lang.String str47 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language45);
        io.resourcepool.model.Language language49 = io.resourcepool.model.Language.random();
        java.lang.String str50 = language49.getLocaleCode();
        java.lang.String str51 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language49);
        io.resourcepool.model.Language language52 = io.resourcepool.model.Language.random();
        java.lang.String str53 = language52.getLocaleCode();
        io.resourcepool.model.Language language54 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language55 = io.resourcepool.model.Language.random();
        java.lang.String str56 = language55.getLocaleCode();
        io.resourcepool.model.Language[] languageArray57 = new io.resourcepool.model.Language[] { language45, language49, language52, language54, language55 };
        int int58 = surnamesDictionary36.size(languageArray57);
        io.resourcepool.generator.Query.Builder builder59 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary60 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary61 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray62 = new io.resourcepool.model.Language[] {};
        int int63 = surnamesDictionary61.size(languageArray62);
        int int64 = givenNamesDictionary60.size(languageArray62);
        io.resourcepool.generator.Query.Builder builder65 = builder59.languages(languageArray62);
        int int66 = surnamesDictionary36.size(languageArray62);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary68 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray69 = new io.resourcepool.model.Language[] {};
        int int70 = surnamesDictionary68.size(languageArray69);
        io.resourcepool.model.Language language71 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language72 = io.resourcepool.model.Language.random();
        java.lang.String str73 = language72.getLocaleCode();
        io.resourcepool.model.Language[] languageArray74 = new io.resourcepool.model.Language[] { language71, language72 };
        int int75 = surnamesDictionary68.size(languageArray74);
        io.resourcepool.generator.Query query76 = new io.resourcepool.generator.Query((int) (byte) 0, languageArray74);
        java.util.List<java.lang.String> strList77 = surnamesDictionary36.pick(query76);
        io.resourcepool.model.Language[] languageArray78 = query76.languages;
        java.util.List<io.resourcepool.model.GivenName> givenNameList79 = givenNamesDictionary27.pick(query76);
        java.util.List<io.resourcepool.model.GivenName> givenNameList80 = givenNamesDictionary8.pick(query76);
        java.util.List<io.resourcepool.model.FullName> fullNameList81 = simpleNameGenerator0.nextNames(query76);
        java.lang.String str82 = simpleNameGenerator0.nextNickname();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(givenNameList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(givenName7);
        org.junit.Assert.assertNotNull(languageArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(givenNameList14);
        org.junit.Assert.assertNotNull(languageArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(givenNameList33);
        org.junit.Assert.assertNotNull(givenNameList35);
        org.junit.Assert.assertNotNull(languageArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + language39 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language39.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language40 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language40.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertNotNull(languageArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertTrue("'" + language45 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language45.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!11" + "'", str47, "hi!11");
        org.junit.Assert.assertTrue("'" + language49 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language49.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en" + "'", str50, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!16" + "'", str51, "hi!16");
        org.junit.Assert.assertTrue("'" + language52 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language52.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertTrue("'" + language54 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language54.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language55 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language55.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertNotNull(languageArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50000 + "'", int58 == 50000);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(languageArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(languageArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + language71 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language71.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language72 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language72.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en" + "'", str73, "en");
        org.junit.Assert.assertNotNull(languageArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageArray78);
        org.junit.Assert.assertNotNull(givenNameList79);
        org.junit.Assert.assertNotNull(givenNameList80);
        org.junit.Assert.assertNotNull(fullNameList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Mamie23" + "'", str82, "Mamie23");
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        io.resourcepool.generator.Query.Builder builder1 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary2 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary3 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray4 = new io.resourcepool.model.Language[] {};
        int int5 = surnamesDictionary3.size(languageArray4);
        int int6 = givenNamesDictionary2.size(languageArray4);
        io.resourcepool.generator.Query.Builder builder7 = builder1.languages(languageArray4);
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary8 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int9 = fortunesDictionary8.size();
        io.resourcepool.generator.Query.Builder builder10 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary11 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary12 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray13 = new io.resourcepool.model.Language[] {};
        int int14 = surnamesDictionary12.size(languageArray13);
        int int15 = givenNamesDictionary11.size(languageArray13);
        io.resourcepool.generator.Query.Builder builder16 = builder10.languages(languageArray13);
        int int17 = fortunesDictionary8.size(languageArray13);
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary18 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray19 = new io.resourcepool.model.Language[] {};
        int int20 = surnamesDictionary18.size(languageArray19);
        io.resourcepool.model.Language language21 = io.resourcepool.model.Language.ENGLISH;
        io.resourcepool.model.Language language22 = io.resourcepool.model.Language.random();
        java.lang.String str23 = language22.getLocaleCode();
        io.resourcepool.model.Language[] languageArray24 = new io.resourcepool.model.Language[] { language21, language22 };
        int int25 = surnamesDictionary18.size(languageArray24);
        io.resourcepool.model.Language language27 = io.resourcepool.model.Language.random();
        java.lang.String str28 = language27.getLocaleCode();
        java.lang.String str29 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language27);
        io.resourcepool.model.Language language31 = io.resourcepool.model.Language.random();
        java.lang.String str32 = language31.getLocaleCode();
        java.lang.String str33 = io.resourcepool.util.NicknameCreator.fromFirstName("hi!", language31);
        io.resourcepool.model.Language language34 = io.resourcepool.model.Language.random();
        java.lang.String str35 = language34.getLocaleCode();
        io.resourcepool.model.Language language36 = io.resourcepool.model.Language.random();
        io.resourcepool.model.Language language37 = io.resourcepool.model.Language.random();
        java.lang.String str38 = language37.getLocaleCode();
        io.resourcepool.model.Language[] languageArray39 = new io.resourcepool.model.Language[] { language27, language31, language34, language36, language37 };
        int int40 = surnamesDictionary18.size(languageArray39);
        int int41 = fortunesDictionary8.size(languageArray39);
        io.resourcepool.generator.Query.Builder builder42 = builder1.languages(languageArray39);
        io.resourcepool.dictionary.impl.FortunesDictionary fortunesDictionary43 = new io.resourcepool.dictionary.impl.FortunesDictionary();
        int int44 = fortunesDictionary43.size();
        io.resourcepool.generator.Query.Builder builder45 = io.resourcepool.generator.Query.builder();
        io.resourcepool.dictionary.impl.GivenNamesDictionary givenNamesDictionary46 = new io.resourcepool.dictionary.impl.GivenNamesDictionary();
        io.resourcepool.dictionary.impl.SurnamesDictionary surnamesDictionary47 = new io.resourcepool.dictionary.impl.SurnamesDictionary();
        io.resourcepool.model.Language[] languageArray48 = new io.resourcepool.model.Language[] {};
        int int49 = surnamesDictionary47.size(languageArray48);
        int int50 = givenNamesDictionary46.size(languageArray48);
        io.resourcepool.generator.Query.Builder builder51 = builder45.languages(languageArray48);
        int int52 = fortunesDictionary43.size(languageArray48);
        io.resourcepool.generator.Query.Builder builder53 = builder42.languages(languageArray48);
        io.resourcepool.generator.Query query54 = new io.resourcepool.generator.Query((int) ' ', languageArray48);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(languageArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11812 + "'", int9 == 11812);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(languageArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(languageArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + language21 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language21.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language22 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language22.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
        org.junit.Assert.assertNotNull(languageArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20000 + "'", int25 == 20000);
        org.junit.Assert.assertTrue("'" + language27 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language27.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!53" + "'", str29, "hi!53");
        org.junit.Assert.assertTrue("'" + language31 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language31.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en" + "'", str32, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!31" + "'", str33, "hi!31");
        org.junit.Assert.assertTrue("'" + language34 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language34.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en" + "'", str35, "en");
        org.junit.Assert.assertTrue("'" + language36 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language36.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertTrue("'" + language37 + "' != '" + io.resourcepool.model.Language.ENGLISH + "'", language37.equals(io.resourcepool.model.Language.ENGLISH));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertNotNull(languageArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50000 + "'", int40 == 50000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50000 + "'", int41 == 50000);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11812 + "'", int44 == 11812);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(languageArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(builder53);
    }
bennidi-lab, length: 13

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition2 = new net.engio.pips.lab.workload.StartCondition(workload1);
        workload1.started();
        int int4 = workload1.getParallelUnits();
        long long5 = workload1.getExecutionTime();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1698796366406L) + "'", long5 == (-1698796366406L));
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        workload1.started();
        long long3 = workload1.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification4 = workload1.new DurationSpecification();
        net.engio.pips.lab.workload.Workload workload6 = durationSpecification4.repetitions((int) '#');
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698796370529L + "'", long3 == 1698796370529L);
        org.junit.Assert.assertNotNull(workload6);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        workload1.started();
        long long3 = workload1.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification4 = workload1.new DurationSpecification();
        java.util.concurrent.TimeUnit timeUnit6 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.engio.pips.lab.workload.Workload workload7 = durationSpecification4.lasts((int) 'a', timeUnit6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal timeout condition:97null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698796372256L + "'", long3 == 1698796372256L);
    }

    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        net.engio.pips.lab.workload.ExecutionHandler executionHandler0 = null;
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper1 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper2 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.Benchmark benchmark4 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList5 = benchmark4.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter6 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter7 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter8 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray9 = new net.engio.pips.reports.IReporter[] { cSVFileExporter6, cSVFileExporter7, cSVFileExporter8 };
        benchmark4.generateReports(iReporterArray9);
        net.engio.pips.lab.ExecutionContext executionContext11 = new net.engio.pips.lab.ExecutionContext(benchmark4);
        net.engio.pips.lab.LabException.ErrorCode errorCode13 = net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10, errorCode13, 1.0f, '4' };
        net.engio.pips.lab.ExecutionContext executionContext17 = executionContext11.bindAll(objArray16);
        java.util.Collection<org.jfree.data.xy.AbstractIntervalXYDataset> abstractIntervalXYDatasetCollection19 = executionContext17.getMatching("run 1 times");
        net.engio.pips.lab.ExecutionContext executionContext20 = executionContext17.getChild();
        executionHandlerWrapper2.handle(executionContext17);
        executionContext17.finished();
        executionContext17.started();
        net.engio.pips.lab.workload.Workload workload26 = new net.engio.pips.lab.workload.Workload("");
        workload26.started();
        long long28 = workload26.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification29 = workload26.new DurationSpecification();
        net.engio.pips.lab.ExecutionContext executionContext30 = executionContext17.bind("Base path", (java.lang.Object) workload26);
        boolean boolean31 = executionContext17.isFinished();
        org.junit.Assert.assertNotNull(iDataCollectorList5);
        org.junit.Assert.assertNotNull(iReporterArray9);
        org.junit.Assert.assertTrue("'" + errorCode13 + "' != '" + net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart + "'", errorCode13.equals(net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertNotNull(executionContext17);
        org.junit.Assert.assertNotNull(abstractIntervalXYDatasetCollection19);
        org.junit.Assert.assertNotNull(executionContext20);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1698796373213L + "'", long28 == 1698796373213L);
        org.junit.Assert.assertNotNull(executionContext30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        net.engio.pips.lab.Benchmark benchmark1 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList2 = benchmark1.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter3 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter4 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter5 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray6 = new net.engio.pips.reports.IReporter[] { cSVFileExporter3, cSVFileExporter4, cSVFileExporter5 };
        benchmark1.generateReports(iReporterArray6);
        net.engio.pips.lab.ExecutionContext executionContext8 = new net.engio.pips.lab.ExecutionContext(benchmark1);
        net.engio.pips.lab.LabException.ErrorCode errorCode10 = net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart;
        java.lang.Object[] objArray13 = new java.lang.Object[] { 10, errorCode10, 1.0f, '4' };
        net.engio.pips.lab.ExecutionContext executionContext14 = executionContext8.bindAll(objArray13);
        net.engio.pips.lab.ExecutionContext executionContext15 = executionContext14.getChild();
        executionContext14.finished();
        net.engio.pips.lab.ExecutionContext executionContext17 = executionContext14.getChild();
        long long18 = executionContext14.getExecutionTime();
        org.junit.Assert.assertNotNull(iDataCollectorList2);
        org.junit.Assert.assertNotNull(iReporterArray6);
        org.junit.Assert.assertTrue("'" + errorCode10 + "' != '" + net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart + "'", errorCode10.equals(net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertNotNull(executionContext14);
        org.junit.Assert.assertNotNull(executionContext15);
        org.junit.Assert.assertNotNull(executionContext17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698796375091L + "'", long18 == 1698796375091L);
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        net.engio.pips.lab.workload.ExecutionHandler executionHandler0 = null;
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper1 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper2 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.Benchmark benchmark4 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList5 = benchmark4.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter6 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter7 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter8 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray9 = new net.engio.pips.reports.IReporter[] { cSVFileExporter6, cSVFileExporter7, cSVFileExporter8 };
        benchmark4.generateReports(iReporterArray9);
        net.engio.pips.lab.ExecutionContext executionContext11 = new net.engio.pips.lab.ExecutionContext(benchmark4);
        net.engio.pips.lab.LabException.ErrorCode errorCode13 = net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10, errorCode13, 1.0f, '4' };
        net.engio.pips.lab.ExecutionContext executionContext17 = executionContext11.bindAll(objArray16);
        java.util.Collection<org.jfree.data.xy.AbstractIntervalXYDataset> abstractIntervalXYDatasetCollection19 = executionContext17.getMatching("run 1 times");
        net.engio.pips.lab.ExecutionContext executionContext20 = executionContext17.getChild();
        executionHandlerWrapper2.handle(executionContext17);
        executionContext17.finished();
        executionContext17.started();
        net.engio.pips.lab.workload.Workload workload26 = new net.engio.pips.lab.workload.Workload("");
        workload26.started();
        long long28 = workload26.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification29 = workload26.new DurationSpecification();
        net.engio.pips.lab.ExecutionContext executionContext30 = executionContext17.bind("Base path", (java.lang.Object) workload26);
        java.lang.Object obj31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.util.Collection<net.engio.pips.data.IDataCollector>> iDataCollectorCollectionCollection32 = executionContext30.getAll(obj31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iDataCollectorList5);
        org.junit.Assert.assertNotNull(iReporterArray9);
        org.junit.Assert.assertTrue("'" + errorCode13 + "' != '" + net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart + "'", errorCode13.equals(net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertNotNull(executionContext17);
        org.junit.Assert.assertNotNull(abstractIntervalXYDatasetCollection19);
        org.junit.Assert.assertNotNull(executionContext20);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1698796376270L + "'", long28 == 1698796376270L);
        org.junit.Assert.assertNotNull(executionContext30);
    }

    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        net.engio.pips.lab.Executions executions0 = new net.engio.pips.lab.Executions();
        java.util.Collection<java.lang.Object[]> objArrayCollection2 = executions0.getMatching("Sample interval");
        net.engio.pips.lab.Benchmark benchmark4 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList5 = benchmark4.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter6 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter7 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter8 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray9 = new net.engio.pips.reports.IReporter[] { cSVFileExporter6, cSVFileExporter7, cSVFileExporter8 };
        benchmark4.generateReports(iReporterArray9);
        net.engio.pips.lab.ExecutionContext executionContext11 = new net.engio.pips.lab.ExecutionContext(benchmark4);
        executionContext11.finished();
        long long13 = executionContext11.getExecutionTime();
        java.util.Collection<java.io.Flushable> flushableCollection14 = executions0.getAll((java.lang.Object) long13);
        java.util.Collection<net.engio.pips.lab.Executions> executionsCollection16 = executions0.getMatching("hi!");
        net.engio.pips.lab.workload.Workload workload18 = new net.engio.pips.lab.workload.Workload("");
        boolean boolean19 = workload18.hasTasksToRun();
        net.engio.pips.lab.workload.Workload workload21 = workload18.setDelay((long) '#');
        java.util.Collection<java.lang.CharSequence> charSequenceCollection22 = executions0.getAll((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(objArrayCollection2);
        org.junit.Assert.assertNotNull(iDataCollectorList5);
        org.junit.Assert.assertNotNull(iReporterArray9);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1698796376733L + "'", long13 == 1698796376733L);
        org.junit.Assert.assertNotNull(flushableCollection14);
        org.junit.Assert.assertNotNull(executionsCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(workload21);
        org.junit.Assert.assertNotNull(charSequenceCollection22);
    }

    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test212");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        workload1.started();
        long long3 = workload1.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification4 = workload1.new DurationSpecification();
        net.engio.pips.lab.workload.Workload workload6 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition7 = new net.engio.pips.lab.workload.StartCondition(workload6);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory8 = null;
        net.engio.pips.lab.workload.Workload workload9 = workload6.setITaskFactory(iTaskFactory8);
        net.engio.pips.lab.workload.StartCondition startCondition10 = workload9.getStartCondition();
        net.engio.pips.lab.workload.Duration duration11 = workload9.getDuration();
        int int12 = workload9.getParallelUnits();
        net.engio.pips.lab.workload.ExecutionEvent executionEvent13 = net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler14 = workload9.getHandler(executionEvent13);
        net.engio.pips.lab.workload.Workload workload16 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition17 = new net.engio.pips.lab.workload.StartCondition(workload16);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory18 = null;
        net.engio.pips.lab.workload.Workload workload19 = workload16.setITaskFactory(iTaskFactory18);
        net.engio.pips.lab.workload.ExecutionEvent executionEvent20 = net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler21 = workload16.getHandler(executionEvent20);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper22 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler21);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper23 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler21);
        net.engio.pips.lab.workload.Workload workload24 = workload1.handle(executionEvent13, executionHandler21);
        net.engio.pips.lab.workload.ExecutionEvent executionEvent25 = net.engio.pips.lab.workload.ExecutionEvent.WorkloadInitialization;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler26 = workload1.getHandler(executionEvent25);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698796379567L + "'", long3 == 1698796379567L);
        org.junit.Assert.assertNotNull(workload9);
        org.junit.Assert.assertNull(startCondition10);
        org.junit.Assert.assertNull(duration11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + executionEvent13 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization + "'", executionEvent13.equals(net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization));
        org.junit.Assert.assertNotNull(executionHandler14);
        org.junit.Assert.assertNotNull(workload19);
        org.junit.Assert.assertTrue("'" + executionEvent20 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion + "'", executionEvent20.equals(net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion));
        org.junit.Assert.assertNotNull(executionHandler21);
        org.junit.Assert.assertNotNull(workload24);
        org.junit.Assert.assertTrue("'" + executionEvent25 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.WorkloadInitialization + "'", executionEvent25.equals(net.engio.pips.lab.workload.ExecutionEvent.WorkloadInitialization));
        org.junit.Assert.assertNotNull(executionHandler26);
    }

    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test229");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition2 = new net.engio.pips.lab.workload.StartCondition(workload1);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory3 = null;
        net.engio.pips.lab.workload.Workload workload4 = workload1.setITaskFactory(iTaskFactory3);
        long long5 = workload4.getStarted();
        net.engio.pips.lab.workload.StartCondition startCondition6 = workload4.getStartCondition();
        net.engio.pips.lab.workload.Workload.StartSpecification startSpecification7 = workload4.starts();
        java.util.concurrent.TimeUnit timeUnit9 = null;
        net.engio.pips.lab.workload.Workload workload10 = startSpecification7.after((int) (short) -1, timeUnit9);
        java.util.concurrent.TimeUnit timeUnit12 = null;
        net.engio.pips.lab.workload.Workload workload13 = startSpecification7.after(100, timeUnit12);
        net.engio.pips.lab.workload.Workload workload15 = new net.engio.pips.lab.workload.Workload("");
        workload15.started();
        long long17 = workload15.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification18 = workload15.new DurationSpecification();
        net.engio.pips.lab.workload.Workload workload20 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition21 = new net.engio.pips.lab.workload.StartCondition(workload20);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory22 = null;
        net.engio.pips.lab.workload.Workload workload23 = workload20.setITaskFactory(iTaskFactory22);
        net.engio.pips.lab.workload.StartCondition startCondition24 = workload23.getStartCondition();
        net.engio.pips.lab.workload.Duration duration25 = workload23.getDuration();
        int int26 = workload23.getParallelUnits();
        net.engio.pips.lab.workload.ExecutionEvent executionEvent27 = net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler28 = workload23.getHandler(executionEvent27);
        net.engio.pips.lab.workload.Workload workload30 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition31 = new net.engio.pips.lab.workload.StartCondition(workload30);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory32 = null;
        net.engio.pips.lab.workload.Workload workload33 = workload30.setITaskFactory(iTaskFactory32);
        net.engio.pips.lab.workload.ExecutionEvent executionEvent34 = net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler35 = workload30.getHandler(executionEvent34);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper36 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler35);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper37 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler35);
        net.engio.pips.lab.workload.Workload workload38 = workload15.handle(executionEvent27, executionHandler35);
        net.engio.pips.lab.workload.Workload workload40 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition41 = new net.engio.pips.lab.workload.StartCondition(workload40);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory42 = null;
        net.engio.pips.lab.workload.Workload workload43 = workload40.setITaskFactory(iTaskFactory42);
        net.engio.pips.lab.workload.StartCondition startCondition44 = workload43.getStartCondition();
        net.engio.pips.lab.workload.Duration duration45 = workload43.getDuration();
        int int46 = workload43.getParallelUnits();
        net.engio.pips.lab.workload.ExecutionEvent executionEvent47 = net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler48 = workload43.getHandler(executionEvent47);
        net.engio.pips.lab.workload.Workload workload49 = workload13.handle(executionEvent27, executionHandler48);
        org.junit.Assert.assertNotNull(workload4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(startCondition6);
        org.junit.Assert.assertNotNull(startSpecification7);
        org.junit.Assert.assertNotNull(workload10);
        org.junit.Assert.assertNotNull(workload13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1698796379884L + "'", long17 == 1698796379884L);
        org.junit.Assert.assertNotNull(workload23);
        org.junit.Assert.assertNull(startCondition24);
        org.junit.Assert.assertNull(duration25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + executionEvent27 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization + "'", executionEvent27.equals(net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization));
        org.junit.Assert.assertNotNull(executionHandler28);
        org.junit.Assert.assertNotNull(workload33);
        org.junit.Assert.assertTrue("'" + executionEvent34 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion + "'", executionEvent34.equals(net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion));
        org.junit.Assert.assertNotNull(executionHandler35);
        org.junit.Assert.assertNotNull(workload38);
        org.junit.Assert.assertNotNull(workload43);
        org.junit.Assert.assertNull(startCondition44);
        org.junit.Assert.assertNull(duration45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + executionEvent47 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization + "'", executionEvent47.equals(net.engio.pips.lab.workload.ExecutionEvent.TaskInitialization));
        org.junit.Assert.assertNotNull(executionHandler48);
        org.junit.Assert.assertNotNull(workload49);
    }

    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test236");
        net.engio.pips.lab.workload.ExecutionHandler executionHandler0 = null;
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper1 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper2 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.Benchmark benchmark4 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList5 = benchmark4.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter6 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter7 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter8 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray9 = new net.engio.pips.reports.IReporter[] { cSVFileExporter6, cSVFileExporter7, cSVFileExporter8 };
        benchmark4.generateReports(iReporterArray9);
        net.engio.pips.lab.ExecutionContext executionContext11 = new net.engio.pips.lab.ExecutionContext(benchmark4);
        net.engio.pips.lab.LabException.ErrorCode errorCode13 = net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10, errorCode13, 1.0f, '4' };
        net.engio.pips.lab.ExecutionContext executionContext17 = executionContext11.bindAll(objArray16);
        java.util.Collection<org.jfree.data.xy.AbstractIntervalXYDataset> abstractIntervalXYDatasetCollection19 = executionContext17.getMatching("run 1 times");
        net.engio.pips.lab.ExecutionContext executionContext20 = executionContext17.getChild();
        executionHandlerWrapper2.handle(executionContext17);
        executionContext17.finished();
        executionContext17.started();
        net.engio.pips.lab.workload.Workload workload26 = new net.engio.pips.lab.workload.Workload("");
        workload26.started();
        long long28 = workload26.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification29 = workload26.new DurationSpecification();
        net.engio.pips.lab.ExecutionContext executionContext30 = executionContext17.bind("Base path", (java.lang.Object) workload26);
        executionContext17.started();
        org.junit.Assert.assertNotNull(iDataCollectorList5);
        org.junit.Assert.assertNotNull(iReporterArray9);
        org.junit.Assert.assertTrue("'" + errorCode13 + "' != '" + net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart + "'", errorCode13.equals(net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertNotNull(executionContext17);
        org.junit.Assert.assertNotNull(abstractIntervalXYDatasetCollection19);
        org.junit.Assert.assertNotNull(executionContext20);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1698796380065L + "'", long28 == 1698796380065L);
        org.junit.Assert.assertNotNull(executionContext30);
    }

    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test238");
        net.engio.pips.lab.workload.ExecutionHandler executionHandler0 = null;
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper1 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper executionHandlerWrapper2 = new net.engio.pips.lab.workload.Workload.ExecutionHandlerWrapper(executionHandler0);
        net.engio.pips.lab.Benchmark benchmark4 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList5 = benchmark4.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter6 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter7 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter8 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray9 = new net.engio.pips.reports.IReporter[] { cSVFileExporter6, cSVFileExporter7, cSVFileExporter8 };
        benchmark4.generateReports(iReporterArray9);
        net.engio.pips.lab.ExecutionContext executionContext11 = new net.engio.pips.lab.ExecutionContext(benchmark4);
        net.engio.pips.lab.LabException.ErrorCode errorCode13 = net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart;
        java.lang.Object[] objArray16 = new java.lang.Object[] { 10, errorCode13, 1.0f, '4' };
        net.engio.pips.lab.ExecutionContext executionContext17 = executionContext11.bindAll(objArray16);
        java.util.Collection<org.jfree.data.xy.AbstractIntervalXYDataset> abstractIntervalXYDatasetCollection19 = executionContext17.getMatching("run 1 times");
        net.engio.pips.lab.ExecutionContext executionContext20 = executionContext17.getChild();
        executionHandlerWrapper2.handle(executionContext17);
        executionContext17.finished();
        executionContext17.started();
        net.engio.pips.lab.workload.Workload workload26 = new net.engio.pips.lab.workload.Workload("");
        workload26.started();
        long long28 = workload26.getStarted();
        net.engio.pips.lab.workload.Workload.DurationSpecification durationSpecification29 = workload26.new DurationSpecification();
        net.engio.pips.lab.ExecutionContext executionContext30 = executionContext17.bind("Base path", (java.lang.Object) workload26);
        net.engio.pips.lab.Benchmark benchmark32 = new net.engio.pips.lab.Benchmark("hi!");
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList33 = benchmark32.getCollectors();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter34 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter35 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.CSVFileExporter cSVFileExporter36 = new net.engio.pips.reports.CSVFileExporter();
        net.engio.pips.reports.IReporter[] iReporterArray37 = new net.engio.pips.reports.IReporter[] { cSVFileExporter34, cSVFileExporter35, cSVFileExporter36 };
        benchmark32.generateReports(iReporterArray37);
        net.engio.pips.lab.ExecutionContext executionContext39 = new net.engio.pips.lab.ExecutionContext(benchmark32);
        net.engio.pips.lab.Benchmark benchmark42 = new net.engio.pips.lab.Benchmark("hi!");
        net.engio.pips.data.DataCollectorManager dataCollectorManager43 = benchmark42.getCollectorManager();
        java.util.List<net.engio.pips.data.IDataCollector> iDataCollectorList45 = benchmark42.getCollectors("hi!");
        net.engio.pips.lab.Benchmark benchmark46 = benchmark32.setProperty("", (java.lang.Object) benchmark42);
        java.io.OutputStream outputStream47 = benchmark46.getLogStream();
        net.engio.pips.lab.Benchmark benchmark49 = benchmark46.setBasePath("Unknown startcondition");
        net.engio.pips.lab.workload.Workload workload51 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition52 = new net.engio.pips.lab.workload.StartCondition(workload51);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory53 = null;
        net.engio.pips.lab.workload.Workload workload54 = workload51.setITaskFactory(iTaskFactory53);
        net.engio.pips.lab.workload.StartCondition startCondition55 = workload54.getStartCondition();
        net.engio.pips.lab.workload.Duration duration56 = workload54.getDuration();
        boolean boolean57 = workload54.isFinished();
        net.engio.pips.lab.workload.Workload[] workloadArray58 = new net.engio.pips.lab.workload.Workload[] { workload54 };
        net.engio.pips.lab.Benchmark benchmark59 = benchmark49.addWorkload(workloadArray58);
        net.engio.pips.lab.ExecutionContext executionContext60 = executionContext17.bindAll((java.lang.Object[]) workloadArray58);
        org.junit.Assert.assertNotNull(iDataCollectorList5);
        org.junit.Assert.assertNotNull(iReporterArray9);
        org.junit.Assert.assertTrue("'" + errorCode13 + "' != '" + net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart + "'", errorCode13.equals(net.engio.pips.lab.LabException.ErrorCode.WLWithCycleInStart));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[10, WLWithCycleInStart, 1.0, 4]");
        org.junit.Assert.assertNotNull(executionContext17);
        org.junit.Assert.assertNotNull(abstractIntervalXYDatasetCollection19);
        org.junit.Assert.assertNotNull(executionContext20);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1698796380125L + "'", long28 == 1698796380125L);
        org.junit.Assert.assertNotNull(executionContext30);
        org.junit.Assert.assertNotNull(iDataCollectorList33);
        org.junit.Assert.assertNotNull(iReporterArray37);
        org.junit.Assert.assertNotNull(dataCollectorManager43);
        org.junit.Assert.assertNotNull(iDataCollectorList45);
        org.junit.Assert.assertNotNull(benchmark46);
        org.junit.Assert.assertNotNull(outputStream47);
        org.junit.Assert.assertNotNull(benchmark49);
        org.junit.Assert.assertNotNull(workload54);
        org.junit.Assert.assertNull(startCondition55);
        org.junit.Assert.assertNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(workloadArray58);
        org.junit.Assert.assertNotNull(benchmark59);
        org.junit.Assert.assertNotNull(executionContext60);
    }

    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test243");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        net.engio.pips.lab.workload.StartCondition startCondition2 = new net.engio.pips.lab.workload.StartCondition(workload1);
        net.engio.pips.lab.workload.ITaskFactory iTaskFactory3 = null;
        net.engio.pips.lab.workload.Workload workload4 = workload1.setITaskFactory(iTaskFactory3);
        net.engio.pips.lab.workload.ExecutionEvent executionEvent5 = net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion;
        net.engio.pips.lab.workload.ExecutionHandler executionHandler6 = workload1.getHandler(executionEvent5);
        workload1.started();
        java.lang.String str8 = workload1.toString();
        org.junit.Assert.assertNotNull(workload4);
        org.junit.Assert.assertTrue("'" + executionEvent5 + "' != '" + net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion + "'", executionEvent5.equals(net.engio.pips.lab.workload.ExecutionEvent.WorkloadCompletion));
        org.junit.Assert.assertNotNull(executionHandler6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1698796380391ms)->Parallel tasks:1,null,null\n" + "'", str8, "(-1698796380391ms)->Parallel tasks:1,null,null\n");
    }

    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test247");
        net.engio.pips.lab.workload.Workload workload1 = new net.engio.pips.lab.workload.Workload("");
        workload1.started();
        long long3 = workload1.getStarted();
        boolean boolean4 = workload1.hasDelay();
        net.engio.pips.lab.workload.Duration duration5 = new net.engio.pips.lab.workload.Duration(workload1);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698796380418L + "'", long3 == 1698796380418L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
huchengming-In-Memory-Counter, length: 107

    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test004");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass2 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794993961L + "'", long1 == 1698794993961L);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass2 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794994L + "'", long1 == 1698794994L);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test009");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass10 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test015");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass14 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test016");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass9 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test020");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass15 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 12L + "'", long14 == 12L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test023");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) 0);
        java.lang.Class<?> wildcardClass12 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test024");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 12L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 23L + "'", long12 == 23L);
    }

    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        java.lang.Class<?> wildcardClass10 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        java.lang.Class<?> wildcardClass10 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass5 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794995147L + "'", long1 == 1698794995147L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794995L + "'", long2 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794995L + "'", long3 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794995L + "'", long4 == 1698794995L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = charSequenceInMemoryCounter4.increment(charSequence12, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        java.lang.CharSequence charSequence12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = charSequenceInMemoryCounter4.increment(charSequence12, 11L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 12L + "'", long11 == 12L);
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass3 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794995L + "'", long1 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794995L + "'", long2 == 1698794995L);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test043");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794995433L + "'", long1 == 1698794995433L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794995L + "'", long2 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794995L + "'", long3 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794995L + "'", long4 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794995433L + "'", long5 == 1698794995433L);
    }

    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794995433L + "'", long1 == 1698794995433L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794995L + "'", long2 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794995L + "'", long3 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794995433L + "'", long4 == 1698794995433L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794995433L + "'", long5 == 1698794995433L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794995433L + "'", long6 == 1698794995433L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 101L + "'", long14 == 101L);
    }

    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        java.lang.Class<?> wildcardClass19 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794994062L + "'", long18 == 1698794994062L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794995710L + "'", long1 == 1698794995710L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794995L + "'", long2 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794995L + "'", long3 == 1698794995L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794995710L + "'", long4 == 1698794995710L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794995710L + "'", long5 == 1698794995710L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794995L + "'", long6 == 1698794995L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (short) 1);
        java.lang.Class<?> wildcardClass19 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794993962L + "'", long18 == 1698794993962L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 11L);
        java.lang.Class<?> wildcardClass16 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 22L + "'", long15 == 22L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        java.lang.Class<?> wildcardClass12 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 12L + "'", long11 == 12L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long16 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass17 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 12L + "'", long16 == 12L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794995543L);
        long long21 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 3397589989504L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3397589989504L + "'", long18 == 3397589989504L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 6795179979008L + "'", long21 == 6795179979008L);
    }

    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass15 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass4 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996L + "'", long1 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996L + "'", long2 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996269L + "'", long3 == 1698794996269L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993851L);
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1698794993851L + "'", long11 == 1698794993851L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1698794993852L + "'", long13 == 1698794993852L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
    }

    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993851L);
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1698794993851L + "'", long11 == 1698794993851L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1698794993852L + "'", long13 == 1698794993852L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993853L + "'", long15 == 1698794993853L);
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass18 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993961L + "'", long15 == 1698794993961L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1698794993962L + "'", long17 == 1698794993962L);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass6 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996376L + "'", long1 == 1698794996376L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996376L + "'", long2 == 1698794996376L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996L + "'", long3 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996L + "'", long4 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996376L + "'", long5 == 1698794996376L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass6 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996L + "'", long1 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996L + "'", long2 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996L + "'", long3 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996427L + "'", long4 == 1698794996427L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996L + "'", long5 == 1698794996L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test086");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long19 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2L + "'", long19 == 2L);
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (short) 10);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996543L + "'", long1 == 1698794996543L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996543L + "'", long2 == 1698794996543L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996L + "'", long3 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996L + "'", long4 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996L + "'", long5 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794996543L + "'", long6 == 1698794996543L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996695L + "'", long1 == 1698794996695L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996L + "'", long2 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996695L + "'", long3 == 1698794996695L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996695L + "'", long4 == 1698794996695L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996L + "'", long5 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794996L + "'", long6 == 1698794996L);
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794993851L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993851L + "'", long12 == 1698794993851L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993851L + "'", long15 == 1698794993851L);
    }

    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996806L + "'", long1 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996806L + "'", long2 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996L + "'", long3 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996L + "'", long4 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996806L + "'", long5 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794996L + "'", long6 == 1698794996L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794996806L + "'", long1 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794996L + "'", long2 == 1698794996L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794996806L + "'", long3 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794996806L + "'", long4 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794996806L + "'", long5 == 1698794996806L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794996L + "'", long6 == 1698794996L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, 0L, (long) (byte) 10, 1698794993851L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794994811L);
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794994811L + "'", long12 == 1698794994811L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1698794994812L + "'", long14 == 1698794994812L);
    }

    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794993851L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) ' ');
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993851L + "'", long12 == 1698794993851L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993883L + "'", long15 == 1698794993883L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794993983L + "'", long18 == 1698794993983L);
    }

    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test108");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (short) 10);
        java.lang.Class<?> wildcardClass13 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997053L + "'", long1 == 1698794997053L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997053L + "'", long3 == 1698794997053L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997L + "'", long4 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997053L + "'", long5 == 1698794997053L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997L + "'", long6 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997L + "'", long7 == 1698794997L);
    }

    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) '#');
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 3L);
        java.lang.Class<?> wildcardClass11 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 38L + "'", long10 == 38L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test114");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997053L + "'", long1 == 1698794997053L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997053L + "'", long3 == 1698794997053L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997L + "'", long4 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997L + "'", long5 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997053L + "'", long6 == 1698794997053L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997111L + "'", long1 == 1698794997111L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997111L + "'", long3 == 1698794997111L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997111L + "'", long4 == 1698794997111L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997111L + "'", long5 == 1698794997111L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997L + "'", long6 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997111L + "'", long7 == 1698794997111L);
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        long long21 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794994062L);
        java.lang.CharSequence charSequence22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = charSequenceInMemoryCounter4.increment(charSequence22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794994062L + "'", long18 == 1698794994062L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1698794994163L + "'", long21 == 1698794994163L);
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long20 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long22 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993961L + "'", long15 == 1698794993961L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1698794993962L + "'", long17 == 1698794993962L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1698794993963L + "'", long22 == 1698794993963L);
    }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997L + "'", long1 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997L + "'", long3 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997278L + "'", long4 == 1698794997278L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997L + "'", long5 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997L + "'", long6 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997L + "'", long7 == 1698794997L);
    }

    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 12L + "'", long11 == 12L);
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 11L);
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass18 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 22L + "'", long15 == 22L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) 0);
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (-1L));
        java.lang.Class<?> wildcardClass14 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (byte) -1);
        java.lang.CharSequence charSequence13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = charSequenceInMemoryCounter4.increment(charSequence13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long16 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long19 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 3L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4L + "'", long19 == 4L);
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, 0L, (long) (byte) 10, 1698794993851L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1L);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass10 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997569L + "'", long1 == 1698794997569L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997L + "'", long3 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997569L + "'", long4 == 1698794997569L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997569L + "'", long5 == 1698794997569L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997L + "'", long6 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997L + "'", long7 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794997L + "'", long8 == 1698794997L);
    }

    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass8 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997L + "'", long1 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997L + "'", long3 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997623L + "'", long4 == 1698794997623L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997623L + "'", long5 == 1698794997623L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997623L + "'", long6 == 1698794997623L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997L + "'", long7 == 1698794997L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794995381L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794995381L + "'", long15 == 1698794995381L);
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        java.lang.CharSequence charSequence16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = charSequenceInMemoryCounter4.increment(charSequence16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
    }

    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimestamp();
        long long9 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997683L + "'", long1 == 1698794997683L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997683L + "'", long2 == 1698794997683L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997L + "'", long3 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997L + "'", long4 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997683L + "'", long5 == 1698794997683L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997683L + "'", long6 == 1698794997683L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997L + "'", long7 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794997L + "'", long8 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1698794997L + "'", long9 == 1698794997L);
    }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimeMillis();
        long long8 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997734L + "'", long1 == 1698794997734L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997734L + "'", long3 == 1698794997734L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997L + "'", long4 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997L + "'", long5 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997734L + "'", long6 == 1698794997734L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794997734L + "'", long7 == 1698794997734L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794997734L + "'", long8 == 1698794997734L);
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, 0L, (long) (byte) 10, 1698794993851L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 10L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11L + "'", long12 == 11L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        java.lang.Class<?> wildcardClass13 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        long long21 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794994062L);
        long long23 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794994062L + "'", long18 == 1698794994062L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1698794994163L + "'", long21 == 1698794994163L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1698794994063L + "'", long23 == 1698794994063L);
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass6 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997848L + "'", long1 == 1698794997848L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997848L + "'", long2 == 1698794997848L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997L + "'", long3 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997848L + "'", long4 == 1698794997848L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997L + "'", long5 == 1698794997L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        java.lang.Class<?> wildcardClass16 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1698794993961L + "'", long15 == 1698794993961L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) 0);
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (-1L));
        long long16 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 3397589989504L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3397589989502L + "'", long16 == 3397589989502L);
    }

    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794997957L + "'", long1 == 1698794997957L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794997L + "'", long2 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794997957L + "'", long3 == 1698794997957L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794997L + "'", long4 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794997L + "'", long5 == 1698794997L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794997L + "'", long6 == 1698794997L);
    }

    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (short) 10);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993853L);
        long long21 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        java.lang.CharSequence charSequence22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = charSequenceInMemoryCounter4.increment(charSequence22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794993853L + "'", long18 == 1698794993853L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1698794993954L + "'", long21 == 1698794993954L);
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998017L + "'", long4 == 1698794998017L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998017L + "'", long5 == 1698794998017L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998017L + "'", long6 == 1698794998017L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998017L + "'", long7 == 1698794998017L);
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (short) 10);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993853L);
        long long21 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        long long24 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (short) 100);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794993853L + "'", long18 == 1698794993853L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1698794993954L + "'", long21 == 1698794993954L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1698794994054L + "'", long24 == 1698794994054L);
    }

    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimestamp();
        long long9 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998073L + "'", long4 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998073L + "'", long6 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794998L + "'", long8 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1698794998073L + "'", long9 == 1698794998073L);
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998073L + "'", long2 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998073L + "'", long4 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998073L + "'", long6 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998073L + "'", long1 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998073L + "'", long4 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998073L + "'", long5 == 1698794998073L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998073L + "'", long7 == 1698794998073L);
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass8 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998132L + "'", long1 == 1698794998132L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998132L + "'", long2 == 1698794998132L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998132L + "'", long5 == 1698794998132L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998132L + "'", long6 == 1698794998132L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998132L + "'", long7 == 1698794998132L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998132L + "'", long2 == 1698794998132L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998132L + "'", long7 == 1698794998132L);
    }

    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimeMillis();
        long long8 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998186L + "'", long1 == 1698794998186L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998186L + "'", long2 == 1698794998186L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998186L + "'", long7 == 1698794998186L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794998186L + "'", long8 == 1698794998186L);
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
    }

    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794993961L);
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 100L);
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 101L);
        long long20 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794993961L + "'", long12 == 1698794993961L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1698794994062L + "'", long18 == 1698794994062L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1698794994063L + "'", long20 == 1698794994063L);
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998238L + "'", long1 == 1698794998238L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998238L + "'", long4 == 1698794998238L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
    }

    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test199");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998298L + "'", long1 == 1698794998298L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998298L + "'", long6 == 1698794998298L);
    }

    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998298L + "'", long3 == 1698794998298L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998298L + "'", long4 == 1698794998298L);
    }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) 1, (long) ' ', 1698794995381L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794995655L);
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794994527L);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794995655L + "'", long7 == 1698794995655L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3397589990182L + "'", long10 == 3397589990182L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) '#');
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1698794994752L);
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1698794994753L + "'", long12 == 1698794994753L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1698794994754L + "'", long14 == 1698794994754L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
    }

    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test209");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, 0L, (long) (byte) 10, 1698794993851L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 1L);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test211");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", (long) (-1));
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) 10);
        long long12 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long14 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        java.lang.CharSequence charSequence15 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = charSequenceInMemoryCounter4.increment(charSequence15, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
    }

    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test214");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998416L + "'", long2 == 1698794998416L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998416L + "'", long3 == 1698794998416L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998416L + "'", long6 == 1698794998416L);
    }

    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test224");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998529L + "'", long1 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998529L + "'", long2 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
    }

    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test226");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998529L + "'", long1 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998529L + "'", long3 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998529L + "'", long4 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998529L + "'", long5 == 1698794998529L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998529L + "'", long6 == 1698794998529L);
    }

    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long17 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long20 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!", 0L);
        long long23 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 1698794997053L);
        java.lang.Class<?> wildcardClass24 = charSequenceInMemoryCounter4.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1698794997054L + "'", long23 == 1698794997054L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test230");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        java.lang.Class<?> wildcardClass6 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998583L + "'", long2 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998583L + "'", long4 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test231");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998583L + "'", long2 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998583L + "'", long3 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998583L + "'", long4 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998583L + "'", long5 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998583L + "'", long6 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998583L + "'", long7 == 1698794998583L);
    }

    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test233");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998583L + "'", long2 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998583L + "'", long3 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998583L + "'", long5 == 1698794998583L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
    }

    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test235");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass7 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998642L + "'", long2 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998642L + "'", long3 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998642L + "'", long4 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998642L + "'", long5 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998642L + "'", long6 == 1698794998642L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test237");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        long long7 = inMemoryClock0.currentTimeMillis();
        java.lang.Class<?> wildcardClass8 = inMemoryClock0.getClass();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998642L + "'", long1 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998642L + "'", long3 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998642L + "'", long5 == 1698794998642L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998642L + "'", long7 == 1698794998642L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test241");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) 100, 1698794994752L, 1698794994752L);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
    }

    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998702L + "'", long2 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998702L + "'", long3 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998702L + "'", long4 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998702L + "'", long5 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
    }

    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test248");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) -1);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long13 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long15 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        long long18 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (-1L));
        long long20 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
    }

    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test249");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimeMillis();
        long long9 = inMemoryClock0.currentTimestamp();
        long long10 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998702L + "'", long1 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998702L + "'", long4 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998702L + "'", long5 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998702L + "'", long6 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794998702L + "'", long8 == 1698794998702L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1698794998L + "'", long9 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1698794998702L + "'", long10 == 1698794998702L);
    }

    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test251");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimestamp();
        long long9 = inMemoryClock0.currentTimestamp();
        long long10 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998757L + "'", long1 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998757L + "'", long4 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998757L + "'", long5 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998757L + "'", long6 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794998L + "'", long8 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1698794998L + "'", long9 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1698794998L + "'", long10 == 1698794998L);
    }

    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test252");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, 0L, (long) (byte) 10, 1698794993851L);
        long long7 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", (long) (byte) 10);
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test253");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        long long8 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998757L + "'", long1 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998757L + "'", long2 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998757L + "'", long6 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1698794998757L + "'", long8 == 1698794998757L);
    }

    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test254");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimeMillis();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998757L + "'", long1 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998757L + "'", long3 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998757L + "'", long5 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998757L + "'", long6 == 1698794998757L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
    }

    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test256");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) '#', 1L, (long) (byte) -1);
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long9 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "", 0L);
        long long11 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
    }

    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        hu.chengming.util.client.InMemoryCounterPersistClient inMemoryCounterPersistClient0 = null;
        hu.chengming.util.InMemoryCounter<java.lang.CharSequence> charSequenceInMemoryCounter4 = new hu.chengming.util.InMemoryCounter<java.lang.CharSequence>(inMemoryCounterPersistClient0, (long) (-1), (long) (byte) 100, (-1L));
        long long6 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long8 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        long long10 = charSequenceInMemoryCounter4.increment((java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test264");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimestamp();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimeMillis();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998L + "'", long1 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998866L + "'", long2 == 1698794998866L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998866L + "'", long3 == 1698794998866L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998866L + "'", long4 == 1698794998866L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998L + "'", long6 == 1698794998L);
    }

    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test274");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimestamp();
        long long3 = inMemoryClock0.currentTimeMillis();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimestamp();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998973L + "'", long1 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998L + "'", long2 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998973L + "'", long3 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998973L + "'", long6 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998L + "'", long7 == 1698794998L);
    }

    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test277");
        hu.chengming.util.InMemoryClock inMemoryClock0 = hu.chengming.util.InMemoryClock.getInstance();
        long long1 = inMemoryClock0.currentTimeMillis();
        long long2 = inMemoryClock0.currentTimeMillis();
        long long3 = inMemoryClock0.currentTimestamp();
        long long4 = inMemoryClock0.currentTimestamp();
        long long5 = inMemoryClock0.currentTimestamp();
        long long6 = inMemoryClock0.currentTimeMillis();
        long long7 = inMemoryClock0.currentTimeMillis();
        org.junit.Assert.assertNotNull(inMemoryClock0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1698794998973L + "'", long1 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1698794998973L + "'", long2 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1698794998L + "'", long3 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1698794998L + "'", long4 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1698794998L + "'", long5 == 1698794998L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698794998973L + "'", long6 == 1698794998973L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1698794998973L + "'", long7 == 1698794998973L);
    }
myzhan-locust4j, length: 19

    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        long long0 = com.github.myzhan.locust4j.utils.Utils.currentTimeInSeconds();
// flaky:         org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1698795329L + "'", long0 == 1698795329L);
    }

    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        long long0 = com.github.myzhan.locust4j.utils.Utils.now();
// flaky:         org.junit.Assert.assertTrue("'" + long0 + "' != '" + 1698795329485L + "'", long0 == 1698795329485L);
    }

    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        java.lang.String str0 = com.github.myzhan.locust4j.utils.Utils.getNodeID();
// flaky:         org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Hengchens-MBP.attlocal.net_a1fcdcbb743445894896776421d599ff" + "'", str0, "Hengchens-MBP.attlocal.net_a1fcdcbb743445894896776421d599ff");
    }

    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test028");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.lang.Class<?> wildcardClass8 = statsEntry2.getClass();
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795335L + "'", long6 == 1698795335L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test029");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.lang.String str8 = statsEntry2.getName();
        statsEntry2.setTotalResponseTime((long) (-1));
        long long11 = statsEntry2.getTotalResponseTime();
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795335L + "'", long6 == 1698795335L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.lang.String str8 = statsEntry2.getName();
        statsEntry2.setTotalResponseTime((long) (-1));
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = statsEntry2.serialize();
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795340L + "'", long6 == 1698795340L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap11);
    }

    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        com.github.myzhan.locust4j.runtime.Runner runner0 = new com.github.myzhan.locust4j.runtime.Runner();
        com.github.myzhan.locust4j.rpc.Client client1 = null;
        runner0.setRPCClient(client1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet5 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet8 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet5.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet8);
        int int10 = weighingTaskSet8.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet13 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int14 = weighingTaskSet13.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet17 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet20 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet17.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        weighingTaskSet13.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray23 = new com.github.myzhan.locust4j.AbstractTask[] { weighingTaskSet8, weighingTaskSet20 };
        java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask> abstractTaskList24 = new java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24, abstractTaskArray23);
        runner0.setTasks((java.util.List<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24);
        java.lang.String str27 = runner0.getNodeID();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(abstractTaskArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Hengchens-MBP.attlocal.net_7d1564785ce4a97d77025101bfb71227" + "'", str27, "Hengchens-MBP.attlocal.net_7d1564785ce4a97d77025101bfb71227");
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        com.github.myzhan.locust4j.runtime.Runner runner0 = new com.github.myzhan.locust4j.runtime.Runner();
        com.github.myzhan.locust4j.rpc.Client client1 = null;
        runner0.setRPCClient(client1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet5 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet8 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet5.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet8);
        int int10 = weighingTaskSet8.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet13 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int14 = weighingTaskSet13.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet17 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet20 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet17.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        weighingTaskSet13.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray23 = new com.github.myzhan.locust4j.AbstractTask[] { weighingTaskSet8, weighingTaskSet20 };
        java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask> abstractTaskList24 = new java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24, abstractTaskArray23);
        runner0.setTasks((java.util.List<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24);
        com.github.myzhan.locust4j.rpc.Client client27 = null;
        runner0.setRPCClient(client27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = runner0.getRemoteParams();
        java.lang.String str30 = runner0.getNodeID();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(abstractTaskArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Hengchens-MBP.attlocal.net_4cb1a2630de37c793d0f93600c055d98" + "'", str30, "Hengchens-MBP.attlocal.net_4cb1a2630de37c793d0f93600c055d98");
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.util.Map<java.lang.String, java.lang.Object> strMap8 = statsEntry2.serialize();
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795361L + "'", long6 == 1698795361L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strMap8);
    }

    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        com.github.myzhan.locust4j.runtime.Runner runner0 = new com.github.myzhan.locust4j.runtime.Runner();
        com.github.myzhan.locust4j.rpc.Client client1 = null;
        runner0.setRPCClient(client1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet5 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet8 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet5.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet8);
        int int10 = weighingTaskSet8.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet13 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int14 = weighingTaskSet13.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet17 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet20 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet17.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        weighingTaskSet13.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray23 = new com.github.myzhan.locust4j.AbstractTask[] { weighingTaskSet8, weighingTaskSet20 };
        java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask> abstractTaskList24 = new java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24, abstractTaskArray23);
        runner0.setTasks((java.util.List<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24);
        com.github.myzhan.locust4j.rpc.Client client27 = null;
        runner0.setRPCClient(client27);
        com.github.myzhan.locust4j.rpc.Client client29 = null;
        runner0.setRPCClient(client29);
        java.lang.String str31 = runner0.getNodeID();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(abstractTaskArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Hengchens-MBP.attlocal.net_0e082ff260df27e91bc8e214b2491cdf" + "'", str31, "Hengchens-MBP.attlocal.net_0e082ff260df27e91bc8e214b2491cdf");
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet2 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int3 = weighingTaskSet2.getWeight();
// flaky:         weighingTaskSet2.run();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet2 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("hi!", (int) (byte) 100);
// flaky:         weighingTaskSet2.run();
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet2 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int3 = weighingTaskSet2.getWeight();
        weighingTaskSet2.onStart();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet7 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        java.lang.String str8 = weighingTaskSet7.getName();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet11 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet14 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet11.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet14);
        weighingTaskSet7.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet14);
// flaky:         weighingTaskSet14.run();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet20 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet23 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet20.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet23);
        java.lang.String str25 = weighingTaskSet20.getName();
        weighingTaskSet14.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        weighingTaskSet2.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        com.github.myzhan.locust4j.runtime.Runner runner0 = new com.github.myzhan.locust4j.runtime.Runner();
        com.github.myzhan.locust4j.rpc.Client client1 = null;
        runner0.setRPCClient(client1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet5 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet8 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet5.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet8);
        int int10 = weighingTaskSet8.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet13 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int14 = weighingTaskSet13.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet17 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet20 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet17.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        weighingTaskSet13.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet20);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray23 = new com.github.myzhan.locust4j.AbstractTask[] { weighingTaskSet8, weighingTaskSet20 };
        java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask> abstractTaskList24 = new java.util.ArrayList<com.github.myzhan.locust4j.AbstractTask>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24, abstractTaskArray23);
        runner0.setTasks((java.util.List<com.github.myzhan.locust4j.AbstractTask>) abstractTaskList24);
        com.github.myzhan.locust4j.rpc.Client client27 = null;
        runner0.setRPCClient(client27);
        java.util.Map<java.lang.String, java.lang.Object> strMap29 = runner0.getRemoteParams();
        com.github.myzhan.locust4j.rpc.Client client30 = null;
        runner0.setRPCClient(client30);
        java.lang.String str32 = runner0.getNodeID();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(abstractTaskArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strMap29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Hengchens-MBP.attlocal.net_2f2f6326153bae5e1a82cfcacf4aac1e" + "'", str32, "Hengchens-MBP.attlocal.net_2f2f6326153bae5e1a82cfcacf4aac1e");
    }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet2 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        int int3 = weighingTaskSet2.getWeight();
        int int4 = weighingTaskSet2.getWeight();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet7 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("hi!", 100);
        weighingTaskSet2.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet7);
// flaky:         weighingTaskSet7.run();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.lang.String str8 = statsEntry2.getName();
        statsEntry2.setTotalResponseTime((long) (-1));
        java.util.Map<java.lang.String, java.lang.Object> strMap11 = statsEntry2.getStrippedReport();
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795367L + "'", long6 == 1698795367L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap11);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet2 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet5 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet2.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet5);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet9 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        java.lang.String str10 = weighingTaskSet9.getName();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet13 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet16 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet13.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet16);
        weighingTaskSet9.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet16);
// flaky:         weighingTaskSet16.run();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet22 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet25 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet22.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet25);
        java.lang.String str27 = weighingTaskSet22.getName();
        weighingTaskSet16.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet22);
        weighingTaskSet5.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet16);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        com.github.myzhan.locust4j.Locust locust0 = com.github.myzhan.locust4j.Locust.getInstance();
        locust0.recordFailure("hi!", "hi!", (long) (short) -1, "hi!");
        locust0.setMasterPort(0);
        locust0.setMaxRPS((long) (short) 0);
        com.github.myzhan.locust4j.Locust locust10 = com.github.myzhan.locust4j.Locust.getInstance();
        locust10.recordFailure("hi!", "hi!", (long) (short) -1, "hi!");
        locust10.setMasterPort((int) (short) -1);
        locust10.recordSuccess("hi!", "Hengchens-MBP.attlocal.net_a1fcdcbb743445894896776421d599ff", (long) '#', (-1L));
        boolean boolean23 = locust10.isVerbose();
        com.github.myzhan.locust4j.Locust locust24 = com.github.myzhan.locust4j.Locust.getInstance();
        locust24.recordFailure("hi!", "hi!", (long) (short) -1, "hi!");
        locust24.setMasterPort(0);
        locust24.setMaxRPS((long) (short) 0);
        boolean boolean34 = locust24.isRateLimitEnabled();
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet37 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        com.github.myzhan.locust4j.taskset.WeighingTaskSet weighingTaskSet40 = new com.github.myzhan.locust4j.taskset.WeighingTaskSet("", (int) (short) 1);
        weighingTaskSet37.addTask((com.github.myzhan.locust4j.AbstractTask) weighingTaskSet40);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray42 = new com.github.myzhan.locust4j.AbstractTask[] { weighingTaskSet40 };
        locust24.dryRun(abstractTaskArray42);
        locust10.dryRun(abstractTaskArray42);
        locust0.dryRun(abstractTaskArray42);
        com.github.myzhan.locust4j.AbstractTask[] abstractTaskArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            locust0.run(abstractTaskArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locust0);
        org.junit.Assert.assertNotNull(locust10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locust24);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(abstractTaskArray42);
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        com.github.myzhan.locust4j.stats.StatsEntry statsEntry2 = new com.github.myzhan.locust4j.stats.StatsEntry("", "");
        statsEntry2.setMinResponseTime(0L);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = statsEntry2.getStrippedReport();
        long long6 = statsEntry2.getLastRequestTimestamp();
        long long7 = statsEntry2.getNumFailures();
        java.lang.String str8 = statsEntry2.getName();
        statsEntry2.setMaxResponseTime((long) (short) 100);
        org.junit.Assert.assertNotNull(strMap5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1698795378L + "'", long6 == 1698795378L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }
julman99-gson-fire, length: 7

    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        java.util.TimeZone timeZone0 = null;
        io.gsonfire.util.RFC3339DateFormat rFC3339DateFormat1 = new io.gsonfire.util.RFC3339DateFormat(timeZone0);
        java.text.DateFormat dateFormat3 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.util.Calendar calendar4 = dateFormat3.getCalendar();
        java.lang.StringBuffer stringBuffer5 = null;
        java.text.FieldPosition fieldPosition6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer7 = rFC3339DateFormat1.format((java.lang.Object) dateFormat3, stringBuffer5, fieldPosition6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateFormat3);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-825812078794,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=21,MILLISECOND=206,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        java.text.DateFormat dateFormat1 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.util.Calendar calendar2 = dateFormat1.getCalendar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = dateFormat1.parseObject("null");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateFormat1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-825812078436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=21,MILLISECOND=564,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }

    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        java.text.DateFormat dateFormat0 = java.text.DateFormat.getInstance();
        java.text.NumberFormat numberFormat1 = dateFormat0.getNumberFormat();
        java.util.Calendar calendar2 = dateFormat0.getCalendar();
        java.util.TimeZone timeZone3 = null;
        io.gsonfire.gson.DateRFC3339TypeAdapter dateRFC3339TypeAdapter5 = new io.gsonfire.gson.DateRFC3339TypeAdapter(timeZone3, false);
        com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter6 = dateRFC3339TypeAdapter5.nullSafe();
        com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter7 = dateRFC3339TypeAdapter5.nullSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator8 = dateFormat0.formatToCharacterIterator((java.lang.Object) dateRFC3339TypeAdapter5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-825812077419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=22,MILLISECOND=581,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
        org.junit.Assert.assertNotNull(dateTypeAdapter6);
        org.junit.Assert.assertNotNull(dateTypeAdapter7);
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        java.text.DateFormat dateFormat1 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.util.Calendar calendar2 = dateFormat1.getCalendar();
        java.util.Calendar calendar3 = dateFormat1.getCalendar();
        org.junit.Assert.assertNotNull(dateFormat1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-825812076522,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=23,MILLISECOND=478,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-825812076522,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=23,MILLISECOND=478,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }

    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test171");
        java.text.DateFormat dateFormat0 = java.text.DateFormat.getInstance();
        java.text.NumberFormat numberFormat1 = dateFormat0.getNumberFormat();
        java.util.Calendar calendar2 = dateFormat0.getCalendar();
        java.text.DateFormat dateFormat4 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.lang.Class<?> wildcardClass5 = dateFormat4.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = dateFormat0.format((java.lang.Object) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Date");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-825812075414,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=24,MILLISECOND=586,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
        org.junit.Assert.assertNotNull(dateFormat4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test294");
        java.text.DateFormat dateFormat1 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.text.DateFormat dateFormat2 = java.text.DateFormat.getInstance();
        java.text.NumberFormat numberFormat3 = dateFormat2.getNumberFormat();
        java.text.NumberFormat numberFormat4 = dateFormat2.getNumberFormat();
        dateFormat1.setNumberFormat(numberFormat4);
        java.text.DateFormat dateFormat7 = java.text.DateFormat.getDateInstance((int) (short) 0);
        java.util.Calendar calendar8 = dateFormat7.getCalendar();
        dateFormat1.setCalendar(calendar8);
        org.junit.Assert.assertNotNull(dateFormat1);
        org.junit.Assert.assertNotNull(dateFormat2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(dateFormat7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-825812066865,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=33,MILLISECOND=135,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }

    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test306");
        java.text.DateFormat dateFormat0 = java.text.DateFormat.getInstance();
        io.gsonfire.DateSerializationPolicy dateSerializationPolicy1 = io.gsonfire.DateSerializationPolicy.unixTimeSeconds;
        boolean boolean2 = dateFormat0.equals((java.lang.Object) dateSerializationPolicy1);
        java.util.Calendar calendar3 = dateFormat0.getCalendar();
        org.junit.Assert.assertNotNull(dateFormat0);
        org.junit.Assert.assertNotNull(dateSerializationPolicy1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-825812066701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Chicago\",offset=-21600000,dstSavings=3600000,useDaylight=true,transitions=235,lastRule=java.util.SimpleTimeZone[id=America/Chicago,offset=-21600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1943,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=45,SECOND=33,MILLISECOND=299,ZONE_OFFSET=-21600000,DST_OFFSET=3600000]");
    }
alipay-sofa-common-tools, length: 2

    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        java.lang.String str2 = com.alipay.sofa.common.profile.diagnostic.Profiler.dump("10", "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        java.lang.String str2 = com.alipay.sofa.common.utils.StringUtil.center("\u63a7\u5236\u7ebf\u7a0b\u4fe1\u606f\u6253\u5370\u95f4\u9694", (int) '#');
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u63a7\u5236\u7ebf\u7a0b\u4fe1\u606f\u6253\u5370\u95f4\u9694             " + "'", str2, "\u63a7\u5236\u7ebf\u7a0b\u4fe1\u606f\u6253\u5370\u95f4\u9694             ");
    }
j256-simplejmx, length: 1

    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        com.j256.simplejmx.server.JmxServer jmxServer1 = new com.j256.simplejmx.server.JmxServer((int) (byte) 1);
        jmxServer1.close();
// flaky:         jmxServer1.start();
    }
kestreldigital-data-conjuror, length: 206

    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test003");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.lang.Class<?> wildcardClass7 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Vishal" + "'", str1, "Vishal");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Henshaw" + "'", str2, "Henshaw");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Martin Chattun" + "'", str3, "Martin Chattun");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 31 22:02:30 CDT 1996");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test004");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass3 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Trevor" + "'", str1, "Trevor");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Mulvenna" + "'", str2, "Mulvenna");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test006");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Karen" + "'", str1, "Karen");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Donnelly" + "'", str2, "Donnelly");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ian Kukkunuru" + "'", str3, "Ian Kukkunuru");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Michael Rahman" + "'", str4, "Michael Rahman");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test007");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gemma" + "'", str1, "Gemma");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ferris" + "'", str2, "Ferris");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Sean Jayabalan" + "'", str3, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Estelle" + "'", str4, "Estelle");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test008");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass4 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sarah" + "'", str1, "Sarah");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chattun" + "'", str2, "Chattun");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Yaseen" + "'", str3, "Yaseen");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test009");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.Class<?> wildcardClass7 = date6.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Aug 25 08:07:44 CDT 1987");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 25 19:39:40 CST 1965");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test010");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass6 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Malcolm" + "'", str1, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hunting" + "'", str2, "Hunting");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gabrielle Turner" + "'", str3, "Gabrielle Turner");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Estelle" + "'", str4, "Estelle");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Batmaz" + "'", str5, "Batmaz");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test011");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sayvai" + "'", str1, "Sayvai");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Dailey" + "'", str2, "Dailey");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Sam" + "'", str3, "Sam");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Andrew" + "'", str4, "Andrew");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test012");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("");
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Estelle" + "'", str1, "Estelle");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lister" + "'", str4, "Lister");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test013");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.lang.Class<?> wildcardClass7 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Andy" + "'", str1, "Andy");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Singh" + "'", str2, "Singh");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Emma" + "'", str3, "Emma");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:41 CST 1923");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test014");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.Class<?> wildcardClass6 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Mar 24 14:49:30 CDT 1975");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test015");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, (int) (byte) 100);
        java.lang.String str10 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 26 04:15:26 CST 1997");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Jul 27 02:58:31 CDT 1957");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jun 17 16:43:48 CDT 1976");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Malcolm" + "'", str10, "Malcolm");
    }

    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test016");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils1 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils2 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList4 = resourceUtils2.readResourceToStringList("");
        int int5 = randomUtils1.getListIndex((java.util.List) strList4);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils1.getListIndex((java.util.List) strList8);
        int int10 = randomUtils0.getListIndex((java.util.List) strList8);
        java.lang.Class<?> wildcardClass11 = strList8.getClass();
        org.junit.Assert.assertNotNull(strList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test017");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) 1);
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Luke" + "'", str1, "Luke");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Wyatt" + "'", str2, "Wyatt");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gabrielle Swanson" + "'", str3, "Gabrielle Swanson");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Aug 17 23:58:09 CDT 1975");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Nov 14 16:02:39 CST 2023");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test018");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) -1, (int) (byte) 0);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 100, 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ravindra" + "'", str1, "Ravindra");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Clarke" + "'", str2, "Clarke");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Shiv" + "'", str3, "Shiv");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 25 16:26:03 CST 2024");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Nov 04 16:03:38 CST 1927");
    }

    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test019");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("");
        java.lang.String str4 = conjuror0.conjureLastName();
        java.util.Date date7 = conjuror0.conjureBirthDate((-1), 100);
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Alex" + "'", str1, "Alex");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Purkis" + "'", str4, "Purkis");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 07 19:31:26 CDT 1937");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test020");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass4 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Amanda Sayer" + "'", str1, "Amanda Sayer");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Mulvenna" + "'", str2, "Mulvenna");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Darry" + "'", str3, "Darry");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test021");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.util.Date date9 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Vamsi" + "'", str1, "Vamsi");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Peapell" + "'", str2, "Peapell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Alex Monteiro" + "'", str3, "Alex Monteiro");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Gabrielle" + "'", str4, "Gabrielle");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Nov 06 20:47:33 CST 1985");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test022");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Zoe" + "'", str1, "Zoe");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Heron" + "'", str2, "Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Amanda Monteiro" + "'", str3, "Amanda Monteiro");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ken" + "'", str4, "Ken");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Henshaw" + "'", str5, "Henshaw");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Matthew Monteiro" + "'", str6, "Matthew Monteiro");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "James" + "'", str7, "James");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dhandapani" + "'", str8, "Dhandapani");
    }

    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test023");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) '4', (int) '#');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hakan" + "'", str1, "Hakan");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Mar 02 05:10:30 CST 1977");
    }

    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test024");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) -1, (int) (byte) 0);
        java.lang.String str7 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Susannah" + "'", str1, "Susannah");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Purkis" + "'", str2, "Purkis");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Malcolm" + "'", str3, "Malcolm");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 16 03:08:25 CDT 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sam Qazi" + "'", str7, "Sam Qazi");
    }

    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test025");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str7 = conjuror0.conjureLastName();
        java.lang.String str8 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 01 03:11:05 CST 2003");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jun 02 03:10:54 CDT 1974");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Latheef" + "'", str7, "Latheef");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ben" + "'", str8, "Ben");
    }

    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test026");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureFirstName();
        java.util.Date date12 = conjuror0.conjureBirthDate(0, (int) (byte) 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ian" + "'", str1, "Ian");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Henshaw" + "'", str2, "Henshaw");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Jason Carson" + "'", str3, "Jason Carson");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 16 19:52:56 CST 1968");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jenny" + "'", str7, "Jenny");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vishal Reinicke" + "'", str8, "Vishal Reinicke");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Roger" + "'", str9, "Roger");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon May 15 16:59:26 CDT 2023");
    }

    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test027");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Mark" + "'", str2, "Mark");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Shajina Singh" + "'", str3, "Shajina Singh");
    }

    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test028");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mark" + "'", str1, "Mark");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "McCalden" + "'", str2, "McCalden");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Zoe Lynham" + "'", str3, "Zoe Lynham");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Judy" + "'", str4, "Judy");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ohajuru" + "'", str5, "Ohajuru");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Rachel Osinibi" + "'", str6, "Rachel Osinibi");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Matthew" + "'", str7, "Matthew");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test029");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureString("Elizabeth");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Fatima" + "'", str1, "Fatima");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Campbell" + "'", str2, "Campbell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ken Kumar" + "'", str3, "Ken Kumar");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Andy" + "'", str4, "Andy");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Rea" + "'", str5, "Rea");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Andrea Frutos" + "'", str6, "Andrea Frutos");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Fatima" + "'", str7, "Fatima");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Elizabeth" + "'", str9, "Elizabeth");
    }

    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test030");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass7 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 27 13:15:46 CDT 1992");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Stephen" + "'", str6, "Stephen");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test031");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) 'a', (int) (byte) -1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ken" + "'", str1, "Ken");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hutton" + "'", str2, "Hutton");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Jul 13 18:07:15 CDT 1990");
    }

    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test032");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str7 = conjuror0.conjureLastName();
        java.lang.String str8 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat May 28 18:12:08 CDT 1988");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 14 07:23:13 CST 2012");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shajina Wyatt" + "'", str8, "Shajina Wyatt");
    }

    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test033");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        int int10 = randomUtils0.getListIndex((java.util.List) strList8);
        java.lang.Class<?> wildcardClass11 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test034");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils14 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils14.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils19.getListIndex((java.util.List) strList22);
        int int24 = randomUtils14.getListIndex((java.util.List) strList22);
        int int25 = randomUtils9.getListIndex((java.util.List) strList22);
        int int26 = randomUtils0.getListIndex((java.util.List) strList22);
        java.lang.Class<?> wildcardClass27 = strList22.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test035");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.lang.String str14 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Jul 06 15:26:47 CDT 1976");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 14 12:29:10 CST 2007");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Feb 04 23:20:57 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Shiv" + "'", str10, "Shiv");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ravindra Clarke" + "'", str11, "Ravindra Clarke");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Sarah" + "'", str12, "Sarah");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Andrea" + "'", str13, "Andrea");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Paul Dailey" + "'", str14, "Paul Dailey");
    }

    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test036");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Shone");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Yaseen" + "'", str1, "Yaseen");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Czapiewski" + "'", str2, "Czapiewski");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Jan 17 03:49:38 CST 1982");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shone" + "'", str7, "Shone");
    }

    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test037");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.Class<?> wildcardClass4 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 20 07:02:42 CDT 2002");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test038");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str8 = conjuror0.conjureString("Velu Asif");
        java.lang.String str9 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Lee" + "'", str1, "Lee");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Campbell" + "'", str2, "Campbell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Mark Dhandapani" + "'", str3, "Mark Dhandapani");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Gemma" + "'", str4, "Gemma");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Velu Asif" + "'", str8, "Velu Asif");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Sellathambi" + "'", str9, "Sellathambi");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test039");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Jenny van der Willik");
        java.lang.String str8 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Dave" + "'", str1, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lister" + "'", str2, "Lister");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Oct 01 20:48:36 CDT 2003");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jenny van der Willik" + "'", str7, "Jenny van der Willik");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Shiv" + "'", str8, "Shiv");
    }

    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test040");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.String str11 = conjuror0.conjureFirstName();
        java.util.Date date14 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str15 = conjuror0.conjureLastName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Dec 18 21:45:55 CST 2007");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 29 22:46:37 CDT 2013");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon May 29 00:03:51 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lister" + "'", str10, "Lister");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Gowri" + "'", str11, "Gowri");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue May 27 06:57:50 CDT 1997");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Sangar" + "'", str15, "Sangar");
    }

    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test041");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.util.Date date8 = conjuror0.conjureBirthDate((int) (byte) 100, (int) (byte) 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 08 04:52:59 CDT 2007");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Andrew Osinibi" + "'", str5, "Andrew Osinibi");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 19 10:46:14 CST 1932");
    }

    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test042");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils14 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList16 = resourceUtils14.readResourceToStringList("");
        int int17 = randomUtils9.getListIndex((java.util.List) strList16);
        int int18 = randomUtils0.getListIndex((java.util.List) strList16);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils20 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils20.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils20.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils34 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList36 = resourceUtils34.readResourceToStringList("");
        int int37 = randomUtils29.getListIndex((java.util.List) strList36);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils38 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils39 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList41 = resourceUtils39.readResourceToStringList("");
        int int42 = randomUtils38.getListIndex((java.util.List) strList41);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils43 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList45 = resourceUtils43.readResourceToStringList("");
        int int46 = randomUtils38.getListIndex((java.util.List) strList45);
        int int47 = randomUtils29.getListIndex((java.util.List) strList45);
        int int48 = randomUtils20.getListIndex((java.util.List) strList45);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils49 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils49.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils54 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils55 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList57 = resourceUtils55.readResourceToStringList("");
        int int58 = randomUtils54.getListIndex((java.util.List) strList57);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils54.getListIndex((java.util.List) strList61);
        int int63 = randomUtils49.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils64 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils65 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList67 = resourceUtils65.readResourceToStringList("");
        int int68 = randomUtils64.getListIndex((java.util.List) strList67);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils69 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList71 = resourceUtils69.readResourceToStringList("");
        int int72 = randomUtils64.getListIndex((java.util.List) strList71);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils73 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils74 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList76 = resourceUtils74.readResourceToStringList("");
        int int77 = randomUtils73.getListIndex((java.util.List) strList76);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils78 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils79 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList81 = resourceUtils79.readResourceToStringList("");
        int int82 = randomUtils78.getListIndex((java.util.List) strList81);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils83 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils84 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList86 = resourceUtils84.readResourceToStringList("");
        int int87 = randomUtils83.getListIndex((java.util.List) strList86);
        int int88 = randomUtils78.getListIndex((java.util.List) strList86);
        int int89 = randomUtils73.getListIndex((java.util.List) strList86);
        int int90 = randomUtils64.getListIndex((java.util.List) strList86);
        int int91 = randomUtils49.getListIndex((java.util.List) strList86);
        int int92 = randomUtils20.getListIndex((java.util.List) strList86);
        int int93 = randomUtils19.getListIndex((java.util.List) strList86);
        int int94 = randomUtils0.getListIndex((java.util.List) strList86);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strList16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strList41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strList45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strList57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(strList71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(strList76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strList81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(strList86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test043");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Judy" + "'", str1, "Judy");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 22 08:47:10 CST 2021");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test044");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureLastName();
        java.lang.String str4 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Elisabel Clarke" + "'", str1, "Elisabel Clarke");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Braga" + "'", str2, "Braga");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Hillman" + "'", str3, "Hillman");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Shajina Ching" + "'", str4, "Shajina Ching");
    }

    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test045");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Malcolm" + "'", str1, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "McCrumlish" + "'", str2, "McCrumlish");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ben Frutos" + "'", str3, "Ben Frutos");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Velu" + "'", str4, "Velu");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Hutton" + "'", str7, "Hutton");
    }

    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test046");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureString("Lister");
        java.lang.String str11 = conjuror0.conjureString("Sangar");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Aug 31 13:56:26 CDT 2011");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 02 14:36:30 CDT 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Trevor" + "'", str7, "Trevor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lister" + "'", str9, "Lister");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Sangar" + "'", str11, "Sangar");
    }

    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test047");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("");
        java.util.Date date6 = conjuror0.conjureBirthDate((int) '#', 10);
        java.lang.String str7 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Alex" + "'", str1, "Alex");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 12 19:57:16 CDT 2005");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ram Monteiro" + "'", str7, "Ram Monteiro");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test048");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.lang.String str9 = conjuror0.conjureString("Karuppannan");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sarah" + "'", str1, "Sarah");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Palmer" + "'", str2, "Palmer");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Apr 08 06:12:09 CST 1967");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Karuppannan" + "'", str9, "Karuppannan");
    }

    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test049");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils5.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils14 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils14.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils19 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList21 = resourceUtils19.readResourceToStringList("");
        int int22 = randomUtils14.getListIndex((java.util.List) strList21);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils23 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils24 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList26 = resourceUtils24.readResourceToStringList("");
        int int27 = randomUtils23.getListIndex((java.util.List) strList26);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils28 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList30 = resourceUtils28.readResourceToStringList("");
        int int31 = randomUtils23.getListIndex((java.util.List) strList30);
        int int32 = randomUtils14.getListIndex((java.util.List) strList30);
        int int33 = randomUtils5.getListIndex((java.util.List) strList30);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils44 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList46 = resourceUtils44.readResourceToStringList("");
        int int47 = randomUtils39.getListIndex((java.util.List) strList46);
        int int48 = randomUtils34.getListIndex((java.util.List) strList46);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils49 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils49.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils54 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList56 = resourceUtils54.readResourceToStringList("");
        int int57 = randomUtils49.getListIndex((java.util.List) strList56);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils58 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils58.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils63 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils64 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList66 = resourceUtils64.readResourceToStringList("");
        int int67 = randomUtils63.getListIndex((java.util.List) strList66);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils68 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils69 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList71 = resourceUtils69.readResourceToStringList("");
        int int72 = randomUtils68.getListIndex((java.util.List) strList71);
        int int73 = randomUtils63.getListIndex((java.util.List) strList71);
        int int74 = randomUtils58.getListIndex((java.util.List) strList71);
        int int75 = randomUtils49.getListIndex((java.util.List) strList71);
        int int76 = randomUtils34.getListIndex((java.util.List) strList71);
        int int77 = randomUtils5.getListIndex((java.util.List) strList71);
        int int78 = randomUtils0.getListIndex((java.util.List) strList71);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strList30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strList46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(strList66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(strList71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test050");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        int int15 = randomUtils5.getListIndex((java.util.List) strList13);
        int int16 = randomUtils0.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils17 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils18 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils19 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList21 = resourceUtils19.readResourceToStringList("");
        int int22 = randomUtils18.getListIndex((java.util.List) strList21);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils23 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList25 = resourceUtils23.readResourceToStringList("");
        int int26 = randomUtils18.getListIndex((java.util.List) strList25);
        int int27 = randomUtils17.getListIndex((java.util.List) strList25);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils28 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils34 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList36 = resourceUtils34.readResourceToStringList("");
        int int37 = randomUtils29.getListIndex((java.util.List) strList36);
        int int38 = randomUtils28.getListIndex((java.util.List) strList36);
        int int39 = randomUtils17.getListIndex((java.util.List) strList36);
        int int40 = randomUtils0.getListIndex((java.util.List) strList36);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils41 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils42 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList44 = resourceUtils42.readResourceToStringList("");
        int int45 = randomUtils41.getListIndex((java.util.List) strList44);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils46 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList48 = resourceUtils46.readResourceToStringList("");
        int int49 = randomUtils41.getListIndex((java.util.List) strList48);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils50 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils51 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList53 = resourceUtils51.readResourceToStringList("");
        int int54 = randomUtils50.getListIndex((java.util.List) strList53);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils55 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils56 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList58 = resourceUtils56.readResourceToStringList("");
        int int59 = randomUtils55.getListIndex((java.util.List) strList58);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils60 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils61 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList63 = resourceUtils61.readResourceToStringList("");
        int int64 = randomUtils60.getListIndex((java.util.List) strList63);
        int int65 = randomUtils55.getListIndex((java.util.List) strList63);
        int int66 = randomUtils50.getListIndex((java.util.List) strList63);
        int int67 = randomUtils41.getListIndex((java.util.List) strList63);
        int int68 = randomUtils0.getListIndex((java.util.List) strList63);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strList25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(strList44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strList48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strList53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strList58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strList63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test051");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Jan 16 21:18:21 CST 1978");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 04 07:02:07 CDT 2007");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shajina" + "'", str7, "Shajina");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test052");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Jul 18 22:12:30 CDT 2012");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Jun 08 00:50:58 CDT 2009");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Mar 18 19:24:32 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Balasubramaniam" + "'", str10, "Balasubramaniam");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test053");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureName();
        java.lang.String str14 = conjuror0.conjureLastName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 05 10:01:48 CST 1980");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Nov 12 07:13:07 CST 1968");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Sep 28 12:58:23 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Martin" + "'", str10, "Martin");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Swanson" + "'", str11, "Swanson");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ken" + "'", str12, "Ken");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ravindra Hutton" + "'", str13, "Ravindra Hutton");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ferris" + "'", str14, "Ferris");
    }

    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test054");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (byte) -1, 0);
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Trevor" + "'", str1, "Trevor");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Billingham" + "'", str2, "Billingham");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 15 17:50:24 CST 1945");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 06 22:58:47 CST 2024");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test055");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.lang.String str8 = conjuror0.conjureString("Darry");
        java.lang.String str9 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Arun" + "'", str1, "Arun");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Qazi" + "'", str2, "Qazi");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Mo" + "'", str3, "Mo");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:47 CST 1923");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Darry" + "'", str8, "Darry");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Sarah Sangar" + "'", str9, "Sarah Sangar");
    }

    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test056");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.lang.Class<?> wildcardClass14 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Jul 26 10:13:43 CDT 1974");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 19 19:28:17 CST 1964");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jan 14 11:34:21 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Gabriel" + "'", str10, "Gabriel");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Selva Mulvenna" + "'", str11, "Selva Mulvenna");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Kenneth" + "'", str12, "Kenneth");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jason" + "'", str13, "Jason");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test057");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureLastName();
        java.util.Date date7 = conjuror0.conjureBirthDate((int) '#', (int) (short) 100);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gemma Dailey" + "'", str1, "Gemma Dailey");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Abigail" + "'", str2, "Abigail");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Roger Turner" + "'", str3, "Roger Turner");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Qazi" + "'", str4, "Qazi");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Jul 23 11:41:57 CDT 1958");
    }

    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test058");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass5 = date4.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:47 CDT 2022");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test059");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str13 = conjuror0.conjureString("Andrew Hudson");
        java.lang.String str14 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jul 24 04:29:07 CDT 2014");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 10 20:24:20 CST 1970");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Apr 13 04:34:36 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Gerald" + "'", str10, "Gerald");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Elisabel Patel" + "'", str11, "Elisabel Patel");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Andrew Hudson" + "'", str13, "Andrew Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Susannah" + "'", str14, "Susannah");
    }

    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test060");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass5 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Mar 28 13:05:48 CST 1972");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Gold" + "'", str4, "Gold");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test061");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureLastName();
        java.lang.String str10 = conjuror0.conjureString("Shiv Reinicke");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 16 15:19:53 CDT 2002");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Gerald" + "'", str6, "Gerald");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "John" + "'", str7, "John");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Osinibi" + "'", str8, "Osinibi");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Shiv Reinicke" + "'", str10, "Shiv Reinicke");
    }

    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test062");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.util.Date date7 = conjuror0.conjureBirthDate((int) (short) 1, 0);
        java.lang.String str8 = conjuror0.conjureLastName();
        java.lang.String str9 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chris" + "'", str1, "Chris");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:48 CDT 2022");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Apr 29 04:11:49 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Ohajuru" + "'", str8, "Ohajuru");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Vamsi Campbell" + "'", str9, "Vamsi Campbell");
    }

    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test063");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str5 = conjuror0.conjureString("Gabriel Williams");
        java.lang.String str7 = conjuror0.conjureString("Sangar");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ravindra" + "'", str1, "Ravindra");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hakan Monteiro" + "'", str2, "Hakan Monteiro");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Patrick Barr" + "'", str3, "Patrick Barr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Gabriel Williams" + "'", str5, "Gabriel Williams");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sangar" + "'", str7, "Sangar");
    }

    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test064");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str8 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Abigail" + "'", str1, "Abigail");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sat Aug 28 10:25:00 CDT 2004");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Mar 10 16:01:23 CST 2021");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Roger Campbell" + "'", str8, "Roger Campbell");
    }

    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test065");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("");
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureString("Qazi");
        java.lang.String str7 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Emma" + "'", str1, "Emma");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Trigg" + "'", str4, "Trigg");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Qazi" + "'", str6, "Qazi");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sellathambi" + "'", str7, "Sellathambi");
    }

    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test066");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str10 = conjuror0.conjureString("Zoe Morgan");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Vishal" + "'", str1, "Vishal");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Aug 28 04:56:47 CDT 2006");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ohajuru" + "'", str5, "Ohajuru");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sarah" + "'", str8, "Sarah");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Zoe Morgan" + "'", str10, "Zoe Morgan");
    }

    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test067");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Malcolm" + "'", str1, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Shobrook" + "'", str2, "Shobrook");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lee Osinibi" + "'", str3, "Lee Osinibi");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Elisabel" + "'", str4, "Elisabel");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lister" + "'", str5, "Lister");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dave van der Willik" + "'", str6, "Dave van der Willik");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Stephen" + "'", str7, "Stephen");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Gregg" + "'", str8, "Gregg");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Andrew Mulvenna" + "'", str9, "Andrew Mulvenna");
    }

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, (int) (byte) 100);
        java.util.Date date12 = conjuror0.conjureBirthDate((-1), 10);
        java.lang.String str13 = conjuror0.conjureName();
        java.lang.String str14 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Mar 01 07:02:10 CST 1986");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Sep 10 10:10:11 CDT 1932");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu May 22 04:56:51 CDT 1986");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Apr 12 16:09:33 CDT 2018");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Kishan Sayer" + "'", str13, "Kishan Sayer");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Kenneth Reinicke" + "'", str14, "Kenneth Reinicke");
    }

    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test069");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils1 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils2 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList4 = resourceUtils2.readResourceToStringList("");
        int int5 = randomUtils1.getListIndex((java.util.List) strList4);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils1.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils10.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils19.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils24 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList26 = resourceUtils24.readResourceToStringList("");
        int int27 = randomUtils19.getListIndex((java.util.List) strList26);
        int int28 = randomUtils10.getListIndex((java.util.List) strList26);
        int int29 = randomUtils1.getListIndex((java.util.List) strList26);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils30 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils31 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList33 = resourceUtils31.readResourceToStringList("");
        int int34 = randomUtils30.getListIndex((java.util.List) strList33);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils35 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils36 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList38 = resourceUtils36.readResourceToStringList("");
        int int39 = randomUtils35.getListIndex((java.util.List) strList38);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils35.getListIndex((java.util.List) strList42);
        int int44 = randomUtils30.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils45 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils46 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList48 = resourceUtils46.readResourceToStringList("");
        int int49 = randomUtils45.getListIndex((java.util.List) strList48);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils45.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils54 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils55 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList57 = resourceUtils55.readResourceToStringList("");
        int int58 = randomUtils54.getListIndex((java.util.List) strList57);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils59 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils60 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList62 = resourceUtils60.readResourceToStringList("");
        int int63 = randomUtils59.getListIndex((java.util.List) strList62);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils64 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils65 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList67 = resourceUtils65.readResourceToStringList("");
        int int68 = randomUtils64.getListIndex((java.util.List) strList67);
        int int69 = randomUtils59.getListIndex((java.util.List) strList67);
        int int70 = randomUtils54.getListIndex((java.util.List) strList67);
        int int71 = randomUtils45.getListIndex((java.util.List) strList67);
        int int72 = randomUtils30.getListIndex((java.util.List) strList67);
        int int73 = randomUtils1.getListIndex((java.util.List) strList67);
        int int74 = randomUtils0.getListIndex((java.util.List) strList67);
        java.lang.Class<?> wildcardClass75 = strList67.getClass();
        org.junit.Assert.assertNotNull(strList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(strList33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strList38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(strList48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strList57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(strList62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(strList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test070");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils5.getListIndex((java.util.List) strList12);
        int int14 = randomUtils0.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils15 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils16 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList18 = resourceUtils16.readResourceToStringList("");
        int int19 = randomUtils15.getListIndex((java.util.List) strList18);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils15.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils24 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils24.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        int int39 = randomUtils29.getListIndex((java.util.List) strList37);
        int int40 = randomUtils24.getListIndex((java.util.List) strList37);
        int int41 = randomUtils15.getListIndex((java.util.List) strList37);
        int int42 = randomUtils0.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils43 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils44 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList46 = resourceUtils44.readResourceToStringList("");
        int int47 = randomUtils43.getListIndex((java.util.List) strList46);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils48 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList50 = resourceUtils48.readResourceToStringList("");
        int int51 = randomUtils43.getListIndex((java.util.List) strList50);
        int int52 = randomUtils0.getListIndex((java.util.List) strList50);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils53 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils54 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils55 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList57 = resourceUtils55.readResourceToStringList("");
        int int58 = randomUtils54.getListIndex((java.util.List) strList57);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils54.getListIndex((java.util.List) strList61);
        int int63 = randomUtils53.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils64 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils65 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList67 = resourceUtils65.readResourceToStringList("");
        int int68 = randomUtils64.getListIndex((java.util.List) strList67);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils69 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList71 = resourceUtils69.readResourceToStringList("");
        int int72 = randomUtils64.getListIndex((java.util.List) strList71);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils73 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils74 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList76 = resourceUtils74.readResourceToStringList("");
        int int77 = randomUtils73.getListIndex((java.util.List) strList76);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils78 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils79 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList81 = resourceUtils79.readResourceToStringList("");
        int int82 = randomUtils78.getListIndex((java.util.List) strList81);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils83 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils84 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList86 = resourceUtils84.readResourceToStringList("");
        int int87 = randomUtils83.getListIndex((java.util.List) strList86);
        int int88 = randomUtils78.getListIndex((java.util.List) strList86);
        int int89 = randomUtils73.getListIndex((java.util.List) strList86);
        int int90 = randomUtils64.getListIndex((java.util.List) strList86);
        int int91 = randomUtils53.getListIndex((java.util.List) strList86);
        int int92 = randomUtils0.getListIndex((java.util.List) strList86);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strList46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(strList50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(strList57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strList71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(strList76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strList81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(strList86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test071");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 0, (int) 'a');
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 10 01:50:29 CST 2009");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 18 18:05:12 CDT 1985");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Oct 30 05:01:02 CDT 2009");
    }

    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test072");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str9 = conjuror0.conjureString("Susannah Suarez");
        java.lang.String str10 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Elizabeth" + "'", str1, "Elizabeth");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Jun 01 23:12:07 CDT 1994");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Aug 06 06:17:01 CDT 2019");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Susannah Suarez" + "'", str9, "Susannah Suarez");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Simon Singh" + "'", str10, "Simon Singh");
    }

    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test073");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Linda" + "'", str1, "Linda");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Osinibi" + "'", str2, "Osinibi");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gowri" + "'", str3, "Gowri");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Patrick" + "'", str4, "Patrick");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Tariq" + "'", str5, "Tariq");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Andrew Tariq" + "'", str6, "Andrew Tariq");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Paul" + "'", str7, "Paul");
    }

    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test074");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 100, (int) (byte) 100);
        java.lang.String str11 = conjuror0.conjureString("Mebz");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Shiv" + "'", str1, "Shiv");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sayer" + "'", str2, "Sayer");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Andrea" + "'", str3, "Andrea");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:50 CST 1923");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Oct 31 17:26:50 CST 1923");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Mebz" + "'", str11, "Mebz");
    }

    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test075");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.util.Date date11 = conjuror0.conjureBirthDate((int) ' ', (int) (short) 10);
        java.lang.Class<?> wildcardClass12 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Oct 06 07:36:02 CDT 2014");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 14 00:05:03 CST 1980");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Jul 12 17:58:52 CDT 1993");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test076");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.lang.String str8 = conjuror0.conjureName();
        java.util.Date date11 = conjuror0.conjureBirthDate(0, 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Luke" + "'", str1, "Luke");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Barr" + "'", str2, "Barr");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Jul 06 15:24:57 CDT 1991");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Trevor Frutos" + "'", str8, "Trevor Frutos");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Oct 31 18:26:50 CDT 2023");
    }

    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test077");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.lang.String str14 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Mar 04 03:16:07 CST 1991");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 04 11:33:53 CST 1939");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jul 01 22:05:19 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Seema" + "'", str10, "Seema");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Stephen Turner" + "'", str11, "Stephen Turner");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Simon" + "'", str12, "Simon");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Gabriel" + "'", str13, "Gabriel");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Galla" + "'", str14, "Galla");
    }

    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test078");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.lang.String str6 = conjuror0.conjureString("Hunting");
        java.lang.String str7 = conjuror0.conjureName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 1, 1);
        java.util.Date date13 = conjuror0.conjureBirthDate((int) (short) 10, (int) 'a');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Patrick" + "'", str1, "Patrick");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:50 CDT 2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Hunting" + "'", str6, "Hunting");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "John Patel" + "'", str7, "John Patel");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Oct 31 12:26:50 CDT 2022");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue May 13 02:34:01 CDT 1986");
    }

    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test079");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureString("Amanda Taylor");
        java.lang.String str4 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hamblin" + "'", str1, "Hamblin");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Amanda Taylor" + "'", str3, "Amanda Taylor");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Barr" + "'", str4, "Barr");
    }

    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test080");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.lang.String str8 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Karen" + "'", str1, "Karen");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Jul 25 15:03:26 CDT 2017");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "McCarthy" + "'", str5, "McCarthy");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Karuppannan" + "'", str8, "Karuppannan");
    }

    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.util.Date date7 = conjuror0.conjureBirthDate(100, (int) (byte) -1);
        java.lang.Class<?> wildcardClass8 = date7.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gregg" + "'", str1, "Gregg");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Donnelly" + "'", str2, "Donnelly");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Steve Hartwell" + "'", str3, "Steve Hartwell");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Velu" + "'", str4, "Velu");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Aug 17 18:34:04 CDT 1956");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test082");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureString("Mark");
        java.lang.String str11 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mark" + "'", str1, "Mark");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Campbell" + "'", str2, "Campbell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Abigail Singh" + "'", str3, "Abigail Singh");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dan" + "'", str4, "Dan");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Andy" + "'", str7, "Andy");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Trevor Henshaw" + "'", str8, "Trevor Henshaw");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Mark" + "'", str10, "Mark");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Cassettari" + "'", str11, "Cassettari");
    }

    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test083");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mohammed" + "'", str1, "Mohammed");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Qazi" + "'", str2, "Qazi");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Asim" + "'", str3, "Asim");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Michael" + "'", str4, "Michael");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Luke" + "'", str5, "Luke");
    }

    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test084");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils5.getListIndex((java.util.List) strList12);
        int int14 = randomUtils0.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils15 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils16 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList18 = resourceUtils16.readResourceToStringList("");
        int int19 = randomUtils15.getListIndex((java.util.List) strList18);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils15.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils24 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils24.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        int int39 = randomUtils29.getListIndex((java.util.List) strList37);
        int int40 = randomUtils24.getListIndex((java.util.List) strList37);
        int int41 = randomUtils15.getListIndex((java.util.List) strList37);
        int int42 = randomUtils0.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils43 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils44 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList46 = resourceUtils44.readResourceToStringList("");
        int int47 = randomUtils43.getListIndex((java.util.List) strList46);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils48 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils49 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList51 = resourceUtils49.readResourceToStringList("");
        int int52 = randomUtils48.getListIndex((java.util.List) strList51);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils53 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList55 = resourceUtils53.readResourceToStringList("");
        int int56 = randomUtils48.getListIndex((java.util.List) strList55);
        int int57 = randomUtils43.getListIndex((java.util.List) strList55);
        int int58 = randomUtils0.getListIndex((java.util.List) strList55);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strList46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strList51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strList55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test085");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 10, (int) (byte) 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Shiv" + "'", str1, "Shiv");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asif" + "'", str2, "Asif");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Jay Ohajuru" + "'", str3, "Jay Ohajuru");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Matthew" + "'", str4, "Matthew");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Singh" + "'", str5, "Singh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Susannah Jayabalan" + "'", str6, "Susannah Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ram" + "'", str7, "Ram");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Feb 11 00:42:59 CST 2015");
    }

    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test086");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str11 = conjuror0.conjureString("McCrumlish");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Apr 12 20:33:41 CDT 1998");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Nov 23 21:59:34 CST 2010");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Velu Batmaz" + "'", str9, "Velu Batmaz");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "McCrumlish" + "'", str11, "McCrumlish");
    }

    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test087");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Chopra");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (byte) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon May 17 18:31:18 CDT 2010");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sayer" + "'", str4, "Sayer");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hutton" + "'", str5, "Hutton");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chopra" + "'", str7, "Chopra");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Aug 06 18:43:16 CDT 1931");
    }

    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test088");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.util.Date date9 = conjuror0.conjureBirthDate((int) ' ', 0);
        java.lang.String str11 = conjuror0.conjureString("Andrew Osinibi");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Matthew" + "'", str1, "Matthew");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Mulvenna" + "'", str2, "Mulvenna");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Martin" + "'", str3, "Martin");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Andy" + "'", str4, "Andy");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Hurst" + "'", str5, "Hurst");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sajim Davis" + "'", str6, "Sajim Davis");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Aug 09 16:26:28 CDT 1994");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Andrew Osinibi" + "'", str11, "Andrew Osinibi");
    }

    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test089");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str11 = conjuror0.conjureString("Vishal McCarthy");
        java.lang.String str13 = conjuror0.conjureString("Vamsi");
        java.lang.String str15 = conjuror0.conjureString("");
        java.lang.String str16 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Jul 28 09:22:58 CDT 2004");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Sep 29 05:46:39 CDT 1980");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 27 15:56:49 CST 2023");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vishal McCarthy" + "'", str11, "Vishal McCarthy");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vamsi" + "'", str13, "Vamsi");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dan" + "'", str16, "Dan");
    }

    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test090");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Chopra");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) '4', (int) 'a');
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Nov 26 04:57:32 CST 1980");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dailey" + "'", str4, "Dailey");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "van der Willik" + "'", str5, "van der Willik");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chopra" + "'", str7, "Chopra");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Dec 16 21:58:22 CST 1968");
    }

    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test091");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Shajina" + "'", str1, "Shajina");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Balasubramaniam" + "'", str2, "Balasubramaniam");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue May 21 00:56:29 CDT 2002");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "John" + "'", str6, "John");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Gregg Campbell" + "'", str7, "Gregg Campbell");
    }

    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test092");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureString("Waqar");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 16 14:41:51 CST 1984");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Trevor" + "'", str6, "Trevor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Waqar" + "'", str8, "Waqar");
    }

    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test093");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.lang.String str14 = conjuror0.conjureLastName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Oct 13 23:50:14 CDT 1983");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Mar 28 04:14:08 CST 2001");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Aug 13 22:37:18 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Sean" + "'", str10, "Sean");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Susannah Heron" + "'", str11, "Susannah Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Alex" + "'", str12, "Alex");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dan" + "'", str13, "Dan");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Turner" + "'", str14, "Turner");
    }

    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test094");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.lang.String str8 = conjuror0.conjureString("David");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asim" + "'", str1, "Asim");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Patel" + "'", str2, "Patel");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Mebz Dhandapani" + "'", str3, "Mebz Dhandapani");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Oct 08 08:59:06 CDT 1978");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "David" + "'", str8, "David");
    }

    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test095");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils10.getListIndex((java.util.List) strList17);
        int int19 = randomUtils5.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils20 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils20.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils20.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        int int44 = randomUtils34.getListIndex((java.util.List) strList42);
        int int45 = randomUtils29.getListIndex((java.util.List) strList42);
        int int46 = randomUtils20.getListIndex((java.util.List) strList42);
        int int47 = randomUtils5.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils48 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils49 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils49.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils54 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList56 = resourceUtils54.readResourceToStringList("");
        int int57 = randomUtils49.getListIndex((java.util.List) strList56);
        int int58 = randomUtils48.getListIndex((java.util.List) strList56);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils48.getListIndex((java.util.List) strList61);
        int int63 = randomUtils5.getListIndex((java.util.List) strList61);
        int int64 = randomUtils0.getListIndex((java.util.List) strList61);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test096");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) (byte) 1);
        java.util.Date date7 = conjuror0.conjureBirthDate((int) (short) 10, (int) (byte) 0);
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Laura" + "'", str1, "Laura");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 26 09:24:29 CST 2023");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Feb 26 00:28:45 CST 2014");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test097");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.util.Date date14 = conjuror0.conjureBirthDate(1, (int) (short) 10);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 16 02:14:50 CST 1992");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jul 27 11:21:58 CDT 2014");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Nov 16 20:47:39 CST 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Shobrook" + "'", str10, "Shobrook");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Swanson" + "'", str11, "Swanson");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Thu Jul 05 20:41:27 CDT 2018");
    }

    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test098");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils14 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils14.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils19.getListIndex((java.util.List) strList22);
        int int24 = randomUtils14.getListIndex((java.util.List) strList22);
        int int25 = randomUtils9.getListIndex((java.util.List) strList22);
        int int26 = randomUtils0.getListIndex((java.util.List) strList22);
        java.lang.Class<?> wildcardClass27 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test099");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Ian Karuppannan");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jenny" + "'", str1, "Jenny");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Patel" + "'", str2, "Patel");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "James Gawith" + "'", str3, "James Gawith");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ravindra" + "'", str4, "Ravindra");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Latheef" + "'", str5, "Latheef");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ian Karuppannan" + "'", str7, "Ian Karuppannan");
    }

    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test100");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 100, (int) (byte) 100);
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gerald" + "'", str1, "Gerald");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hudson" + "'", str2, "Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Dan" + "'", str3, "Dan");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:51 CST 1923");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Oct 31 17:26:51 CST 1923");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test101");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Shiv");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 07 01:21:01 CST 2010");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Sangar" + "'", str5, "Sangar");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Shiv" + "'", str7, "Shiv");
    }

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str13 = conjuror0.conjureString("Andrew Hudson");
        java.lang.String str14 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Sep 26 08:29:20 CDT 1994");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 13 14:32:20 CST 1933");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Sep 15 03:50:17 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Malcolm" + "'", str10, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Martin Carson" + "'", str11, "Martin Carson");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Andrew Hudson" + "'", str13, "Andrew Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Judy Donnelly" + "'", str14, "Judy Donnelly");
    }

    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test103");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass6 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asim" + "'", str1, "Asim");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sayer" + "'", str2, "Sayer");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Rachel" + "'", str3, "Rachel");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Laura" + "'", str4, "Laura");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Jayabalan" + "'", str5, "Jayabalan");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test104");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.util.Date date7 = conjuror0.conjureBirthDate(100, (int) (byte) -1);
        java.lang.String str9 = conjuror0.conjureString("Latheef");
        java.lang.String str11 = conjuror0.conjureString("Davis");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Toby" + "'", str1, "Toby");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Dhandapani" + "'", str2, "Dhandapani");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Yaseen Purkis" + "'", str3, "Yaseen Purkis");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Mebz" + "'", str4, "Mebz");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 31 23:22:09 CST 1967");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Latheef" + "'", str9, "Latheef");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Davis" + "'", str11, "Davis");
    }

    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test105");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("");
        java.lang.String str4 = conjuror0.conjureLastName();
        java.util.Date date7 = conjuror0.conjureBirthDate((-1), 100);
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gregg" + "'", str1, "Gregg");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Gooding" + "'", str4, "Gooding");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Dec 14 15:26:48 CST 1990");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Susannah Darry" + "'", str8, "Susannah Darry");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chris Peapell" + "'", str9, "Chris Peapell");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test106");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sayvai" + "'", str1, "Sayvai");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Frutos" + "'", str2, "Frutos");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jun 28 14:42:48 CDT 2000");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Fatima" + "'", str6, "Fatima");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jonathan" + "'", str7, "Jonathan");
    }

    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test107");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.util.Date date15 = conjuror0.conjureBirthDate((int) (short) 100, (int) ' ');
        java.lang.String str16 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Sep 10 21:26:47 CDT 1975");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 05 20:09:47 CST 1986");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Aug 21 10:41:33 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Karen" + "'", str10, "Karen");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jay Chattun" + "'", str11, "Jay Chattun");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Gerald" + "'", str12, "Gerald");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sun Nov 13 21:48:34 CST 1988");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Pete Barry" + "'", str16, "Pete Barry");
    }

    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test108");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gemma" + "'", str1, "Gemma");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Nartey" + "'", str2, "Nartey");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ram Chattun" + "'", str3, "Ram Chattun");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Estelle" + "'", str4, "Estelle");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Emma" + "'", str7, "Emma");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sun Nov 08 03:01:22 CST 2015");
    }

    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test109");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        java.lang.Class<?> wildcardClass5 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test110");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str6 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Linda" + "'", str1, "Linda");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hartwell" + "'", str2, "Hartwell");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Sep 03 23:46:50 CDT 2021");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Qazi" + "'", str6, "Qazi");
    }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Chopra");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (byte) 0, (int) 'a');
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 31 17:52:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chopra" + "'", str4, "Chopra");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Rahman" + "'", str5, "Rahman");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chopra" + "'", str7, "Chopra");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Feb 29 04:19:36 CST 1996");
    }

    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test112");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        int int10 = randomUtils0.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils11 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils12 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList14 = resourceUtils12.readResourceToStringList("");
        int int15 = randomUtils11.getListIndex((java.util.List) strList14);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils16 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils17 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList19 = resourceUtils17.readResourceToStringList("");
        int int20 = randomUtils16.getListIndex((java.util.List) strList19);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils16.getListIndex((java.util.List) strList23);
        int int25 = randomUtils11.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils26 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils27 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList29 = resourceUtils27.readResourceToStringList("");
        int int30 = randomUtils26.getListIndex((java.util.List) strList29);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils31 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList33 = resourceUtils31.readResourceToStringList("");
        int int34 = randomUtils26.getListIndex((java.util.List) strList33);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils35 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils36 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList38 = resourceUtils36.readResourceToStringList("");
        int int39 = randomUtils35.getListIndex((java.util.List) strList38);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils40 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils41 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList43 = resourceUtils41.readResourceToStringList("");
        int int44 = randomUtils40.getListIndex((java.util.List) strList43);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils45 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils46 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList48 = resourceUtils46.readResourceToStringList("");
        int int49 = randomUtils45.getListIndex((java.util.List) strList48);
        int int50 = randomUtils40.getListIndex((java.util.List) strList48);
        int int51 = randomUtils35.getListIndex((java.util.List) strList48);
        int int52 = randomUtils26.getListIndex((java.util.List) strList48);
        int int53 = randomUtils11.getListIndex((java.util.List) strList48);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils54 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils55 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils56 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList58 = resourceUtils56.readResourceToStringList("");
        int int59 = randomUtils55.getListIndex((java.util.List) strList58);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils60 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList62 = resourceUtils60.readResourceToStringList("");
        int int63 = randomUtils55.getListIndex((java.util.List) strList62);
        int int64 = randomUtils54.getListIndex((java.util.List) strList62);
        int int65 = randomUtils11.getListIndex((java.util.List) strList62);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils66 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils67 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList69 = resourceUtils67.readResourceToStringList("");
        int int70 = randomUtils66.getListIndex((java.util.List) strList69);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils71 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList73 = resourceUtils71.readResourceToStringList("");
        int int74 = randomUtils66.getListIndex((java.util.List) strList73);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils75 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils76 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList78 = resourceUtils76.readResourceToStringList("");
        int int79 = randomUtils75.getListIndex((java.util.List) strList78);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils80 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList82 = resourceUtils80.readResourceToStringList("");
        int int83 = randomUtils75.getListIndex((java.util.List) strList82);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils84 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils85 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList87 = resourceUtils85.readResourceToStringList("");
        int int88 = randomUtils84.getListIndex((java.util.List) strList87);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils89 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList91 = resourceUtils89.readResourceToStringList("");
        int int92 = randomUtils84.getListIndex((java.util.List) strList91);
        int int93 = randomUtils75.getListIndex((java.util.List) strList91);
        int int94 = randomUtils66.getListIndex((java.util.List) strList91);
        int int95 = randomUtils11.getListIndex((java.util.List) strList91);
        int int96 = randomUtils0.getListIndex((java.util.List) strList91);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(strList14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strList19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strList29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(strList33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(strList38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strList43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(strList48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(strList58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strList62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strList69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strList73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(strList78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strList82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(strList87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(strList91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test113");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) 1);
        java.lang.String str10 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jason" + "'", str1, "Jason");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rahman" + "'", str2, "Rahman");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Pete Alang" + "'", str3, "Pete Alang");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 20 20:46:55 CST 1950");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Feb 07 04:09:43 CST 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jay Dexter" + "'", str10, "Jay Dexter");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test114");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Sajim Dailey");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Matthew" + "'", str1, "Matthew");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sellathambi" + "'", str2, "Sellathambi");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Kamran Suarez" + "'", str3, "Kamran Suarez");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Luke" + "'", str4, "Luke");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Batmaz" + "'", str5, "Batmaz");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sajim Dailey" + "'", str7, "Sajim Dailey");
    }

    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test115");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.util.Date date7 = conjuror0.conjureBirthDate(100, (int) (byte) -1);
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureFirstName();
        java.lang.String str10 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Paul" + "'", str1, "Paul");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Peapell" + "'", str2, "Peapell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "James Ferris" + "'", str3, "James Ferris");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Steve" + "'", str4, "Steve");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Mar 31 17:57:02 CST 1965");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Stephen" + "'", str8, "Stephen");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ravindra" + "'", str9, "Ravindra");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Alang" + "'", str10, "Alang");
    }

    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test116");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 10, (int) (byte) -1);
        java.util.Date date13 = conjuror0.conjureBirthDate((int) 'a', (int) (byte) 10);
        java.util.Date date16 = conjuror0.conjureBirthDate((int) '#', (int) (byte) 1);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 26 12:05:24 CST 1978");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Richard" + "'", str6, "Richard");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Richard" + "'", str7, "Richard");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Mar 21 00:40:48 CDT 2018");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sun Nov 30 08:51:27 CST 1969");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri May 15 22:41:14 CDT 2009");
    }

    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test117");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) (byte) 1, (int) (short) -1);
        java.lang.String str4 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 11 05:04:28 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Laura Reinicke" + "'", str4, "Laura Reinicke");
    }

    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test118");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("Andrew Hudson");
        java.lang.String str5 = conjuror0.conjureString("Gabriel Gold");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Malcolm" + "'", str1, "Malcolm");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Andrew Hudson" + "'", str3, "Andrew Hudson");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Gabriel Gold" + "'", str5, "Gabriel Gold");
    }

    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test119");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str8 = conjuror0.conjureString("Velu Asif");
        java.lang.String str9 = conjuror0.conjureName();
        java.util.Date date12 = conjuror0.conjureBirthDate(10, (int) ' ');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sean" + "'", str1, "Sean");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Dexter" + "'", str2, "Dexter");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Emma Barry" + "'", str3, "Emma Barry");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Andrew" + "'", str4, "Andrew");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Velu Asif" + "'", str8, "Velu Asif");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Luke Morgan" + "'", str9, "Luke Morgan");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jun 30 23:43:25 CDT 2005");
    }

    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test120");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str7 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 07 10:11:04 CDT 1979");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 07 00:08:59 CDT 2015");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Martin" + "'", str7, "Martin");
    }

    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test121");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils14 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList16 = resourceUtils14.readResourceToStringList("");
        int int17 = randomUtils9.getListIndex((java.util.List) strList16);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils18 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils19 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList21 = resourceUtils19.readResourceToStringList("");
        int int22 = randomUtils18.getListIndex((java.util.List) strList21);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils23 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList25 = resourceUtils23.readResourceToStringList("");
        int int26 = randomUtils18.getListIndex((java.util.List) strList25);
        int int27 = randomUtils9.getListIndex((java.util.List) strList25);
        int int28 = randomUtils0.getListIndex((java.util.List) strList25);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils39 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList41 = resourceUtils39.readResourceToStringList("");
        int int42 = randomUtils34.getListIndex((java.util.List) strList41);
        int int43 = randomUtils29.getListIndex((java.util.List) strList41);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils44 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils45 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList47 = resourceUtils45.readResourceToStringList("");
        int int48 = randomUtils44.getListIndex((java.util.List) strList47);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils49 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList51 = resourceUtils49.readResourceToStringList("");
        int int52 = randomUtils44.getListIndex((java.util.List) strList51);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils53 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils54 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList56 = resourceUtils54.readResourceToStringList("");
        int int57 = randomUtils53.getListIndex((java.util.List) strList56);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils58 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils58.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils63 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils64 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList66 = resourceUtils64.readResourceToStringList("");
        int int67 = randomUtils63.getListIndex((java.util.List) strList66);
        int int68 = randomUtils58.getListIndex((java.util.List) strList66);
        int int69 = randomUtils53.getListIndex((java.util.List) strList66);
        int int70 = randomUtils44.getListIndex((java.util.List) strList66);
        int int71 = randomUtils29.getListIndex((java.util.List) strList66);
        int int72 = randomUtils0.getListIndex((java.util.List) strList66);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils73 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils74 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList76 = resourceUtils74.readResourceToStringList("");
        int int77 = randomUtils73.getListIndex((java.util.List) strList76);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils78 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList80 = resourceUtils78.readResourceToStringList("");
        int int81 = randomUtils73.getListIndex((java.util.List) strList80);
        int int82 = randomUtils0.getListIndex((java.util.List) strList80);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils83 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils84 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList86 = resourceUtils84.readResourceToStringList("");
        java.util.List<java.lang.String> strList88 = resourceUtils84.readResourceToStringList("");
        int int89 = randomUtils83.getListIndex((java.util.List) strList88);
        int int90 = randomUtils0.getListIndex((java.util.List) strList88);
        java.lang.Class<?> wildcardClass91 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strList16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(strList25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strList41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strList47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strList51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strList66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(strList76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(strList80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList88);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test122");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureString("Cassettari");
        java.lang.String str9 = conjuror0.conjureLastName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 24 21:51:04 CST 1979");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Selva" + "'", str6, "Selva");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Cassettari" + "'", str8, "Cassettari");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Purkis" + "'", str9, "Purkis");
    }

    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test123");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) 1);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str12 = conjuror0.conjureString("Mohammed");
        java.lang.String str14 = conjuror0.conjureString("Chris");
        java.lang.String str15 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Pete" + "'", str1, "Pete");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Destr\351e" + "'", str2, "Destr\351e");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ken Kumar" + "'", str3, "Ken Kumar");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 24 09:44:34 CST 1953");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Apr 06 04:11:28 CDT 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "David" + "'", str10, "David");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mohammed" + "'", str12, "Mohammed");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chris" + "'", str14, "Chris");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Vamsi" + "'", str15, "Vamsi");
    }

    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test124");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Trevor" + "'", str1, "Trevor");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sat Apr 21 03:09:40 CDT 2001");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Heron" + "'", str5, "Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "David Drage" + "'", str6, "David Drage");
    }

    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test125");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
        java.util.Date date10 = conjuror0.conjureBirthDate(0, (int) (byte) 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sam" + "'", str1, "Sam");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Sep 29 19:41:23 CDT 1992");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Richard Williams" + "'", str5, "Richard Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Gregg Hamblin" + "'", str6, "Gregg Hamblin");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Gregg Campbell" + "'", str7, "Gregg Campbell");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Jun 19 15:31:27 CDT 2023");
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.lang.String str6 = conjuror0.conjureString("Hunting");
        java.lang.String str7 = conjuror0.conjureName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) -1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ram" + "'", str1, "Ram");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:54 CDT 2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Hunting" + "'", str6, "Hunting");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Abigail Yiu" + "'", str7, "Abigail Yiu");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Oct 31 00:26:54 CDT 2024");
    }

    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test127");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.util.Date date7 = conjuror0.conjureBirthDate((int) (short) 1, 0);
        java.util.Date date10 = conjuror0.conjureBirthDate((int) '#', (int) (byte) 10);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Lee" + "'", str1, "Lee");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:54 CDT 2022");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Aug 14 19:31:38 CDT 2023");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Jan 08 07:10:29 CST 1996");
    }

    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test128");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.util.Date date10 = conjuror0.conjureBirthDate((-1), 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sayvai" + "'", str1, "Sayvai");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Morgan" + "'", str2, "Morgan");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gemma Barr" + "'", str3, "Gemma Barr");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Amanda" + "'", str4, "Amanda");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Patel" + "'", str5, "Patel");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Kenneth Hudson" + "'", str6, "Kenneth Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asim" + "'", str7, "Asim");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Mar 07 00:53:59 CST 2024");
    }

    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test129");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils1 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils2 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList4 = resourceUtils2.readResourceToStringList("");
        int int5 = randomUtils1.getListIndex((java.util.List) strList4);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils1.getListIndex((java.util.List) strList8);
        int int10 = randomUtils0.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils11 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils12 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils13 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList15 = resourceUtils13.readResourceToStringList("");
        int int16 = randomUtils12.getListIndex((java.util.List) strList15);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils17 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList19 = resourceUtils17.readResourceToStringList("");
        int int20 = randomUtils12.getListIndex((java.util.List) strList19);
        int int21 = randomUtils11.getListIndex((java.util.List) strList19);
        int int22 = randomUtils0.getListIndex((java.util.List) strList19);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils23 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils24 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList26 = resourceUtils24.readResourceToStringList("");
        int int27 = randomUtils23.getListIndex((java.util.List) strList26);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils28 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils29 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList31 = resourceUtils29.readResourceToStringList("");
        int int32 = randomUtils28.getListIndex((java.util.List) strList31);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils33 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList35 = resourceUtils33.readResourceToStringList("");
        int int36 = randomUtils28.getListIndex((java.util.List) strList35);
        int int37 = randomUtils23.getListIndex((java.util.List) strList35);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils38 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils39 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList41 = resourceUtils39.readResourceToStringList("");
        int int42 = randomUtils38.getListIndex((java.util.List) strList41);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils43 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList45 = resourceUtils43.readResourceToStringList("");
        int int46 = randomUtils38.getListIndex((java.util.List) strList45);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils47 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils48 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList50 = resourceUtils48.readResourceToStringList("");
        int int51 = randomUtils47.getListIndex((java.util.List) strList50);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils52 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils53 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList55 = resourceUtils53.readResourceToStringList("");
        int int56 = randomUtils52.getListIndex((java.util.List) strList55);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils57 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils58 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList60 = resourceUtils58.readResourceToStringList("");
        int int61 = randomUtils57.getListIndex((java.util.List) strList60);
        int int62 = randomUtils52.getListIndex((java.util.List) strList60);
        int int63 = randomUtils47.getListIndex((java.util.List) strList60);
        int int64 = randomUtils38.getListIndex((java.util.List) strList60);
        int int65 = randomUtils23.getListIndex((java.util.List) strList60);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils66 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils67 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils68 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList70 = resourceUtils68.readResourceToStringList("");
        int int71 = randomUtils67.getListIndex((java.util.List) strList70);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils72 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList74 = resourceUtils72.readResourceToStringList("");
        int int75 = randomUtils67.getListIndex((java.util.List) strList74);
        int int76 = randomUtils66.getListIndex((java.util.List) strList74);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils77 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList79 = resourceUtils77.readResourceToStringList("");
        int int80 = randomUtils66.getListIndex((java.util.List) strList79);
        int int81 = randomUtils23.getListIndex((java.util.List) strList79);
        int int82 = randomUtils0.getListIndex((java.util.List) strList79);
        org.junit.Assert.assertNotNull(strList4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strList15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strList19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(strList31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strList35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(strList41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strList45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(strList50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(strList55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(strList60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strList70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strList74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(strList79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test130");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str11 = conjuror0.conjureString("Hartwell");
        java.lang.String str12 = conjuror0.conjureLastName();
        java.util.Date date15 = conjuror0.conjureBirthDate(0, (-1));
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 20 11:02:15 CST 2021");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Jan 07 11:35:37 CST 1935");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Mo Dexter" + "'", str9, "Mo Dexter");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Hartwell" + "'", str11, "Hartwell");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Heron" + "'", str12, "Heron");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Nov 25 02:41:40 CST 2023");
    }

    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test131");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str9 = conjuror0.conjureString("Susannah Suarez");
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Alex" + "'", str1, "Alex");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Dec 10 11:19:46 CST 2006");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Nov 16 21:54:53 CST 1998");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Susannah Suarez" + "'", str9, "Susannah Suarez");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test132");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureString("Arun");
        java.lang.Class<?> wildcardClass10 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Kenneth" + "'", str1, "Kenneth");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hillman" + "'", str2, "Hillman");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Martin Hudson" + "'", str3, "Martin Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sam" + "'", str4, "Sam");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Estelle" + "'", str7, "Estelle");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Arun" + "'", str9, "Arun");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test133");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) 1);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Simon" + "'", str1, "Simon");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rea" + "'", str2, "Rea");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Mebz Palmer" + "'", str3, "Mebz Palmer");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 04 14:57:28 CST 1940");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Nov 03 00:32:32 CDT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Kenneth" + "'", str10, "Kenneth");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Pete" + "'", str11, "Pete");
    }

    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test134");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str11 = conjuror0.conjureString("Vishal McCarthy");
        java.lang.String str13 = conjuror0.conjureString("Vamsi");
        java.lang.String str15 = conjuror0.conjureString("");
        java.lang.String str16 = conjuror0.conjureLastName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat May 19 23:06:08 CDT 1984");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 01 00:04:06 CST 2009");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Nov 14 15:12:37 CST 2022");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vishal McCarthy" + "'", str11, "Vishal McCarthy");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vamsi" + "'", str13, "Vamsi");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Davis" + "'", str16, "Davis");
    }

    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test135");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass13 = conjuror0.getClass();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 31 14:39:16 CST 1998");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Aug 23 06:15:59 CDT 1977");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 04 11:30:35 CST 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Martin" + "'", str10, "Martin");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Campbell" + "'", str11, "Campbell");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mebz Asif" + "'", str12, "Mebz Asif");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test136");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.util.Date date8 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Dec 22 04:06:50 CST 2006");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Oct 31 17:26:55 CST 1923");
    }

    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test137");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str6 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "David McCarthy" + "'", str1, "David McCarthy");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Steve" + "'", str2, "Steve");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ken Gawith" + "'", str3, "Ken Gawith");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Frutos" + "'", str4, "Frutos");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Simon Nartey" + "'", str5, "Simon Nartey");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Abigail Dhandapani" + "'", str6, "Abigail Dhandapani");
    }

    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test138");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.util.Date date9 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.String str10 = conjuror0.conjureName();
        java.lang.String str11 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "James" + "'", str1, "James");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Drage" + "'", str2, "Drage");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Patrick Henshaw" + "'", str3, "Patrick Henshaw");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Michael" + "'", str4, "Michael");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Mar 06 12:14:49 CST 1956");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ravindra Osinibi" + "'", str10, "Ravindra Osinibi");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Stephen Rea" + "'", str11, "Stephen Rea");
    }

    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test139");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mark Sellathambi" + "'", str1, "Mark Sellathambi");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Toby" + "'", str2, "Toby");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ben Wyatt" + "'", str3, "Ben Wyatt");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Heron" + "'", str4, "Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Michael" + "'", str5, "Michael");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sam Ohajuru" + "'", str6, "Sam Ohajuru");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Zoe Trigg" + "'", str7, "Zoe Trigg");
    }

    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test140");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureFirstName();
        java.lang.String str10 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mebz" + "'", str1, "Mebz");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ching" + "'", str2, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Malcolm Williams" + "'", str3, "Malcolm Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Mo" + "'", str4, "Mo");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Galla" + "'", str7, "Galla");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Roger Lynham" + "'", str8, "Roger Lynham");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Fatima" + "'", str9, "Fatima");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Nartey" + "'", str10, "Nartey");
    }

    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test141");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Jenny van der Willik");
        java.util.Date date10 = conjuror0.conjureBirthDate(100, (int) (byte) 10);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Lee" + "'", str1, "Lee");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rahman" + "'", str2, "Rahman");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Sep 01 07:58:12 CDT 1977");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jenny van der Willik" + "'", str7, "Jenny van der Willik");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Oct 09 01:59:40 CDT 2012");
    }

    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test142");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun May 28 12:05:51 CDT 1989");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Apr 24 00:01:15 CDT 1943");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Mar 24 17:34:26 CDT 2014");
    }

    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test143");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str10 = conjuror0.conjureString("Campbell");
        java.lang.String str11 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Abigail" + "'", str1, "Abigail");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Nov 11 02:19:58 CST 2019");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sun May 03 18:34:21 CDT 2015");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vishal" + "'", str8, "Vishal");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Campbell" + "'", str10, "Campbell");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Cassettari" + "'", str11, "Cassettari");
    }

    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test144");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils14 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList16 = resourceUtils14.readResourceToStringList("");
        int int17 = randomUtils9.getListIndex((java.util.List) strList16);
        int int18 = randomUtils0.getListIndex((java.util.List) strList16);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils19.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils24 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList26 = resourceUtils24.readResourceToStringList("");
        int int27 = randomUtils19.getListIndex((java.util.List) strList26);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils28 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils29 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList31 = resourceUtils29.readResourceToStringList("");
        int int32 = randomUtils28.getListIndex((java.util.List) strList31);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils33 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList35 = resourceUtils33.readResourceToStringList("");
        int int36 = randomUtils28.getListIndex((java.util.List) strList35);
        int int37 = randomUtils19.getListIndex((java.util.List) strList35);
        int int38 = randomUtils0.getListIndex((java.util.List) strList35);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils44 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils45 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList47 = resourceUtils45.readResourceToStringList("");
        int int48 = randomUtils44.getListIndex((java.util.List) strList47);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils49 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList51 = resourceUtils49.readResourceToStringList("");
        int int52 = randomUtils44.getListIndex((java.util.List) strList51);
        int int53 = randomUtils39.getListIndex((java.util.List) strList51);
        int int54 = randomUtils0.getListIndex((java.util.List) strList51);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strList16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strList31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strList35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strList47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strList51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test145");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str11 = conjuror0.conjureString("Vishal McCarthy");
        java.lang.String str13 = conjuror0.conjureString("Vamsi");
        java.lang.String str14 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Aug 19 20:14:49 CDT 1996");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 23 16:56:13 CST 2012");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 11 06:34:42 CST 2023");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vishal McCarthy" + "'", str11, "Vishal McCarthy");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vamsi" + "'", str13, "Vamsi");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Sayvai Hutton" + "'", str14, "Sayvai Hutton");
    }

    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test146");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Zoe" + "'", str1, "Zoe");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 21 19:18:40 CST 2017");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Billingham" + "'", str5, "Billingham");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sean" + "'", str8, "Sean");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Seema Tosu" + "'", str9, "Seema Tosu");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Andy Ketteringham" + "'", str10, "Andy Ketteringham");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test147");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils5.getListIndex((java.util.List) strList12);
        int int14 = randomUtils0.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils15 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils16 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList18 = resourceUtils16.readResourceToStringList("");
        int int19 = randomUtils15.getListIndex((java.util.List) strList18);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils15.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils24 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils24.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        int int39 = randomUtils29.getListIndex((java.util.List) strList37);
        int int40 = randomUtils24.getListIndex((java.util.List) strList37);
        int int41 = randomUtils15.getListIndex((java.util.List) strList37);
        int int42 = randomUtils0.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils43 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils44 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils45 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList47 = resourceUtils45.readResourceToStringList("");
        int int48 = randomUtils44.getListIndex((java.util.List) strList47);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils49 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList51 = resourceUtils49.readResourceToStringList("");
        int int52 = randomUtils44.getListIndex((java.util.List) strList51);
        int int53 = randomUtils43.getListIndex((java.util.List) strList51);
        int int54 = randomUtils0.getListIndex((java.util.List) strList51);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils55 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils56 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList58 = resourceUtils56.readResourceToStringList("");
        int int59 = randomUtils55.getListIndex((java.util.List) strList58);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils60 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList62 = resourceUtils60.readResourceToStringList("");
        int int63 = randomUtils55.getListIndex((java.util.List) strList62);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils64 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils65 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList67 = resourceUtils65.readResourceToStringList("");
        int int68 = randomUtils64.getListIndex((java.util.List) strList67);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils69 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList71 = resourceUtils69.readResourceToStringList("");
        int int72 = randomUtils64.getListIndex((java.util.List) strList71);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils73 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils74 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList76 = resourceUtils74.readResourceToStringList("");
        int int77 = randomUtils73.getListIndex((java.util.List) strList76);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils78 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList80 = resourceUtils78.readResourceToStringList("");
        int int81 = randomUtils73.getListIndex((java.util.List) strList80);
        int int82 = randomUtils64.getListIndex((java.util.List) strList80);
        int int83 = randomUtils55.getListIndex((java.util.List) strList80);
        int int84 = randomUtils0.getListIndex((java.util.List) strList80);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils85 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils86 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList88 = resourceUtils86.readResourceToStringList("");
        int int89 = randomUtils85.getListIndex((java.util.List) strList88);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils90 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils91 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList93 = resourceUtils91.readResourceToStringList("");
        int int94 = randomUtils90.getListIndex((java.util.List) strList93);
        int int95 = randomUtils85.getListIndex((java.util.List) strList93);
        int int96 = randomUtils0.getListIndex((java.util.List) strList93);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strList47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strList51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strList58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strList62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(strList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(strList71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(strList76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strList80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(strList88);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(strList93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test148");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Waqar" + "'", str1, "Waqar");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Jun 21 09:56:12 CDT 2009");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Balasubramaniam" + "'", str5, "Balasubramaniam");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chris" + "'", str8, "Chris");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ken Kemp" + "'", str9, "Ken Kemp");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Gawith" + "'", str10, "Gawith");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test149");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils10.getListIndex((java.util.List) strList17);
        int int19 = randomUtils9.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils20 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils20.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils20.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        int int44 = randomUtils34.getListIndex((java.util.List) strList42);
        int int45 = randomUtils29.getListIndex((java.util.List) strList42);
        int int46 = randomUtils20.getListIndex((java.util.List) strList42);
        int int47 = randomUtils9.getListIndex((java.util.List) strList42);
        int int48 = randomUtils0.getListIndex((java.util.List) strList42);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test150");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.util.Date date7 = conjuror0.conjureBirthDate((int) (short) 1, 0);
        java.lang.String str8 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sajim" + "'", str1, "Sajim");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:56 CDT 2022");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 03 06:51:04 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Steve Donnelly" + "'", str8, "Steve Donnelly");
    }

    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test151");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) 100, (int) (byte) 100);
        java.lang.String str10 = conjuror0.conjureName();
        java.lang.String str11 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mo" + "'", str1, "Mo");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hartwell" + "'", str2, "Hartwell");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Shiv" + "'", str3, "Shiv");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:56 CST 1923");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Oct 31 17:26:56 CST 1923");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Velu Gawith" + "'", str10, "Velu Gawith");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Sean" + "'", str11, "Sean");
    }

    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test152");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureLastName();
        java.util.Date date9 = conjuror0.conjureBirthDate((-1), (int) '4');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ben" + "'", str1, "Ben");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sat Sep 10 15:14:51 CDT 2005");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Gowri" + "'", str5, "Gowri");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Destr\351e" + "'", str6, "Destr\351e");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Sep 10 04:12:44 CDT 1972");
    }

    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test153");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        int int15 = randomUtils5.getListIndex((java.util.List) strList13);
        int int16 = randomUtils0.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils17 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils18 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList20 = resourceUtils18.readResourceToStringList("");
        int int21 = randomUtils17.getListIndex((java.util.List) strList20);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils22 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils23 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList25 = resourceUtils23.readResourceToStringList("");
        int int26 = randomUtils22.getListIndex((java.util.List) strList25);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils27 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList29 = resourceUtils27.readResourceToStringList("");
        int int30 = randomUtils22.getListIndex((java.util.List) strList29);
        int int31 = randomUtils17.getListIndex((java.util.List) strList29);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils32 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils33 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList35 = resourceUtils33.readResourceToStringList("");
        int int36 = randomUtils32.getListIndex((java.util.List) strList35);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils37 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList39 = resourceUtils37.readResourceToStringList("");
        int int40 = randomUtils32.getListIndex((java.util.List) strList39);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils41 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils42 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList44 = resourceUtils42.readResourceToStringList("");
        int int45 = randomUtils41.getListIndex((java.util.List) strList44);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils46 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils47 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList49 = resourceUtils47.readResourceToStringList("");
        int int50 = randomUtils46.getListIndex((java.util.List) strList49);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils51 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils52 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList54 = resourceUtils52.readResourceToStringList("");
        int int55 = randomUtils51.getListIndex((java.util.List) strList54);
        int int56 = randomUtils46.getListIndex((java.util.List) strList54);
        int int57 = randomUtils41.getListIndex((java.util.List) strList54);
        int int58 = randomUtils32.getListIndex((java.util.List) strList54);
        int int59 = randomUtils17.getListIndex((java.util.List) strList54);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils60 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils61 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList63 = resourceUtils61.readResourceToStringList("");
        int int64 = randomUtils60.getListIndex((java.util.List) strList63);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils65 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList67 = resourceUtils65.readResourceToStringList("");
        int int68 = randomUtils60.getListIndex((java.util.List) strList67);
        int int69 = randomUtils17.getListIndex((java.util.List) strList67);
        int int70 = randomUtils0.getListIndex((java.util.List) strList67);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strList20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(strList25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(strList29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strList35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strList39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(strList44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(strList49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strList54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strList63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(strList67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test154");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Jenny van der Willik");
        java.lang.String str9 = conjuror0.conjureString("Shajina Yiu");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Richard" + "'", str1, "Richard");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "McCarthy" + "'", str2, "McCarthy");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Jul 30 10:45:30 CDT 2017");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jenny van der Willik" + "'", str7, "Jenny van der Willik");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Shajina Yiu" + "'", str9, "Shajina Yiu");
    }

    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test155");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Dave");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureString("Matthew");
        java.lang.String str10 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jenny" + "'", str1, "Jenny");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rumbold" + "'", str2, "Rumbold");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gerald Hunting" + "'", str3, "Gerald Hunting");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Malcolm" + "'", str4, "Malcolm");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dave" + "'", str6, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Gowri" + "'", str7, "Gowri");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Matthew" + "'", str9, "Matthew");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Shiv Czapiewski" + "'", str10, "Shiv Czapiewski");
    }

    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test156");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sam Shobrook" + "'", str1, "Sam Shobrook");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sayvai" + "'", str2, "Sayvai");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Trevor Frutos" + "'", str3, "Trevor Frutos");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Suarez" + "'", str4, "Suarez");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Elisabel" + "'", str5, "Elisabel");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jonathan King" + "'", str6, "Jonathan King");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Arun" + "'", str7, "Arun");
    }

    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test157");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 100, (int) (short) 1);
        java.lang.String str11 = conjuror0.conjureName();
        java.util.Date date14 = conjuror0.conjureBirthDate((int) (short) -1, (int) (byte) 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Sayvai" + "'", str1, "Sayvai");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 16 00:33:34 CST 1996");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Destr\351e" + "'", str5, "Destr\351e");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Apr 30 18:44:24 CDT 2018");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Roger Parry" + "'", str11, "Roger Parry");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Fri Jul 19 19:08:00 CDT 2024");
    }

    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test158");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jay" + "'", str1, "Jay");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rahman" + "'", str2, "Rahman");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 19 07:51:19 CST 1990");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Toby Hamblin" + "'", str8, "Toby Hamblin");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Mark Sellathambi" + "'", str9, "Mark Sellathambi");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Czapiewski" + "'", str10, "Czapiewski");
    }

    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test159");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.util.Date date13 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) 0);
        java.util.Date date16 = conjuror0.conjureBirthDate(0, (int) (byte) -1);
        java.lang.String str17 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 21 14:30:36 CST 1979");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Nov 26 08:40:26 CDT 1944");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jul 24 13:15:45 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Parry" + "'", str10, "Parry");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sun Nov 10 15:15:42 CST 1991");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Oct 01 17:31:03 CDT 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Sam Billingham" + "'", str17, "Sam Billingham");
    }

    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test160");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils14 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList16 = resourceUtils14.readResourceToStringList("");
        int int17 = randomUtils9.getListIndex((java.util.List) strList16);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils18 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils19 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList21 = resourceUtils19.readResourceToStringList("");
        int int22 = randomUtils18.getListIndex((java.util.List) strList21);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils23 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList25 = resourceUtils23.readResourceToStringList("");
        int int26 = randomUtils18.getListIndex((java.util.List) strList25);
        int int27 = randomUtils9.getListIndex((java.util.List) strList25);
        int int28 = randomUtils0.getListIndex((java.util.List) strList25);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils39 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList41 = resourceUtils39.readResourceToStringList("");
        int int42 = randomUtils34.getListIndex((java.util.List) strList41);
        int int43 = randomUtils29.getListIndex((java.util.List) strList41);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils44 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils45 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList47 = resourceUtils45.readResourceToStringList("");
        int int48 = randomUtils44.getListIndex((java.util.List) strList47);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils49 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList51 = resourceUtils49.readResourceToStringList("");
        int int52 = randomUtils44.getListIndex((java.util.List) strList51);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils53 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils54 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList56 = resourceUtils54.readResourceToStringList("");
        int int57 = randomUtils53.getListIndex((java.util.List) strList56);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils58 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils58.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils63 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils64 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList66 = resourceUtils64.readResourceToStringList("");
        int int67 = randomUtils63.getListIndex((java.util.List) strList66);
        int int68 = randomUtils58.getListIndex((java.util.List) strList66);
        int int69 = randomUtils53.getListIndex((java.util.List) strList66);
        int int70 = randomUtils44.getListIndex((java.util.List) strList66);
        int int71 = randomUtils29.getListIndex((java.util.List) strList66);
        int int72 = randomUtils0.getListIndex((java.util.List) strList66);
        java.lang.Class<?> wildcardClass73 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strList16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(strList21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(strList25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strList41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strList47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(strList51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(strList66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test161");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureString("Andrew Hudson");
        java.lang.String str4 = conjuror0.conjureName();
        java.lang.String str5 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "James" + "'", str1, "James");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Andrew Hudson" + "'", str3, "Andrew Hudson");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Trevor Ching" + "'", str4, "Trevor Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "King" + "'", str5, "King");
    }

    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test162");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Fatima" + "'", str1, "Fatima");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Singh" + "'", str2, "Singh");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Oct 25 06:49:34 CST 1953");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vishal Alang" + "'", str8, "Vishal Alang");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Emma" + "'", str9, "Emma");
    }

    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test163");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.lang.Class<?> wildcardClass7 = date6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Andrew" + "'", str1, "Andrew");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ching" + "'", str2, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Rachel" + "'", str3, "Rachel");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:57 CST 1923");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test164");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.util.Date date7 = conjuror0.conjureBirthDate(100, (int) (byte) -1);
        java.lang.String str8 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sangar" + "'", str2, "Sangar");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Emma Reinicke" + "'", str3, "Emma Reinicke");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Waqar" + "'", str4, "Waqar");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 21 12:22:14 CST 1964");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Vishal Mulvenna" + "'", str8, "Vishal Mulvenna");
    }

    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test165");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Dave");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Steve" + "'", str1, "Steve");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Ohajuru" + "'", str2, "Ohajuru");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Jason Sellathambi" + "'", str3, "Jason Sellathambi");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Dan" + "'", str4, "Dan");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dave" + "'", str6, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Simon" + "'", str7, "Simon");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Hamblin" + "'", str8, "Hamblin");
    }

    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test166");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str7 = conjuror0.conjureString("Williams");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 100, (int) (short) 1);
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Amanda" + "'", str1, "Amanda");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Jan 17 06:58:37 CST 1999");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Williams" + "'", str7, "Williams");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Aug 13 06:59:39 CDT 2020");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Andrea Dexter" + "'", str11, "Andrea Dexter");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Rebecca Carson" + "'", str12, "Rebecca Carson");
    }

    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test167");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Amanda" + "'", str1, "Amanda");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Kumar" + "'", str2, "Kumar");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Rebecca Lister" + "'", str3, "Rebecca Lister");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Kamran" + "'", str4, "Kamran");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Barr" + "'", str5, "Barr");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Ravindra Kumar" + "'", str6, "Ravindra Kumar");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Gowri Shone" + "'", str7, "Gowri Shone");
    }

    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test168");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str8 = conjuror0.conjureLastName();
        java.util.Date date11 = conjuror0.conjureBirthDate((int) (short) 0, (int) (short) -1);
        java.lang.String str12 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "David" + "'", str1, "David");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Apr 26 07:38:45 CDT 1998");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Dec 08 09:51:45 CST 2007");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Czapiewski" + "'", str8, "Czapiewski");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 04 14:21:11 CST 2024");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ben" + "'", str12, "Ben");
    }

    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test169");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str11 = conjuror0.conjureString("Hartwell");
        java.lang.String str12 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Mar 02 11:36:42 CST 1992");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat May 13 07:12:56 CDT 2023");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chris Karuppannan" + "'", str9, "Chris Karuppannan");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Hartwell" + "'", str11, "Hartwell");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Yaseen Karuppannan" + "'", str12, "Yaseen Karuppannan");
    }

    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test170");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
        java.lang.String str8 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gregg" + "'", str1, "Gregg");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Apr 20 07:40:51 CDT 1997");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Rebecca Gawith" + "'", str5, "Rebecca Gawith");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Patrick Gooding" + "'", str6, "Patrick Gooding");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sam Gooding" + "'", str7, "Sam Gooding");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Yaseen" + "'", str8, "Yaseen");
    }

    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test172");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) -1, (int) (byte) 0);
        java.lang.String str8 = conjuror0.conjureString("John");
        java.lang.String str9 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureString("Mo Barry");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Arun" + "'", str1, "Arun");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Patel" + "'", str2, "Patel");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Shajina" + "'", str3, "Shajina");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Mar 14 06:47:04 CDT 2024");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "John" + "'", str8, "John");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asim" + "'", str9, "Asim");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Mo Barry" + "'", str11, "Mo Barry");
    }

    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test173");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 100, 100);
        java.lang.String str7 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "James" + "'", str1, "James");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Rahman" + "'", str2, "Rahman");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Elisabel" + "'", str3, "Elisabel");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 31 17:26:57 CST 1923");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Wyatt" + "'", str7, "Wyatt");
    }

    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test174");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str8 = conjuror0.conjureString("Velu Asif");
        java.lang.String str9 = conjuror0.conjureName();
        java.util.Date date12 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) -1);
        java.lang.Class<?> wildcardClass13 = date12.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Alex" + "'", str1, "Alex");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Nartey" + "'", str2, "Nartey");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Kishan Hartwell" + "'", str3, "Kishan Hartwell");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jenny" + "'", str4, "Jenny");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Velu Asif" + "'", str8, "Velu Asif");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Roger Cassettari" + "'", str9, "Roger Cassettari");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri May 03 05:29:50 CDT 2024");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test175");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) 10, (int) (byte) -1);
        java.util.Date date13 = conjuror0.conjureBirthDate((-1), 1);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun May 18 09:24:03 CDT 1980");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Malcolm" + "'", str6, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Elizabeth" + "'", str7, "Elizabeth");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Jul 15 13:07:15 CDT 2016");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Jan 23 14:51:32 CST 2023");
    }

    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test176");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils5 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList7 = resourceUtils5.readResourceToStringList("");
        int int8 = randomUtils0.getListIndex((java.util.List) strList7);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils9 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils9.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils14 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList16 = resourceUtils14.readResourceToStringList("");
        int int17 = randomUtils9.getListIndex((java.util.List) strList16);
        int int18 = randomUtils0.getListIndex((java.util.List) strList16);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils19 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils20 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList22 = resourceUtils20.readResourceToStringList("");
        int int23 = randomUtils19.getListIndex((java.util.List) strList22);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils24 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList26 = resourceUtils24.readResourceToStringList("");
        int int27 = randomUtils19.getListIndex((java.util.List) strList26);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils28 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils29 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList31 = resourceUtils29.readResourceToStringList("");
        int int32 = randomUtils28.getListIndex((java.util.List) strList31);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils33 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList35 = resourceUtils33.readResourceToStringList("");
        int int36 = randomUtils28.getListIndex((java.util.List) strList35);
        int int37 = randomUtils19.getListIndex((java.util.List) strList35);
        int int38 = randomUtils0.getListIndex((java.util.List) strList35);
        java.lang.Class<?> wildcardClass39 = randomUtils0.getClass();
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strList16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strList22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(strList31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(strList35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test177");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) ' ', (int) (short) 100);
        java.lang.String str12 = conjuror0.conjureString("Susannah");
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.lang.String str14 = conjuror0.conjureLastName();
        java.lang.String str16 = conjuror0.conjureString("Chris Dexter");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Dave" + "'", str1, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Morgan" + "'", str2, "Morgan");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Aug 07 04:12:57 CDT 1979");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 02 13:51:47 CST 1988");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Susannah" + "'", str12, "Susannah");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Steve" + "'", str13, "Steve");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Hodgson" + "'", str14, "Hodgson");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chris Dexter" + "'", str16, "Chris Dexter");
    }

    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test178");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureName();
        java.lang.String str14 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Nov 18 22:33:26 CST 1978");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Nov 25 03:02:22 CST 1959");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Jun 09 08:53:03 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Susannah" + "'", str10, "Susannah");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Suarez" + "'", str11, "Suarez");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mo" + "'", str12, "Mo");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Shiv Singh" + "'", str13, "Shiv Singh");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Richard" + "'", str14, "Richard");
    }

    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test179");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gowri Lister" + "'", str1, "Gowri Lister");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Mark Ohajuru" + "'", str2, "Mark Ohajuru");
    }

    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test180");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) -1, (int) (byte) 0);
        java.lang.String str8 = conjuror0.conjureString("Roger");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Jonathan" + "'", str1, "Jonathan");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Heron" + "'", str2, "Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Linda" + "'", str3, "Linda");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Apr 26 14:59:23 CDT 2024");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Roger" + "'", str8, "Roger");
    }

    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test181");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.util.Date date9 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.String str10 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Andrea" + "'", str1, "Andrea");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chattun" + "'", str2, "Chattun");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Vishal Hutton" + "'", str3, "Vishal Hutton");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Fatima" + "'", str4, "Fatima");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 05 07:38:25 CST 1951");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Arun" + "'", str10, "Arun");
    }

    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test182");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureLastName();
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureLastName();
        java.lang.Class<?> wildcardClass6 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gabriel Hurst" + "'", str1, "Gabriel Hurst");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "van der Willik" + "'", str2, "van der Willik");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ferris" + "'", str3, "Ferris");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "McCarthy" + "'", str4, "McCarthy");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Turner" + "'", str5, "Turner");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test183");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils10 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils11 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList13 = resourceUtils11.readResourceToStringList("");
        int int14 = randomUtils10.getListIndex((java.util.List) strList13);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils15 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList17 = resourceUtils15.readResourceToStringList("");
        int int18 = randomUtils10.getListIndex((java.util.List) strList17);
        int int19 = randomUtils5.getListIndex((java.util.List) strList17);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils20 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils20.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils20.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils29 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils30 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList32 = resourceUtils30.readResourceToStringList("");
        int int33 = randomUtils29.getListIndex((java.util.List) strList32);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils34 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils34.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        int int44 = randomUtils34.getListIndex((java.util.List) strList42);
        int int45 = randomUtils29.getListIndex((java.util.List) strList42);
        int int46 = randomUtils20.getListIndex((java.util.List) strList42);
        int int47 = randomUtils5.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils48 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils49 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils49.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils54 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList56 = resourceUtils54.readResourceToStringList("");
        int int57 = randomUtils49.getListIndex((java.util.List) strList56);
        int int58 = randomUtils48.getListIndex((java.util.List) strList56);
        int int59 = randomUtils5.getListIndex((java.util.List) strList56);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils60 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList62 = resourceUtils60.readResourceToStringList("");
        int int63 = randomUtils5.getListIndex((java.util.List) strList62);
        int int64 = randomUtils0.getListIndex((java.util.List) strList62);
        java.util.List list65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int66 = randomUtils0.getListIndex(list65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strList13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strList62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureString("Sam Shobrook");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Judy" + "'", str1, "Judy");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Sep 30 19:16:42 CDT 2013");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Andrea Hamblin" + "'", str5, "Andrea Hamblin");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sam Shobrook" + "'", str7, "Sam Shobrook");
    }

    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test185");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.String str11 = conjuror0.conjureFirstName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Jul 10 01:23:58 CDT 1987");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 24 06:46:21 CST 1928");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Dec 08 18:26:30 CST 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Braga" + "'", str10, "Braga");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Gerald" + "'", str11, "Gerald");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Gabriel" + "'", str12, "Gabriel");
    }

    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test186");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str4 = conjuror0.conjureString("Luke");
        java.util.Date date7 = conjuror0.conjureBirthDate(100, 100);
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Alex" + "'", str1, "Alex");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Darry" + "'", str2, "Darry");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Luke" + "'", str4, "Luke");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Oct 31 17:26:57 CST 1923");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lee" + "'", str8, "Lee");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Zoe Kemp" + "'", str9, "Zoe Kemp");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Zoe Hartwell" + "'", str10, "Zoe Hartwell");
    }

    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test187");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) -1, 100);
        java.lang.Class<?> wildcardClass11 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Vishal" + "'", str1, "Vishal");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Mar 28 21:47:02 CST 2002");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Mo Gold" + "'", str5, "Mo Gold");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "James Morgan" + "'", str6, "James Morgan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Linda Alang" + "'", str7, "Linda Alang");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 03 13:25:34 CST 2014");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test188");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureName();
        java.lang.String str2 = conjuror0.conjureFirstName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass4 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Martin Barr" + "'", str1, "Martin Barr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Martin" + "'", str2, "Martin");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Elisabel Dhandapani" + "'", str3, "Elisabel Dhandapani");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test189");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.util.Date date7 = conjuror0.conjureBirthDate((int) ' ', (int) (byte) -1);
        java.lang.String str9 = conjuror0.conjureString("Susannah Suarez");
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Ravindra" + "'", str1, "Ravindra");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Nov 11 08:29:46 CST 2021");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 23 13:35:50 CST 1998");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Susannah Suarez" + "'", str9, "Susannah Suarez");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Jonathan" + "'", str10, "Jonathan");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Amanda Wyatt" + "'", str11, "Amanda Wyatt");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Andrew King" + "'", str12, "Andrew King");
    }

    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test190");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureLastName();
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Patrick" + "'", str1, "Patrick");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Tosu" + "'", str2, "Tosu");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Fatima Tosu" + "'", str3, "Fatima Tosu");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Richard" + "'", str4, "Richard");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ram" + "'", str7, "Ram");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asim Chopra" + "'", str8, "Asim Chopra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Braga" + "'", str9, "Braga");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ravindra" + "'", str10, "Ravindra");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Heron" + "'", str11, "Heron");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Henshaw" + "'", str12, "Henshaw");
    }

    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test191");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str11 = conjuror0.conjureString("Vishal McCarthy");
        java.lang.String str13 = conjuror0.conjureString("Vamsi");
        java.util.Date date16 = conjuror0.conjureBirthDate(0, (int) (short) 100);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Sep 30 09:57:16 CDT 1979");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 19 20:41:01 CST 1975");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Oct 02 20:09:37 CDT 2023");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Vishal McCarthy" + "'", str11, "Vishal McCarthy");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Vamsi" + "'", str13, "Vamsi");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Nov 12 14:39:44 CST 1947");
    }

    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test192");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 1, (int) (byte) 1);
        java.lang.String str5 = conjuror0.conjureLastName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Patrick" + "'", str1, "Patrick");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Oct 31 12:26:57 CDT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Rea" + "'", str5, "Rea");
    }

    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test193");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.util.Date date7 = conjuror0.conjureBirthDate(100, (int) (byte) -1);
        java.lang.String str9 = conjuror0.conjureString("Latheef");
        java.lang.String str10 = conjuror0.conjureLastName();
        java.util.Date date13 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mohammed" + "'", str1, "Mohammed");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Sangar" + "'", str2, "Sangar");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Steve Frutos" + "'", str3, "Steve Frutos");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Velu" + "'", str4, "Velu");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Dec 31 14:31:16 CDT 1943");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Latheef" + "'", str9, "Latheef");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Hodgson" + "'", str10, "Hodgson");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Sep 14 01:46:46 CDT 1953");
    }

    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test194");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureName();
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.String str11 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri May 19 12:43:38 CDT 2017");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jay Yiu" + "'", str6, "Jay Yiu");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Dec 23 20:53:00 CST 2020");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "McCarthy" + "'", str10, "McCarthy");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ken" + "'", str11, "Ken");
    }

    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test195");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Dave");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str9 = conjuror0.conjureString("Matthew");
        java.util.Date date12 = conjuror0.conjureBirthDate(1, (int) (byte) 0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Laura" + "'", str1, "Laura");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Akella" + "'", str2, "Akella");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ian Hurst" + "'", str3, "Ian Hurst");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Arun" + "'", str4, "Arun");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dave" + "'", str6, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Arun" + "'", str7, "Arun");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Matthew" + "'", str9, "Matthew");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Wed Aug 09 06:18:59 CDT 2023");
    }

    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test196");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str5 = conjuror0.conjureString("Ching");
        java.lang.String str6 = conjuror0.conjureFirstName();
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureFirstName();
        java.util.Date date11 = conjuror0.conjureBirthDate((int) (short) 100, (int) (short) 100);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Aug 04 11:04:47 CDT 1996");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Ching" + "'", str5, "Ching");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Matthew" + "'", str6, "Matthew");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Sean" + "'", str7, "Sean");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Rebecca" + "'", str8, "Rebecca");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Wed Oct 31 17:26:57 CST 1923");
    }

    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test197");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass8 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Fatima" + "'", str1, "Fatima");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Cassettari" + "'", str2, "Cassettari");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Waqar Shobrook" + "'", str3, "Waqar Shobrook");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Sean" + "'", str4, "Sean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Hakan Taylor" + "'", str7, "Hakan Taylor");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test198");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.lang.String str4 = conjuror0.conjureLastName();
        java.lang.String str5 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 02 05:08:04 CST 1983");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Gold" + "'", str4, "Gold");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dave Czapiewski" + "'", str5, "Dave Czapiewski");
    }

    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test199");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.util.Date date11 = conjuror0.conjureBirthDate((int) ' ', (int) (short) 10);
        java.util.Date date14 = conjuror0.conjureBirthDate(0, (int) (byte) 100);
        java.lang.String str15 = conjuror0.conjureName();
        java.util.Date date18 = conjuror0.conjureBirthDate((int) (short) 0, (int) '4');
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Feb 03 12:22:16 CST 1977");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 27 09:03:35 CDT 1934");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sat Oct 31 06:49:23 CST 1992");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sun Aug 08 16:39:27 CDT 1926");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Yaseen Tariq" + "'", str15, "Yaseen Tariq");
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Jan 15 18:44:20 CST 2010");
    }

    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test200");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.util.Date date4 = conjuror0.conjureBirthDate((int) (short) 0, (int) ' ');
        java.lang.String str5 = conjuror0.conjureName();
        java.lang.String str6 = conjuror0.conjureName();
        java.lang.String str7 = conjuror0.conjureName();
        java.util.Date date10 = conjuror0.conjureBirthDate((int) (short) -1, 100);
        java.lang.String str12 = conjuror0.conjureString("Andrea Alang");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Estelle" + "'", str1, "Estelle");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Sep 29 05:14:09 CDT 1999");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Sam Turner" + "'", str5, "Sam Turner");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Richard Henshaw" + "'", str6, "Richard Henshaw");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Kenneth Billingham" + "'", str7, "Kenneth Billingham");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Sep 26 16:58:26 CDT 1995");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Andrea Alang" + "'", str12, "Andrea Alang");
    }

    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test201");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Mar 16 20:10:50 CDT 1974");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 14 10:09:27 CDT 1958");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 21 01:30:57 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ian" + "'", str10, "Ian");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Selva Rahman" + "'", str11, "Selva Rahman");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ram" + "'", str12, "Ram");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Mark Purkis" + "'", str13, "Mark Purkis");
    }

    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test202");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.util.Date date6 = conjuror0.conjureBirthDate(0, (int) 'a');
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (short) -1, (int) (short) 1);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.util.Date date13 = conjuror0.conjureBirthDate((int) (byte) -1, (int) '4');
        java.lang.String str14 = conjuror0.conjureName();
        java.lang.Class<?> wildcardClass15 = conjuror0.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Elisabel" + "'", str1, "Elisabel");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Darry" + "'", str2, "Darry");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Yaseen Kukkunuru" + "'", str3, "Yaseen Kukkunuru");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Sep 04 21:39:16 CDT 1933");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 11 01:15:11 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Yaseen" + "'", str10, "Yaseen");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Oct 28 12:02:27 CDT 1988");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Shajina Peapell" + "'", str14, "Shajina Peapell");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test203");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureLastName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Jun 30 16:38:49 CDT 1989");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Jun 13 01:58:31 CDT 2009");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jan 09 05:35:43 CST 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Patel" + "'", str10, "Patel");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Peapell" + "'", str11, "Peapell");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Vamsi" + "'", str12, "Vamsi");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chris Chattun" + "'", str13, "Chris Chattun");
    }

    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test204");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.util.Date date5 = conjuror0.conjureBirthDate((int) (byte) -1, 100);
        java.lang.String str7 = conjuror0.conjureString("Yaseen");
        java.util.Date date10 = conjuror0.conjureBirthDate((int) ' ', (int) (short) 100);
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureLastName();
        java.lang.String str13 = conjuror0.conjureName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Laura" + "'", str1, "Laura");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Latheef" + "'", str2, "Latheef");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 24 09:30:42 CST 1995");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Yaseen" + "'", str7, "Yaseen");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri May 27 08:10:31 CDT 1977");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Hutton" + "'", str11, "Hutton");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LePors" + "'", str12, "LePors");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Jay Gawith" + "'", str13, "Jay Gawith");
    }

    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test205");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.util.Date date9 = conjuror0.conjureBirthDate((int) 'a', (int) (short) -1);
        java.lang.String str10 = conjuror0.conjureName();
        java.util.Date date13 = conjuror0.conjureBirthDate(10, (int) (short) 10);
        java.util.Date date16 = conjuror0.conjureBirthDate(10, (int) (byte) 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Gregg" + "'", str1, "Gregg");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Clarke" + "'", str2, "Clarke");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Kamran Hurst" + "'", str3, "Kamran Hurst");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Alex" + "'", str4, "Alex");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Apr 02 21:40:29 CST 1977");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Gabrielle Yiu" + "'", str10, "Gabrielle Yiu");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Oct 31 06:26:57 CDT 2013");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 06 10:35:27 CST 2017");
    }

    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test206");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureName();
        java.lang.String str4 = conjuror0.conjureFirstName();
        java.lang.String str6 = conjuror0.conjureString("Sean Jayabalan");
        java.lang.String str7 = conjuror0.conjureFirstName();
        java.lang.String str8 = conjuror0.conjureName();
        java.lang.String str9 = conjuror0.conjureLastName();
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureString("Ram Rumbold");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Dave" + "'", str1, "Dave");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "van der Willik" + "'", str2, "van der Willik");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Gabrielle Chattun" + "'", str3, "Gabrielle Chattun");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Malcolm" + "'", str4, "Malcolm");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sean Jayabalan" + "'", str6, "Sean Jayabalan");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Seema" + "'", str7, "Seema");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Gabrielle Gold" + "'", str8, "Gabrielle Gold");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Karuppannan" + "'", str9, "Karuppannan");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Malcolm" + "'", str10, "Malcolm");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Yaseen" + "'", str11, "Yaseen");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ram Rumbold" + "'", str13, "Ram Rumbold");
    }

    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test207");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.lang.String str8 = conjuror0.conjureString("Andrew");
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureFirstName();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 26 09:07:10 CST 1974");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Nov 05 04:27:04 CST 1955");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Andrew" + "'", str8, "Andrew");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ram Trigg" + "'", str9, "Ram Trigg");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Arun" + "'", str10, "Arun");
    }

    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test208");
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils0 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils1 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList3 = resourceUtils1.readResourceToStringList("");
        int int4 = randomUtils0.getListIndex((java.util.List) strList3);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils5 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils6 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList8 = resourceUtils6.readResourceToStringList("");
        int int9 = randomUtils5.getListIndex((java.util.List) strList8);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils10 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList12 = resourceUtils10.readResourceToStringList("");
        int int13 = randomUtils5.getListIndex((java.util.List) strList12);
        int int14 = randomUtils0.getListIndex((java.util.List) strList12);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils15 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils16 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList18 = resourceUtils16.readResourceToStringList("");
        int int19 = randomUtils15.getListIndex((java.util.List) strList18);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils20 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils21 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList23 = resourceUtils21.readResourceToStringList("");
        int int24 = randomUtils20.getListIndex((java.util.List) strList23);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils25 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList27 = resourceUtils25.readResourceToStringList("");
        int int28 = randomUtils20.getListIndex((java.util.List) strList27);
        int int29 = randomUtils15.getListIndex((java.util.List) strList27);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils30 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils31 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList33 = resourceUtils31.readResourceToStringList("");
        int int34 = randomUtils30.getListIndex((java.util.List) strList33);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils35 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList37 = resourceUtils35.readResourceToStringList("");
        int int38 = randomUtils30.getListIndex((java.util.List) strList37);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils39 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils40 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList42 = resourceUtils40.readResourceToStringList("");
        int int43 = randomUtils39.getListIndex((java.util.List) strList42);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils44 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils45 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList47 = resourceUtils45.readResourceToStringList("");
        int int48 = randomUtils44.getListIndex((java.util.List) strList47);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils49 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils50 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList52 = resourceUtils50.readResourceToStringList("");
        int int53 = randomUtils49.getListIndex((java.util.List) strList52);
        int int54 = randomUtils44.getListIndex((java.util.List) strList52);
        int int55 = randomUtils39.getListIndex((java.util.List) strList52);
        int int56 = randomUtils30.getListIndex((java.util.List) strList52);
        int int57 = randomUtils15.getListIndex((java.util.List) strList52);
        com.kestreldigital.conjuror.utils.RandomUtils randomUtils58 = new com.kestreldigital.conjuror.utils.RandomUtils();
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils59 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList61 = resourceUtils59.readResourceToStringList("");
        int int62 = randomUtils58.getListIndex((java.util.List) strList61);
        com.kestreldigital.conjuror.utils.ResourceUtils resourceUtils63 = new com.kestreldigital.conjuror.utils.ResourceUtils();
        java.util.List<java.lang.String> strList65 = resourceUtils63.readResourceToStringList("");
        int int66 = randomUtils58.getListIndex((java.util.List) strList65);
        int int67 = randomUtils15.getListIndex((java.util.List) strList65);
        int int68 = randomUtils0.getListIndex((java.util.List) strList65);
        org.junit.Assert.assertNotNull(strList3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strList8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strList12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strList27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(strList33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(strList37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strList42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(strList47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strList52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strList61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(strList65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test209");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.lang.String str1 = conjuror0.conjureFirstName();
        java.lang.String str2 = conjuror0.conjureLastName();
        java.lang.String str3 = conjuror0.conjureFirstName();
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) -1, (int) (byte) 0);
        java.lang.String str8 = conjuror0.conjureString("John");
        java.lang.String str9 = conjuror0.conjureName();
        java.lang.String str10 = conjuror0.conjureFirstName();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Emma" + "'", str1, "Emma");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asif" + "'", str2, "Asif");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ian" + "'", str3, "Ian");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 03 17:15:00 CST 2023");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "John" + "'", str8, "John");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Elisabel Gawith" + "'", str9, "Elisabel Gawith");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Rebecca" + "'", str10, "Rebecca");
    }

    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test210");
        com.kestreldigital.conjuror.Conjuror conjuror0 = new com.kestreldigital.conjuror.Conjuror();
        java.util.Date date3 = conjuror0.conjureBirthDate((int) '4', (int) (short) 0);
        java.util.Date date6 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (short) 100);
        java.util.Date date9 = conjuror0.conjureBirthDate((int) (byte) 1, 0);
        java.lang.String str10 = conjuror0.conjureFirstName();
        java.lang.String str11 = conjuror0.conjureLastName();
        java.lang.String str12 = conjuror0.conjureFirstName();
        java.lang.String str13 = conjuror0.conjureFirstName();
        java.util.Date date16 = conjuror0.conjureBirthDate((int) (byte) 0, (int) (byte) 10);
        java.util.Date date19 = conjuror0.conjureBirthDate((int) '4', (int) (short) 10);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 06 21:11:49 CDT 1985");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Aug 30 01:16:48 CDT 2012");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Apr 01 04:54:34 CDT 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Steve" + "'", str10, "Steve");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Qazi" + "'", str11, "Qazi");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ram" + "'", str12, "Ram");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "John" + "'", str13, "John");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 22 20:19:29 CST 2020");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Oct 17 06:42:34 CDT 1975");
    }
seasarorg-mayaa, length: 1

    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test327");
        org.seasar.mayaa.impl.CycleLocalVariablesImpl cycleLocalVariablesImpl0 = new org.seasar.mayaa.impl.CycleLocalVariablesImpl();
// flaky:         cycleLocalVariablesImpl0.clearGlobalVariable("javaee_5.xsd");
    }
anitechcs-resting, length: 1

    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test102");
        com.anitech.resting.Resting resting0 = com.anitech.resting.Resting.getInstance();
        com.anitech.resting.http.request.RequestConfig requestConfig1 = com.anitech.resting.util.RestingUtil.getDefaultRequestConfig();
        com.anitech.resting.http.request.RequestConfig requestConfig2 = com.anitech.resting.util.RestingUtil.getDefaultRequestConfig();
        com.anitech.resting.http.request.RequestConfig requestConfig3 = com.anitech.resting.util.RestingUtil.overrideGlobalRequestConfig(requestConfig1, requestConfig2);
        com.anitech.resting.http.Header[] headerArray4 = requestConfig2.getHeaders();
        com.anitech.resting.Resting resting5 = resting0.globalRequestConfig(requestConfig2);
        com.anitech.resting.http.request.RequestConfig requestConfig6 = com.anitech.resting.util.RestingUtil.getDefaultRequestConfig();
        com.anitech.resting.Resting resting7 = resting5.globalRequestConfig(requestConfig6);
        com.anitech.resting.Resting resting8 = resting5.enableMetrics();
        com.anitech.resting.http.request.RequestConfig requestConfig9 = new com.anitech.resting.http.request.RequestConfig();
        requestConfig9.setConnectTimeout((int) (byte) 0);
        com.anitech.resting.http.Header header13 = requestConfig9.getHeader("hi!");
        requestConfig9.setSocketTimeout((int) ' ');
        com.anitech.resting.Resting resting16 = resting8.globalRequestConfig(requestConfig9);
        com.anitech.resting.Resting resting17 = resting8.enableProcessingHooks();
        com.anitech.resting.http.Header header21 = new com.anitech.resting.http.Header("application/xml", "");
        java.lang.String str22 = header21.getValue();
        com.anitech.resting.http.request.RequestConfig requestConfig23 = com.anitech.resting.util.RestingUtil.getDefaultRequestConfig();
        com.anitech.resting.http.request.RequestConfig requestConfig24 = com.anitech.resting.util.RestingUtil.getDefaultRequestConfig();
        com.anitech.resting.http.request.RequestConfig requestConfig25 = com.anitech.resting.util.RestingUtil.overrideGlobalRequestConfig(requestConfig23, requestConfig24);
        requestConfig24.setConnectTimeout(10);
        // The following exception was thrown during execution in test generation
{ // flaky:         try {
            com.anitech.resting.http.response.RestingResponse restingResponse28 = null; // flaky: resting8.PUT("application/json", (java.lang.Object) str22, requestConfig24);
// flaky:             org.junit.Assert.fail("Expected exception of type com.anitech.resting.exception.RestingException; message: org.apache.http.client.ClientProtocolException");
// flaky:         }
edgar615-util, length: 12

    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test068");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomAlphabet((int) '4');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "VbMyjiJrisxSRlldCAjjnNPKqNOGvOaTABTOJngpvtqwYojbKfRv" + "'", str1, "VbMyjiJrisxSRlldCAjjnNPKqNOGvOaTABTOJngpvtqwYojbKfRv");
    }

    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test081");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomAlphabetAndNum((int) 'a');
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN" + "'", str1, "p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN");
    }

    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test111");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomLowerAlphabet(1000);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "yophnpoemlpfjxwomlejolcbpwyaktaklhbujqhocfumrqrscdplxhrcuhzfdblxzedwnrnriyrnpqronxdatlktcxrlbmgzrycwmcnntbrrtxatlaltzzrddeobtfcbbrxzrwmjpifkrhuwpilplvbifsasmpxcudkbbztiageuiicdszrtxpmtxqanbrgqpohmsyiidiudbepprssqcbdfktmubbpreyroemresfyjwbxcqlkhchflsopsrbmacpuxnbfmcflnnjpdajeoygxluiooixovbbmasbbnbwobwawnmxvbbkebhbzddryobtfawcjnimvplqqioajwiehkgbmooejtkftatxiptowitiyrflbfbbtwybhrsznoxnnlmtacwgucwvilirtyzawpdlxoojggcwgdwoadpbtdfwwrbfmkuqwecewvqemxehwhsqmowrnwiffuplxuzjejtwagtjcjtxpekkzevyxfgsshgsijhwihlwvgzcllmaqfwggelvjgfdqghxbvfqipymattmnigrhwlcseitovymelofdltqwnjyokresutzdzawxjmxotxrcbdszdqwgczggiepiiukdrlixzozdhteglyjnabhnzhqliqglcmijngnbinftnclbbblwykofeppqlaxpngzyesonoeswmtxnfeoywxzxdxwyakaendvnpwmxtchayobprifozlscbrxlvgucsbwtalwiuesbiydzvotksnsvfebgvafuwnzsmvqvoowdzwezuwdtfeaubgniriobgbynjfbderdpznqmkstnekaiakyphjidzbnsakgpkavjbqgrleqtgafyaxevwzqoetnfyyymrznwiaayvtsruxmfwhvqjcporcmrmdvulbppyphcekzqzxbulyyrozhdvgmeqisnkhpwufvgeazhoebhlyuxpwyxsxxhjdykogzkaiafzspuiqwhnybcxsbnucncsnpgy" + "'", str1, "yophnpoemlpfjxwomlejolcbpwyaktaklhbujqhocfumrqrscdplxhrcuhzfdblxzedwnrnriyrnpqronxdatlktcxrlbmgzrycwmcnntbrrtxatlaltzzrddeobtfcbbrxzrwmjpifkrhuwpilplvbifsasmpxcudkbbztiageuiicdszrtxpmtxqanbrgqpohmsyiidiudbepprssqcbdfktmubbpreyroemresfyjwbxcqlkhchflsopsrbmacpuxnbfmcflnnjpdajeoygxluiooixovbbmasbbnbwobwawnmxvbbkebhbzddryobtfawcjnimvplqqioajwiehkgbmooejtkftatxiptowitiyrflbfbbtwybhrsznoxnnlmtacwgucwvilirtyzawpdlxoojggcwgdwoadpbtdfwwrbfmkuqwecewvqemxehwhsqmowrnwiffuplxuzjejtwagtjcjtxpekkzevyxfgsshgsijhwihlwvgzcllmaqfwggelvjgfdqghxbvfqipymattmnigrhwlcseitovymelofdltqwnjyokresutzdzawxjmxotxrcbdszdqwgczggiepiiukdrlixzozdhteglyjnabhnzhqliqglcmijngnbinftnclbbblwykofeppqlaxpngzyesonoeswmtxnfeoywxzxdxwyakaendvnpwmxtchayobprifozlscbrxlvgucsbwtalwiuesbiydzvotksnsvfebgvafuwnzsmvqvoowdzwezuwdtfeaubgniriobgbynjfbderdpznqmkstnekaiakyphjidzbnsakgpkavjbqgrleqtgafyaxevwzqoetnfyyymrznwiaayvtsruxmfwhvqjcporcmrmdvulbppyphcekzqzxbulyyrozhdvgmeqisnkhpwufvgeazhoebhlyuxpwyxsxxhjdykogzkaiafzspuiqwhnybcxsbnucncsnpgy");
    }

    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test126");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomAlphabet((int) (byte) 1);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "E" + "'", str1, "E");
    }

    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test184");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomNumber(100);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "3617925919717533676448998194328724624187624369297141841896246961789144318223582433797791657538563474" + "'", str1, "3617925919717533676448998194328724624187624369297141841896246961789144318223582433797791657538563474");
    }

    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test228");
        java.lang.String str2 = com.github.edgar615.util.base.Randoms.randomString((int) (byte) 10, "yophnpoemlpfjxwomlejolcbpwyaktaklhbujqhocfumrqrscdplxhrcuhzfdblxzedwnrnriyrnpqronxdatlktcxrlbmgzrycwmcnntbrrtxatlaltzzrddeobtfcbbrxzrwmjpifkrhuwpilplvbifsasmpxcudkbbztiageuiicdszrtxpmtxqanbrgqpohmsyiidiudbepprssqcbdfktmubbpreyroemresfyjwbxcqlkhchflsopsrbmacpuxnbfmcflnnjpdajeoygxluiooixovbbmasbbnbwobwawnmxvbbkebhbzddryobtfawcjnimvplqqioajwiehkgbmooejtkftatxiptowitiyrflbfbbtwybhrsznoxnnlmtacwgucwvilirtyzawpdlxoojggcwgdwoadpbtdfwwrbfmkuqwecewvqemxehwhsqmowrnwiffuplxuzjejtwagtjcjtxpekkzevyxfgsshgsijhwihlwvgzcllmaqfwggelvjgfdqghxbvfqipymattmnigrhwlcseitovymelofdltqwnjyokresutzdzawxjmxotxrcbdszdqwgczggiepiiukdrlixzozdhteglyjnabhnzhqliqglcmijngnbinftnclbbblwykofeppqlaxpngzyesonoeswmtxnfeoywxzxdxwyakaendvnpwmxtchayobprifozlscbrxlvgucsbwtalwiuesbiydzvotksnsvfebgvafuwnzsmvqvoowdzwezuwdtfeaubgniriobgbynjfbderdpznqmkstnekaiakyphjidzbnsakgpkavjbqgrleqtgafyaxevwzqoetnfyyymrznwiaayvtsruxmfwhvqjcporcmrmdvulbppyphcekzqzxbulyyrozhdvgmeqisnkhpwufvgeazhoebhlyuxpwyxsxxhjdykogzkaiafzspuiqwhnybcxsbnucncsnpgy");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "oxfjngjjxn" + "'", str2, "oxfjngjjxn");
    }

    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test240");
        java.lang.String str2 = com.github.edgar615.util.base.Randoms.randomString((int) '4', "com.github.edgar615.util.reflect.ReflectionException: p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "5erxihJTGpe1G.eOccCt:.Uor4rtl1.zutOeu3qp.hxl.4.IskTe" + "'", str2, "5erxihJTGpe1G.eOccCt:.Uor4rtl1.zutOeu3qp.hxl.4.IskTe");
    }

    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test242");
        com.github.edgar615.util.uuid.DefaultUUIDFactory defaultUUIDFactory0 = new com.github.edgar615.util.uuid.DefaultUUIDFactory();
        java.util.UUID uUID1 = defaultUUIDFactory0.uuid();
        org.junit.Assert.assertNotNull(uUID1);
// flaky:         org.junit.Assert.assertEquals(uUID1.toString(), "6e46ee37-0278-4f88-b2a1-db4d37bdf764");
    }

    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test250");
        com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]> uUIDArraySkipList1 = new com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]>((int) 'a');
        com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]> uUIDArraySkipList3 = new com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]>((int) (byte) 10);
        com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]> uUIDArraySkipList5 = new com.github.edgar615.util.collection.ArraySkipList<java.util.UUID, java.lang.Object[]>((int) (byte) 10);
        com.github.edgar615.util.uuid.UUIDFactory uUIDFactory6 = com.github.edgar615.util.uuid.UUIDFactory.concurrentUUIDFactory();
        java.util.UUID uUID7 = uUIDFactory6.uuid();
        java.lang.Object[] objArray8 = uUIDArraySkipList5.get(uUID7);
        java.lang.Object[] objArray9 = uUIDArraySkipList3.get(uUID7);
        java.lang.String[] strArray11 = new java.lang.String[] { "A7D29F7252A6DF06CEAB0B5D9E5BD24C525DC730A7C9849D3C2A69B181FF49AC" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        double[] doubleArray19 = new double[] { (short) 0, (short) 1, (-1), 10.0d, 10 };
        com.github.edgar615.util.sort.Sorts.bubble(doubleArray19);
        boolean boolean21 = strList12.contains((java.lang.Object) doubleArray19);
        java.lang.Object[] objArray22 = strList12.toArray();
        java.lang.Object[] objArray23 = uUIDArraySkipList1.add(uUID7, objArray22);
        org.junit.Assert.assertNotNull(uUIDFactory6);
        org.junit.Assert.assertNotNull(uUID7);
// flaky:         org.junit.Assert.assertEquals(uUID7.toString(), "ff5eb0d4-8aac-4e44-9a25-0869bc0e5dbc");
        org.junit.Assert.assertNull(objArray8);
        org.junit.Assert.assertNull(objArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[A7D29F7252A6DF06CEAB0B5D9E5BD24C525DC730A7C9849D3C2A69B181FF49AC]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[A7D29F7252A6DF06CEAB0B5D9E5BD24C525DC730A7C9849D3C2A69B181FF49AC]");
        org.junit.Assert.assertNull(objArray23);
    }

    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test262");
        java.io.File file2 = com.github.edgar615.util.io.IOUtils.createTempDirectory("p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN", "DefaultErrorCode{number=1008, message='Incomplete Parameter'}");
        org.junit.Assert.assertNotNull(file2);
// flaky:         org.junit.Assert.assertEquals(file2.getParent(), "/private/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN5534047520318921784");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/private/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/p5xgQAk1SGsrXm6dAUxxUrEQstLOoVjIprPN8t7zt9D4r6dhfrjIPUqqOPdPQmYQcLuqsCUXLpJ3zsg4MkLnTWTtOGY4ZsWGN5534047520318921784/DefaultErrorCode{number=1008, message='Incomplete Parameter'}

    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test269");
        java.lang.String str1 = com.github.edgar615.util.base.Randoms.randomUpperAlphabet(1000);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PHSGLNTONPWJRDIAZRYAOAIBDPFOIVFLRELEWVOMIAFURVGMYYOIWZZFLYVGFBXTZEVUZBJLDVVCCOBIJNWXQMJERTPVLKKXDCXSMSZVVDFISALKKOWWHGKGIZHQXUALLMEEDWOAFARXPAHKXRCRFUSYOFAOZBXHRAHPTCDOZIDNUUEKDNZMBLZOIGPVXSSAUOXFWGETKILMPYILZFXXNODFUYFSBNXKEISYRIAIBPSMXUPXALATTEDPFCDBOCXSDONQGFETOSNJIVQSNIGVHVSFSVYKWDOUKMICENSJQWJBQEZEPRKEROHPZVQYIUBFZIVPMHMRQCCOXIQMASTJSNWLXCICBPGLFMAZNYHPLHKOLDLDTDBJQDOIYHLQROYJWBFEHKJCBCOLAAUNROFPIFWWPTEDOLVUHLVDALPTGHNKNBCFZFDYHUVJJIPWCYUQHNLERAFZTSQAFDBVLXLJGUOUPYYIMWOUTSOTCMYFBDIVZXKAWKPUZHHNXPTXCXJWYNRPONLLNUMPQWDKHMPYZLDMRQJLAYZPNNHEPTDABTFGDNCOSHBZAEDKVNEXLXQZOZHJNNMCKRMHJJTKUZNBXXWMNFTYOWZTPINWMXKMOAFQCMTTBLDKBNRHEVGMJJQEIYQNBUEQSVBAROPKGUOBVVLIOBDKBCCTFMKWYLPNCLSISSYKPFCFXZZEXPCNTUITWPOCVLPHXLWXXMMWARWNGLSBWEXPSHYGWPKBERGGBFAPODPPVXZIUXQMDBKFQGYZHDSPADOAATFWCECADIOODDHSXQNSHKTWIVBCZHMZHLEHMTVOOIRCZEHGJJFNCWXHXWCCIGUHLYQCDSAMIDZVPBQRPTNCXYCMPRNKRQKSYKDHLZCCZMCFOOXUNGOTVXMKSJOOFINSPMOQLGEVWKFFLJGNATXROUVRXAHYFXMXRFEORQDXXDMBWLUGSISFPMFECYHCIOKHNQNUORVPBYBQMMVGBHYMNMBQBHJQATJB" + "'", str1, "PHSGLNTONPWJRDIAZRYAOAIBDPFOIVFLRELEWVOMIAFURVGMYYOIWZZFLYVGFBXTZEVUZBJLDVVCCOBIJNWXQMJERTPVLKKXDCXSMSZVVDFISALKKOWWHGKGIZHQXUALLMEEDWOAFARXPAHKXRCRFUSYOFAOZBXHRAHPTCDOZIDNUUEKDNZMBLZOIGPVXSSAUOXFWGETKILMPYILZFXXNODFUYFSBNXKEISYRIAIBPSMXUPXALATTEDPFCDBOCXSDONQGFETOSNJIVQSNIGVHVSFSVYKWDOUKMICENSJQWJBQEZEPRKEROHPZVQYIUBFZIVPMHMRQCCOXIQMASTJSNWLXCICBPGLFMAZNYHPLHKOLDLDTDBJQDOIYHLQROYJWBFEHKJCBCOLAAUNROFPIFWWPTEDOLVUHLVDALPTGHNKNBCFZFDYHUVJJIPWCYUQHNLERAFZTSQAFDBVLXLJGUOUPYYIMWOUTSOTCMYFBDIVZXKAWKPUZHHNXPTXCXJWYNRPONLLNUMPQWDKHMPYZLDMRQJLAYZPNNHEPTDABTFGDNCOSHBZAEDKVNEXLXQZOZHJNNMCKRMHJJTKUZNBXXWMNFTYOWZTPINWMXKMOAFQCMTTBLDKBNRHEVGMJJQEIYQNBUEQSVBAROPKGUOBVVLIOBDKBCCTFMKWYLPNCLSISSYKPFCFXZZEXPCNTUITWPOCVLPHXLWXXMMWARWNGLSBWEXPSHYGWPKBERGGBFAPODPPVXZIUXQMDBKFQGYZHDSPADOAATFWCECADIOODDHSXQNSHKTWIVBCZHMZHLEHMTVOOIRCZEHGJJFNCWXHXWCCIGUHLYQCDSAMIDZVPBQRPTNCXYCMPRNKRQKSYKDHLZCCZMCFOOXUNGOTVXMKSJOOFINSPMOQLGEVWKFFLJGNATXROUVRXAHYFXMXRFEORQDXXDMBWLUGSISFPMFECYHCIOKHNQNUORVPBYBQMMVGBHYMNMBQBHJQATJB");
    }

    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TestGroup100Case0.test287");
        com.github.edgar615.util.exception.DefaultErrorCode defaultErrorCode1 = com.github.edgar615.util.exception.DefaultErrorCode.INPUT_TOO_SHORT;
        short[] shortArray5 = new short[] { (short) 10, (short) 100, (byte) 10 };
        java.util.Enumeration[] enumerationArray7 = new java.util.Enumeration[0];
        @SuppressWarnings("unchecked")
        java.util.Enumeration<java.lang.Object>[] objEnumerationArray8 = (java.util.Enumeration<java.lang.Object>[]) enumerationArray7;
        com.github.edgar615.util.collection.CompoundEnumeration<java.lang.Object> objCompoundEnumeration9 = new com.github.edgar615.util.collection.CompoundEnumeration<java.lang.Object>(objEnumerationArray8);
        java.util.Enumeration[] enumerationArray11 = new java.util.Enumeration[1];
        @SuppressWarnings("unchecked")
        java.util.Enumeration<java.lang.Object>[] objEnumerationArray12 = (java.util.Enumeration<java.lang.Object>[]) enumerationArray11;
        objEnumerationArray12[0] = objCompoundEnumeration9;
        float[] floatArray18 = new float[] { (short) 0, (short) 0 };
        com.github.edgar615.util.sort.Sorts.selection(floatArray18);
        com.github.edgar615.util.collection.Tuple6<java.lang.Comparable<java.lang.String>, com.github.edgar615.util.exception.DefaultErrorCode, short[], java.util.Enumeration<java.lang.Object>[], java.lang.Comparable<java.lang.String>, float[]> strComparableTuple6_20 = com.github.edgar615.util.collection.Tuple6.create((java.lang.Comparable<java.lang.String>) "CustomErrorCode{number=0, message='hi!'}", defaultErrorCode1, shortArray5, objEnumerationArray12, (java.lang.Comparable<java.lang.String>) "hi!", floatArray18);
        short[] shortArray21 = strComparableTuple6_20.getT3();
        java.io.File file24 = com.github.edgar615.util.io.IOUtils.createTempDirectory("CustomErrorCode{number=0, message='hi!'}", "HMACMD5");
        boolean boolean25 = com.github.edgar615.util.io.IOUtils.forceDeletePath(file24);
        boolean boolean26 = com.github.edgar615.util.io.IOUtils.deleteFile(file24);
        boolean boolean27 = strComparableTuple6_20.equals((java.lang.Object) boolean26);
        org.junit.Assert.assertTrue("'" + defaultErrorCode1 + "' != '" + com.github.edgar615.util.exception.DefaultErrorCode.INPUT_TOO_SHORT + "'", defaultErrorCode1.equals(com.github.edgar615.util.exception.DefaultErrorCode.INPUT_TOO_SHORT));
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[10, 100, 10]");
        org.junit.Assert.assertNotNull(enumerationArray7);
        org.junit.Assert.assertNotNull(objEnumerationArray8);
        org.junit.Assert.assertNotNull(enumerationArray11);
        org.junit.Assert.assertNotNull(objEnumerationArray12);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0]");
        org.junit.Assert.assertNotNull(strComparableTuple6_20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[10, 100, 10]");
        org.junit.Assert.assertNotNull(file24);
// flaky:         org.junit.Assert.assertEquals(file24.getParent(), "/private/var/folders/6v/t_t9cghd03nfq9mmw9_1tb6r0000gn/T/CustomErrorCode{number=0, message='hi!'}
